{
  "name": "mbpp_745_divisible_by_digits",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> ret = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    divisible = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    divisible = false;\n                    break;\n                }\n            }\n            if (divisible) {\n                ret.add(i);\n            }\n        }\n        return ret;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            for (char c : Long.toString(i).toCharArray()) {\n                if (c != '0' && i % (c - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmply3i2wqo.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> ans = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    flag = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i % 10 == 0) continue;\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) result.add(i);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i < endnum; i++) {\n            if (i % 10 == 0) continue;\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) result.add(i);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_5bxpiz.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean isDivisible = true;\n                long num = i;\n                while (num > 0) {\n                    long digit = num % 10;\n                    if (digit == 0 || i % digit != 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    num /= 10;\n                }\n                if (isDivisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = String.valueOf(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Character.getNumericValue(num.charAt(j));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0' || i % (c - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = String.valueOf(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(num.substring(j, j + 1));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            for (char c : Long.toString(i).toCharArray()) {\n                if (c == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(num.substring(j, j + 1));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            String s = Long.toString(i);\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c != '0' && i % (c - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf_acd_mf.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean isDivisible = true;\n                long num = i;\n                while (num > 0) {\n                    long digit = num % 10;\n                    if (digit == 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    if (i % digit != 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    num /= 10;\n                }\n                if (isDivisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean isDivisible = true;\n                long num = i;\n                while (num > 0) {\n                    long digit = num % 10;\n                    if (digit == 0 || i % digit != 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    num /= 10;\n                }\n                if (isDivisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "/tmp/tmpvse9jlxm.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(num.substring(j, j + 1));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189167,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (num.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (i % Integer.parseInt(s.substring(j, j + 1)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmp8xe2hbwn.java:16)\n\tat Problem.main(tmp8xe2hbwn.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    divisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = String.valueOf(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(String.valueOf(num.charAt(j)));\n                if (digit != 0 && i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbf_buqdp.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (num.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            for (char c : Long.toString(i).toCharArray()) {\n                if (c == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                ret.add(i);\n            }\n        }\n        return ret;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (num.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (i % Character.getNumericValue(s.charAt(j)) != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189171,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmp0127wh46.java:16)\n\tat Problem.main(tmp0127wh46.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = String.valueOf(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189172,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmpv11_gof4.java:16)\n\tat Problem.main(tmpv11_gof4.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (i % Character.getNumericValue(s.charAt(j)) != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) result.add(i);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189172,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmpvumcge7v.java:16)\n\tat Problem.main(tmpvumcge7v.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(num.substring(j, j + 1));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n                continue;\n            }\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "/tmp/tmpvse9jlxm.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean flag = true;\n            for(int j = 0; j < num.length(); j++) {\n                int digit = Character.getNumericValue(num.charAt(j));\n                if(digit == 0) {\n                    flag = false;\n                    break;\n                }\n                if(i % digit != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189173,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189173,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Character.getNumericValue(num.charAt(j));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189173,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean divisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    divisible = false;\n                    break;\n                }\n                if (i % (num.charAt(j) - '0') != 0) {\n                    divisible = false;\n                    break;\n                }\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189174,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmppp08j_28.java:16)\n\tat Problem.main(tmppp08j_28.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> divisibleByDigits = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % Character.getNumericValue(c) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                divisibleByDigits.add(i);\n            }\n        }\n        return divisibleByDigits;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (num.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) != '0' && i % (s.charAt(j) - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) result.add(i);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189176,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphocay28m.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = startnum; i <= endnum; i++) {\n            if(isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189175,
      "stdout": "",
      "stderr": "/tmp/tmp76z_s__m.java:13: error: cannot find symbol\n            if(isDivisibleByDigits(i)) {\n               ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String str = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < str.length(); j++) {\n                if (i % Integer.parseInt(String.valueOf(str.charAt(j))) != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189177,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmpemtip_s4.java:16)\n\tat Problem.main(tmpemtip_s4.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible)\n                result.add(i);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean divisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    divisible = false;\n                    break;\n                }\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    divisible = false;\n                    break;\n                }\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean flag = true;\n                long temp = i;\n                while (temp > 0) {\n                    long digit = temp % 10;\n                    if (digit == 0 || i % digit != 0) {\n                        flag = false;\n                        break;\n                    }\n                    temp /= 10;\n                }\n                if (flag) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (i % Character.getNumericValue(s.charAt(j)) != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189171,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmp0127wh46.java:16)\n\tat Problem.main(tmp0127wh46.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean divisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (i % Integer.parseInt(num.substring(j, j + 1)) != 0) {\n                    divisible = false;\n                    break;\n                }\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189178,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmp858seo3_.java:16)\n\tat Problem.main(tmp858seo3_.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (num.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(long i = startnum; i <= endnum; i++) {\n            if(isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189179,
      "stdout": "",
      "stderr": "/tmp/tmpawhtu3jj.java:13: error: cannot find symbol\n            if(isDivisibleByDigits(i)) {\n               ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean isDivisible = true;\n                long temp = i;\n                while (temp > 0) {\n                    long digit = temp % 10;\n                    if (digit == 0 || i % digit != 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    temp /= 10;\n                }\n                if (isDivisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                int d = Integer.parseInt(String.valueOf(s.charAt(j)));\n                if (d == 0) {\n                    flag = false;\n                    break;\n                }\n                if (i % d != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (i % Character.getNumericValue(s.charAt(j)) != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189171,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmp0127wh46.java:16)\n\tat Problem.main(tmp0127wh46.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n                continue;\n            }\n            long temp = i;\n            boolean flag = true;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0) {\n                    flag = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    flag = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = Long.toString(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (i % Integer.parseInt(s.substring(j, j + 1)) != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189181,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmp9h15i7d1.java:16)\n\tat Problem.main(tmp9h15i7d1.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0' || i % (c - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(String.valueOf(num.charAt(j)));\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189182,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmpbtka4p5h.java:17)\n\tat Problem.main(tmpbtka4p5h.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189181,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189182,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmpjuls5yv3.java:16)\n\tat Problem.main(tmpjuls5yv3.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while(num > 0) {\n                long digit = num % 10;\n                if(digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if(isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean isDivisible = true;\n                long num = i;\n                while (num > 0) {\n                    long digit = num % 10;\n                    if (digit == 0 || i % digit != 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    num /= 10;\n                }\n                if (isDivisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(num.substring(j, j + 1));\n                if (digit != 0 && i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189182,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuzqs2ud4.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String str = Long.toString(i);\n            for (int j = 0; j < str.length(); j++) {\n                int digit = Integer.parseInt(str.substring(j, j + 1));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "/tmp/tmpvse9jlxm.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(long i = startnum; i <= endnum; i++) {\n            if(isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189175,
      "stdout": "",
      "stderr": "/tmp/tmp76z_s__m.java:13: error: cannot find symbol\n            if(isDivisibleByDigits(i)) {\n               ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189184,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmpqerzo9bi.java:16)\n\tat Problem.main(tmpqerzo9bi.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp = temp / 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(num.substring(j, j + 1));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> divisible = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisible(i)) {\n                divisible.add(i);\n            }\n        }\n        return divisible;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189185,
      "stdout": "",
      "stderr": "/tmp/tmpm7jdke_7.java:13: error: cannot find symbol\n            if (isDivisible(i)) {\n                ^\n  symbol:   method isDivisible(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> divisible = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisibleByDigits = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    divisibleByDigits = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    divisibleByDigits = false;\n                    break;\n                }\n            }\n            if (divisibleByDigits) {\n                divisible.add(i);\n            }\n        }\n        return divisible;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String s = String.valueOf(i);\n            for (int j = 0; j < s.length(); j++) {\n                int digit = Integer.parseInt(s.substring(j, j + 1));\n                if (digit != 0 && i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189186,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoqqx_xhu.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                int digit = Character.getNumericValue(s.charAt(j));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit != 0 && i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189186,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptszppm88.java:30)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "/tmp/tmpvse9jlxm.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean divisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) != '0' && i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    divisible = false;\n                    break;\n                }\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189186,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_425f27p.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (i % (s.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189187,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmpu9fqlvtl.java:16)\n\tat Problem.main(tmpu9fqlvtl.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisible(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189187,
      "stdout": "",
      "stderr": "/tmp/tmpvb7dnphz.java:13: error: cannot find symbol\n            if (isDivisible(i)) {\n                ^\n  symbol:   method isDivisible(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean divisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    divisible = false;\n                    break;\n                }\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189188,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmp1x3guw6n.java:16)\n\tat Problem.main(tmp1x3guw6n.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(Character.toString(num.charAt(j)));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean isDivisible = true;\n                long temp = i;\n                while (temp > 0) {\n                    long digit = temp % 10;\n                    if (digit == 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    if (i % digit != 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    temp /= 10;\n                }\n                if (isDivisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean isDivisible = true;\n                long num = i;\n                while (num > 0) {\n                    long digit = num % 10;\n                    if (digit == 0 || i % digit != 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                    num /= 10;\n                }\n                if (isDivisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp != 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (i % Character.getNumericValue(s.charAt(j)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189189,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmp_27o5bwa.java:16)\n\tat Problem.main(tmp_27o5bwa.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "/tmp/tmpvse9jlxm.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = String.valueOf(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Character.getNumericValue(num.charAt(j));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> results = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (num.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                results.add(i);\n            }\n        }\n        return results;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for(long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = String.valueOf(i);\n            for(int j = 0; j < num.length(); j++) {\n                if(num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if(i % (num.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if(isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Character.getNumericValue(num.charAt(j));\n                if (digit != 0 && i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189190,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgrrd12lt.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            String num = String.valueOf(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (num.charAt(j) - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189190,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                boolean divisible = true;\n                long num = i;\n                while (num > 0) {\n                    long digit = num % 10;\n                    if (digit == 0) {\n                        divisible = false;\n                        break;\n                    }\n                    if (i % digit != 0) {\n                        divisible = false;\n                        break;\n                    }\n                    num /= 10;\n                }\n                if (divisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = Long.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i % 10 == 0) {\n                continue;\n            }\n            boolean isDivisible = true;\n            for (char c : Long.toString(i).toCharArray()) {\n                if (i % (c - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "/tmp/tmpvse9jlxm.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i < endnum; i++) {\n            boolean isDivisible = true;\n            String num = String.valueOf(i);\n            for (int j = 0; j < num.length(); j++) {\n                if (num.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % Character.getNumericValue(num.charAt(j)) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189192,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqt1mo4z4.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i < 10) {\n                result.add(i);\n            } else {\n                String s = Long.toString(i);\n                boolean isDivisible = true;\n                for (int j = 0; j < s.length(); j++) {\n                    if (i % Character.getNumericValue(s.charAt(j)) != 0) {\n                        isDivisible = false;\n                        break;\n                    }\n                }\n                if (isDivisible) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189192,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Problem.divisibleByDigits(tmpqkerxkzv.java:19)\n\tat Problem.main(tmpqkerxkzv.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (String.valueOf(i).chars().allMatch(c -> i % Character.getNumericValue(c) == 0)) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189193,
      "stdout": "",
      "stderr": "/tmp/tmp81p3p_sw.java:13: error: local variables referenced from a lambda expression must be final or effectively final\n            if (String.valueOf(i).chars().allMatch(c -> i % Character.getNumericValue(c) == 0)) {\n                                                        ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            String s = Long.toString(i);\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag)\n                list.add(i);\n        }\n        return list;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189166,
      "stdout": "",
      "stderr": "/tmp/tmpvse9jlxm.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = Long.toString(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) != '0' && i % (s.charAt(j) - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189193,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzgu5jtzt.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    flag = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189171,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % Character.getNumericValue(c) != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i % 10 == 0) {\n                continue;\n            }\n            boolean flag = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    flag = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    flag = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            String num = String.valueOf(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(String.valueOf(num.charAt(j)));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> ans = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = String.valueOf(i);\n            boolean flag = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    flag = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (i % 10 == 0) {\n                continue;\n            }\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    divisible = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    divisible = false;\n                    break;\n                }\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long temp = i;\n            while (temp > 0) {\n                long digit = temp % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    divisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean flag = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0' || i % (c - '0') != 0) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189179,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = startnum; i <= endnum; i++) {\n            String s = Long.toString(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '0') {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % (s.charAt(j) - '0') != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            boolean isDivisible = true;\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Integer.parseInt(String.valueOf(num.charAt(j)));\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean isDivisible = true;\n            long num = i;\n            while (num != 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    isDivisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isDivisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            long num = i;\n            while (num > 0) {\n                long digit = num % 10;\n                if (digit == 0) {\n                    divisible = false;\n                    break;\n                }\n                if (i % digit != 0) {\n                    divisible = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            if (isDivisibleByDigits(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189159,
      "stdout": "",
      "stderr": "/tmp/tmpsu7k0i_5.java:13: error: cannot find symbol\n            if (isDivisibleByDigits(i)) {\n                ^\n  symbol:   method isDivisibleByDigits(long)\n  location: class Problem\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = startnum; i <= endnum; i++) {\n            boolean divisible = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if (c == '0') {\n                    divisible = false;\n                    break;\n                }\n                if (i % (c - '0') != 0) {\n                    divisible = false;\n                    break;\n                }\n            }\n            if (divisible) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n",
      "timestamp": 1667189196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}