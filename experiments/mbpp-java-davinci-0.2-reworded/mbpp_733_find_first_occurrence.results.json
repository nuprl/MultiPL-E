{
  "name": "mbpp_733_find_first_occurrence",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp075sdpw2.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int start = 0;\n        int end = A.size() - 1;\n        int result = -1;\n        while (start <= end) {\n            int mid = (start + end) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                end = mid - 1;\n            } else if (A.get(mid) > x) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write - Your - Code\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        return findFirstOccurrence(A, x, 0, A.size() - 1);\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188940,
      "stdout": "",
      "stderr": "/tmp/tmppi06h9up.java:11: error: method findFirstOccurrence in class Problem cannot be applied to given types;\n        return findFirstOccurrence(A, x, 0, A.size() - 1);\n               ^\n  required: ArrayList<Long>,long\n  found: ArrayList<Long>,long,int,int\n  reason: actual and formal argument lists differ in length\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // TODO: Implement your solution here.\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188940,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqtmuvjr6.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long l = 0, r = A.size() - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (A.get((int) m) == x) {\n                if (m == 0 || A.get((int) m - 1) != x) {\n                    return m;\n                } else {\n                    r = m - 1;\n                }\n            } else if (A.get((int) m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int lo = 0;\n        int hi = A.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (A.get(mid) >= x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        if (lo < A.size() && A.get(lo) == x) {\n            return lo;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int l = 0, r = A.size() - 1;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    r = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188941,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188943,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41vie_wv.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write - Your - Code\n        int low = 0;\n        int high = A.size() - 1;\n        int index = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                index = mid;\n                high = mid - 1;\n            } else if (A.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return index;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size()-1;\n        int result = -1;\n        while(low <= high){\n            int mid = (low+high)/2;\n            if(A.get(mid) == x){\n                result = mid;\n                high = mid-1;\n            }\n            else if(A.get(mid) > x){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write - Your - Code\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0, high = A.size() - 1;\n        int mid = (low + high) / 2;\n        while (low <= high) {\n            if (A.get(mid) == x) {\n                if (mid == 0) {\n                    return mid;\n                } else if (A.get(mid - 1) == x) {\n                    high = mid - 1;\n                    mid = (low + high) / 2;\n                } else {\n                    return mid;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n                mid = (low + high) / 2;\n            } else {\n                low = mid + 1;\n                mid = (low + high) / 2;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long lo = 0;\n        long hi = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (lo <= hi) {\n            mid = lo + (hi - lo) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                hi = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x && (mid == 0 || A.get(mid - 1) != x)) {\n                return mid;\n            } else if (A.get(mid) >= x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int l = 0;\n        int r = A.size() - 1;\n        int m = 0;\n        while (l <= r) {\n            m = l + (r - l) / 2;\n            if (A.get(m) == x) {\n                if (m == 0 || A.get(m - 1) != x) {\n                    return m;\n                } else {\n                    r = m - 1;\n                }\n            } else if (A.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp075sdpw2.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // return A.indexOf(x);\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                if (mid == 0 || A.get((int) mid - 1) < x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get((int) mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long l = 0;\n        long r = A.size() - 1;\n        long first = -1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (A.get((int)m) == x) {\n                first = m;\n                r = m - 1;\n            } else if (A.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return first;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj65j8102.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long lo = 0;\n        long hi = A.size() - 1;\n        long ans = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A.get((int) mid) == x) {\n                ans = mid;\n                hi = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                if (mid == 0)\n                    return mid;\n                if (A.get((int) mid - 1) != x)\n                    return mid;\n                else\n                    high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            }\n            else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write - Your - Code\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long lo = 0;\n        long hi = A.size() - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A.get((int)mid) == x) {\n                if (mid == 0 || A.get((int)(mid - 1)) != x) {\n                    return mid;\n                } else {\n                    hi = mid - 1;\n                }\n            } else if (A.get((int)mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long lo = 0;\n        long hi = A.size() - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (A.get((int)mid) >= x) {\n                result = mid;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188951,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x && (mid == 0 || A.get(mid - 1) != x)) {\n                return mid;\n            } else if (A.get(mid) >= x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int left = 0, right = A.size() - 1;\n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (A.get(mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        if (A.get(left) == x) {\n            return left;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int) mid) == x) {\n                if (mid == 0 || A.get((int) mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188954,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2321dzq9.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188940,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long l = 0, r = A.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (A.get((int)m) == x && (m == 0 || A.get((int)m - 1) != x))\n                return m;\n            else if (A.get((int)m) >= x)\n                r = m - 1;\n            else\n                l = m + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) >= x) {\n                result = mid;\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        // return -1;\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Your code here\n        int n = A.size();\n        int l = 0;\n        int r = n - 1;\n        int ans = -1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (A.get(mid) == x) {\n                ans = mid;\n                r = mid - 1;\n            } else if (A.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188957,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write - Your - Code\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188957,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0, high = A.size() - 1;\n        while(low <= high) {\n            int mid = low + (high - low) / 2;\n            if(A.get(mid) == x) {\n                if(mid == 0 || A.get(mid - 1) != x)\n                    return mid;\n                else\n                    high = mid - 1;\n            }\n            else if(A.get(mid) > x)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188957,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int l = 0;\n        int r = A.size() - 1;\n        int ans = -1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (A.get(m) == x) {\n                ans = m;\n                r = m - 1;\n            } else if (A.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188958,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188958,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188958,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj65j8102.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188958,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long lo = 0;\n        long hi = A.size() - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                hi = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0, high = A.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x && (mid == 0 || A.get(mid - 1) < x)) {\n                return mid;\n            } else if (A.get(mid) >= x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188960,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        // return -1;\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188960,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long l = 0;\n        long r = A.size() - 1;\n        long ans = -1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (A.get((int) mid) == x) {\n                ans = mid;\n                r = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188960,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188943,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41vie_wv.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj65j8102.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long lo = 0;\n        long hi = A.size() - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                hi = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188959,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Your code goes here\n        int low = 0;\n        int high = A.size() - 1;\n        int ans = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                ans = mid;\n                high = mid - 1;\n            } else if (A.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj65j8102.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long l = 0;\n        long r = A.size() - 1;\n        long ans = -1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (A.get((int)mid) == x) {\n                ans = mid;\n                r = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Your code here\n        long start = 0;\n        long end = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                end = mid - 1;\n            } else if (A.get((int) mid) < x) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188964,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtjt65cr.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long l = 0, r = A.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (A.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        if (A.get((int)l) == x) {\n            return l;\n        } else {\n            return -1;\n        }\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188954,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2321dzq9.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        return findFirstOccurrence(A, x, 0, A.size() - 1);\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188940,
      "stdout": "",
      "stderr": "/tmp/tmppi06h9up.java:11: error: method findFirstOccurrence in class Problem cannot be applied to given types;\n        return findFirstOccurrence(A, x, 0, A.size() - 1);\n               ^\n  required: ArrayList<Long>,long\n  found: ArrayList<Long>,long,int,int\n  reason: actual and formal argument lists differ in length\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Binary search\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int)mid) == x) {\n                if (mid == 0 || A.get((int)mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long lo = 0;\n        long hi = A.size() - 1;\n        long result = -1;\n        while (lo <= hi) {\n            long mid = (lo + hi) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                hi = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long left = 0, right = A.size() - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A.get((int)mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write - Your - Code\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188943,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41vie_wv.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        return findFirstOccurrence(A, x, 0, A.size() - 1);\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188940,
      "stdout": "",
      "stderr": "/tmp/tmppi06h9up.java:11: error: method findFirstOccurrence in class Problem cannot be applied to given types;\n        return findFirstOccurrence(A, x, 0, A.size() - 1);\n               ^\n  required: ArrayList<Long>,long\n  found: ArrayList<Long>,long,int,int\n  reason: actual and formal argument lists differ in length\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long mid = 0;\n        long result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get((int) mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188958,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long left = 0;\n        long right = A.size() - 1;\n        long result = -1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (A.get((int)mid) == x) {\n                result = mid;\n                right = mid - 1;\n            } else if (A.get((int)mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (x == A.get((int) mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int) mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        return findFirstOccurrence(A, x, 0, A.size() - 1);\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188940,
      "stdout": "",
      "stderr": "/tmp/tmppi06h9up.java:11: error: method findFirstOccurrence in class Problem cannot be applied to given types;\n        return findFirstOccurrence(A, x, 0, A.size() - 1);\n               ^\n  required: ArrayList<Long>,long\n  found: ArrayList<Long>,long,int,int\n  reason: actual and formal argument lists differ in length\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long low = 0;\n        long high = A.size() - 1;\n        long result = -1;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (x == A.get((int)mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get((int)mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0, high = A.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                if (mid == 0 || A.get(mid - 1) != x) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else if (A.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Implement this placeholder.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188943,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41vie_wv.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int low = 0;\n        int high = A.size() - 1;\n        int mid = 0;\n        int result = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (A.get(mid) == x) {\n                result = mid;\n                high = mid - 1;\n            } else if (A.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188939,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        // Write your code here.\n        int low = 0;\n        int high = A.size() - 1;\n        int result = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (x == A.get(mid)) {\n                result = mid;\n                high = mid - 1;\n            } else if (x < A.get(mid)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667188966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}