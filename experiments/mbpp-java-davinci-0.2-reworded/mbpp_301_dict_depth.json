{
  "name": "mbpp_301_dict_depth",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the depth of a hash map.\n    public static long dictDepth(Object d) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(dictDepth((new Object())))))))) == (4l));\n    assert(dictDepth((new Object((\"c\", \"python\")))))) == (2l));\n    assert(dictDepth((new Object((4l, \"Mon\")))))))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (d == null) {\n            return 0;\n        }\n        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object v : m.values()) {\n                max = Math.max(max, dictDepth(v));\n            }\n            return max + 1;\n        }\n        return 0;",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Map.Entry<Object, Object> e : m.entrySet()) {\n                long depth = dictDepth(e.getValue());\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d instanceof Map) {\n            long max = 0;\n            for (Object k : ((Map) d).keySet()) {\n                long depth = dictDepth(((Map) d).get(k));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d instanceof Map) {\n            return 1 + Collections.max(\n                ((Map)d).values().stream()\n                    .map(x -> dictDepth(x))\n                    .collect(Collectors.toList())\n            );\n        } else {\n            return 0;\n        }",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object k : m.keySet()) {\n                long depth = dictDepth(m.get(k));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 1;\n        }",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object k : m.keySet()) {\n                long depth = dictDepth(m.get(k));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d instanceof Map) {\n            Map<Object, Object> map = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object key : map.keySet()) {\n                long depth = dictDepth(map.get(key));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object k : m.keySet()) {\n                long depth = dictDepth(m.get(k));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d == null) {\n            return 0;\n        }\n        if (!(d instanceof Map)) {\n            return 1;\n        }\n        long max = 0;\n        for (Object key : ((Map) d).keySet()) {\n            long depth = dictDepth(((Map) d).get(key));\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object k : m.keySet()) {\n                long depth = dictDepth(m.get(k));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 1;\n        }",
    "        if (d instanceof Map) {\n            return 1 + Collections.max(\n                ((Map) d).values().stream()\n                    .map(Problem::dictDepth)\n                    .collect(Collectors.toList())\n            );\n        }\n        return 0;",
    "        if (d instanceof Map) {\n            Map<Object, Object> map = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object key : map.keySet()) {\n                long depth = dictDepth(map.get(key));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d == null) {\n            return 0;\n        }\n        if (d instanceof Map) {\n            long max = 0;\n            for (Object key : ((Map) d).keySet()) {\n                long depth = dictDepth(((Map) d).get(key));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        }\n        return 0;",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object k : m.keySet()) {\n                long depth = dictDepth(m.get(k));\n                max = Math.max(max, depth);\n            }\n            return max + 1;\n        }\n        return 0;",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object key : m.keySet()) {\n                long depth = dictDepth(m.get(key));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d == null) {\n            return 0;\n        }\n        if (d instanceof Map) {\n            Map<Object, Object> map = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object key : map.keySet()) {\n                long depth = dictDepth(map.get(key));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        }\n        return 0;",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object k : m.keySet()) {\n                long depth = dictDepth(m.get(k));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        }\n        return 0;",
    "        if (d instanceof Map) {\n            Map<Object, Object> map = (Map<Object, Object>) d;\n            if (map.isEmpty()) {\n                return 1;\n            }\n            long max = 0;\n            for (Object key : map.keySet()) {\n                long depth = dictDepth(map.get(key));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 1;\n        }",
    "        if (d instanceof Map) {\n            Map<Object, Object> m = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object k : m.keySet()) {\n                long depth = dictDepth(m.get(k));\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d == null) {\n            return 0;\n        }\n        if (d instanceof Map) {\n            Map<Object, Object> map = (Map<Object, Object>) d;\n            long max = 0;\n            for (Object key : map.keySet()) {\n                long depth = dictDepth(map.get(key));\n                max = Math.max(max, depth);\n            }\n            return max + 1;\n        }\n        return 0;"
  ]
}