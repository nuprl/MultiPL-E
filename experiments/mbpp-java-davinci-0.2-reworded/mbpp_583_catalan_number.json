{
  "name": "mbpp_583_catalan_number",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which returns nth catalan number.\n    public static long catalanNumber(long num) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long[] catalan = new long[(int)num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for(int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for(int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[(int)num];",
    "        if (num == 0) return 1;\n        long result = 0;\n        for (int i = 0; i < num; i++) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return result;",
    "        long[] catalan = new long[(int)num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for(int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for(int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[(int)num];",
    "        long[] catalan = new long[(int)num+1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for(int i=2;i<=num;i++) {\n            for(int j=0;j<i;j++) {\n                catalan[i] += catalan[j]*catalan[i-j-1];\n            }\n        }\n        return catalan[(int)num];",
    "        long[] catalan = new long[(int)num+1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for(int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for(int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i-j-1];\n            }\n        }\n        return catalan[(int)num];",
    "        long[] catalan = new long[(int)num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for (int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for (int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[(int)num];",
    "        if (num == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (int i = 0; i < num; i++) {\n            sum += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return sum;",
    "        if(num == 0) {\n            return 1;\n        }\n        long ans = 0;\n        for(int i = 0; i < num; i++) {\n            ans += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return ans;",
    "        // Write your code here.\n        return 0;",
    "        long[] catalan = new long[(int)num+1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for(int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for(int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i-j-1];\n            }\n        }\n        return catalan[(int)num];",
    "        if (num <= 1) {\n            return 1;\n        }\n        long res = 0;\n        for (int i = 0; i < num; i++) {\n            res += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return res;",
    "        if (num == 0) {\n            return 1;\n        }\n        long res = 0;\n        for (int i = 0; i < num; i++) {\n            res += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return res;",
    "        if (num == 0) {\n            return 1;\n        }\n        long res = 0;\n        for (int i = 0; i < num; i++) {\n            res += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return res;",
    "        // Write your code here\n        return 0;",
    "        if (num <= 1) {\n            return 1;\n        }\n        long res = 0;\n        for (int i = 0; i < num; i++) {\n            res += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return res;",
    "        long[] catalan = new long[(int)num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for (int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for (int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[(int)num];",
    "        long[] catalan = new long[(int)num + 1];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        for(int i = 2; i <= num; i++) {\n            catalan[i] = 0;\n            for(int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - j - 1];\n            }\n        }\n        return catalan[(int)num];",
    "        if (num == 0) {\n            return 1;\n        }\n        long ans = 0;\n        for (long i = 0; i < num; i++) {\n            ans += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return ans;",
    "        if (num <= 1) {\n            return 1;\n        }\n        long res = 0;\n        for (int i = 0; i < num; i++) {\n            res += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return res;",
    "        if (num == 0) {\n            return 1;\n        }\n        long result = 0;\n        for (int i = 0; i < num; i++) {\n            result += catalanNumber(i) * catalanNumber(num - i - 1);\n        }\n        return result;"
  ]
}