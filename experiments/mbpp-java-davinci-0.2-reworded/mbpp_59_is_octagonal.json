{
  "name": "mbpp_59_is_octagonal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long isOctagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long x = (long) Math.sqrt(2 * n + 0.125);\n        if (x * (3 * x - 2) == n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth = i * (3 * i - 2);\n        }\n        return nth;",
    "        double d = Math.sqrt(1 + 24 * n);\n        if (d == (int) d) {\n            double r = (1 + d) / 6;\n            if (r == (int) r) {\n                return (int) r;\n            }\n        }\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1.0) / 6.0;\n        return x == (long) x ? (long) x : -1;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return (x + 1) / 6;\n        }\n        return -1;",
    "        double a = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return a == (long) a ? a : -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * n * n - 2 * n);",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * n * n - 2 * n);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double sqrt = Math.sqrt(1 + 24 * n);\n        if (sqrt == Math.floor(sqrt)) {\n            double sqrt2 = Math.sqrt(1 + 8 * n);\n            if (sqrt2 == Math.floor(sqrt2)) {\n                return (long)sqrt2;\n            }\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long m = (long)Math.sqrt(n);\n        if (m * m == n && (m & 1) == 1) {\n            return m;\n        }\n        return 0;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return nth;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return 0;\n        }",
    "        long x = (long) Math.sqrt(2 * n + 1.0 / 4);\n        if (x * x == 2 * n + 1.0 / 4 && (x - 1) % 2 == 0) {\n            return x;\n        }\n        return 0;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x) {\n            return (long) x;\n        }\n        return -1;",
    "        double x = (Math.sqrt(24*n+1)+1)/6;\n        if (x == (int)x) return (int)x;\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n && (a + 1) % 4 == 0) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? (long) x : -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        return (long) (3 * Math.sqrt(3) * Math.pow(n, 2) - 3 * n + 1) / 2;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(1 + 24 * n);\n        if (a * a == 1 + 24 * n && (a + 1) % 6 == 0) {\n            return (a + 1) / 6;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return nth * (3 * nth - 2);",
    "        // n = (3 * x^2 - 2 * x) / 2\n        // 3 * x^2 - 2 * x - 2 * n = 0\n        // x = (2 + sqrt(4 + 12 * n)) / 6\n        double x = (2 + Math.sqrt(4 + 12 * n)) / 6;\n        return x == (long) x ? x : -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return -1;\n        }",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double sqrt = Math.sqrt(1 + 24 * n);\n        if (sqrt == Math.floor(sqrt) && sqrt % 6 == 5) {\n            return (long) sqrt;\n        }\n        return 0;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x) {\n            return (int) x;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long x = (long) Math.sqrt(2 * n + 1.0 / 4);\n        return x * x == 2 * n + 1.0 / 4 ? x : 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if(a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return n;\n        } else {\n            return 0;\n        }",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x) {\n            return (long) x;\n        }\n        return 0;",
    "        return (long) (3*n*n - 2*n + 1);",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        return (long) (2*Math.sqrt(2*n+1/4)+1/2);",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return -1;\n        }",
    "        long x = (long)Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            long y = 1 + x;\n            if (y % 6 == 0) {\n                return y / 6;\n            }\n        }\n        return -1;",
    "        long m = (long) Math.sqrt(n);\n        if (m*m == n && (m+1)*(m+1) == n+1)\n            return m;\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long x = (long) Math.sqrt(2*n+0.125);\n        if (x*(3*x-2) == n) return x;\n        return 0;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        double d = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return d == (long) d ? (long) d : 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x)\n            return (int) x;\n        else\n            return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return (long) x;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            return (1 + x) / 6;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(2 * n + 1.0 / 4);\n        if (x * x == 2 * n + 1.0 / 4 && x % 2 == 1) {\n            return x;\n        }\n        return 0;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            long y = (1 + x) / 6;\n            if (y * (3 * y - 2) == n) {\n                return y;\n            }\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long) x)\n            return (long) x;\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            long y = (1 + x) / 6;\n            if (y * (3 * y - 2) == n) {\n                return y;\n            }\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(2 * n + 0.0625);\n        if (x * (3 * x - 2) == 2 * n) {\n            return x;\n        }\n        return 0;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long) x) {\n            return (long) x;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth = i * (3 * i - 2);\n        }\n        return nth;",
    "        long x = (long) Math.sqrt(2 * n + 0.125);\n        if (x * (3 * x - 2) == 2 * n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return (x + 1) / 6;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long x = (long) ((Math.sqrt(1 + 24 * n) + 1) / 6);\n        if (x * (3 * x - 2) == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        double x = (2 + Math.sqrt(4 + 12*n)) / 6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long)((Math.sqrt(1 + 24 * n) + 1) / 6);",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(2*n + 1.0/4.0);\n        if (x*x == 2*n + 1.0/4.0) {\n            return x;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = (long) Math.sqrt(n);\n        if(a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * n * n - 2 * n);",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long) x) {\n            return (long) x;\n        }\n        return 0;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if(a*a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(2 * n + 0.125);\n        return a * a == 2 * n ? a : -1;",
    "        long a = (long) Math.sqrt(2*n + 0.125);\n        if (a*a == 2*n + 0.125) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if(x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long r = (long)Math.sqrt(n);\n        if (r * r == n) {\n            return r;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        long nth = (long) Math.sqrt(2 * n + 1.0 / 4) - 1.0 / 2;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        return (long) (3 * n * n - 2 * n);",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return (x + 1) / 6;\n        }\n        return 0;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long nth = (long) (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return nth;",
    "        return (long) (3 + Math.sqrt(9 + 8 * n)) / 2;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nthOctagonal = 0;\n        long nth = 1;\n        while(nthOctagonal < n) {\n            nthOctagonal = nth * (3 * nth - 2);\n            nth++;\n        }\n        if(nthOctagonal == n) {\n            return nth - 1;\n        }\n        return -1;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n && (x & 1) == 1) {\n            return x;\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3 * n^2 - 2 * n) / 2\n        // n^2 + n - 2 * n^2 + 2 * n - 2 * n = 0\n        // n^2 - n - 2 * n^2 + 2 * n - 2 * n = 0\n        // n^2 - 3 * n + 2 = 0\n        // n = (3 +- sqrt(9 - 8)) / 2\n        // n = (3 +- 1) / 2\n        // n = 1 or 2\n        // n = 1\n        // 1 = (3 * 1^2 - 2 * 1) / 2\n        // 1 = (3 * 1 - 2) / 2\n        // 1 = (3 - 2) / 2\n        // 1 = 1 / 2\n        // 1 = 1\n        // n = 2\n        // 2 = (3 * 2^2 - 2 * 2) / 2\n        // 2 = (3 * 4 - 4) / 2\n        // 2 = (12 - 4) / 2\n        // 2 = 8 / 2\n        // 2 = 4\n        // n = 1 or 2\n        // n = 1\n        // 1 = (3 * 1^2 - 2 * 1) / 2\n        // 1 = (3 * 1 - 2) / 2\n        // 1 = (3 - 2) / 2\n        // 1 = 1 / 2\n        // 1 = 1\n        // n = 2\n        // 2 = (3 * 2^2 - 2 * 2) / 2\n        // 2 = (3 * 4 - 4) / 2\n        // 2 = (12 - 4) / 2\n        // 2 = 8 / 2\n        // 2 = 4\n        // n = 1 or 2\n        // n = 1\n        // 1 = (3 * 1^2 - 2 * 1) / 2\n        // 1 = (3 * 1 - 2) / 2\n        // 1 = (3 - 2) / 2\n        // 1 = 1 / 2\n        // 1 = 1\n        // n = 2\n        // 2 = (3 * 2^2 - 2 * 2) / 2\n        // 2 = (3 * 4 - 4) / 2\n        // 2 = (12 - 4) / 2\n        // 2 = 8 /",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = (long) (Math.sqrt(1 + 8 * n) - 1) / 2;\n        if (nth * (3 * nth - 2) == n) {\n            return nth;\n        }\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n",
    "        // n = (3 * x^2 - 2 * x) / 2\n        // n = 3 * x^2 - x\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3 * x * (x - 1)\n        // n = 3",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            if ((1 + x) % 6 == 0) {\n                return (1 + x) / 6;\n            }\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (int) x) {\n            return (long) x;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n && (a & 1) == 1) {\n            return a;\n        }\n        return 0;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return x;\n        }\n        return 0;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return (x + 1) / 6;\n        }\n        return 0;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        return (long) (Math.sqrt(1 + 24 * n) + 1) / 6;",
    "        return (long) (2 * Math.sqrt(n) + 1);",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long x = (long) Math.sqrt(n);\n        return x * x == n ? x : 0;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x",
    "        long x = (long) Math.sqrt(2 * n + 1.0 / 16.0);\n        if (x * (3 * x - 2) == n) {\n            return x;\n        }\n        return 0;",
    "        return (long) (3 * n * n - 2 * n);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return -1;\n        }",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long) x ? (long) x : -1;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);"
  ]
}