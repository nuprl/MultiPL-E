{
  "name": "mbpp_59_is_octagonal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long isOctagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long x = (long) Math.sqrt(2 * n + 0.125);\n        if (x * (3 * x - 2) == n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long nth = 0;\n        for (long i = 1; i < n; i++) {\n            nth = i * (3 * i - 2);\n        }\n        return nth;",
    "        double d = Math.sqrt(1 + 24 * n);\n        if (d == (int) d) {\n            double r = (1 + d) / 6;\n            if (r == (int) r) {\n                return (int) r;\n            }\n        }\n        return 0;",
    "        double x = (Math.sqrt(1 + 24 * n) + 1.0) / 6.0;\n        return x == (long) x ? (long) x : -1;",
    "        long x = (long) Math.sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0) {\n            return (x + 1) / 6;\n        }\n        return -1;",
    "        double a = (Math.sqrt(1 + 24 * n) + 1) / 6;\n        return a == (long) a ? a : -1;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * n * n - 2 * n);",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);",
    "        long a = (long)Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        return (long) (3 * n * n - 2 * n);",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double sqrt = Math.sqrt(1 + 24 * n);\n        if (sqrt == Math.floor(sqrt)) {\n            double sqrt2 = Math.sqrt(1 + 8 * n);\n            if (sqrt2 == Math.floor(sqrt2)) {\n                return (long)sqrt2;\n            }\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long m = (long)Math.sqrt(n);\n        if (m * m == n && (m & 1) == 1) {\n            return m;\n        }\n        return 0;",
    "        return (long) (3 * Math.pow(n, 2) - 2 * n);"
  ]
}