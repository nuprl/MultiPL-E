{
  "name": "mbpp_627_find_First_Missing",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the smallest missing number from a sorted array list of natural numbers.\n    public static long findFirstMissing(ArrayList<Long> array) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l)))) == (4l));\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)6l, (long)9l)))) == (3l));\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)8l, (long)9l)))) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long firstMissing = 0;\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) != i) {\n                firstMissing = i;\n                break;\n            }\n        }\n        return firstMissing;",
    "        long firstMissing = 1;\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) == firstMissing) {\n                firstMissing++;\n            }\n        }\n        return firstMissing;",
    "        long firstMissing = 1;\n        for (long i : array) {\n            if (i == firstMissing) {\n                firstMissing++;\n            }\n        }\n        return firstMissing;",
    "        // Write your code here\n        long missing = 1;\n        for (long i : array) {\n            if (i == missing) {\n                missing++;\n            }\n        }\n        return missing;",
    "        // Write your code here.\n        long firstMissing = 1;\n        for (long i = 0; i < array.size(); i++) {\n            if (array.get((int) i) != firstMissing) {\n                return firstMissing;\n            }\n            firstMissing++;\n        }\n        return firstMissing;",
    "        long n = array.size();\n        long low = 0;\n        long high = n - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array.get((int) mid) != mid + 1 && array.get((int) mid - 1) == mid) {\n                return mid + 1;\n            } else if (array.get((int) mid) != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long firstMissing = 0;\n        for(int i = 0; i < array.size(); i++) {\n            if(array.get(i) != i + 1) {\n                firstMissing = i + 1;\n                break;\n            }\n        }\n        return firstMissing;",
    "        long min = array.get(0);\n        long max = array.get(array.size() - 1);\n        long range = max - min;\n        long[] rangeArray = new long[(int) range + 1];\n        for (long i = 0; i < array.size(); i++) {\n            rangeArray[(int) (array.get(i) - min)] = array.get(i);\n        }\n        for (long i = 0; i < rangeArray.length; i++) {\n            if (rangeArray[(int) i] == 0) {\n                return i + min;\n            }\n        }\n        return max + 1;",
    "        long firstMissing = -1;\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) != i + 1) {\n                firstMissing = i + 1;\n                break;\n            }\n        }\n        return firstMissing;",
    "        long low = 0;\n        long high = array.size() - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array.get((int) mid) != mid) {\n                if (mid == 0 || array.get((int) mid - 1) == mid - 1) {\n                    return mid;\n                } else {\n                    high = mid - 1;\n                }\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.size()) {\n            return array.size();\n        }\n        return -1;",
    "        long min = array.get(0);\n        long max = array.get(array.size()-1);\n        long expectedSum = (min + max) * (max - min + 1) / 2;\n        long sum = array.stream().mapToLong(Long::longValue).sum();\n        return expectedSum - sum;",
    "        // Your code goes here.\n        long firstMissing = 0;\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) != i) {\n                firstMissing = i;\n                break;\n            }\n        }\n        return firstMissing;",
    "        long firstMissing = -1;\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) != i + 1) {\n                firstMissing = i + 1;\n                break;\n            }\n        }\n        return firstMissing;",
    "        long result = 0;\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) != i + 1) {\n                result = i + 1;\n                break;\n            }\n        }\n        return result;",
    "        long first = array.get(0);\n        long last = array.get(array.size() - 1);\n        long missing = first;\n        for (long i = first; i <= last; i++) {\n            if (array.contains(i)) {\n                continue;\n            } else {\n                missing = i;\n                break;\n            }\n        }\n        return missing;",
    "        long firstMissing = 0;\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) != i + 1) {\n                firstMissing = i + 1;\n                break;\n            }\n        }\n        return firstMissing;",
    "        long firstMissing = 1;\n        for (long i : array) {\n            if (i == firstMissing) {\n                firstMissing++;\n            }\n        }\n        return firstMissing;",
    "        long firstMissing = 1;\n        for (long i : array) {\n            if (i == firstMissing) {\n                firstMissing++;\n            }\n        }\n        return firstMissing;",
    "        long max = array.get(array.size() - 1);\n        long min = array.get(0);\n        long sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        long expectedSum = (max * (max + 1)) / 2;\n        return expectedSum - sum;",
    "        // Write your code here.\n        long min = array.get(0);\n        long max = array.get(array.size() - 1);\n        long sum = 0;\n        for (long i = min; i <= max; i++) {\n            sum += i;\n        }\n        long actualSum = 0;\n        for (long i = 0; i < array.size(); i++) {\n            actualSum += array.get(i);\n        }\n        return sum - actualSum;"
  ]
}