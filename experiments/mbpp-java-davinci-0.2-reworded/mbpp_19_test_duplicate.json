{
  "name": "mbpp_19_test_duplicate",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find whether a given array array list of integers contains any duplicate element.\n    public static boolean testDuplicate(ArrayList<Long> arraynums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (false));\n    assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)4l)))) == (true));\n    assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l)))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        Set<Long> set = new HashSet<>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        HashSet<Long> hashset = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (hashset.contains(num)) {\n                return true;\n            } else {\n                hashset.add(num);\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        Set<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            } else {\n                set.add(num);\n            }\n        }\n        return false;",
    "        Set<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        Set<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<>();\n        for (int i = 0; i < arraynums.size(); i++) {\n            if (set.contains(arraynums.get(i))) {\n                return true;\n            } else {\n                set.add(arraynums.get(i));\n            }\n        }\n        return false;",
    "        Set<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            } else {\n                set.add(num);\n            }\n        }\n        return false;",
    "        for (int i = 0; i < arraynums.size(); i++) {\n            for (int j = i + 1; j < arraynums.size(); j++) {\n                if (arraynums.get(i) == arraynums.get(j)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        HashSet<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            } else {\n                set.add(num);\n            }\n        }\n        return false;",
    "        Set<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        Set<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
    "        Set<Long> set = new HashSet<Long>();\n        for (Long num : arraynums) {\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;"
  ]
}