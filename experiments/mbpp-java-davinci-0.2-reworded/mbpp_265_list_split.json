{
  "name": "mbpp_265_list_split",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list and an integer n and splits an array array list for every nth element, returning an array array list of the resulting array lists.\n    public static Object listSplit(Object S, long step) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(listSplit((new Object(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"e\", (String)\"f\", (String)\"g\", (String)\"h\", (String)\"i\", (String)\"j\", (String)\"k\", (String)\"l\", (String)\"m\", (String)\"n\"))), (3l)).equals((new Object(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"d\", (String)\"g\", (String)\"j\", (String)\"m\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"e\", (String)\"h\", (String)\"k\", (String)\"n\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"f\", (String)\"i\", (String)\"l\")))))));\n    assert(listSplit((new Object(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l, (long)12l, (long)13l, (long)14l))), (3l)).equals((new Object(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)7l, (long)10l, (long)13l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)8l, (long)11l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)9l, (long)12l)))))));\n    assert(listSplit((new Object(Arrays.asList((String)\"python\", (String)\"java\", (String)\"C\", (String)\"C++\", (String)\"DBMS\", (String)\"SQL\"))), (2l)).equals((new Object(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"C\", (String)\"DBMS\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"java\", (String)\"C++\", (String)\"SQL\")))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<Object> list = (ArrayList<Object>) S;\n        ArrayList<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> sublist = new ArrayList<Object>();\n            for (int j = i; j < i + step; j++) {\n                if (j < list.size()) {\n                    sublist.add(list.get(j));\n                }\n            }\n            result.add(sublist);\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> subList = new ArrayList<>();\n            for (int j = i; j < i + step && j < list.size(); j++) {\n                subList.add(list.get(j));\n            }\n            result.add(subList);\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<>();\n        ArrayList<Object> temp = new ArrayList<>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i++) {\n            temp.add(list.get(i));\n            if (i % step == step - 1) {\n                result.add(temp);\n                temp = new ArrayList<>();\n            }\n        }\n        if (temp.size() > 0) {\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> sublist = new ArrayList<>();\n            for (int j = 0; j < step; j++) {\n                if (i + j < list.size()) {\n                    sublist.add(list.get(i + j));\n                }\n            }\n            result.add(sublist);\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<Object>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        long i = 0;\n        while (i < list.size()) {\n            ArrayList<Object> sublist = new ArrayList<Object>();\n            long j = 0;\n            while (j < step && i < list.size()) {\n                sublist.add(list.get((int) i));\n                i++;\n                j++;\n            }\n            result.add(sublist);\n        }\n        return result;",
    "        ArrayList<Object> list = (ArrayList<Object>)S;\n        ArrayList<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> sublist = new ArrayList<Object>();\n            for (int j = i; j < i + step && j < list.size(); j++) {\n                sublist.add(list.get(j));\n            }\n            result.add(sublist);\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<Object>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> subList = new ArrayList<Object>();\n            for (int j = i; j < i + step && j < list.size(); j++) {\n                subList.add(list.get(j));\n            }\n            result.add(subList);\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<Object>();\n        ArrayList<Object> list = (ArrayList<Object>)S;\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> subList = new ArrayList<Object>();\n            for (int j = i; j < i + step && j < list.size(); j++) {\n                subList.add(list.get(j));\n            }\n            result.add(subList);\n        }\n        return result;",
    "        ArrayList<ArrayList<Object>> result = new ArrayList<ArrayList<Object>>();\n        ArrayList<Object> list = (ArrayList<Object>)S;\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> subList = new ArrayList<Object>();\n            for (int j = 0; j < step && i + j < list.size(); j++) {\n                subList.add(list.get(i + j));\n            }\n            result.add(subList);\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<>();\n        ArrayList<Object> temp = new ArrayList<>();\n        for (int i = 0; i < ((ArrayList<Object>) S).size(); i++) {\n            if (i % step == 0 && i != 0) {\n                result.add(temp);\n                temp = new ArrayList<>();\n            }\n            temp.add(((ArrayList<Object>) S).get(i));\n        }\n        result.add(temp);\n        return result;",
    "        // Write your code here\n        return null;",
    "        ArrayList<Object> result = new ArrayList<>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> sublist = new ArrayList<>();\n            for (int j = i; j < i + step && j < list.size(); j++) {\n                sublist.add(list.get(j));\n            }\n            result.add(sublist);\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<Object>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            result.add(list.subList(i, Math.min(list.size(), i + (int) step)));\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<Object>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            result.add(list.subList(i, Math.min(list.size(), i + (int) step)));\n        }\n        return result;",
    "        ArrayList<Object> result = new ArrayList<Object>();\n        ArrayList<Object> temp = new ArrayList<Object>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i++) {\n            if (i % step == 0 && i != 0) {\n                result.add(temp);\n                temp = new ArrayList<Object>();\n            }\n            temp.add(list.get(i));\n        }\n        result.add(temp);\n        return result;",
    "        ArrayList<Object> L = new ArrayList<Object>();\n        ArrayList<Object> R = new ArrayList<Object>();\n        for (int i = 0; i < ((ArrayList<Object>) S).size(); i++) {\n            if (i % step == 0) {\n                if (R.size() != 0) {\n                    L.add(R);\n                    R = new ArrayList<Object>();\n                }\n            }\n            R.add(((ArrayList<Object>) S).get(i));\n        }\n        if (R.size() != 0) {\n            L.add(R);\n        }\n        return L;",
    "        if (S instanceof List) {\n            List<Object> list = (List<Object>) S;\n            List<Object> result = new ArrayList<>();\n            for (int i = 0; i < list.size(); i += step) {\n                result.add(list.subList(i, Math.min(list.size(), i + (int) step)));\n            }\n            return result;\n        } else if (S instanceof String) {\n            String string = (String) S;\n            List<Object> result = new ArrayList<>();\n            for (int i = 0; i < string.length(); i += step) {\n                result.add(string.substring(i, Math.min(string.length(), i + (int) step)));\n            }\n            return result;\n        } else {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }",
    "        Object[] arr = (Object[]) S;\n        int n = arr.length;\n        Object[] res = new Object[(int) Math.ceil((double) n / step)];\n        for (int i = 0; i < res.length; i++) {\n            Object[] temp = new Object[(int) step];\n            for (int j = 0; j < step; j++) {\n                if (i * step + j < n) {\n                    temp[j] = arr[i * step + j];\n                }\n            }\n            res[i] = temp;\n        }\n        return res;",
    "        ArrayList<Object> result = new ArrayList<Object>();\n        ArrayList<Object> list = (ArrayList<Object>) S;\n        for (int i = 0; i < list.size(); i += step) {\n            ArrayList<Object> sublist = new ArrayList<Object>();\n            for (int j = i; j < i + step && j < list.size(); j++) {\n                sublist.add(list.get(j));\n            }\n            result.add(sublist);\n        }\n        return result;",
    "        // write your code here\n        return null;"
  ]
}