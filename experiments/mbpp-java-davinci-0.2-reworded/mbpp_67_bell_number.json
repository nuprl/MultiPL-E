{
  "name": "mbpp_67_bell_number",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the number of ways to partition a set of Bell numbers.\n    public static long bellNumber(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((10l)) == (115975l));\n    assert(bellNumber((56l)) == (6775685320645824322581483068371419745979053216268760300l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            // Explicitly fill for j = 0\n            bell[i][0] = bell[i-1][i-1];\n            // Fill for remaining values of j\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= n; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - 1 - i);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int) n + 1][(int) n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int) n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (long i = 1; i <= n; i++) {\n            bell[(int)i][0] = bell[(int)i-1][(int)i-1];\n            for (long j = 1; j <= i; j++)\n                bell[(int)i][(int)j] = bell[(int)i-1][(int)j-1] + bell[(int)i][(int)j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number of ways to partition a set of n elements.\n        // Bell number is the number",
    "        long[][] bell = new long[(int) n + 1][(int) n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int) n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int) n + 1][(int) n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        return bell[(int) n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            // Explicitly fill for j = 0\n            bell[i][0] = bell[i-1][i-1];\n            // Fill for remaining values of j\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        return bell[(int)n][0];",
    "        // TODO: Implement this function.\n        return 0;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        // Bell number is the number of ways to partition a set.\n        // Bell number is the sum of Stirling numbers of the second kind.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.\n        // Stirling number of the second kind is the number of ways to partition a set of size n into k non-empty subsets.",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        if (n == 1) return 1;\n        long[] dp = new long[(int)n + 1];\n        dp[0] = 1;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                dp[i] += dp[j] * dp[i - j - 1];\n            }\n        }\n        return dp[(int)n];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return bellNumber(n - 1) * (n - 1) + bellNumber(n - 2);\n        }",
    "        return (long)Math.pow(2, n) * (long)Math.pow(n, n - 1);",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k);\n        }\n        return sum;",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 1; k <= n; k++) {\n            sum += bellNumber(n - 1) * StrictMath.pow(k, n - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0)\n            return 1;\n        long sum = 0;\n        for (long i = 0; i < n; i++)\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int) n + 1][(int) n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int) n][0];",
    "        long[][] bell = new long[(int) n + 1][(int) n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int) n][0];",
    "        if (n == 0) return 1;\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            sum += bellNumber(k) * bellNumber(n - k - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        if (n == 0) {\n            return 1;\n        }\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += bellNumber(i) * bellNumber(n - i - 1);\n        }\n        return sum;",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int) n + 1][(int) n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        return bell[(int) n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n + 1][(int)n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i - 1][i - 1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n            }\n        }\n        return bell[(int)n][0];",
    "        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n        return bell[(int)n][0];"
  ]
}