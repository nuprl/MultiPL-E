{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the first non-repeated character in a given string.\n    public static Optional<String> firstNonRepeatingCharacter(String str1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(Optional.empty()));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(\"a\"));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(\"c\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new LinkedHashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == 1) {\n                return Optional.of(String.valueOf(entry.getKey()));\n            }\n        }\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        // Write your code here\n        if(str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new LinkedHashMap<>();\n        for(int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if(map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for(Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if(entry.getValue() == 1) {\n                return Optional.of(entry.getKey().toString());\n            }\n        }\n        return Optional.empty();",
    "        if(str1 == null) {\n            return Optional.empty();\n        }\n        if(str1.length() == 0) {\n            return Optional.empty();\n        }\n        if(str1.length() == 1) {\n            return Optional.of(str1);\n        }\n        Map<Character, Integer> map = new LinkedHashMap<>();\n        for(int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if(map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for(Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if(entry.getValue() == 1) {\n                return Optional.of(String.valueOf(entry.getKey()));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        // TODO: Implement this function\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new LinkedHashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char ch = str1.charAt(i);\n            if (map.containsKey(ch)) {\n                map.put(ch, map.get(ch) + 1);\n            } else {\n                map.put(ch, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == 1) {\n                return Optional.of(String.valueOf(entry.getKey()));\n            }\n        }\n        return Optional.empty();",
    "        return str1.chars().mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet().stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        // Write your code here\n        return Optional.empty();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            String c = str1.substring(i, i + 1);\n            if (map.get(c) == 1) {\n                return Optional.of(c);\n            }\n        }\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(i -> (char) i)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        // Write your code here\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();",
    "        if (str1 == null || str1.isEmpty()) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new LinkedHashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == 1) {\n                return Optional.of(String.valueOf(entry.getKey()));\n            }\n        }\n        return Optional.empty();",
    "        if (str1 == null || str1.length() == 0) {\n            return Optional.empty();\n        }\n        Map<Character, Integer> map = new LinkedHashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == 1) {\n                return Optional.of(String.valueOf(entry.getKey()));\n            }\n        }\n        return Optional.empty();",
    "        // Write your code here\n        return Optional.empty();",
    "        return str1.chars()\n            .mapToObj(i -> (char) i)\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(e -> e.getValue() == 1)\n            .map(e -> e.getKey().toString())\n            .findFirst();"
  ]
}