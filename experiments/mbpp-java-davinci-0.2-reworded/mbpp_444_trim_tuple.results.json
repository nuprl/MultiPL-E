{
  "name": "mbpp_444_trim_tuple",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            test_pair.add(Pair.with(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (int i = 0; i < test_pair.size(); i++) {\n            long a = test_pair.get(i).getValue0();\n            long b = test_pair.get(i).getValue1();\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            result.add(Pair.with(a, b));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < result.size(); i++) {\n            sb.append(result.get(i).getValue0() + \" \" + result.get(i).getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp9z5w7otv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9z5w7otv.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9z5w7otv.java:13: error: cannot find symbol\n            test_pair.add(Pair.with(test_list.get(i), test_list.get(i + 1)));\n                          ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9z5w7otv.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9z5w7otv.java:29: error: cannot find symbol\n            result.add(Pair.with(a, b));\n                       ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9z5w7otv.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9z5w7otv.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9z5w7otv.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Ar",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long,Long>> pair_list = new ArrayList<Pair<Long,Long>>();\n        for(int i=0; i<test_list.size(); i+=2) {\n            pair_list.add(new Pair<Long,Long>(test_list.get(i), test_list.get(i+1)));\n        }\n        ArrayList<Pair<Long,Long>> trimmed_list = new ArrayList<Pair<Long,Long>>();\n        for(int i=0; i<pair_list.size(); i++) {\n            Pair<Long,Long> pair = pair_list.get(i);\n            if(pair.getValue0() < K) {\n                trimmed_list.add(new Pair<Long,Long>(0L, pair.getValue1()));\n            }\n            else if(pair.getValue1() > 100 - K) {\n                trimmed_list.add(new Pair<Long,Long>(pair.getValue0(), 100L));\n            }\n            else {\n                trimmed_list.add(new Pair<Long,Long>(pair.getValue0() + K, pair.getValue1() - K));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i=0; i<trimmed_list.size(); i++) {\n            Pair<Long,Long> pair = trimmed_list.get(i);\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmphmg2sedx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphmg2sedx.java:11: error: cannot find symbol\n        ArrayList<Pair<Long,Long>> pair_list = new ArrayList<Pair<Long,Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphmg2sedx.java:11: error: cannot find symbol\n        ArrayList<Pair<Long,Long>> pair_list = new ArrayList<Pair<Long,Long>>();\n                                                             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphmg2sedx.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long,Long>(test_list.get(i), test_list.get(i+1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphmg2sedx.java:15: error: cannot find symbol\n        ArrayList<Pair<Long,Long>> trimmed_list = new ArrayList<Pair<Long,Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphmg2sedx.java:15: error: cannot find symbol\n        ArrayList<Pair<Long,Long>> trimmed_list = new ArrayList<Pair<Long,Long>>();\n                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphmg2sedx.java:17: error: cannot find symbol\n            Pair<Long,Long> pair = pair_list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphmg2sedx.java:19: error: cannot find symbol\n                trimmed_list.add(new Pair<Long,Long>(0L, pair.getValue1()));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphmg2sedx.java:22: error: cannot find symbol\n                trimmed_list.add(new Pair<Long,Long>(pair.getValue0(), 100L));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphmg2sedx.java:25: error: cannot find symbol\n                trimmed_list.add(new Pair<Long,Long>(pair.getValue0() + K, pair.getValue1() - K));\n                                     ^\n  symbol:   class Pair\n  location: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp9n_kd6cw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here.\n        ArrayList<Long> result = new ArrayList<>();\n        for (Long l : test_list) {\n            if (l > K) {\n                result.add(l - K);\n            } else {\n                result.add(l);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp9xxb4iu5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9xxb4iu5.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9xxb4iu5.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9xxb4iu5.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9xxb4iu5.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmphfcodu0q.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphfcodu0q.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphfcodu0q.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphfcodu0q.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphfcodu0q.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphfcodu0q.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphfcodu0q.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphfcodu0q.java:29: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphfcodu0q.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphfcodu0q.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here.\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=0;i<test_list.size();i+=2){\n            long x = test_list.get(i);\n            long y = test_list.get(i+1);\n            if(x<K){\n                x=0;\n            }\n            else{\n                x-=K;\n            }\n            if(y<K){\n                y=0;\n            }\n            else{\n                y-=K;\n            }\n            result.add(x);\n            result.add(y);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp5920xvhg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5920xvhg.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5920xvhg.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> trimmed_list = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                trimmed_list.add(test_list.get(i));\n            }\n        }\n        return trimmed_list.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpr8bc87ln.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpr8bc87ln.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr8bc87ln.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpr8bc87ln.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr8bc87ln.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpi0afkaad.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi0afkaad.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi0afkaad.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi0afkaad.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi0afkaad.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpr9m4kpd1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpr9m4kpd1.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr9m4kpd1.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpr9m4kpd1.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr9m4kpd1.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a);\n            sb.append(\" \");\n            sb.append(b);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp55akg14n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long x = test_list.get(i);\n            long y = test_list.get(i + 1);\n            if (x < K) {\n                x = 0;\n            } else {\n                x -= K;\n            }\n            if (y < K) {\n                y = 0;\n            } else {\n                y -= K;\n            }\n            sb.append(x + \" \" + y + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpsr28spby.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsr28spby.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsr28spby.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsr28spby.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsr28spby.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            test_pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : test_pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            result_pair_list.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result_pair_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpewpy48su.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpewpy48su.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpewpy48su.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpewpy48su.java:13: error: cannot find symbol\n            test_pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpewpy48su.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpewpy48su.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n                                                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpewpy48su.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : test_pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpewpy48su.java:29: error: cannot find symbol\n            result_pair_list.add(new Pair<Long, Long>(first, second));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpewpy48su.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result_pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpewpy48su.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            } else {\n                result.add(K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpzhduav59.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzhduav59.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzhduav59.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzhduav59.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzhduav59.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxmz5v5de.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxmz5v5de.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxmz5v5de.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(new Pair<>(first, second));\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpic1c7leo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpic1c7leo.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpic1c7leo.java:13: error: cannot find symbol\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpic1c7leo.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpic1c7leo.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpic1c7leo.java:29: error: cannot find symbol\n            result.add(new Pair<>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpic1c7leo.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpic1c7leo.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < second) {\n                first = Math.max(first, second - K);\n            } else {\n                second = Math.max(second, first - K);\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpo3e1i92v.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpo3e1i92v.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3e1i92v.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3e1i92v.java:20: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3e1i92v.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3e1i92v.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long x = test_list.get(i);\n            long y = test_list.get(i + 1);\n            long x_new = x - K;\n            long y_new = y - K;\n            if (x_new < 0) {\n                x_new = 0;\n            }\n            if (y_new < 0) {\n                y_new = 0;\n            }\n            result.add(x_new);\n            result.add(y_new);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpiawubn7a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiawubn7a.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpiawubn7a.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpiawubn7a.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpiawubn7a.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmp1c7ekwgd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1c7ekwgd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1c7ekwgd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1c7ekwgd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1c7ekwgd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        //long[] arr = new long[test_list.size()];\n        //for(int i=0;i<test_list.size();i++){\n        //    arr[i] = test_list.get(i);\n        //}\n        //Arrays.sort(arr);\n        //long sum = 0;\n        //for(int i=0;i<arr.length;i++){\n        //    sum += arr[i];\n        //}\n        //long avg = sum/arr.length;\n        //long[] arr2 = new long[arr.length];\n        //for(int i=0;i<arr.length;i++){\n        //    arr2[i] = arr[i] - avg;\n        //}\n        //long sum2 = 0;\n        //for(int i=0;i<arr2.length;i++){\n        //    sum2 += arr2[i];\n        //}\n        //long avg2 = sum2/arr2.length;\n        //long[] arr3 = new long[arr2.length];\n        //for(int i=0;i<arr2.length;i++){\n        //    arr3[i] = arr2[i] - avg2;\n        //}\n        //long sum3 = 0;\n        //for(int i=0;i<arr3.length;i++){\n        //    sum3 += arr3[i];\n        //}\n        //long avg3 = sum3/arr3.length;\n        //long[] arr4 = new long[arr3.length];\n        //for(int i=0;i<arr3.length;i++){\n        //    arr4[i] = arr3[i] - avg3;\n        //}\n        //long sum4 = 0;\n        //for(int i=0;i<arr4.length;i++){\n        //    sum4 += arr4[i];\n        //}\n        //long avg4 = sum4/arr\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpx5icaxgq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpx5icaxgq.java:53: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpx5icaxgq.java:53: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpx5icaxgq.java:53: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpx5icaxgq.java:53: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpi3e797ba.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi3e797ba.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi3e797ba.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi3e797ba.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi3e797ba.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a);\n            sb.append(\" \");\n            sb.append(b);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp55akg14n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        String result = \"\";\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long x = test_list.get(i);\n            long y = test_list.get(i + 1);\n            if (x < K) {\n                x = 0;\n            } else {\n                x -= K;\n            }\n            if (y < K) {\n                y = 0;\n            } else {\n                y -= K;\n            }\n            result += \"(\" + x + \",\" + y + \")\";\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpvld7_e72.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpvld7_e72.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpvld7_e72.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpvld7_e72.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpvld7_e72.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            trimmed_list.add(new Pair<Long, Long>(Math.max(pair.getValue0() - K, 0L), Math.max(pair.getValue1() - K, 0L)));\n        }\n        return trimmed_list.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122936,
      "stdout": "",
      "stderr": "/tmp/tmp2x6dk2ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2x6dk2ez.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2x6dk2ez.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2x6dk2ez.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2x6dk2ez.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2x6dk2ez.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2x6dk2ez.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2x6dk2ez.java:17: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(Math.max(pair.getValue0() - K, 0L), Math.max(pair.getValue1() - K, 0L)));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2x6dk2ez.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equal",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=0; i<test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmp4v9gmdh8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp4v9gmdh8.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp4v9gmdh8.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp4v9gmdh8.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp4v9gmdh8.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) >= K) {\n                result.add(test_list.get(i) - K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122936,
      "stdout": "",
      "stderr": "/tmp/tmp2bqiwr_9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2bqiwr_9.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2bqiwr_9.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2bqiwr_9.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2bqiwr_9.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < second) {\n                if (first + K < second - K) {\n                    result.add(new Pair<Long, Long>(first + K, second - K));\n                }\n            } else {\n                if (second + K < first - K) {\n                    result.add(new Pair<Long, Long>(second + K, first - K));\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmp41kfikr8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp41kfikr8.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp41kfikr8.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp41kfikr8.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp41kfikr8.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp41kfikr8.java:21: error: cannot find symbol\n                    result.add(new Pair<Long, Long>(first + K, second - K));\n                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp41kfikr8.java:25: error: cannot find symbol\n                    result.add(new Pair<Long, Long>(second + K, first - K));\n                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp41kfikr8.java:30: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp41kfikr8.java:39: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp41kfikr8.java:39: error: cannot find symbol\n    assert(tr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here.\n        ArrayList<Long> result = new ArrayList<>();\n        for(int i=0; i<test_list.size(); i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a>b){\n                long temp = a;\n                a = b;\n                b = temp;\n            }\n            a = a+K;\n            b = b-K;\n            if(a>b){\n                result.add(a);\n                result.add(a);\n            }else{\n                result.add(a);\n                result.add(b);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpb6f62zj2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb6f62zj2.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6f62zj2.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb6f62zj2.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6f62zj2.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            test_pair.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_pair.size(); i++) {\n            Pair<Long, Long> temp = test_pair.get(i);\n            long first = temp.getValue0();\n            long second = temp.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < result.size(); i++) {\n            Pair<Long, Long> temp = result.get(i);\n            sb.append(temp.getValue0());\n            sb.append(\" \");\n            sb.append(temp.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpyzu95fw9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpyzu95fw9.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyzu95fw9.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyzu95fw9.java:13: error: cannot find symbol\n            test_pair.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyzu95fw9.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyzu95fw9.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyzu95fw9.java:17: error: cannot find symbol\n            Pair<Long, Long> temp = test_pair.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyzu95fw9.java:30: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyzu95fw9.java:34: error: cannot find symbol\n            Pair<Long, Long> temp = result.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyzu95fw9.java:43: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l),",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) >= K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpcqjx_cv0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpcqjx_cv0.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcqjx_cv0.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpcqjx_cv0.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpcqjx_cv0.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        String result = \"\";\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first > second) {\n                long temp = first;\n                first = second;\n                second = temp;\n            }\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result += first + \" \" + second + \" \";\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpc0702acp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpc0702acp.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpc0702acp.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc0702acp.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpc0702acp.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first = first - K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second = second - K;\n            }\n            result.add(first);\n            result.add(second);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmp5utce7fu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5utce7fu.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5utce7fu.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5utce7fu.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5utce7fu.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 100 - K) {\n                second = 100;\n            } else {\n                second += K;\n            }\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmp34wanqm9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp34wanqm9.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp34wanqm9.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp34wanqm9.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp34wanqm9.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp34wanqm9.java:29: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp34wanqm9.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp34wanqm9.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp34wanqm9.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            long min = Math.min(a, b);\n            long max = Math.max(a, b);\n            if (min + K > max - K) {\n                sb.append(min + K);\n                sb.append(\" \");\n                sb.append(min + K);\n            } else {\n                sb.append(max - K);\n                sb.append(\" \");\n                sb.append(max - K);\n            }\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122936,
      "stdout": "",
      "stderr": "/tmp/tmp0f9gs1ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0f9gs1ez.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0f9gs1ez.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0f9gs1ez.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0f9gs1ez.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpsywxmoh8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsywxmoh8.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsywxmoh8.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsywxmoh8.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsywxmoh8.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            sb.append(a - K);\n            sb.append(\" \");\n            sb.append(b + K);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpikfmk5z5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikfmk5z5.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpikfmk5z5.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikfmk5z5.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpikfmk5z5.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        String result = \"\";\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first = first - K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second = second - K;\n            }\n            result += \"(\" + first + \",\" + second + \")\";\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmp_bpclote.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_bpclote.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_bpclote.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_bpclote.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_bpclote.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i = i + 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            long diff = Math.abs(first - second);\n            if(diff > K) {\n                result.add(first);\n                result.add(second);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpqtl_4llj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqtl_4llj.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpqtl_4llj.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqtl_4llj.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpqtl_4llj.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if (a > b) {\n                if (a - b > K) {\n                    result.add(a - K);\n                    result.add(b + K);\n                } else {\n                    result.add(a);\n                    result.add(b);\n                }\n            } else {\n                if (b - a > K) {\n                    result.add(a + K);\n                    result.add(b - K);\n                } else {\n                    result.add(a);\n                    result.add(b);\n                }\n            }\n            i++;\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpsecf66yd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsecf66yd.java:40: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsecf66yd.java:40: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsecf66yd.java:40: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpsecf66yd.java:40: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            if (pair.getValue0() - K < 0) {\n                result.add(new Pair<>(0L, pair.getValue1() - K));\n            } else {\n                result.add(new Pair<>(pair.getValue0() - K, pair.getValue1() - K));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0()).append(\" \").append(pair.getValue1()).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmpizmt505z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpizmt505z.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizmt505z.java:13: error: cannot find symbol\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizmt505z.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizmt505z.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizmt505z.java:18: error: cannot find symbol\n                result.add(new Pair<>(0L, pair.getValue1() - K));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizmt505z.java:20: error: cannot find symbol\n                result.add(new Pair<>(pair.getValue0() - K, pair.getValue1() - K));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizmt505z.java:24: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizmt505z.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizmt505z.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppheth495.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppheth495.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppheth495.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppheth495.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppheth495.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<test_list.size();i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a<b){\n                a+=K;\n                b-=K;\n            }else{\n                a-=K;\n                b+=K;\n            }\n            if(a<0) a=0;\n            if(b<0) b=0;\n            sb.append(a+\" \"+b+\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpfiod2_r5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpfiod2_r5.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfiod2_r5.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpfiod2_r5.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfiod2_r5.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long x = test_list.get(i);\n            long y = test_list.get(i + 1);\n            if (x < K) {\n                x = 0;\n            } else {\n                x -= K;\n            }\n            if (y < K) {\n                y = 0;\n            } else {\n                y -= K;\n            }\n            result.add(x);\n            result.add(y);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpo66i7kee.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpo66i7kee.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo66i7kee.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpo66i7kee.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo66i7kee.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<test_list.size();i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a<K){\n                a=0;\n            }\n            else{\n                a-=K;\n            }\n            if(b<K){\n                b=0;\n            }\n            else{\n                b-=K;\n            }\n            sb.append(a);\n            sb.append(\" \");\n            sb.append(b);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpbougv3d1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbougv3d1.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbougv3d1.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbougv3d1.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbougv3d1.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a).append(\" \").append(b).append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp21s60zck.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp21s60zck.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp21s60zck.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp21s60zck.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp21s60zck.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            trimmed_list.add(new Pair<Long, Long>(Math.max(pair.getValue0() - K, 0L), Math.max(pair.getValue1() - K, 0L)));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpb6vx56z5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb6vx56z5.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:17: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(Math.max(pair.getValue0() - K, 0L), Math.max(pair.getValue1() - K, 0L)));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:20: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpw0pp3zu6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here.\n        return \"\";\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp2v4l_tn1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2v4l_tn1.java:15: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2v4l_tn1.java:15: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2v4l_tn1.java:15: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2v4l_tn1.java:15: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp52tqaif9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp52tqaif9.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp52tqaif9.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp52tqaif9.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp52tqaif9.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            sb.append(first + \" \" + second + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmph02wh5gf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(first);\n            result.add(second);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpnohoavue.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpnohoavue.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnohoavue.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpnohoavue.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnohoavue.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            sb.append(first + \" \" + second + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmph02wh5gf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(first);\n            result.add(second);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmph4dq0dw3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmph4dq0dw3.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph4dq0dw3.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph4dq0dw3.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph4dq0dw3.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=0;i<test_list.size();i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a<K){\n                a=0;\n            }else{\n                a-=K;\n            }\n            if(b<K){\n                b=0;\n            }else{\n                b-=K;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<result.size();i++){\n            sb.append(result.get(i));\n            if(i!=result.size()-1){\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp_xk14gb9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_xk14gb9.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_xk14gb9.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_xk14gb9.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_xk14gb9.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            long min = Math.min(a, b);\n            long max = Math.max(a, b);\n            if (min + K >= max) {\n                sb.append(min + \" \" + max + \" \");\n            } else {\n                sb.append(min + K + \" \" + (max - K) + \" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpa24s7vb0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa24s7vb0.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpa24s7vb0.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa24s7vb0.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpa24s7vb0.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long a = pair.getValue0();\n            long b = pair.getValue1();\n            long diff = b - a;\n            if (diff < 2 * K) {\n                continue;\n            }\n            a += K;\n            b -= K;\n            result_list.add(new Pair<Long, Long>(a, b));\n        }\n        String result = \"\";\n        for (Pair<Long, Long> pair : result_list) {\n            result += pair.getValue0() + \" \" + pair.getValue1() + \" \";\n        }\n        return result.trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpbd7y3bw3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbd7y3bw3.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbd7y3bw3.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbd7y3bw3.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbd7y3bw3.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbd7y3bw3.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbd7y3bw3.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbd7y3bw3.java:25: error: cannot find symbol\n            result_list.add(new Pair<Long, Long>(a, b));\n                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbd7y3bw3.java:28: error: cannot find symbol\n        for (Pair<Long, Long> pair : result_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbd7y3bw3.java:34: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> trimmed_list = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (i % 2 == 0) {\n                trimmed_list.add(test_list.get(i) + K);\n            } else {\n                trimmed_list.add(test_list.get(i) - K);\n            }\n        }\n        return trimmed_list.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpqngo1p40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqngo1p40.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpqngo1p40.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqngo1p40.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            long temp = test_list.get(i);\n            if (temp > K) {\n                temp = temp - K;\n            } else {\n                temp = 0;\n            }\n            result.add(temp);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpif_o1e5b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpif_o1e5b.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpif_o1e5b.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpif_o1e5b.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpif_o1e5b.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpo3pnekg2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpo3pnekg2.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:25: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result_list.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result_list) {\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpbwetlxpy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbwetlxpy.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwetlxpy.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwetlxpy.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwetlxpy.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwetlxpy.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwetlxpy.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwetlxpy.java:29: error: cannot find symbol\n            result_list.add(new Pair<Long, Long>(first, second));\n                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwetlxpy.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpbwetlxpy.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.w",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp9n_kd6cw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a);\n            sb.append(\" \");\n            sb.append(b);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp55akg14n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<test_list.size();i+=2){\n            long x = test_list.get(i);\n            long y = test_list.get(i+1);\n            if(x<K){\n                x=0;\n            }else{\n                x=x-K;\n            }\n            if(y<K){\n                y=0;\n            }else{\n                y=y-K;\n            }\n            sb.append(x).append(\" \").append(y).append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp2wuy83a6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2wuy83a6.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2wuy83a6.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2wuy83a6.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2wuy83a6.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp9n_kd6cw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxrh_eym2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first = first - K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second = second - K;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpehicamqt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpehicamqt.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpehicamqt.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpehicamqt.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpehicamqt.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpehicamqt.java:29: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpehicamqt.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpehicamqt.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpehicamqt.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            long temp = test_list.get(i);\n            if(temp > K) {\n                result.add(temp - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpa0u71ev5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa0u71ev5.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpa0u71ev5.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa0u71ev5.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpa0u71ev5.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                sb.append(test_list.get(i));\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmp44mvv1ke.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp44mvv1ke.java:24: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp44mvv1ke.java:24: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp44mvv1ke.java:24: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp44mvv1ke.java:24: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            long min = Math.min(a, b);\n            long max = Math.max(a, b);\n            if (max - min <= K) {\n                result.add(min);\n                result.add(max);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmpizcqz2dr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpizcqz2dr.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizcqz2dr.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpizcqz2dr.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpizcqz2dr.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<>();\n        for (int i = 0; i < pair_list.size(); i++) {\n            Pair<Long, Long> pair = pair_list.get(i);\n            if (pair.getValue0() < K) {\n                trimmed_list.add(new Pair<>(pair.getValue0(), pair.getValue1()));\n            } else {\n                trimmed_list.add(new Pair<>(pair.getValue0() - K, pair.getValue1()));\n            }\n            if (pair.getValue1() > 100 - K) {\n                trimmed_list.add(new Pair<>(pair.getValue0(), pair.getValue1()));\n            } else {\n                trimmed_list.add(new Pair<>(pair.getValue0(), pair.getValue1() + K));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < trimmed_list.size(); i++) {\n            sb.append(trimmed_list.get(i).getValue0());\n            sb.append(\",\");\n            sb.append(trimmed_list.get(i).getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmpovtta51b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpovtta51b.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpovtta51b.java:13: error: cannot find symbol\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpovtta51b.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpovtta51b.java:17: error: cannot find symbol\n            Pair<Long, Long> pair = pair_list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpovtta51b.java:19: error: cannot find symbol\n                trimmed_list.add(new Pair<>(pair.getValue0(), pair.getValue1()));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpovtta51b.java:21: error: cannot find symbol\n                trimmed_list.add(new Pair<>(pair.getValue0() - K, pair.getValue1()));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpovtta51b.java:24: error: cannot find symbol\n                trimmed_list.add(new Pair<>(pair.getValue0(), pair.getValue1()));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpovtta51b.java:26: error: cannot find symbol\n                trimmed_list.add(new Pair<>(pair.getValue0(), pair.getValue1() + K));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpovtta51b.java:39: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here.\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmpt1l1qvp2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt1l1qvp2.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpt1l1qvp2.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt1l1qvp2.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpt1l1qvp2.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size() - 1; i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        for (int i = 0; i < pair_list.size(); i++) {\n            Pair<Long, Long> pair = pair_list.get(i);\n            if (pair.getValue0() < K) {\n                pair_list.remove(i);\n                i--;\n            } else {\n                pair_list.set(i, new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() - K));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < pair_list.size(); i++) {\n            Pair<Long, Long> pair = pair_list.get(i);\n            sb.append(pair.getValue0() + \" \");\n            sb.append(pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmp02mnpysc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp02mnpysc.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp02mnpysc.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp02mnpysc.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp02mnpysc.java:16: error: cannot find symbol\n            Pair<Long, Long> pair = pair_list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp02mnpysc.java:21: error: cannot find symbol\n                pair_list.set(i, new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() - K));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp02mnpysc.java:26: error: cannot find symbol\n            Pair<Long, Long> pair = pair_list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp02mnpysc.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp02mnpysc.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            sb.append(first + \" \" + second + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmph02wh5gf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph02wh5gf.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Pair<Long, Long>> list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : list) {\n            long x = pair.getValue0();\n            long y = pair.getValue1();\n            if (x - K < 0) {\n                x = 0;\n            } else {\n                x -= K;\n            }\n            if (y + K > 1000000000) {\n                y = 1000000000;\n            } else {\n                y += K;\n            }\n            result.add(new Pair<>(x, y));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0()).append(\" \").append(pair.getValue1()).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmp0uq5jlvb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0uq5jlvb.java:14: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0uq5jlvb.java:16: error: cannot find symbol\n            list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0uq5jlvb.java:18: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0uq5jlvb.java:19: error: cannot find symbol\n        for (Pair<Long, Long> pair : list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0uq5jlvb.java:32: error: cannot find symbol\n            result.add(new Pair<>(x, y));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0uq5jlvb.java:35: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0uq5jlvb.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0uq5jlvb.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.wit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                sb.append(0);\n                sb.append(\" \");\n            } else {\n                sb.append(test_list.get(i));\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmp0j0ntfg6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0j0ntfg6.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0j0ntfg6.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0j0ntfg6.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp0j0ntfg6.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            test_pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : test_pair_list) {\n            long x = pair.getValue0();\n            long y = pair.getValue1();\n            if (x - K > 0) {\n                x -= K;\n            } else {\n                x = 0;\n            }\n            if (y + K < 1000000001) {\n                y += K;\n            } else {\n                y = 1000000000;\n            }\n            result_pair_list.add(new Pair<Long, Long>(x, y));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result_pair_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmp8claixy_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8claixy_.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8claixy_.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8claixy_.java:13: error: cannot find symbol\n            test_pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8claixy_.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8claixy_.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n                                                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8claixy_.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : test_pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8claixy_.java:29: error: cannot find symbol\n            result_pair_list.add(new Pair<Long, Long>(x, y));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8claixy_.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result_pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp8claixy_.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_pair_list = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            trimmed_pair_list.add(new Pair<Long, Long>(pair.getValue0() + K, pair.getValue1() - K));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_pair_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmpeehm__gm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpeehm__gm.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpeehm__gm.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpeehm__gm.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpeehm__gm.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpeehm__gm.java:17: error: cannot find symbol\n            trimmed_pair_list.add(new Pair<Long, Long>(pair.getValue0() + K, pair.getValue1() - K));\n                                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpeehm__gm.java:20: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpeehm__gm.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpeehm__gm.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            long temp = test_list.get(i);\n            if (temp > K) {\n                result.add(temp - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmpq3va9yjz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpq3va9yjz.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpq3va9yjz.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpq3va9yjz.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpq3va9yjz.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=0; i<test_list.size(); i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a<b){\n                a = a+K;\n                b = b-K;\n            }\n            else{\n                a = a-K;\n                b = b+K;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmp5gqnt3ls.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5gqnt3ls.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5gqnt3ls.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5gqnt3ls.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5gqnt3ls.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a);\n            sb.append(\" \");\n            sb.append(b);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp55akg14n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            if (pair.getValue0() > K) {\n                pair = new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1());\n            }\n            if (pair.getValue1() > K) {\n                pair = new Pair<Long, Long>(pair.getValue0(), pair.getValue1() - K);\n            }\n            result.add(pair);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmp2iubt3o7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2iubt3o7.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2iubt3o7.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2iubt3o7.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2iubt3o7.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2iubt3o7.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2iubt3o7.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2iubt3o7.java:18: error: cannot find symbol\n                pair = new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1());\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2iubt3o7.java:21: error: cannot find symbol\n                pair = new Pair<Long, Long>(pair.getValue0(), pair.getValue1() - K);\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2iubt3o7.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmp_3cvszj3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_3cvszj3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_3cvszj3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_3cvszj3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_3cvszj3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            test_pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_pair_list.size(); i++) {\n            Pair<Long, Long> temp_pair = test_pair_list.get(i);\n            if (temp_pair.getValue0() - K < 0) {\n                temp_pair = new Pair<Long, Long>(0L, temp_pair.getValue1() - K);\n            } else {\n                temp_pair = new Pair<Long, Long>(temp_pair.getValue0() - K, temp_pair.getValue1() - K);\n            }\n            if (temp_pair.getValue1() + K > 100) {\n                temp_pair = new Pair<Long, Long>(temp_pair.getValue0(), 100L);\n            } else {\n                temp_pair = new Pair<Long, Long>(temp_pair.getValue0(), temp_pair.getValue1() + K);\n            }\n            result_pair_list.add(temp_pair);\n        }\n        String result = \"\";\n        for (int i = 0; i < result_pair_list.size(); i++) {\n            result += result_pair_list.get(i).getValue0() + \" \" + result_pair_list.get(i).getValue1() + \" \";\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmpogajm5fj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpogajm5fj.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpogajm5fj.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpogajm5fj.java:13: error: cannot find symbol\n            test_pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpogajm5fj.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpogajm5fj.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_pair_list = new ArrayList<Pair<Long, Long>>();\n                                                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpogajm5fj.java:17: error: cannot find symbol\n            Pair<Long, Long> temp_pair = test_pair_list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpogajm5fj.java:19: error: cannot find symbol\n                temp_pair = new Pair<Long, Long>(0L, temp_pair.getValue1() - K);\n                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpogajm5fj.java:21: error: cannot find symbol\n                temp_pair = new Pair<Long, Long>(temp_pair.getValue0() - K, temp_pair.getValue1() - K);\n                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpogajm5fj.java:24: error: cannot find symbol\n                temp_pair = new Pair<Long, Long>(temp_pair.getValue0(), 100L);\n              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122941,
      "stdout": "",
      "stderr": "/tmp/tmpqqvz9ddo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqqvz9ddo.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpqqvz9ddo.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqqvz9ddo.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpqqvz9ddo.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=0;i<test_list.size();i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a>b){\n                a = a-K;\n            }else{\n                b = b-K;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<result.size();i++){\n            sb.append(result.get(i));\n            if(i!=result.size()-1){\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmp3k4swch3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3k4swch3.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3k4swch3.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3k4swch3.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3k4swch3.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(new Pair<>(first, second));\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmp2oi0ckjy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2oi0ckjy.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2oi0ckjy.java:25: error: cannot find symbol\n            result.add(new Pair<>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2oi0ckjy.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp2oi0ckjy.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2oi0ckjy.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            }\n            else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmpf6fq3feu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpf6fq3feu.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpf6fq3feu.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpf6fq3feu.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpf6fq3feu.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            Pair<Long, Long> p = new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1));\n            result.add(p);\n        }\n        for (int i = 0; i < result.size(); i++) {\n            Pair<Long, Long> p = result.get(i);\n            if (p.getValue0() < K) {\n                p.setAt0(0L);\n            } else {\n                p.setAt0(p.getValue0() - K);\n            }\n            if (p.getValue1() < K) {\n                p.setAt1(0L);\n            } else {\n                p.setAt1(p.getValue1() - K);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < result.size(); i++) {\n            Pair<Long, Long> p = result.get(i);\n            sb.append(p.getValue0() + \" \" + p.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmpjemptaz0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpjemptaz0.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjemptaz0.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjemptaz0.java:13: error: cannot find symbol\n            Pair<Long, Long> p = new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1));\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjemptaz0.java:13: error: cannot find symbol\n            Pair<Long, Long> p = new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjemptaz0.java:17: error: cannot find symbol\n            Pair<Long, Long> p = result.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjemptaz0.java:31: error: cannot find symbol\n            Pair<Long, Long> p = result.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjemptaz0.java:37: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpjemptaz0.java:37: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            result.add(new Pair<>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmpp5abuaqj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpp5abuaqj.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp5abuaqj.java:13: error: cannot find symbol\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp5abuaqj.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp5abuaqj.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp5abuaqj.java:29: error: cannot find symbol\n            result.add(new Pair<>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp5abuaqj.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp5abuaqj.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpp5abuaqj.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> trimmed_list = new ArrayList<Long>();\n        for (Long i : test_list) {\n            if (i > K) {\n                trimmed_list.add(i - K);\n            } else {\n                trimmed_list.add(0L);\n            }\n        }\n        return trimmed_list.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmp_3_t5kc2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_3_t5kc2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_3_t5kc2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_3_t5kc2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_3_t5kc2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            result_list.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmpd1plg0sy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpd1plg0sy.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd1plg0sy.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd1plg0sy.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd1plg0sy.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd1plg0sy.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<Pair<Long, Long>>();\n                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd1plg0sy.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd1plg0sy.java:29: error: cannot find symbol\n            result_list.add(new Pair<Long, Long>(first, second));\n                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd1plg0sy.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpd1plg0sy.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.w",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpo3pnekg2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpo3pnekg2.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:25: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpo3pnekg2.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here.\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmpah9girr2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpah9girr2.java:21: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpah9girr2.java:21: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpah9girr2.java:21: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpah9girr2.java:21: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "/tmp/tmpkibqs2zl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkibqs2zl.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpkibqs2zl.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpkibqs2zl.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpkibqs2zl.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpkibqs2zl.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpkibqs2zl.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpkibqs2zl.java:29: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpkibqs2zl.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpkibqs2zl.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpw0pp3zu6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp9ats3f5c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9ats3f5c.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9ats3f5c.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9ats3f5c.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9ats3f5c.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9ats3f5c.java:29: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9ats3f5c.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9ats3f5c.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9ats3f5c.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppheth495.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppheth495.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppheth495.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppheth495.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppheth495.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(first);\n            result.add(second);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmph4dq0dw3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmph4dq0dw3.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph4dq0dw3.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph4dq0dw3.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmph4dq0dw3.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            trimmed_list.add(new Pair<Long, Long>(pair.getValue0() + K, pair.getValue1() - K));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpi7lo9s7t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi7lo9s7t.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi7lo9s7t.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi7lo9s7t.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi7lo9s7t.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi7lo9s7t.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi7lo9s7t.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi7lo9s7t.java:17: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(pair.getValue0() + K, pair.getValue1() - K));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi7lo9s7t.java:20: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpi7lo9s7t.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) <= K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmprxbi2df9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprxbi2df9.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmprxbi2df9.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprxbi2df9.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmprxbi2df9.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<>();\n        for (int i = 0; i < pair_list.size(); i++) {\n            Pair<Long, Long> pair = pair_list.get(i);\n            if (pair.getValue0() - K > 0) {\n                pair = new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1());\n            } else {\n                pair = new Pair<Long, Long>(0L, pair.getValue1());\n            }\n            if (pair.getValue1() + K < 1000000000) {\n                pair = new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + K);\n            } else {\n                pair = new Pair<Long, Long>(pair.getValue0(), 1000000000L);\n            }\n            result_list.add(pair);\n        }\n        String result = \"\";\n        for (int i = 0; i < result_list.size(); i++) {\n            Pair<Long, Long> pair = result_list.get(i);\n            result += pair.getValue0() + \" \" + pair.getValue1() + \" \";\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp04bz4uxa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp04bz4uxa.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:17: error: cannot find symbol\n            Pair<Long, Long> pair = pair_list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:19: error: cannot find symbol\n                pair = new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1());\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:21: error: cannot find symbol\n                pair = new Pair<Long, Long>(0L, pair.getValue1());\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:24: error: cannot find symbol\n                pair = new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + K);\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:26: error: cannot find symbol\n                pair = new Pair<Long, Long>(pair.getValue0(), 1000000000L);\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:32: error: cannot find symbol\n            Pair<Long, Long> pair = result_list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp04bz4uxa.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output please use System.out.println\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpg1mjvumw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpg1mjvumw.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpg1mjvumw.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpg1mjvumw.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpg1mjvumw.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpw0pp3zu6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpw0pp3zu6.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> p : pair_list) {\n            long first = p.getValue0();\n            long second = p.getValue1();\n            if (first - K > 0) {\n                first = first - K;\n            } else {\n                first = 0;\n            }\n            if (second + K < 1000000000) {\n                second = second + K;\n            } else {\n                second = 1000000000;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> p : result) {\n            sb.append(p.getValue0());\n            sb.append(\" \");\n            sb.append(p.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp1t4wy2qg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1t4wy2qg.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1t4wy2qg.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1t4wy2qg.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1t4wy2qg.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1t4wy2qg.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1t4wy2qg.java:16: error: cannot find symbol\n        for (Pair<Long, Long> p : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1t4wy2qg.java:29: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1t4wy2qg.java:32: error: cannot find symbol\n        for (Pair<Long, Long> p : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1t4wy2qg.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            long temp = test_list.get(i);\n            if (temp > K) {\n                result.add(temp - K);\n            } else if (temp < K) {\n                result.add(temp + K);\n            } else {\n                result.add(temp);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmppbcw8i5g.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppbcw8i5g.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppbcw8i5g.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppbcw8i5g.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppbcw8i5g.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            trimmed_list.add(new Pair<Long, Long>(Math.max(pair.getValue0() - K, 0L), Math.max(pair.getValue1() - K, 0L)));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpb6vx56z5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb6vx56z5.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:17: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(Math.max(pair.getValue0() - K, 0L), Math.max(pair.getValue1() - K, 0L)));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:20: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb6vx56z5.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i) + K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpwnnaega8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwnnaega8.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwnnaega8.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwnnaega8.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwnnaega8.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            if (pair.getValue0() - pair.getValue1() >= K) {\n                result.add(new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() + K));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpv1i2xvf1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpv1i2xvf1.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpv1i2xvf1.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpv1i2xvf1.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpv1i2xvf1.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpv1i2xvf1.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpv1i2xvf1.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpv1i2xvf1.java:18: error: cannot find symbol\n                result.add(new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() + K));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpv1i2xvf1.java:22: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpv1i2xvf1.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            a = Math.max(a - K, 0);\n            b = Math.max(b - K, 0);\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp9de4r_2p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9de4r_2p.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9de4r_2p.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9de4r_2p.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9de4r_2p.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size() - 1; i += 2) {\n            test_pair.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : test_pair) {\n            long x = pair.getValue0();\n            long y = pair.getValue1();\n            if (x < K) {\n                x = 0;\n            } else {\n                x -= K;\n            }\n            if (y > 1000000000 - K) {\n                y = 1000000000;\n            } else {\n                y += K;\n            }\n            result.add(new Pair<Long, Long>(x, y));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpukf6vnag.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpukf6vnag.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpukf6vnag.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpukf6vnag.java:13: error: cannot find symbol\n            test_pair.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpukf6vnag.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpukf6vnag.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpukf6vnag.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : test_pair) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpukf6vnag.java:29: error: cannot find symbol\n            result.add(new Pair<Long, Long>(x, y));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpukf6vnag.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpukf6vnag.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i=0;i<test_list.size();i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a<K){\n                a=0;\n            }\n            else{\n                a-=K;\n            }\n            if(b<K){\n                b=0;\n            }\n            else{\n                b-=K;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<result.size();i++){\n            sb.append(result.get(i));\n            if(i!=result.size()-1){\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp1tlcxu6p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1tlcxu6p.java:43: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1tlcxu6p.java:43: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1tlcxu6p.java:43: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1tlcxu6p.java:43: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long x = test_list.get(i);\n            long y = test_list.get(i + 1);\n            x = Math.max(x - K, 0);\n            y = Math.max(y - K, 0);\n            sb.append(x + \" \" + y + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp_t4ehtup.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_t4ehtup.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_t4ehtup.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t4ehtup.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_t4ehtup.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> list = new ArrayList<>();\n        for (long i : test_list) {\n            if (i < K) {\n                list.add(i);\n            }\n        }\n        return list.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpgd5xi0h8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpgd5xi0h8.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgd5xi0h8.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpgd5xi0h8.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgd5xi0h8.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        String result = \"\";\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result += (test_list.get(i) - K) + \" \";\n            } else {\n                result += \"0 \";\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp13nkum90.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp13nkum90.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp13nkum90.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp13nkum90.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp13nkum90.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < list.size(); i++) {\n            Pair<Long, Long> p = list.get(i);\n            if (p.getValue0() - K > 0 && p.getValue1() + K < 1000000000) {\n                result.add(new Pair<Long, Long>(p.getValue0() - K, p.getValue1() + K));\n            } else if (p.getValue0() - K > 0) {\n                result.add(new Pair<Long, Long>(p.getValue0() - K, p.getValue1()));\n            } else if (p.getValue1() + K < 1000000000) {\n                result.add(new Pair<Long, Long>(p.getValue0(), p.getValue1() + K));\n            } else {\n                result.add(new Pair<Long, Long>(p.getValue0(), p.getValue1()));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < result.size(); i++) {\n            Pair<Long, Long> p = result.get(i);\n            sb.append(p.getValue0() + \" \" + p.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp386vqsh1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp386vqsh1.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:13: error: cannot find symbol\n            list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:17: error: cannot find symbol\n            Pair<Long, Long> p = list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:19: error: cannot find symbol\n                result.add(new Pair<Long, Long>(p.getValue0() - K, p.getValue1() + K));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:21: error: cannot find symbol\n                result.add(new Pair<Long, Long>(p.getValue0() - K, p.getValue1()));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:23: error: cannot find symbol\n                result.add(new Pair<Long, Long>(p.getValue0(), p.getValue1() + K));\n                               ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp386vqsh1.java:25: error: cannot ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(i % 2 == 0) {\n                result.add(test_list.get(i) + K);\n            } else {\n                result.add(test_list.get(i) - K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpyextg6wu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpyextg6wu.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyextg6wu.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyextg6wu.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpyextg6wu.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 100 - K) {\n                second = 100;\n            } else {\n                second += K;\n            }\n            result_list.add(new Pair<Long, Long>(first, second));\n        }\n        String result = \"\";\n        for (Pair<Long, Long> pair : result_list) {\n            result += pair.getValue0() + \" \" + pair.getValue1() + \" \";\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp_eu0s5r0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_eu0s5r0.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_eu0s5r0.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_eu0s5r0.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_eu0s5r0.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_eu0s5r0.java:29: error: cannot find symbol\n            result_list.add(new Pair<Long, Long>(first, second));\n                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_eu0s5r0.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_eu0s5r0.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_eu0s5r0.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.w",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        //ArrayList<Long> result = new ArrayList<Long>();\n        String result = \"\";\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result += test_list.get(i) - K;\n            } else {\n                result += 0;\n            }\n            if (i != test_list.size() - 1) {\n                result += \",\";\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmp_yef779g.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_yef779g.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_yef779g.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_yef779g.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp_yef779g.java:29: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i++) {\n            long val = test_list.get(i);\n            if (val > K) {\n                val = K;\n            }\n            sb.append(val);\n            if (i != test_list.size() - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpgoio7h45.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpgoio7h45.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgoio7h45.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpgoio7h45.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgoio7h45.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            long min = Math.min(a, b);\n            long max = Math.max(a, b);\n            if (min + K >= max - K) {\n                sb.append(min + K);\n                sb.append(\" \");\n                sb.append(max - K);\n                sb.append(\" \");\n            } else {\n                sb.append(min);\n                sb.append(\" \");\n                sb.append(max);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpxzofbib9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxzofbib9.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxzofbib9.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxzofbib9.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxzofbib9.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            result.add(new Pair<Long, Long>(a, b));\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpm9o53hpi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpm9o53hpi.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpm9o53hpi.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpm9o53hpi.java:25: error: cannot find symbol\n            result.add(new Pair<Long, Long>(a, b));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpm9o53hpi.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpm9o53hpi.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpm9o53hpi.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(test_list.get(i) + K);\n            } else {\n                result.add(test_list.get(i) - K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpk_7tu_vf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpk_7tu_vf.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk_7tu_vf.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpk_7tu_vf.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk_7tu_vf.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> temp_list = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                temp_list.add(test_list.get(i));\n            }\n        }\n        return temp_list.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmpopuzunii.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpopuzunii.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpopuzunii.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpopuzunii.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpopuzunii.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first > K) {\n                first -= K;\n            } else {\n                first = 0;\n            }\n            if (second > K) {\n                second -= K;\n            } else {\n                second = 0;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmp1g0skumt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1g0skumt.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1g0skumt.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1g0skumt.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1g0skumt.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1g0skumt.java:29: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1g0skumt.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1g0skumt.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1g0skumt.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < test_list.size(); i+=2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a < K) {\n                a = 0;\n            }\n            else {\n                a -= K;\n            }\n            if(b < K) {\n                b = 0;\n            }\n            else {\n                b -= K;\n            }\n            sb.append(a);\n            sb.append(\" \");\n            sb.append(b);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmp5io9sc6h.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5io9sc6h.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5io9sc6h.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5io9sc6h.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5io9sc6h.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            Pair<Long, Long> pair = new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1));\n            test_pair_list.add(pair);\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_pair_list.size(); i++) {\n            Pair<Long, Long> pair = test_pair_list.get(i);\n            if (pair.getValue0() < K) {\n                result.add(pair);\n            } else if (pair.getValue1() < K) {\n                result.add(pair);\n            } else {\n                Pair<Long, Long> new_pair = new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() - K);\n                result.add(new_pair);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < result.size(); i++) {\n            Pair<Long, Long> pair = result.get(i);\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmpzk5im7gq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzk5im7gq.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzk5im7gq.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair_list = new ArrayList<Pair<Long, Long>>();\n                                                                   ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzk5im7gq.java:13: error: cannot find symbol\n            Pair<Long, Long> pair = new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1));\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzk5im7gq.java:13: error: cannot find symbol\n            Pair<Long, Long> pair = new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1));\n                                        ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzk5im7gq.java:16: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzk5im7gq.java:16: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzk5im7gq.java:18: error: cannot find symbol\n            Pair<Long, Long> pair = test_pair_list.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzk5im7gq.java:24: error: cannot find symbol\n                Pair<Long, Long> new_pair = new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() - K);\n                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpzk5im7gq.java:24: error: cannot find symbol\n                Pair<Long, Long> new_pair = new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() - K);\n                      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a);\n            sb.append(\" \");\n            sb.append(b);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp55akg14n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp55akg14n.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < second) {\n                first += K;\n                second -= K;\n            } else {\n                first -= K;\n                second += K;\n            }\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmp51z0gnvl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp51z0gnvl.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp51z0gnvl.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp51z0gnvl.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp51z0gnvl.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp51z0gnvl.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp51z0gnvl.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp51z0gnvl.java:26: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp51z0gnvl.java:29: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp51z0gnvl.java:35: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long x = test_list.get(i);\n            long y = test_list.get(i + 1);\n            if (x < K) {\n                x = 0;\n            } else {\n                x -= K;\n            }\n            if (y < K) {\n                y = 0;\n            } else {\n                y -= K;\n            }\n            sb.append(x).append(\" \").append(y).append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmprr5664om.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprr5664om.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmprr5664om.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprr5664om.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmprr5664om.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0() + \" \" + pair.getValue1() + \" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmptyqeqewg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptyqeqewg.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptyqeqewg.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptyqeqewg.java:13: error: cannot find symbol\n            list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptyqeqewg.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptyqeqewg.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptyqeqewg.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptyqeqewg.java:29: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptyqeqewg.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptyqeqewg.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmp1c7ekwgd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1c7ekwgd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1c7ekwgd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1c7ekwgd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1c7ekwgd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        String result = \"\";\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result += test_list.get(i) - K;\n            } else {\n                result += 0;\n            }\n            if (i != test_list.size() - 1) {\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmpux1a62la.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpux1a62la.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpux1a62la.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpux1a62la.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpux1a62la.java:28: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first - K < 0) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second + K > 1000000000) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            sb.append(first + \" \" + second + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmpj6r2e0nh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpj6r2e0nh.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj6r2e0nh.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpj6r2e0nh.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpj6r2e0nh.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxrh_eym2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            sb.append(first).append(\" \").append(second).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmp6smf76ne.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp6smf76ne.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp6smf76ne.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6smf76ne.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp6smf76ne.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122939,
      "stdout": "",
      "stderr": "/tmp/tmpxrh_eym2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxrh_eym2.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxc7q3379.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxc7q3379.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long first = test_list.get(i);\n            long second = test_list.get(i + 1);\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second < K) {\n                second = 0;\n            } else {\n                second -= K;\n            }\n            result.add(first);\n            result.add(second);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmpc8x63qyy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpc8x63qyy.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpc8x63qyy.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc8x63qyy.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpc8x63qyy.java:31: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(test_list.get(i) + K);\n            } else {\n                result.add(test_list.get(i) - K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "/tmp/tmpk_7tu_vf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpk_7tu_vf.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk_7tu_vf.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpk_7tu_vf.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpk_7tu_vf.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here.\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long x = test_list.get(i);\n            long y = test_list.get(i + 1);\n            if (x < K) {\n                x = 0;\n            } else {\n                x -= K;\n            }\n            if (y < K) {\n                y = 0;\n            } else {\n                y -= K;\n            }\n            result.add(x);\n            result.add(y);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmpwz09467c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwz09467c.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwz09467c.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwz09467c.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpwz09467c.java:32: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            if (pair.getValue0() < K) {\n                trimmed_list.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1()));\n            } else if (pair.getValue1() < K) {\n                trimmed_list.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1()));\n            } else {\n                trimmed_list.add(new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() - K));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmpik_6lxkk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpik_6lxkk.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpik_6lxkk.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpik_6lxkk.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpik_6lxkk.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpik_6lxkk.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpik_6lxkk.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpik_6lxkk.java:18: error: cannot find symbol\n                trimmed_list.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1()));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpik_6lxkk.java:20: error: cannot find symbol\n                trimmed_list.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1()));\n                                     ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpik_6lxkk.java:22: error: cannot find symbol\n                trimmed_list.add(new Pair<Long, Long>(pair.getValue0() - K, pair.getValue1() - K));\n                                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a < K){\n                a = 0;\n            }\n            if(b < K){\n                b = 0;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < result.size(); i++){\n            sb.append(result.get(i));\n            if(i != result.size()-1){\n                sb.append(\",\");\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpfgib9sk6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpfgib9sk6.java:37: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfgib9sk6.java:37: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpfgib9sk6.java:37: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpfgib9sk6.java:37: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i++) {\n            long x = test_list.get(i);\n            if (x > K) {\n                x = K;\n            }\n            sb.append(x);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpm4tfmvvt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpm4tfmvvt.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpm4tfmvvt.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpm4tfmvvt.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpm4tfmvvt.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            result_list.add(new Pair<>(first, second));\n        }\n        String result = \"\";\n        for (Pair<Long, Long> pair : result_list) {\n            result += pair.getValue0() + \" \" + pair.getValue1() + \" \";\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "/tmp/tmp3ih_1_id.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3ih_1_id.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3ih_1_id.java:13: error: cannot find symbol\n            pair_list.add(new Pair<>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3ih_1_id.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_list = new ArrayList<>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3ih_1_id.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3ih_1_id.java:29: error: cannot find symbol\n            result_list.add(new Pair<>(first, second));\n                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3ih_1_id.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3ih_1_id.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp3ih_1_id.java:38: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            long temp = test_list.get(i);\n            if (temp > K) {\n                result.add(temp - K);\n            } else {\n                result.add(temp);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpb_8f4csd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb_8f4csd.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb_8f4csd.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb_8f4csd.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpb_8f4csd.java:26: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if(a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if(b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a + \" \" + b + \" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmphsrjdcnh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphsrjdcnh.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphsrjdcnh.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphsrjdcnh.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphsrjdcnh.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_pair_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            trimmed_pair_list.add(new Pair<Long, Long>(pair.getValue0() + K, pair.getValue1() - K));\n        }\n        ArrayList<Long> trimmed_list = new ArrayList<Long>();\n        for (Pair<Long, Long> pair : trimmed_pair_list) {\n            trimmed_list.add(pair.getValue0());\n            trimmed_list.add(pair.getValue1());\n        }\n        return trimmed_list.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmp1f0t4aqs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1f0t4aqs.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1f0t4aqs.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1f0t4aqs.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1f0t4aqs.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1f0t4aqs.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_pair_list = new ArrayList<Pair<Long, Long>>();\n                                                                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1f0t4aqs.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1f0t4aqs.java:17: error: cannot find symbol\n            trimmed_pair_list.add(new Pair<Long, Long>(pair.getValue0() + K, pair.getValue1() - K));\n                                      ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1f0t4aqs.java:20: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp1f0t4aqs.java:27: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.wit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmp7ne62z6y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7ne62z6y.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ne62z6y.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7ne62z6y.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp7ne62z6y.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpepi75p6h.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpepi75p6h.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpepi75p6h.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpepi75p6h.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpepi75p6h.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmphnbo9rzs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphnbo9rzs.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphnbo9rzs.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphnbo9rzs.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmphnbo9rzs.java:20: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpxvvn1vgx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpxvvn1vgx.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpnaou0yd3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpnaou0yd3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnaou0yd3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpnaou0yd3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnaou0yd3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i+=2){\n            long a = test_list.get(i);\n            long b = test_list.get(i+1);\n            if(a < K){\n                a = 0;\n            }\n            if(b < K){\n                b = 0;\n            }\n            result.add(a);\n            result.add(b);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmp5dy69dn4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5dy69dn4.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5dy69dn4.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5dy69dn4.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5dy69dn4.java:30: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpnaou0yd3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpnaou0yd3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnaou0yd3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpnaou0yd3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnaou0yd3.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : list) {\n            long x = pair.getValue0();\n            long y = pair.getValue1();\n            if (x < K) {\n                x = 0;\n            } else {\n                x -= K;\n            }\n            if (y > 1000000000 - K) {\n                y = 1000000000;\n            } else {\n                y += K;\n            }\n            result.add(new Pair<Long, Long>(x, y));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0()).append(\" \").append(pair.getValue1()).append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmptj5mg1ub.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptj5mg1ub.java:14: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptj5mg1ub.java:14: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long, Long>>();\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptj5mg1ub.java:16: error: cannot find symbol\n            list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptj5mg1ub.java:18: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptj5mg1ub.java:18: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptj5mg1ub.java:19: error: cannot find symbol\n        for (Pair<Long, Long> pair : list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptj5mg1ub.java:32: error: cannot find symbol\n            result.add(new Pair<Long, Long>(x, y));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptj5mg1ub.java:35: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmptj5mg1ub.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.wit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "/tmp/tmppqujzawd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmppqujzawd.java:25: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < test_list.size(); i+=2) {\n            if(i+1 < test_list.size()) {\n                long first = test_list.get(i);\n                long second = test_list.get(i+1);\n                if(first < K) {\n                    first = 0;\n                } else {\n                    first -= K;\n                }\n                if(second < K) {\n                    second = 0;\n                } else {\n                    second -= K;\n                }\n                result.add(first);\n                result.add(second);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpr_7z4as1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpr_7z4as1.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpr_7z4as1.java:36: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp9n_kd6cw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            result.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : result) {\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpgklrsnlc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpgklrsnlc.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgklrsnlc.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgklrsnlc.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgklrsnlc.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgklrsnlc.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n                                                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgklrsnlc.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgklrsnlc.java:29: error: cannot find symbol\n            result.add(new Pair<Long, Long>(first, second));\n                           ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgklrsnlc.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : result) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpgklrsnlc.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b < K) {\n                b = 0;\n            } else {\n                b -= K;\n            }\n            sb.append(a).append(\" \").append(b).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpstl905de.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpstl905de.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpstl905de.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpstl905de.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpstl905de.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) > K) {\n                result.add(test_list.get(i) - K);\n            } else {\n                result.add(0L);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmp9n_kd6cw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp9n_kd6cw.java:22: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            long a = test_list.get(i);\n            long b = test_list.get(i + 1);\n            if (a < K) {\n                a = 0;\n            } else {\n                a -= K;\n            }\n            if (b > 1000000000 - K) {\n                b = 1000000000;\n            } else {\n                b += K;\n            }\n            sb.append(a).append(\" \").append(b).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmpnhqofke7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpnhqofke7.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnhqofke7.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpnhqofke7.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpnhqofke7.java:33: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            test_pair.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> result_pair = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_pair.size(); i++) {\n            Pair<Long, Long> pair = test_pair.get(i);\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            result_pair.add(new Pair<Long, Long>(first, second));\n        }\n        ArrayList<Long> result_list = new ArrayList<Long>();\n        for (int i = 0; i < result_pair.size(); i++) {\n            Pair<Long, Long> pair = result_pair.get(i);\n            result_list.add(pair.getValue0());\n            result_list.add(pair.getValue1());\n        }\n        return result_list.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmp5luf9w01.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5luf9w01.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5luf9w01.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> test_pair = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5luf9w01.java:13: error: cannot find symbol\n            test_pair.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5luf9w01.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_pair = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5luf9w01.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> result_pair = new ArrayList<Pair<Long, Long>>();\n                                                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5luf9w01.java:17: error: cannot find symbol\n            Pair<Long, Long> pair = test_pair.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5luf9w01.java:30: error: cannot find symbol\n            result_pair.add(new Pair<Long, Long>(first, second));\n                                ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5luf9w01.java:34: error: cannot find symbol\n            Pair<Long, Long> pair = result_pair.get(i);\n            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5luf9w01.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < test_list.size(); i += 2) {\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n        }\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long, Long> pair : pair_list) {\n            long first = pair.getValue0();\n            long second = pair.getValue1();\n            if (first < K) {\n                first = 0;\n            } else {\n                first -= K;\n            }\n            if (second > 1000000000 - K) {\n                second = 1000000000;\n            } else {\n                second += K;\n            }\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Pair<Long, Long> pair : trimmed_list) {\n            sb.append(pair.getValue0());\n            sb.append(\" \");\n            sb.append(pair.getValue1());\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "/tmp/tmp5qstmo6u.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5qstmo6u.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5qstmo6u.java:11: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> pair_list = new ArrayList<Pair<Long, Long>>();\n                                                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5qstmo6u.java:13: error: cannot find symbol\n            pair_list.add(new Pair<Long, Long>(test_list.get(i), test_list.get(i + 1)));\n                              ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5qstmo6u.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                  ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5qstmo6u.java:15: error: cannot find symbol\n        ArrayList<Pair<Long, Long>> trimmed_list = new ArrayList<Pair<Long, Long>>();\n                                                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5qstmo6u.java:16: error: cannot find symbol\n        for (Pair<Long, Long> pair : pair_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5qstmo6u.java:29: error: cannot find symbol\n            trimmed_list.add(new Pair<Long, Long>(first, second));\n                                 ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5qstmo6u.java:32: error: cannot find symbol\n        for (Pair<Long, Long> pair : trimmed_list) {\n             ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmp5qstmo6u.java:41: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each pair by k in the given pair array list.\n    public static String trimTuple(ArrayList<Long> test_list, long K) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) < K) {\n                result.add(test_list.get(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (1l)).equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long>)Pair.with(7l, 8l, 4l, 9l), (Pair<Long, Long, Long, Long>)Pair.with(11l, 8l, 12l, 4l), (Pair<Long, Long, Long, Long>)Pair.with(4l, 1l, 7l, 8l), (Pair<Long, Long, Long, Long>)Pair.with(3l, 6l, 9l, 7l)))), (1l)).equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "/tmp/tmpz2yqr9eb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                         ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                            ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Long, Long, Long, Long, Long>)Pair.with(9l, 1l, 2l, 3l, 5l), (Pair<Long, Long, Long, Long, Long>)Pair.with(4l, 8l, 2l, 1l, 7l)))), (2l)).equals((\"[(2,), (9,), (2,), (2,)]\")));\n                                                                                                                            ^\n  symbol:   class Pair\n  location: class Problem\n/tmp/tmpz2yqr9eb.java:23: error: cannot find symbol\n    assert(trimTuple((new ArrayList<Long>(Arrays.asList((Pair<Long, Long, Long, Long, Long>)Pair.with(5l, 3l, 2l, 1l, 4l), (Pair<Long, Long, Long, Long, Long>)Pair.with(3l, 4l, 9l, 2l, 1l), (Pair<Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}