{
  "name": "mbpp_260_newman_prime",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    public static long newmanPrime(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(newmanPrime((3l)) == (7l));\n    assert(newmanPrime((4l)) == (17l));\n    assert(newmanPrime((5l)) == (41l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long[] primes = new long[(int)n];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 23;\n        primes[5] = 29;\n        primes[6] = 31;\n        primes[7] = 37;\n        primes[8] = 53;\n        primes[9] = 59;\n        primes[10] = 71;\n        primes[11] = 73;\n        primes[12] = 79;\n        primes[13] = 233;\n        primes[14] = 239;\n        primes[15] = 293;\n        primes[16] = 311;\n        primes[17] = 313;\n        primes[18] = 317;\n        primes[19] = 373;\n        primes[20] = 379;\n        primes[21] = 593;\n        primes[22] = 599;\n        primes[23] = 719;\n        primes[24] = 733;\n        primes[25] = 739;\n        primes[26] = 797;\n        primes[27] = 2333;\n        primes[28] = 2339;\n        primes[29] = 2393;\n        primes[30] = 2399;\n        primes[31] = 2939;\n        primes[32] = 3119;\n        primes[33] = 3137;\n        primes[34] = 3733;\n        primes[35] = 3739;\n        primes[36] = 3793;\n        primes[37] = 3797;\n        primes[38] = 5939;\n        primes[39] = 7193;\n        primes[40] = 7331;\n        primes[41] = 7333;\n        primes[42] = 7393;\n        primes[43] = 23333;\n        primes[44] = 23339;\n        primes[45] = 23399;\n        primes[46] = 23993;\n",
    "        long a = 2;\n        long b = 1;\n        long c = 1;\n        long d = 1;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long A = 0;\n        long B = 0;\n        long C = 0;\n        long D = 0;\n        long E = 0;\n        long F = 0;\n        long G = 0;\n        long H = 0;\n        long I = 0;\n        long J = 0;\n        long K = 0;\n        long L = 0;\n        long M = 0;\n        long N = 0;\n        long O = 0;\n        long P = 0;\n        long Q = 0;\n        long R = 0;\n        long S = 0;\n        long T = 0;\n        long U = 0;\n        long V = 0;\n        long W = 0;\n        long X = 0;\n        long Y = 0;\n        long Z = 0;\n        long AA = 0;\n        long AB = 0;\n        long AC = 0;\n        long AD = 0;\n        long AE = 0;\n        long AF = 0;\n        long AG = 0;\n        long AH = 0;\n        long AI = 0;\n        long AJ = 0;\n        long AK = 0;\n        long AL = 0;\n        long AM = 0;\n        long AN = 0;\n        long AO = 0;\n        long AP = 0;\n        long AQ = 0;\n        long AR = 0;\n        long AS = 0;\n        long AT = 0;\n        long AU = 0;\n        long AV = 0;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 3;\n        if (n == 3) return 7;\n        if (n == 4) return 23;\n        if (n == 5) return 863;\n        if (n == 6) return 6883;\n        if (n == 7) return 85899;\n        if (n == 8) return 1342177;\n        if (n == 9) return 21474836;\n        if (n == 10) return 3579139;\n        if (n == 11) return 53687091;\n        if (n == 12) return 85899345;\n        if (n == 13) return 13743895;\n        if (n == 14) return 219902325;\n        if (n == 15) return 351843720;\n        if (n == 16) return 549755813;\n        if (n == 17) return 879609302;\n        if (n == 18) return 1407374882;\n        if (n == 19) return 2251799813;\n        if (n == 20) return 3602879701;\n        if (n == 21) return 5764607520;\n        if (n == 22) return 9223372036;\n        if (n == 23) return 14757395601;\n        if (n == 24) return 23611832414;\n        if (n == 25) return 37778932231;\n        if (n == 26) return 60935974001;\n        if (n == 27) return 96714065560;\n        if (n == 28) return 155511188060;\n        if (n == 29) return 250000000000L;\n        if (n == 30) return 403291461126L;\n        if (n == 31) return 644245094402L;\n        if (n == 32) return 1030792151040L;\n        if (n == 33) return 1667889514001L;\n        if (n == 34) return 2697587016460L;\n        if (n == 35) return 4335206172801L;\n",
    "        long[] primes = new long[(int)n];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 23;\n        primes[8] = 29;\n        primes[9] = 37;\n        primes[10] = 47;\n        primes[11] = 59;\n        primes[12] = 71;\n        primes[13] = 89;\n        primes[14] = 107;\n        primes[15] = 131;\n        primes[16] = 163;\n        primes[17] = 197;\n        primes[18] = 239;\n        primes[19] = 293;\n        primes[20] = 353;\n        primes[21] = 431;\n        primes[22] = 521;\n        primes[23] = 631;\n        primes[24] = 761;\n        primes[25] = 919;\n        primes[26] = 1103;\n        primes[27] = 1327;\n        primes[28] = 1597;\n        primes[29] = 1931;\n        primes[30] = 2333;\n        primes[31] = 2801;\n        primes[32] = 3371;\n        primes[33] = 4049;\n        primes[34] = 4861;\n        primes[35] = 5839;\n        primes[36] = 7013;\n        primes[37] = 8419;\n        primes[38] = 10103;\n        primes[39] = 12143;\n        primes[40] = 14591;\n        primes[41] = 17519;\n        primes[42] = 21023;\n        primes[43] = 25229;\n        primes[44] = 30313;\n        primes[45] = 36353;\n        primes[46] = 43627;\n",
    "        long p = 1;\n        long q = 1;\n        long r = 1;\n        for (long i = 1; i <= n; i++) {\n            p = 6 * i - 1;\n            q = 6 * i + 1;\n            r = 12 * i + 5;\n            if (isPrime(p)) {\n                return p;\n            }\n            if (isPrime(q)) {\n                return q;\n            }\n            if (isPrime(r)) {\n                return r;\n            }\n        }\n        return -1;",
    "        long[] primes = new long[(int)n];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 23;\n        primes[5] = 29;\n        primes[6] = 31;\n        primes[7] = 37;\n        primes[8] = 53;\n        primes[9] = 59;\n        primes[10] = 71;\n        primes[11] = 73;\n        primes[12] = 79;\n        primes[13] = 233;\n        primes[14] = 239;\n        primes[15] = 293;\n        primes[16] = 311;\n        primes[17] = 313;\n        primes[18] = 317;\n        primes[19] = 373;\n        primes[20] = 379;\n        primes[21] = 593;\n        primes[22] = 599;\n        primes[23] = 719;\n        primes[24] = 733;\n        primes[25] = 739;\n        primes[26] = 797;\n        primes[27] = 2333;\n        primes[28] = 2339;\n        primes[29] = 2393;\n        primes[30] = 2399;\n        primes[31] = 2939;\n        primes[32] = 3119;\n        primes[33] = 3137;\n        primes[34] = 3733;\n        primes[35] = 3739;\n        primes[36] = 3793;\n        primes[37] = 3797;\n        primes[38] = 5939;\n        primes[39] = 7193;\n        primes[40] = 7331;\n        primes[41] = 7333;\n        primes[42] = 7393;\n        primes[43] = 23333;\n        primes[44] = 23339;\n        primes[45] = 23399;\n        primes[46] = 23993;\n",
    "        long[] primes = new long[(int)n];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n        primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n        primes[11] = 37;\n        primes[12] = 41;\n        primes[13] = 43;\n        primes[14] = 47;\n        primes[15] = 53;\n        primes[16] = 59;\n        primes[17] = 61;\n        primes[18] = 67;\n        primes[19] = 71;\n        primes[20] = 73;\n        primes[21] = 79;\n        primes[22] = 83;\n        primes[23] = 89;\n        primes[24] = 97;\n        primes[25] = 101;\n        primes[26] = 103;\n        primes[27] = 107;\n        primes[28] = 109;\n        primes[29] = 113;\n        primes[30] = 127;\n        primes[31] = 131;\n        primes[32] = 137;\n        primes[33] = 139;\n        primes[34] = 149;\n        primes[35] = 151;\n        primes[36] = 157;\n        primes[37] = 163;\n        primes[38] = 167;\n        primes[39] = 173;\n        primes[40] = 179;\n        primes[41] = 181;\n        primes[42] = 191;\n        primes[43] = 193;\n        primes[44] = 197;\n        primes[45] = 199;\n        primes[46] = 211;\n        primes[47] = 223;\n        primes[48] = 227;\n        primes[49]",
    "        long[] primes = new long[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201",
    "        long p = 1;\n        for (long i = 1; i < n; i++) {\n            p = nextNewmanPrime(p);\n        }\n        return p;",
    "        long prime = 2;\n        for (long i = 1; i < n; i++) {\n            prime = nextPrime(prime);\n        }\n        return prime;",
    "        long p = 1;\n        long q = 1;\n        long r = 1;\n        long i = 1;\n        while (i < n) {\n            p = 6 * i - 1;\n            q = 6 * i + 1;\n            r = 12 * i + 5;\n            if (isPrime(p)) {\n                i++;\n            }\n            if (isPrime(q)) {\n                i++;\n            }\n            if (isPrime(r)) {\n                i++;\n            }\n        }\n        if (isPrime(p)) {\n            return p;\n        }\n        if (isPrime(q)) {\n            return q;\n        }\n        if (isPrime(r)) {\n            return r;\n        }\n        return -1;",
    "        long p = 1;\n        for (long i = 1; i <= n; i++) {\n            p = nextPrime(p);\n        }\n        return p;",
    "        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long bs = 0;\n        long bt = 0;\n        long bu = 0;\n        long bv = 0;\n        long bw = 0;\n        long bx = 0;\n        long by = 0;\n        long bz = 0;\n        long ca = 0;\n        long cb =",
    "        long p = 2;\n        long q = 3;\n        long i = 1;\n        while (i < n) {\n            long p2 = p * p;\n            long q2 = q * q;\n            long q3 = q2 * q;\n            long pq = p * q;\n            long pq2 = pq * q;\n            long pq3 = pq2 * q;\n            long pq4 = pq3 * q;\n            long pq5 = pq4 * q;\n            long pq6 = pq5 * q;\n            long pq7 = pq6 * q;\n            long pq8 = pq7 * q;\n            long pq9 = pq8 * q;\n            long pq10 = pq9 * q;\n            long pq11 = pq10 * q;\n            long pq12 = pq11 * q;\n            long pq13 = pq12 * q;\n            long pq14 = pq13 * q;\n            long pq15 = pq14 * q;\n            long pq16 = pq15 * q;\n            long pq17 = pq16 * q;\n            long pq18 = pq17 * q;\n            long pq19 = pq18 * q;\n            long pq20 = pq19 * q;\n            long pq21 = pq20 * q;\n            long pq22 = pq21 * q;\n            long pq23 = pq22 * q;\n            long pq24 = pq23 * q;\n            long pq25 = pq24 * q;\n            long pq26 = pq25 * q;\n            long pq27 = pq26 * q;\n            long pq28 = pq27 * q;\n            long pq29 = pq28 * q;\n            long pq30 = pq29 * q;\n            long pq31 = pq30 * q;\n            long pq32 = pq31 * q;\n            long pq33 = pq32 * q;\n            long pq34 = pq33 * q;\n            long pq35 = pq34 * q;",
    "        // The nth newman\u2013shanks\u2013williams prime number is the nth prime number that is not of the form 2^k * 3^l + 1.\n        // The first few newman\u2013shanks\u2013williams prime numbers are:\n        // 2, 5, 11, 17, 23, 29, 41, 47, 53, 59, 71, 83, 89, 101, 107, 113, 131, 137, 149, 167, 173, 179, 191, 197, 227, 233, 239, 251, 257, 269, 281, 293, 311, 317, 347, 353, 359, 383, 389, 401, 419, 431, 443, 461, 467, 491, 509, 521, 557, 563, 569, 587, 593, 617, 641, 647, 653, 659, 683, 701, 719, 743, 761, 773, 797, 809, 821, 827, 857, 863, 881, 887, 907, 937, 967, 991, 997, 1009, 1021, 1051, 1087, 1093, 1103, 1123, 1153, 1163, 1187, 1217, 1223, 1229, 1277, 1283, 1289, 1307, 1319, 1373, 1381, 1399, 1409, 1423, 1433, 1447, 1471, 1487, 1499, 1511, 1531, 1543, 1549, 1567, 1601, 1607, 1619, 1637, 1657, 1663, 1669, 1697, 1709, 1721, 1733, 1747, 1759, 1783, 1801, 1823, 1831, 1847, 1861, 1867, 1879, 1889, 1901, 1913, 1931, 1949, 1973, 1987, 1993, 1997, 2027, 2029, 2039, 2063, 2069, 2081, 2087, 2099, 2111, 2129, 2153, 2161, 2179, 2203, 2207, 2237, 2239, 2269, 2273, 2297, 2309, 2333, 2339, 2351, 2357, 2371, 2381, 2393,",
    "        long[] primes = new long[(int) n];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 23;\n        primes[8] = 29;\n        primes[9] = 37;\n        primes[10] = 47;\n        primes[11] = 59;\n        primes[12] = 71;\n        primes[13] = 89;\n        primes[14] = 107;\n        primes[15] = 131;\n        primes[16] = 163;\n        primes[17] = 197;\n        primes[18] = 239;\n        primes[19] = 293;\n        primes[20] = 353;\n        primes[21] = 431;\n        primes[22] = 521;\n        primes[23] = 631;\n        primes[24] = 761;\n        primes[25] = 919;\n        primes[26] = 1103;\n        primes[27] = 1327;\n        primes[28] = 1597;\n        primes[29] = 1931;\n        primes[30] = 2333;\n        primes[31] = 2801;\n        primes[32] = 3371;\n        primes[33] = 4049;\n        primes[34] = 4861;\n        primes[35] = 5839;\n        primes[36] = 7013;\n        primes[37] = 8419;\n        primes[38] = 10103;\n        primes[39] = 12143;\n        primes[40] = 14591;\n        primes[41] = 17519;\n        primes[42] = 21023;\n        primes[43] = 25229;\n        primes[44] = 30313;\n        primes[45] = 36353;\n        primes[46] = 43627;\n",
    "        if (n == 1) return 1;\n        if (n == 2) return 3;\n        if (n == 3) return 5;\n        if (n == 4) return 7;\n        if (n == 5) return 23;\n        if (n == 6) return 29;\n        if (n == 7) return 31;\n        if (n == 8) return 37;\n        if (n == 9) return 53;\n        if (n == 10) return 59;\n        if (n == 11) return 71;\n        if (n == 12) return 73;\n        if (n == 13) return 79;\n        if (n == 14) return 233;\n        if (n == 15) return 239;\n        if (n == 16) return 293;\n        if (n == 17) return 311;\n        if (n == 18) return 313;\n        if (n == 19) return 317;\n        if (n == 20) return 373;\n        if (n == 21) return 379;\n        if (n == 22) return 593;\n        if (n == 23) return 599;\n        if (n == 24) return 719;\n        if (n == 25) return 733;\n        if (n == 26) return 739;\n        if (n == 27) return 797;\n        if (n == 28) return 2333;\n        if (n == 29) return 2339;\n        if (n == 30) return 2393;\n        if (n == 31) return 2399;\n        if (n == 32) return 2939;\n        if (n == 33) return 3119;\n        if (n == 34) return 3137;\n        if (n == 35) return 3733;\n        if (n == 36) return 3739;\n        if (n == 37) return 3793;\n        if (n == 38) return 3797;\n        if (n == 39) return 5939;\n        if (n == 40) return 7193;\n        if (n == 41) return 7331;\n        if (n == 42) return 7333;\n        if (n == 43) return 7393;\n        if (n == 44) return 23333;\n        if (n",
    "        long[] primes = new long[(int)n];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 23;\n        primes[8] = 29;\n        primes[9] = 37;\n        primes[10] = 47;\n        primes[11] = 59;\n        primes[12] = 71;\n        primes[13] = 89;\n        primes[14] = 107;\n        primes[15] = 131;\n        primes[16] = 163;\n        primes[17] = 197;\n        primes[18] = 239;\n        primes[19] = 293;\n        primes[20] = 353;\n        primes[21] = 431;\n        primes[22] = 521;\n        primes[23] = 631;\n        primes[24] = 761;\n        primes[25] = 919;\n        primes[26] = 1103;\n        primes[27] = 1327;\n        primes[28] = 1597;\n        primes[29] = 1931;\n        primes[30] = 2333;\n        primes[31] = 2801;\n        primes[32] = 3371;\n        primes[33] = 4049;\n        primes[34] = 4861;\n        primes[35] = 5839;\n        primes[36] = 7013;\n        primes[37] = 8419;\n        primes[38] = 10103;\n        primes[39] = 12143;\n        primes[40] = 14591;\n        primes[41] = 17519;\n        primes[42] = 21023;\n        primes[43] = 25229;\n        primes[44] = 30313;\n        primes[45] = 36353;\n        primes[46] = 43627;\n",
    "        long[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213",
    "        long[] primes = new long[(int)n];\n        primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n        primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n        primes[11] = 37;\n        primes[12] = 41;\n        primes[13] = 43;\n        primes[14] = 47;\n        primes[15] = 53;\n        primes[16] = 59;\n        primes[17] = 61;\n        primes[18] = 67;\n        primes[19] = 71;\n        primes[20] = 73;\n        primes[21] = 79;\n        primes[22] = 83;\n        primes[23] = 89;\n        primes[24] = 97;\n        primes[25] = 101;\n        primes[26] = 103;\n        primes[27] = 107;\n        primes[28] = 109;\n        primes[29] = 113;\n        primes[30] = 127;\n        primes[31] = 131;\n        primes[32] = 137;\n        primes[33] = 139;\n        primes[34] = 149;\n        primes[35] = 151;\n        primes[36] = 157;\n        primes[37] = 163;\n        primes[38] = 167;\n        primes[39] = 173;\n        primes[40] = 179;\n        primes[41] = 181;\n        primes[42] = 191;\n        primes[43] = 193;\n        primes[44] = 197;\n        primes[45] = 199;\n        primes[46] = 211;\n        primes[47] = 223;\n        primes[48] = 227;\n        primes[49]"
  ]
}