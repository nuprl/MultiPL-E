{
  "name": "mbpp_4_heap_queue_largest",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(pq.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvno05_0t.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a max heap\n        PriorityQueue<Long> heap = new PriorityQueue<>(Collections.reverseOrder());\n        // Add all numbers to the heap\n        for (long num : nums) {\n            heap.add(num);\n        }\n        // Create a new list to store the largest numbers\n        ArrayList<Long> largest = new ArrayList<>();\n        // Pop the largest numbers from the heap and add them to the list\n        for (int i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            heap.add(nums.get(i));\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu3mthg7v.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            ret.add(pq.poll());\n        }\n        return ret;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxiqz1lh.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long i = 0; i < n; i++) {\n            heap.add(nums.get((int) i));\n        }\n        for (long i = n; i < nums.size(); i++) {\n            if (nums.get((int) i) > heap.peek()) {\n                heap.poll();\n                heap.add(nums.get((int) i));\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyapvxm1d.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxiqz1lh.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        while (pq.size() > 0) {\n            ans.add(pq.poll());\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxiqz1lh.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgcq0h1a5.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpadtrmr3m.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> queue = new PriorityQueue<>();\n        for (long num : nums) {\n            queue.add(num);\n            if (queue.size() > n) {\n                queue.poll();\n            }\n        }\n        while (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> largest = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums);\n        for (int i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187449,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsvvbdyzx.java:19)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187449,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzp14xn4.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> heap = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            heap.add(nums.get(i));\n        }\n        for (int i = n; i < nums.size(); i++) {\n            if (nums.get(i) > heap.get(0)) {\n                heap.set(0, nums.get(i));\n                heapify(heap, 0);\n            }\n        }\n        return heap;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187450,
      "stdout": "",
      "stderr": "/tmp/tmpulciov4h.java:15: error: incompatible types: possible lossy conversion from long to int\n        for (int i = n; i < nums.size(); i++) {\n                     ^\n/tmp/tmpulciov4h.java:18: error: cannot find symbol\n                heapify(heap, 0);\n                ^\n  symbol:   method heapify(ArrayList<Long>,int)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187450,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpphgsdhqv.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Use a min heap to store the n largest numbers.\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            if (heap.size() < n) {\n                heap.add(num);\n            } else {\n                if (num > heap.peek()) {\n                    heap.poll();\n                    heap.add(num);\n                }\n            }\n        }\n        // Convert the heap to an array list.\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        // Reverse the array list.\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187451,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qi31w0y.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a new priority queue\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        // Add all the numbers to the priority queue\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        // Create a new array list to store the largest numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // While the priority queue is not empty, remove the largest number and add it to the array list\n        while (!pq.isEmpty()) {\n            largest.add(pq.remove());\n        }\n        // Return the array list\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187452,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnu5lfe82.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxiqz1lh.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187452,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfr0l9f5.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for(long num : nums) {\n            heap.add(num);\n            if(heap.size() > n) heap.poll();\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while(heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            ans.add(heap.poll());\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgcq0h1a5.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        heap.addAll(nums);\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a heap queue\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        // Add all the numbers to the heap queue\n        for (long num : nums) {\n            heap.add(num);\n        }\n        // Create an array list to store the n largest numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Remove the n largest numbers from the heap queue\n        for (long i = 0; i < n; i++) {\n            largest.add(heap.remove());\n        }\n        // Return the n largest numbers in descending order\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187454,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiimx_x3c.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxiqz1lh.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // TODO: implement this function\n        return null;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187454,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpgdp1dgyo.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxiqz1lh.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.remove());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187455,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2bug2rj8.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> queue = new PriorityQueue<>();\n        for (long num : nums) {\n            queue.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(queue.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187455,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnws7ijch.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (int i = 0; i < n; i++) {\n            heap.add(nums.get(i));\n        }\n        for (int i = (int) n; i < nums.size(); i++) {\n            if (nums.get(i) > heap.peek()) {\n                heap.poll();\n                heap.add(nums.get(i));\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a heap queue\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        // Add all the numbers to the heap\n        for (long num : nums) {\n            heap.add(num);\n        }\n        // Pop the top n numbers from the heap\n        ArrayList<Long> largest = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187449,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzp14xn4.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187449,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzp14xn4.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        if (nums.size() == 0) {\n            return new ArrayList<Long>();\n        }\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187458,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq2vxha94.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Use a max heap to store the n largest numbers.\n        PriorityQueue<Long> maxHeap = new PriorityQueue<Long>(Collections.reverseOrder());\n        for (Long num : nums) {\n            if (maxHeap.size() < n) {\n                maxHeap.add(num);\n            } else {\n                if (maxHeap.peek() < num) {\n                    maxHeap.poll();\n                    maxHeap.add(num);\n                }\n            }\n        }\n        return new ArrayList<Long>(maxHeap);\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187458,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0kmtm9u.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a priority queue with a custom comparator that compares numbers in descending order.\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(new Comparator<Long>() {\n            @Override\n            public int compare(Long a, Long b) {\n                return b.compareTo(a);\n            }\n        });\n        // Add all numbers to the priority queue.\n        for (long num : nums) {\n            pq.add(num);\n        }\n        // Create a new array list to store the n largest numbers.\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the n largest numbers to the array list.\n        for (long i = 0; i < n; i++) {\n            largest.add(pq.poll());\n        }\n        // Return the array list.\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxiqz1lh.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Use a heap queue to find the n largest numbers.\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            if (heap.size() < n) {\n                heap.add(num);\n            } else if (heap.peek() < num) {\n                heap.poll();\n                heap.add(num);\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            res.add(heap.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> queue = new PriorityQueue<>(nums);\n        for (int i = 0; i < n; i++) {\n            result.add(queue.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187461,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpis2wjvv4.java:19)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (pq.size() > 0) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187461,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        for (long i = 0; i < n; i++) {\n            res.add(pq.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187462,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a min-heap\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        // Add the first n elements to the heap\n        for (int i = 0; i < n; i++) {\n            heap.add(nums.get(i));\n        }\n        // Iterate through the rest of the array\n        for (int i = (int)n; i < nums.size(); i++) {\n            // If the current element is larger than the smallest element in the heap, remove the smallest element and add the current element\n            if (nums.get(i) > heap.peek()) {\n                heap.poll();\n                heap.add(nums.get(i));\n            }\n        }\n        // Create a new array list to store the largest elements\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Iterate through the heap and add the elements to the array list\n        while (!heap.isEmpty()) {\n            largest.add(heap.poll());\n        }\n        // Return the array list in reverse order\n        return new ArrayList<Long>(largest);\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187462,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfgab6ros.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a max heap\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(Collections.reverseOrder());\n        // Add all the numbers to the heap\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        // Create a new array list to store the n largest numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the n largest numbers to the array list\n        for (int i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        // Return the array list\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187462,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a heap queue with the numbers\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        // Create an array list to store the largest n numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Pop the largest n numbers from the heap queue\n        for (long i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        // Reverse the array list\n        Collections.reverse(largest);\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187463,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49otac52.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Write your code here\n        // to print results to the standard output you can use System.out.println\n        // example: System.out.println(\"Hello world!\");\n        ArrayList<Long> res = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        for (int i = 0; i < n; i++) {\n            res.add(pq.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // TODO: Implement this function.\n        return null;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187463,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpplve4i5u.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>((int)n);\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgcq0h1a5.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            res.add(heap.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        heap.addAll(nums);\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>(Collections.reverseOrder());\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a heap queue (min heap)\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        // Add the first n elements to the heap queue\n        for (int i = 0; i < n; i++) {\n            heap.add(nums.get(i));\n        }\n        // Iterate through the rest of the array\n        for (int i = (int) n; i < nums.size(); i++) {\n            // If the current element is larger than the smallest element in the heap queue,\n            // remove the smallest element and add the current element\n            if (nums.get(i) > heap.peek()) {\n                heap.poll();\n                heap.add(nums.get(i));\n            }\n        }\n        // Create an array list to store the n largest elements\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Iterate through the heap queue and add the elements to the array list\n        for (int i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        // Return the array list in reverse order\n        Collections.reverse(largest);\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187465,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkn99vyed.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(heap.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187466,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7w9okfp6.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a new heap queue\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        // Add all the numbers to the heap\n        for (long num : nums) {\n            heap.add(num);\n        }\n        // Create a new array list to store the largest numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the largest n numbers to the array list\n        for (int i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        // Return the array list\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // create a heap queue\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        // add all the numbers to the heap\n        for (long num : nums) {\n            heap.add(num);\n        }\n        // create an array list to store the largest numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // add the largest n numbers to the array list\n        for (long i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        // return the array list\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187467,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl10u_nl_.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            ans.add(heap.poll());\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187467,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            res.add(pq.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187467,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvinj7jag.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // create a max heap\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(Collections.reverseOrder());\n        // add all the numbers to the heap\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        // create a new array list to store the n largest numbers\n        ArrayList<Long> largestNums = new ArrayList<Long>();\n        // add the n largest numbers to the array list\n        for (int i = 0; i < n; i++) {\n            largestNums.add(heap.poll());\n        }\n        // return the array list\n        return largestNums;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187468,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187468,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187468,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // TODO: Implement this function\n        return null;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187469,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NullPointerException\n\tat Problem.main(tmpzd6n08eo.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>(nums);\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187469,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbhsyjd5t.java:19)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a priority queue that is a min heap.\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        // Add the first n elements to the priority queue.\n        for (int i = 0; i < n; i++) {\n            pq.add(nums.get(i));\n        }\n        // For each element in the array list, if it is greater than the minimum element in the priority queue,\n        // remove the minimum element from the priority queue and add the new element.\n        for (int i = (int) n; i < nums.size(); i++) {\n            if (nums.get(i) > pq.peek()) {\n                pq.remove();\n                pq.add(nums.get(i));\n            }\n        }\n        // Create an array list to store the n largest elements.\n        ArrayList<Long> largest = new ArrayList<>();\n        // Add the elements in the priority queue to the array list.\n        while (!pq.isEmpty()) {\n            largest.add(pq.remove());\n        }\n        // Return the array list in reverse order.\n        return new ArrayList<>(largest.subList(0, (int) n));\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187470,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2trgxvhv.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a new priority queue.\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        // Add the first n elements to the queue.\n        for (int i = 0; i < n; i++) {\n            pq.add(nums.get(i));\n        }\n        // Iterate through the rest of the list.\n        for (int i = (int)n; i < nums.size(); i++) {\n            // If the current element is larger than the smallest element in the queue,\n            // remove the smallest element and add the current element.\n            if (nums.get(i) > pq.peek()) {\n                pq.poll();\n                pq.add(nums.get(i));\n            }\n        }\n        // Create a new array list to store the n largest elements.\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Iterate through the queue and add the elements to the list.\n        while (!pq.isEmpty()) {\n            largest.add(pq.poll());\n        }\n        // Return the list in reverse order.\n        return new ArrayList<Long>(largest);\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187470,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcrf8a3m9.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a new priority queue.\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        // Add all the numbers to the priority queue.\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        // Create a new array list to store the n largest numbers.\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the n largest numbers to the array list.\n        for (int i = 0; i < n; i++) {\n            largest.add(pq.poll());\n        }\n        // Return the array list.\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> q = new PriorityQueue<>();\n        for (long num : nums) {\n            q.add(num);\n            if (q.size() > n) {\n                q.poll();\n            }\n        }\n        while (!q.isEmpty()) {\n            result.add(q.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums);\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187471,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23_6ief4.java:19)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            res.add(heap.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187472,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187472,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgcq0h1a5.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187472,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a max heap\n        PriorityQueue<Long> heap = new PriorityQueue<>(Collections.reverseOrder());\n        // Add the first n elements to the heap\n        for (int i = 0; i < n; i++) {\n            heap.add(nums.get(i));\n        }\n        // For each element in the array, if it is larger than the smallest element in the heap, remove the smallest element and add the new element\n        for (int i = (int) n; i < nums.size(); i++) {\n            if (nums.get(i) > heap.peek()) {\n                heap.poll();\n                heap.add(nums.get(i));\n            }\n        }\n        // Return the heap as an array list\n        return new ArrayList<Long>(heap);\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187473,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe38dxah6.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a heap queue\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        // Add all numbers to the heap queue\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        // Create a new array list\n        ArrayList<Long> largestNums = new ArrayList<Long>();\n        // Add the n largest numbers to the array list\n        for (long i = 0; i < n; i++) {\n            largestNums.add(heap.poll());\n        }\n        // Return the array list\n        return largestNums;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a max heap queue.\n        PriorityQueue<Long> maxHeap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        // Add all elements to the queue.\n        for (long num : nums) {\n            maxHeap.add(num);\n        }\n        // Create a new array list to store the n largest elements.\n        ArrayList<Long> largestNums = new ArrayList<Long>();\n        // Add the n largest elements to the array list.\n        for (long i = 0; i < n; i++) {\n            largestNums.add(maxHeap.poll());\n        }\n        // Return the array list.\n        return largestNums;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (long num : nums) {\n            if (pq.size() < n) {\n                pq.add(num);\n            } else {\n                if (pq.peek() < num) {\n                    pq.poll();\n                    pq.add(num);\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187474,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_p88d17l.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long i : nums) {\n            heap.add(i);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            res.add(heap.poll());\n        }\n        Collections.sort(res, Collections.reverseOrder());\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187474,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxiqz1lh.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187475,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjitivg7k.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            pq.add(nums.get(i));\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187475,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> queue = new PriorityQueue<>();\n        for (long num : nums) {\n            queue.add(num);\n            if (queue.size() > n) {\n                queue.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187475,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a new array list to store the n largest numbers.\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Create a new priority queue to store the numbers.\n        PriorityQueue<Long> queue = new PriorityQueue<Long>();\n        // Iterate through the array list of numbers.\n        for (long num : nums) {\n            // Add the number to the priority queue.\n            queue.add(num);\n            // If the priority queue has more than n elements, remove the smallest element.\n            if (queue.size() > n) {\n                queue.remove();\n            }\n        }\n        // Iterate through the priority queue.\n        while (!queue.isEmpty()) {\n            // Add the largest number to the array list.\n            largest.add(queue.remove());\n        }\n        // Return the array list of n largest numbers.\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187476,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_4cnryu0.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a priority queue with a custom comparator.\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        // Add all the numbers to the priority queue.\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        // Create a new array list to store the n largest numbers.\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the n largest numbers to the array list.\n        for (int i = 0; i < n; i++) {\n            largest.add(pq.poll());\n        }\n        // Return the array list.\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            ans.add(pq.poll());\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187449,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzp14xn4.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a max heap of size n\n        PriorityQueue<Long> heap = new PriorityQueue<>(n, Collections.reverseOrder());\n        // Add the first n elements to the heap\n        for (int i = 0; i < n; i++) {\n            heap.add(nums.get(i));\n        }\n        // For each element after the first n, if it is larger than the smallest element in the heap,\n        // remove the smallest element and add the new element\n        for (int i = n; i < nums.size(); i++) {\n            if (nums.get(i) > heap.peek()) {\n                heap.poll();\n                heap.add(nums.get(i));\n            }\n        }\n        // Return the heap as an array list\n        return new ArrayList<>(heap);\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187477,
      "stdout": "",
      "stderr": "/tmp/tmpoa0tm82z.java:12: error: cannot infer type arguments for PriorityQueue<>\n        PriorityQueue<Long> heap = new PriorityQueue<>(n, Collections.reverseOrder());\n                                   ^\n/tmp/tmpoa0tm82z.java:19: error: incompatible types: possible lossy conversion from long to int\n        for (int i = n; i < nums.size(); i++) {\n                     ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187456,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a priority queue with a custom comparator.\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(new Comparator<Long>() {\n            @Override\n            public int compare(Long a, Long b) {\n                return (int)(b - a);\n            }\n        });\n        // Add all the numbers to the priority queue.\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        // Create a new array list to store the n largest numbers.\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the n largest numbers to the array list.\n        for (int i = 0; i < n; i++) {\n            largest.add(pq.poll());\n        }\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> largest = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6i6g_amo.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            ret.add(heap.poll());\n        }\n        Collections.reverse(ret);\n        return ret;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>((int)n, Collections.reverseOrder());\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a new heap queue\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        // Add the first n elements to the heap\n        for (int i = 0; i < n; i++) {\n            heap.add(nums.get(i));\n        }\n        // Iterate through the rest of the list\n        for (int i = (int)n; i < nums.size(); i++) {\n            // If the current element is larger than the smallest element in the heap\n            if (nums.get(i) > heap.peek()) {\n                // Remove the smallest element from the heap\n                heap.poll();\n                // Add the current element to the heap\n                heap.add(nums.get(i));\n            }\n        }\n        // Create a new array list to hold the n largest elements\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Iterate through the heap\n        for (int i = 0; i < n; i++) {\n            // Add the largest element to the array list\n            largest.add(heap.poll());\n        }\n        // Return the array list\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187478,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxfy__th9.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a new priority queue with a custom comparator.\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(new Comparator<Long>() {\n            @Override\n            public int compare(Long a, Long b) {\n                return (int)(b - a);\n            }\n        });\n        // Add all the numbers to the queue.\n        for (long num : nums) {\n            pq.add(num);\n        }\n        // Create a new array list to store the n largest numbers.\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // While the queue is not empty, remove the top element and add it to the array list.\n        while (!pq.isEmpty()) {\n            largest.add(pq.remove());\n        }\n        // Return the first n elements of the array list.\n        return new ArrayList<Long>(largest.subList(0, (int)n));\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187448,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> queue = new PriorityQueue<Long>();\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long num : nums) {\n            queue.add(num);\n            if (queue.size() > n) {\n                queue.poll();\n            }\n        }\n        while (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187480,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp723ymw5k.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187481,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ru7yltt.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(Collections.reverseOrder());\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (pq.size() > 0) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187452,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfr0l9f5.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (Long num : nums) {\n            if (pq.size() < n) {\n                pq.add(num);\n            } else if (pq.peek() < num) {\n                pq.poll();\n                pq.add(num);\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187482,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9srrd8od.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            res.add(heap.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        while (!pq.isEmpty()) {\n            ret.add(pq.poll());\n        }\n        Collections.reverse(ret);\n        return ret;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a heap queue\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        // Add all the numbers to the heap queue\n        for (long num : nums) {\n            heap.add(num);\n        }\n        // Create a new array list to store the largest n numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the largest n numbers to the array list\n        for (long i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        // Return the array list\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            res.add(heap.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        for (long i = 0; i < n; i++) {\n            ans.add(heap.poll());\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187484,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4pq9pstu.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a priority queue with a custom comparator\n        PriorityQueue<Long> pq = new PriorityQueue<Long>(new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n                return (int)(b - a);\n            }\n        });\n        // Add all elements to the priority queue\n        for (long num : nums) {\n            pq.add(num);\n        }\n        // Create a new array list to store the n largest elements\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the n largest elements to the array list\n        for (long i = 0; i < n; i++) {\n            largest.add(pq.poll());\n        }\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a heap queue to store the n largest numbers\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        // Iterate through the array list\n        for (long num : nums) {\n            // If the heap queue is less than n elements, add the number to the heap queue\n            if (heap.size() < n) {\n                heap.add(num);\n            }\n            // If the heap queue is at least n elements, and the number is greater than the smallest number in the heap queue, remove the smallest number from the heap queue and add the number\n            else if (num > heap.peek()) {\n                heap.remove();\n                heap.add(num);\n            }\n        }\n        // Create an array list to store the n largest numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Iterate through the heap queue\n        while (!heap.isEmpty()) {\n            // Add the numbers to the array list in descending order\n            largest.add(heap.remove());\n        }\n        // Return the array list\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187485,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmped332zy8.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            ans.add(pq.poll());\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        // Create a priority queue\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        // Add all the numbers to the queue\n        for (long num : nums) {\n            pq.add(num);\n        }\n        // Create a list to store the largest numbers\n        ArrayList<Long> largest = new ArrayList<Long>();\n        // Add the largest numbers to the list\n        for (long i = 0; i < n; i++) {\n            largest.add(pq.poll());\n        }\n        // Return the largest numbers\n        return largest;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187485,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfk4vlzlx.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long i = 0; i < n; i++) {\n            heap.add(nums.get((int)i));\n        }\n        for (long i = n; i < nums.size(); i++) {\n            if (nums.get((int)i) > heap.peek()) {\n                heap.poll();\n                heap.add(nums.get((int)i));\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187486,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps8iikr2d.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
      "timestamp": 1667187447,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}