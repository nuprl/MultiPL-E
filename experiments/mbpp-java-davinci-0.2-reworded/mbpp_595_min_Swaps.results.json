{
  "name": "mbpp_595_min_Swaps",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmp60p5kycl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp60p5kycl.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp60p5kycl.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp60p5kycl.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < str1.length() && j < str2.length()) {\n            if (str1.charAt(i) == str2.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                j++;\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmp_3viiwyu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_3viiwyu.java:26: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp_3viiwyu.java:27: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp_3viiwyu.java:28: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpjfq66n92.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpjfq66n92.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpjfq66n92.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpjfq66n92.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpe1ki0d7w.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpe1ki0d7w.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpe1ki0d7w.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpe1ki0d7w.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) return -1;\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmp7143_dgq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7143_dgq.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp7143_dgq.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp7143_dgq.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpwfj_35hi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwfj_35hi.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwfj_35hi.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwfj_35hi.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpmv8inkz2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpmv8inkz2.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpmv8inkz2.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpmv8inkz2.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp91vdbcod.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp91vdbcod.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp91vdbcod.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp91vdbcod.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++){\n            if(str1.charAt(i) != str2.charAt(i)){\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp460_u5rr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp460_u5rr.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp460_u5rr.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp460_u5rr.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) return -1;\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmp7143_dgq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7143_dgq.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp7143_dgq.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp7143_dgq.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++){\n            if(str1.charAt(i) != str2.charAt(i)){\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmppli9l9cb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppli9l9cb.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmppli9l9cb.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmppli9l9cb.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) return -1;\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmp7143_dgq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7143_dgq.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp7143_dgq.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp7143_dgq.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if(str1.length() != str2.length()) return -1;\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmpngo5i73i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpngo5i73i.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpngo5i73i.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpngo5i73i.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmpqc3_lcpe.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqc3_lcpe.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpqc3_lcpe.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpqc3_lcpe.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmpi2spou9a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi2spou9a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpi2spou9a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpi2spou9a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return (count / 2);\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp4umpzmp2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp4umpzmp2.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp4umpzmp2.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp4umpzmp2.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmpqc3_lcpe.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqc3_lcpe.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpqc3_lcpe.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpqc3_lcpe.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        int len = str1.length();\n        for (int i = 0; i < len; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp8yh2egky.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8yh2egky.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp8yh2egky.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp8yh2egky.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmpi2spou9a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi2spou9a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpi2spou9a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpi2spou9a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if(str1.length() != str2.length()) return -1;\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmpngo5i73i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpngo5i73i.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpngo5i73i.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpngo5i73i.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < str1.length() && j < str2.length()) {\n            if (str1.charAt(i) == str2.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                count++;\n                i++;\n            }\n        }\n        if (i < str1.length()) {\n            count++;\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmpkzrmws6t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkzrmws6t.java:29: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpkzrmws6t.java:30: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpkzrmws6t.java:31: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp9mwiyam2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9mwiyam2.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp9mwiyam2.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp9mwiyam2.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpar5tl1mz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpar5tl1mz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpar5tl1mz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if(str1.length() != str2.length()) return -1;\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmpngo5i73i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpngo5i73i.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpngo5i73i.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpngo5i73i.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++){\n            if(str1.charAt(i) != str2.charAt(i)){\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmppli9l9cb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppli9l9cb.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmppli9l9cb.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmppli9l9cb.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpjfq66n92.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpjfq66n92.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpjfq66n92.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpjfq66n92.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpiqm7hkxh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqm7hkxh.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpiqm7hkxh.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1665517201,
      "stdout": "",
      "stderr": "/tmp/tmpto_v1b47.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpto_v1b47.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpto_v1b47.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpto_v1b47.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp3axw561a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3axw561a.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp3axw561a.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp3axw561a.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i))\n                count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1666122479,
      "stdout": "",
      "stderr": "/tmp/tmp_79krows.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_79krows.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp_79krows.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp_79krows.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}