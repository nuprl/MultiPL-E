{
  "name": "mbpp_595_min_Swaps",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwsgb2ax4.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwsgb2ax4.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwsgb2ax4.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < str1.length() && j < str2.length()) {\n            if (str1.charAt(i) == str2.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                j++;\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpay2cluzg.java:26: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpay2cluzg.java:27: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpay2cluzg.java:28: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187977,
      "stdout": "",
      "stderr": "/tmp/tmpyz22wckw.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpyz22wckw.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpyz22wckw.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187977,
      "stdout": "",
      "stderr": "/tmp/tmp7xmw5jxe.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp7xmw5jxe.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp7xmw5jxe.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) return -1;\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187977,
      "stdout": "",
      "stderr": "/tmp/tmp9iokds66.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp9iokds66.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp9iokds66.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187977,
      "stdout": "",
      "stderr": "/tmp/tmphax399iz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmphax399iz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmphax399iz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187978,
      "stdout": "",
      "stderr": "/tmp/tmpg1_gvv9h.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpg1_gvv9h.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpg1_gvv9h.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmpk_w3hc3f.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpk_w3hc3f.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpk_w3hc3f.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++){\n            if(str1.charAt(i) != str2.charAt(i)){\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmpl5kzoak7.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpl5kzoak7.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpl5kzoak7.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) return -1;\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187977,
      "stdout": "",
      "stderr": "/tmp/tmp9iokds66.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp9iokds66.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp9iokds66.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++){\n            if(str1.charAt(i) != str2.charAt(i)){\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmpddss9054.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpddss9054.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpddss9054.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) return -1;\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187977,
      "stdout": "",
      "stderr": "/tmp/tmp9iokds66.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp9iokds66.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp9iokds66.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if(str1.length() != str2.length()) return -1;\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmplqe4zogn.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmplqe4zogn.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmplqe4zogn.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187980,
      "stdout": "",
      "stderr": "/tmp/tmpi4p_iywp.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpi4p_iywp.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpi4p_iywp.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187980,
      "stdout": "",
      "stderr": "/tmp/tmpgfyw_n11.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpgfyw_n11.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpgfyw_n11.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return (count / 2);\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187980,
      "stdout": "",
      "stderr": "/tmp/tmp7vlqqepz.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp7vlqqepz.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp7vlqqepz.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187980,
      "stdout": "",
      "stderr": "/tmp/tmpi4p_iywp.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpi4p_iywp.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpi4p_iywp.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        int len = str1.length();\n        for (int i = 0; i < len; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187981,
      "stdout": "",
      "stderr": "/tmp/tmp025mz7kn.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp025mz7kn.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp025mz7kn.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187980,
      "stdout": "",
      "stderr": "/tmp/tmpgfyw_n11.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpgfyw_n11.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpgfyw_n11.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if(str1.length() != str2.length()) return -1;\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmplqe4zogn.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmplqe4zogn.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmplqe4zogn.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < str1.length() && j < str2.length()) {\n            if (str1.charAt(i) == str2.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                count++;\n                i++;\n            }\n        }\n        if (i < str1.length()) {\n            count++;\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187981,
      "stdout": "",
      "stderr": "/tmp/tmpbnswz71t.java:29: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpbnswz71t.java:30: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpbnswz71t.java:31: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187981,
      "stdout": "",
      "stderr": "/tmp/tmpbtvwyl1k.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpbtvwyl1k.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpbtvwyl1k.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpwaw1nyce.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpwaw1nyce.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if(str1.length() != str2.length()) return -1;\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++) {\n            if(str1.charAt(i) != str2.charAt(i)) count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmplqe4zogn.java:19: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmplqe4zogn.java:20: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmplqe4zogn.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < str1.length(); i++){\n            if(str1.charAt(i) != str2.charAt(i)){\n                count++;\n            }\n        }\n        return count/2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmpddss9054.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpddss9054.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpddss9054.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int swaps = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                swaps++;\n            }\n        }\n        return swaps / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187977,
      "stdout": "",
      "stderr": "/tmp/tmpyz22wckw.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpyz22wckw.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpyz22wckw.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmpodp2hlru.java:23: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpodp2hlru.java:24: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpodp2hlru.java:25: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187976,
      "stdout": "",
      "stderr": "/tmp/tmp6xctappo.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6xctappo.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6xctappo.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187979,
      "stdout": "",
      "stderr": "/tmp/tmp6m3tl89g.java:21: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmp6m3tl89g.java:23: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n        int n = str1.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (str1.charAt(i) != str2.charAt(i))\n                count++;\n        }\n        return count / 2;\n    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n",
      "timestamp": 1667187981,
      "stdout": "",
      "stderr": "/tmp/tmpgw44h6y0.java:20: error: cannot find symbol\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n                                                ^\n  symbol:   method Object(long)\n  location: class Problem\n/tmp/tmpgw44h6y0.java:21: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n/tmp/tmpgw44h6y0.java:22: error: cannot find symbol\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n                                              ^\n  symbol:   method Object(String)\n  location: class Problem\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}