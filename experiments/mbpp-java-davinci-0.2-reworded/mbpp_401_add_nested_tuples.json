{
  "name": "mbpp_401_add_nested_tuples",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to perform index wise addition of pair elements in the given two nested pairs.\n    public static long addNestedTuples(long test_tup1, long test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(addNestedTuples((long)Pair.with(Pair.with(1l, 3l), Pair.with(4l, 5l), Pair.with(2l, 9l), Pair.with(1l, 10l)), (long)Pair.with(Pair.with(6l, 7l), Pair.with(3l, 9l), Pair.with(1l, 1l), Pair.with(7l, 3l))) == (long)Pair.with(Pair.with(7l, 10l), Pair.with(7l, 14l), Pair.with(3l, 10l), Pair.with(8l, 13l)));\n    assert(addNestedTuples((long)Pair.with(Pair.with(2l, 4l), Pair.with(5l, 6l), Pair.with(3l, 10l), Pair.with(2l, 11l)), (long)Pair.with(Pair.with(7l, 8l), Pair.with(4l, 10l), Pair.with(2l, 2l), Pair.with(8l, 4l))) == (long)Pair.with(Pair.with(9l, 12l), Pair.with(9l, 16l), Pair.with(5l, 12l), Pair.with(10l, 15l)));\n    assert(addNestedTuples((long)Pair.with(Pair.with(3l, 5l), Pair.with(6l, 7l), Pair.with(4l, 11l), Pair.with(3l, 12l)), (long)Pair.with(Pair.with(8l, 9l), Pair.with(5l, 11l), Pair.with(3l, 3l), Pair.with(9l, 5l))) == (long)Pair.with(Pair.with(11l, 14l), Pair.with(11l, 18l), Pair.with(7l, 14l), Pair.with(12l, 17l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_1 = tup1_1.getValue0();\n        long tup1_1_2 = tup1_1.getValue1();\n        long tup1_2_1 = tup1_2.getValue0();\n        long tup1_2_2 = tup1_2.getValue1();\n        long tup2_1_1 = tup2_1.getValue0();\n        long tup2_1_2 = tup2_1.getValue1();\n        long tup2_2_1 = tup2_2.getValue0();\n        long tup2_2_2 = tup2_2.getValue1();\n        long tup1_1_1_plus_tup2_1_1 = tup1_1_1 + tup2_1_1;\n        long tup1_1_2_plus_tup2_1_2 = tup1_1_2 + tup2_1_2;\n        long tup1_2_1_plus_tup2_2_1 = tup1_2_1 + tup2_2_1;\n        long tup1_2_2_plus_t",
    "        return test_tup1 + test_tup2;",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>)test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>)test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_1 = tup1_1.getValue0();\n        long tup1_1_2 = tup1_1.getValue1();\n        long tup1_2_1 = tup1_2.getValue0();\n        long tup1_2_2 = tup1_2.getValue1();\n        long tup2_1_1 = tup2_1.getValue0();\n        long tup2_1_2 = tup2_1.getValue1();\n        long tup2_2_1 = tup2_2.getValue0();\n        long tup2_2_2 = tup2_2.getValue1();\n        return (long)new Pair<Pair<Long, Long>, Pair<Long, Long>>(new Pair<Long, Long>(tup1_1_1 + tup2_1_1, tup1_1_2 + tup2_1_2), new Pair<Long, Long>(tup1_2_1 + tup2_2_1, tup1_2_2 + tup2_2_2));",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        return ((tup1.getValue0().getValue0() + tup2.getValue0().getValue0()) << 32) + (tup1.getValue0().getValue1() + tup2.getValue0().getValue1());",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_0 = tup1_1.getValue0();\n        long tup1_1_1 = tup1_1.getValue1();\n        long tup1_2_0 = tup1_2.getValue0();\n        long tup1_2_1 = tup1_2.getValue1();\n        long tup2_1_0 = tup2_1.getValue0();\n        long tup2_1_1 = tup2_1.getValue1();\n        long tup2_2_0 = tup2_2.getValue0();\n        long tup2_2_1 = tup2_2.getValue1();\n        long tup1_1_0_plus_tup2_1_0 = tup1_1_0 + tup2_1_0;\n        long tup1_1_1_plus_tup2_1_1 = tup1_1_1 + tup2_1_1;\n        long tup1_2_0_plus_tup2_2_0 = tup1_2_0 + tup2_2_0;\n        long tup1_2_1_plus_tup2_2_1 = tup1_2_1 + tup2_2_1;\n        Pair<Long, Long> tup1_1_plus_tup",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_1 = tup1_1.getValue0();\n        long tup1_1_2 = tup1_1.getValue1();\n        long tup1_2_1 = tup1_2.getValue0();\n        long tup1_2_2 = tup1_2.getValue1();\n        long tup2_1_1 = tup2_1.getValue0();\n        long tup2_1_2 = tup2_1.getValue1();\n        long tup2_2_1 = tup2_2.getValue0();\n        long tup2_2_2 = tup2_2.getValue1();\n        long tup1_1_1_plus_tup2_1_1 = tup1_1_1 + tup2_1_1;\n        long tup1_1_2_plus_tup2_1_2 = tup1_1_2 + tup2_1_2;\n        long tup1_2_1_plus_tup2_2_1 = tup1_2_1 + tup2_2_1;\n        long tup1_2_2_plus_tup2_2_2 = tup1_2_2 + tup2_2_2;\n        Pair<Long, Long> tup1_1_plus_tup",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_0 = tup1_1.getValue0();\n        long tup1_1_1 = tup1_1.getValue1();\n        long tup1_2_0 = tup1_2.getValue0();\n        long tup1_2_1 = tup1_2.getValue1();\n        long tup2_1_0 = tup2_1.getValue0();\n        long tup2_1_1 = tup2_1.getValue1();\n        long tup2_2_0 = tup2_2.getValue0();\n        long tup2_2_1 = tup2_2.getValue1();\n        Pair<Long, Long> tup3_1 = new Pair<Long, Long>(tup1_1_0 + tup2_1_0, tup1_1_1 + tup2_1_1);\n        Pair<Long, Long> tup3_2 = new Pair<Long, Long>(tup1_2_0 + tup2_2_0, tup1_2_1 + tup2_2_1);\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup3 = new Pair<Pair<Long, Long>, Pair<Long, Long>>(tup3_1, tup3_2);\n        return tup3;\n    }",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Pair<Long, Long> tup1 = new Pair<Long, Long>(test_tup1, test_tup2);\n        Pair<Long, Long> tup2 = new Pair<Long, Long>(test_tup1, test_tup2);\n        Pair<Long, Long> tup3 = new Pair<Long, Long>(tup1.getValue0() + tup2.getValue0(), tup1.getValue1() + tup2.getValue1());\n        return tup3.getValue0() + tup3.getValue1();",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        return ((tup1.getValue0().getValue0() + tup2.getValue0().getValue0()) << 32) + (tup1.getValue0().getValue1() + tup2.getValue0().getValue1());",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        return ((tup1.getValue0().getValue0() + tup2.getValue0().getValue0()) << 32) | (tup1.getValue0().getValue1() + tup2.getValue0().getValue1());",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = new Pair<Pair<Long, Long>, Pair<Long, Long>>(new Pair<Long, Long>(test_tup1 / 100, test_tup1 % 100), new Pair<Long, Long>((test_tup1 / 100) % 100, test_tup1 % 100));\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = new Pair<Pair<Long, Long>, Pair<Long, Long>>(new Pair<Long, Long>(test_tup2 / 100, test_tup2 % 100), new Pair<Long, Long>((test_tup2 / 100) % 100, test_tup2 % 100));\n        Pair<Pair<Long, Long>, Pair<Long, Long>> res = new Pair<Pair<Long, Long>, Pair<Long, Long>>(new Pair<Long, Long>(tup1.getValue0().getValue0() + tup2.getValue0().getValue0(), tup1.getValue0().getValue1() + tup2.getValue0().getValue1()), new Pair<Long, Long>(tup1.getValue1().getValue0() + tup2.getValue1().getValue0(), tup1.getValue1().getValue1() + tup2.getValue1().getValue1()));\n        return res.getValue0().getValue0() * 100 + res.getValue0().getValue1() * 10 + res.getValue1().getValue0() + res.getValue1().getValue1();",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        return ((tup1.getValue0().getValue0() + tup2.getValue0().getValue0()) * 1000000000000L) + ((tup1.getValue0().getValue1() + tup2.getValue0().getValue1()) * 1000000L) + ((tup1.getValue1().getValue0() + tup2.getValue1().getValue0()) * 100L) + (tup1.getValue1().getValue1() + tup2.getValue1().getValue1());",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_1 = tup1_1.getValue0();\n        long tup1_1_2 = tup1_1.getValue1();\n        long tup1_2_1 = tup1_2.getValue0();\n        long tup1_2_2 = tup1_2.getValue1();\n        long tup2_1_1 = tup2_1.getValue0();\n        long tup2_1_2 = tup2_1.getValue1();\n        long tup2_2_1 = tup2_2.getValue0();\n        long tup2_2_2 = tup2_2.getValue1();\n        long tup1_1_1_plus_tup2_1_1 = tup1_1_1 + tup2_1_1;\n        long tup1_1_2_plus_tup2_1_2 = tup1_1_2 + tup2_1_2;\n        long tup1_2_1_plus_tup2_2_1 = tup1_2_1 + tup2_2_1;\n        long tup1_2_2_plus_tup2_2_2 = tup1_2_2 + tup2_2_2;\n        Pair<Long, Long> tup1_1_plus_tup",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_0 = tup1_1.getValue0();\n        long tup1_1_1 = tup1_1.getValue1();\n        long tup1_2_0 = tup1_2.getValue0();\n        long tup1_2_1 = tup1_2.getValue1();\n        long tup2_1_0 = tup2_1.getValue0();\n        long tup2_1_1 = tup2_1.getValue1();\n        long tup2_2_0 = tup2_2.getValue0();\n        long tup2_2_1 = tup2_2.getValue1();\n        long sum_tup1_1_0 = tup1_1_0 + tup2_1_0;\n        long sum_tup1_1_1 = tup1_1_1 + tup2_1_1;\n        long sum_tup1_2_0 = tup1_2_0 + tup2_2_0;\n        long sum_tup1_2_1 = tup1_2_1 + tup2_2_1;\n        Pair<Long, Long> sum_tup1_1 = new Pair<Long, Long>(sum_tup1_1_0, sum_tup1_1_1);\n        Pair<Long, Long",
    "        Pair<Long, Long> tup1 = (Pair<Long, Long>) test_tup1;\n        Pair<Long, Long> tup2 = (Pair<Long, Long>) test_tup2;\n        return new Pair<Long, Long>(tup1.getValue0() + tup2.getValue0(), tup1.getValue1() + tup2.getValue1()).getValue0();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_1 = tup1_1.getValue0();\n        long tup1_1_2 = tup1_1.getValue1();\n        long tup1_2_1 = tup1_2.getValue0();\n        long tup1_2_2 = tup1_2.getValue1();\n        long tup2_1_1 = tup2_1.getValue0();\n        long tup2_1_2 = tup2_1.getValue1();\n        long tup2_2_1 = tup2_2.getValue0();\n        long tup2_2_2 = tup2_2.getValue1();\n        long tup1_1_1_add = tup1_1_1 + tup2_1_1;\n        long tup1_1_2_add = tup1_1_2 + tup2_1_2;\n        long tup1_2_1_add = tup1_2_1 + tup2_2_1;\n        long tup1_2_2_add = tup1_2_2 + tup2_2_2;\n        Pair<Long, Long> t",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_1 = tup1_1.getValue0();\n        long tup1_1_2 = tup1_1.getValue1();\n        long tup1_2_1 = tup1_2.getValue0();\n        long tup1_2_2 = tup1_2.getValue1();\n        long tup2_1_1 = tup2_1.getValue0();\n        long tup2_1_2 = tup2_1.getValue1();\n        long tup2_2_1 = tup2_2.getValue0();\n        long tup2_2_2 = tup2_2.getValue1();\n        long tup1_1_1_plus_tup2_1_1 = tup1_1_1 + tup2_1_1;\n        long tup1_1_2_plus_tup2_1_2 = tup1_1_2 + tup2_1_2;\n        long tup1_2_1_plus_tup2_2_1 = tup1_2_1 + tup2_2_1;\n        long tup1_2_2_plus_tup2_2_2 = tup1_2_2 + tup2_2_2;\n        Pair<Long, Long> tup1_1_plus_tup",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Pair<Long, Long> tup1 = new Pair<Long, Long>(test_tup1, test_tup2);\n        Pair<Long, Long> tup2 = new Pair<Long, Long>(test_tup1, test_tup2);\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup = new Pair<Pair<Long, Long>, Pair<Long, Long>>(tup1, tup2);\n        return tup.getValue0().getValue0() + tup.getValue1().getValue0() + tup.getValue0().getValue1() + tup.getValue1().getValue1();",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>)test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>)test_tup2;\n        Pair<Long, Long> tup1_1 = tup1.getValue0();\n        Pair<Long, Long> tup1_2 = tup1.getValue1();\n        Pair<Long, Long> tup2_1 = tup2.getValue0();\n        Pair<Long, Long> tup2_2 = tup2.getValue1();\n        long tup1_1_1 = tup1_1.getValue0();\n        long tup1_1_2 = tup1_1.getValue1();\n        long tup1_2_1 = tup1_2.getValue0();\n        long tup1_2_2 = tup1_2.getValue1();\n        long tup2_1_1 = tup2_1.getValue0();\n        long tup2_1_2 = tup2_1.getValue1();\n        long tup2_2_1 = tup2_2.getValue0();\n        long tup2_2_2 = tup2_2.getValue1();\n        long tup1_1_1_plus_tup2_1_1 = tup1_1_1 + tup2_1_1;\n        long tup1_1_2_plus_tup2_1_2 = tup1_1_2 + tup2_1_2;\n        long tup1_2_1_plus_tup2_2_1 = tup1_2_1 + tup2_2_1;\n        long tup1_2_2_plus_tup2_2_2 = tup1_2_2 + tup2_2_2;\n        Pair<Long, Long> tup1_1_plus_tup",
    "        Pair<Pair<Long, Long>, Pair<Long, Long>> tup1 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup1;\n        Pair<Pair<Long, Long>, Pair<Long, Long>> tup2 = (Pair<Pair<Long, Long>, Pair<Long, Long>>) test_tup2;\n        return ((tup1.getValue0().getValue0() + tup2.getValue0().getValue0()) * 1000000000000L) + ((tup1.getValue0().getValue1() + tup2.getValue0().getValue1()) * 1000000L) + ((tup1.getValue1().getValue0() + tup2.getValue1().getValue0()) * 100L) + (tup1.getValue1().getValue1() + tup2.getValue1().getValue1());"
  ]
}