{
  "name": "mbpp_635_heap_sort",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort the given array list.\n    public static ArrayList<Long> heapSort(ArrayList<Long> iterable) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(heapSort((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)2l, (long)4l, (long)6l, (long)8l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(heapSort((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)25l, (long)58l)))).equals((new ArrayList<Long>(Arrays.asList((long)14l, (long)22l, (long)25l, (long)25l, (long)35l, (long)58l, (long)65l, (long)75l, (long)85l)))));\n    assert(heapSort((new ArrayList<Long>(Arrays.asList((long)7l, (long)1l, (long)9l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here.\n        return iterable;",
    "        ArrayList<Long> heap = new ArrayList<Long>();\n        for (Long item : iterable) {\n            heap.add(item);\n            int i = heap.size() - 1;\n            while (i > 0) {\n                int parent = (i - 1) / 2;\n                if (heap.get(i) > heap.get(parent)) {\n                    Long temp = heap.get(i);\n                    heap.set(i, heap.get(parent));\n                    heap.set(parent, temp);\n                    i = parent;\n                } else {\n                    break;\n                }\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.get(0));\n            heap.set(0, heap.get(heap.size() - 1));\n            heap.remove(heap.size() - 1);\n            int i = 0;\n            while (i < heap.size()) {\n                int left = 2 * i + 1;\n                int right = 2 * i + 2;\n                if (left >= heap.size()) {\n                    break;\n                }\n                int max = left;\n                if (right < heap.size() && heap.get(right) > heap.get(left)) {\n                    max = right;\n                }\n                if (heap.get(i) < heap.get(max)) {\n                    Long temp = heap.get(i);\n                    heap.set(i, heap.get(max));\n                    heap.set(max, temp);\n                    i = max;\n                } else {\n                    break;\n                }\n            }\n        }\n        return result;",
    "        // Write your code here.\n        return iterable;",
    "        // Write your code here.\n        return iterable;",
    "        // Write your code here.\n        return null;",
    "        // Write your code here.\n        return iterable;",
    "        // Write your code here.\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for(Long l : iterable)\n            pq.add(l);\n        ArrayList<Long> ans = new ArrayList<>();\n        while(!pq.isEmpty())\n            ans.add(pq.poll());\n        return ans;",
    "        // Write your code here.\n        return iterable;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (Long i : iterable) {\n            heap.add(i);\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long item : iterable) {\n            heap.add(item);\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        // Write your code here.\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (Long i : iterable) {\n            heap.add(i);\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long i : iterable) {\n            heap.add(i);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        // Write your code here.\n        return iterable;",
    "        // Write your code here.\n        return iterable;",
    "        // Write your code here.\n        return iterable;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long item : iterable) {\n            heap.add(item);\n        }\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long i : iterable) {\n            heap.add(i);\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (Long element : iterable) {\n            heap.add(element);\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        // Write your code here.\n        return null;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>(iterable);\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        return result;"
  ]
}