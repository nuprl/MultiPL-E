{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186510,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8ubz2qc.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186510,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp8fh0c6me.java:23)\n\tat Problem.main(tmp8fh0c6me.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186510,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpuoih9d9d.java:22)\n\tat Problem.main(tmpuoih9d9d.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            return Long.compare(sum1, sum2);\n        });\n        for (long num : nums1) {\n            pq.add(new Pair<>(num, nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186510,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmprry62jgq.java:15)\n\tat Problem.main(tmprry62jgq.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<Long>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n            }\n        }\n        result.sort(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        return new ArrayList<ArrayList<Long>>(result.subList(0, (int)k));\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186510,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps_dnlla7.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int)i), nums2.get((int)j)));\n            }\n        }\n        for (long i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmptbvwpz2j.java:23)\n\tat Problem.main(tmptbvwpz2j.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp_nh01vz2.java:23)\n\tat Problem.main(tmp_nh01vz2.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b00mn6l.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            res.add(temp);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpjwkkb4gg.java:22)\n\tat Problem.main(tmpjwkkb4gg.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpunn5f3un.java:23)\n\tat Problem.main(tmpunn5f3un.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1().getValue0());\n            temp.add(pair.getValue1().getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186514,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp6zjo76m3.java:23)\n\tat Problem.main(tmp6zjo76m3.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186514,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmps2heylyv.java:22)\n\tat Problem.main(tmps2heylyv.java:38)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1, n2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186514,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpzvo9q3xd.java:20)\n\tat Problem.main(tmpzvo9q3xd.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(p.getValue0().intValue()));\n            result.add(pair);\n            if (p.getValue0() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue()) + nums2.get(p.getValue0().intValue() + 1), p.getValue1()));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186515,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp58g3625x.java:21)\n\tat Problem.main(tmp58g3625x.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> q = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1) > 0 ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                q.add(temp);\n            }\n        }\n        while (k > 0 && !q.isEmpty()) {\n            result.add(q.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186515,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyn_ezyqn.java:34)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186516,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpny8gnkk9.java:22)\n\tat Problem.main(tmpny8gnkk9.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186516,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptun99796.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186516,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpwp7avmxt.java:23)\n\tat Problem.main(tmpwp7avmxt.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186517,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpmkbcpxek.java:23)\n\tat Problem.main(tmpmkbcpxek.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(k, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue1() + a.getValue0() - b.getValue1() - b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186518,
      "stdout": "",
      "stderr": "/tmp/tmp3i49j50g.java:15: error: cannot infer type arguments for PriorityQueue<>\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(k, new Comparator<Pair<Long, Long>>() {\n                                             ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186518,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptoxey62t.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.offer(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186518,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpf9aqokl7.java:23)\n\tat Problem.main(tmpf9aqokl7.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> curr = pq.poll();\n            long i = curr.getValue1();\n            long j = nums2.indexOf(curr.getValue0() - nums1.get((int) i));\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            res.add(pair);\n            if (j == nums2.size() - 1) {\n                continue;\n            }\n            pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get((int) j + 1), i));\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186519,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpet402zci.java:22)\n\tat Problem.main(tmpet402zci.java:41)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int) (o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            result.add(queue.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186519,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7llrzcz.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int) (o1.getValue0() + o1.getValue1() - o2.getValue0() - o2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186520,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp2_r5hglh.java:23)\n\tat Problem.main(tmp2_r5hglh.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186520,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpyg9ohw_b.java:22)\n\tat Problem.main(tmpyg9ohw_b.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186520,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long aSum = a.getValue0() + a.getValue1();\n            long bSum = b.getValue0() + b.getValue1();\n            return Long.compare(aSum, bSum);\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue0());\n            temp.add(p.getValue1());\n            ans.add(temp);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186521,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpwbf88wpq.java:12)\n\tat Problem.main(tmpwbf88wpq.java:32)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186522,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpw97zlv6a.java:23)\n\tat Problem.main(tmpw97zlv6a.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 + num2, num1));\n            }\n        }\n        while (k > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue2());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186522,
      "stdout": "",
      "stderr": "/tmp/tmp2b2rzn74.java:27: error: cannot find symbol\n            list.add(pair.getValue2());\n                         ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186523,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprjph5jrm.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186523,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp6v5aal0l.java:12)\n\tat Problem.main(tmp6v5aal0l.java:31)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (p.getValue1() / nums2.size())), nums2.get((int) (p.getValue1() % nums2.size())))));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186523,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpcvbaahyf.java:23)\n\tat Problem.main(tmpcvbaahyf.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186524,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5n21lc_z.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186524,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp43k_0x0e.java:23)\n\tat Problem.main(tmp43k_0x0e.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186516,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptun99796.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long i = pair.getValue1() / nums2.size();\n            long j = pair.getValue1() % nums2.size();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) i));\n            temp.add(nums2.get((int) j));\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186524,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpfv9eu8mt.java:23)\n\tat Problem.main(tmpfv9eu8mt.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int) (o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186525,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmiae415m.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue2() / nums2.size())), nums2.get((int) (pair.getValue2() % nums2.size())))));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186525,
      "stdout": "",
      "stderr": "/tmp/tmpc2b4p2_o.java:28: error: cannot find symbol\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue2() / nums2.size())), nums2.get((int) (pair.getValue2() % nums2.size())))));\n                                                                          ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n/tmp/tmpc2b4p2_o.java:28: error: cannot find symbol\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue2() / nums2.size())), nums2.get((int) (pair.getValue2() % nums2.size())))));\n                                                                                                                              ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            long index = p.getValue2();\n            long row = index / nums2.size();\n            long col = index % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) row));\n            pair.add(nums2.get((int) col));\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186526,
      "stdout": "",
      "stderr": "/tmp/tmpkivp8vo0.java:30: error: cannot find symbol\n            long index = p.getValue2();\n                          ^\n  symbol:   method getValue2()\n  location: variable p of type Pair<Long,Long>\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186526,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplaw45z3b.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (queue.isEmpty()) {\n                break;\n            }\n            result.add(queue.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186527,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu1e15pk.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                pq.add(new Pair<Long, Long>(i, j));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186527,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpjsd5p2q1.java:23)\n\tat Problem.main(tmpjsd5p2q1.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                Pair<Long, Long> p = new Pair<>(nums1.get(i), nums2.get(j));\n                pq.add(p);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186527,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpuxs83kwa.java:23)\n\tat Problem.main(tmpuxs83kwa.java:40)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186528,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpi9jncq8e.java:23)\n\tat Problem.main(tmpi9jncq8e.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue0());\n            temp.add(p.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186528,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp8qn964yw.java:23)\n\tat Problem.main(tmp8qn964yw.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            int i = (int) (p.getValue1() / nums2.size());\n            int j = (int) (p.getValue1() % nums2.size());\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(i));\n            pair.add(nums2.get(j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186529,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpyxs6imz8.java:23)\n\tat Problem.main(tmpyxs6imz8.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1 + n2, n1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186530,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp79yo81fn.java:23)\n\tat Problem.main(tmp79yo81fn.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp_nh01vz2.java:23)\n\tat Problem.main(tmp_nh01vz2.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue2() / nums2.size())), nums2.get((int) (pair.getValue2() % nums2.size())))));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186529,
      "stdout": "",
      "stderr": "/tmp/tmpvixwnq2v.java:28: error: cannot find symbol\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue2() / nums2.size())), nums2.get((int) (pair.getValue2() % nums2.size())))));\n                                                                          ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n/tmp/tmpvixwnq2v.java:28: error: cannot find symbol\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue2() / nums2.size())), nums2.get((int) (pair.getValue2() % nums2.size())))));\n                                                                                                                              ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num : nums1) {\n            pq.add(new Pair<>(num, nums2.get(0)));\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<>(pair.getValue0(), nums2.get(index + 1)));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186531,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpqo6xtz83.java:22)\n\tat Problem.main(tmpqo6xtz83.java:38)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186531,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp_mmbunah.java:22)\n\tat Problem.main(tmp_mmbunah.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186531,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpcy7db4nw.java:23)\n\tat Problem.main(tmpcy7db4nw.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue0() - pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186532,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpn_xm7c93.java:23)\n\tat Problem.main(tmpn_xm7c93.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186532,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp24pljsc9.java:23)\n\tat Problem.main(tmp24pljsc9.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sumA = a.getValue0() + a.getValue1();\n            long sumB = b.getValue0() + b.getValue1();\n            if (sumA < sumB) return -1;\n            if (sumA > sumB) return 1;\n            return 0;\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpeo32ka6b.java:13)\n\tat Problem.main(tmpeo32ka6b.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        int count = 0;\n        while (count < k && !pq.isEmpty()) {\n            result.add(pq.poll());\n            count++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7of36yuv.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp4_4wrvhm.java:23)\n\tat Problem.main(tmp4_4wrvhm.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186534,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv4ily3qy.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            if (pair == null) {\n                break;\n            }\n            ArrayList<Long> pairList = new ArrayList<>();\n            pairList.add(pair.getValue1());\n            pairList.add(pair.getValue0() - pair.getValue1());\n            result.add(pairList);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186535,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpvau4mos7.java:20)\n\tat Problem.main(tmpvau4mos7.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186535,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpn5h94znk.java:22)\n\tat Problem.main(tmpn5h94znk.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186535,
      "stdout": "",
      "stderr": "/tmp/tmpm19dptcv.java:16: error: cannot find symbol\n            return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n                                           ^\n  symbol:   method getValue2()\n  location: variable a of type Pair<Long,Long>\n/tmp/tmpm19dptcv.java:16: error: cannot find symbol\n            return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n                                                                           ^\n  symbol:   method getValue2()\n  location: variable b of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), 0L));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(p.getValue0().intValue()));\n            result.add(pair);\n            k--;\n            if (p.getValue0() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(p.getValue0() + 1, p.getValue1()));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpgm_2xv3s.java:21)\n\tat Problem.main(tmpgm_2xv3s.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp5zau6nde.java:20)\n\tat Problem.main(tmp5zau6nde.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (p.getValue2() / nums2.size())), nums2.get((int) (p.getValue2() % nums2.size())))));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186536,
      "stdout": "",
      "stderr": "/tmp/tmprv3ymbio.java:28: error: cannot find symbol\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (p.getValue2() / nums2.size())), nums2.get((int) (p.getValue2() % nums2.size())))));\n                                                                       ^\n  symbol:   method getValue2()\n  location: variable p of type Pair<Long,Long>\n/tmp/tmprv3ymbio.java:28: error: cannot find symbol\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (p.getValue2() / nums2.size())), nums2.get((int) (p.getValue2() % nums2.size())))));\n                                                                                                                        ^\n  symbol:   method getValue2()\n  location: variable p of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp_nh01vz2.java:23)\n\tat Problem.main(tmp_nh01vz2.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue0() - pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpldgk9dxk.java:22)\n\tat Problem.main(tmpldgk9dxk.java:38)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                sums.add(nums1.get(i) + nums2.get(j));\n            }\n        }\n        Collections.sort(sums);\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                long sum = nums1.get(i) + nums2.get(j);\n                if (sums.get(0) == sum) {\n                    ArrayList<Long> pair = new ArrayList<Long>();\n                    pair.add(nums1.get(i));\n                    pair.add(nums2.get(j));\n                    result.add(pair);\n                    sums.remove(0);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeeoo0lke.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186538,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpg8qxirpu.java:22)\n\tat Problem.main(tmpg8qxirpu.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        // We will use a priority queue to keep track of the smallest pairs.\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        // We will use a hash set to keep track of the pairs that we have already seen.\n        HashSet<Pair<Long, Long>> seen = new HashSet<Pair<Long, Long>>();\n        // We will add the first pair to the priority queue.\n        pq.add(new Pair<Long, Long>(nums1.get(0), nums2.get(0)));\n        // We will add the first pair to the hash set.\n        seen.add(new Pair<Long, Long>(nums1.get(0), nums2.get(0)));\n        // We will keep track of the number of pairs that we have added to the result.\n        long count = 0;\n        // We will keep looping until we have added k pairs to the result.\n        while (count < k) {\n            // We will get the pair with the smallest sum from the priority queue.\n            Pair<Long, Long> pair = pq.poll();\n            // We will add the pair to the result.\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            // We will increment the count.\n            count++;\n            // We will get the first element of the pair.\n            long first = pair.getValue0();\n            // We will get the second element of the pair.\n            long second = pair.getValue1();\n            // We will add the pair where the first element\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186538,
      "stdout": "",
      "stderr": "/tmp/tmps8vdjzkc.java:43: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186539,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp_lhsfys2.java:22)\n\tat Problem.main(tmp_lhsfys2.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            long index = pair.getValue1();\n            long sum = pair.getValue0();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(nums1.get((int) index));\n            list.add(nums2.get(0));\n            result.add(list);\n            if (index + 1 < nums2.size()) {\n                queue.add(new Pair<Long, Long>(sum - nums2.get(0) + nums2.get((int) index + 1), index));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186539,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp37h6afcg.java:21)\n\tat Problem.main(tmp37h6afcg.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186539,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj5fzv1s8.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>((a, b) -> {\n            return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps6wt_9rq.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp3ne528zf.java:23)\n\tat Problem.main(tmp3ne528zf.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0)\n            return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue0());\n            temp.add(p.getValue1());\n            res.add(temp);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186541,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp26084cw3.java:22)\n\tat Problem.main(tmp26084cw3.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long index = p.getValue1();\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186541,
      "stdout": "",
      "stderr": "/tmp/tmpdvurx6kb.java:23: error: incompatible types: inference variable B has incompatible bounds\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n                  ^\n    equality constraints: Long\n    lower bounds: Integer\n  where B,A are type-variables:\n    B extends Object declared in method <A,B>with(A,B)\n    A extends Object declared in method <A,B>with(A,B)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> heap = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                heap.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k-- > 0) {\n            if (heap.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = heap.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue0() - pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186541,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp583kh8wo.java:20)\n\tat Problem.main(tmp583kh8wo.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> pairs = new ArrayList<>();\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pairs.add(new Pair<>(num1, num2));\n            }\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0()) + p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < k; i++) {\n            result.add(new ArrayList<>(Arrays.asList(pairs.get(i).getValue0(), pairs.get(i).getValue1())));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186542,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpn2sngj_s.java:15)\n\tat Problem.main(tmpn2sngj_s.java:30)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b00mn6l.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i) + nums2.get(j));\n                pair.add((long) i);\n                pair.add((long) j);\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ArrayList<Long> pair = pq.poll();\n            ArrayList<Long> newPair = new ArrayList<>();\n            newPair.add(nums1.get(pair.get(1).intValue()));\n            newPair.add(nums2.get(pair.get(2).intValue()));\n            result.add(newPair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186543,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy4yic22b.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186543,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp7b6vujbo.java:23)\n\tat Problem.main(tmp7b6vujbo.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                long sum1 = p1.getValue0() + p1.getValue1();\n                long sum2 = p2.getValue0() + p2.getValue1();\n                if (sum1 < sum2) {\n                    return -1;\n                } else if (sum1 > sum2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186543,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpdeo_a8ty.java:31)\n\tat Problem.main(tmpdeo_a8ty.java:45)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186534,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv4ily3qy.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                long sum1 = p1.getValue0() + p1.getValue1();\n                long sum2 = p2.getValue0() + p2.getValue1();\n                if (sum1 < sum2) {\n                    return -1;\n                } else if (sum1 > sum2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186543,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp598ylv54.java:31)\n\tat Problem.main(tmp598ylv54.java:45)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(n1);\n                pair.add(n2);\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186544,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ccpm960.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() != nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186545,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp92h2emau.java:21)\n\tat Problem.main(tmp92h2emau.java:35)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> pair = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n                pair = new ArrayList<Long>();\n            }\n        }\n        Collections.sort(result, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        ArrayList<ArrayList<Long>> result2 = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < k; i++) {\n            result2.add(result.get(i));\n        }\n        return result2;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186545,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7koj3rky.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue1() / nums2.size())), nums2.get((int) (pair.getValue1() % nums2.size())))));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186545,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp66ck3927.java:23)\n\tat Problem.main(tmp66ck3927.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num : nums1) {\n            pq.add(Pair.with(num, nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            int index = nums2.indexOf(p.getValue1());\n            if (index < nums2.size() - 1) {\n                pq.add(Pair.with(p.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186546,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp1j8934z2.java:22)\n\tat Problem.main(tmp1j8934z2.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int)(o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            result.add(queue.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186547,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgcx3yj6r.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (result.size() < k && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long i = pair.getValue1();\n            long j = nums2.indexOf(pair.getValue0() - nums1.get(i));\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(nums1.get(i));\n            list.add(nums2.get(j));\n            result.add(list);\n            if (j < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j + 1), i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186547,
      "stdout": "",
      "stderr": "/tmp/tmpimu9kuat.java:26: error: incompatible types: possible lossy conversion from long to int\n            long j = nums2.indexOf(pair.getValue0() - nums1.get(i));\n                                                                ^\n/tmp/tmpimu9kuat.java:28: error: incompatible types: possible lossy conversion from long to int\n            list.add(nums1.get(i));\n                               ^\n/tmp/tmpimu9kuat.java:29: error: incompatible types: possible lossy conversion from long to int\n            list.add(nums2.get(j));\n                               ^\n/tmp/tmpimu9kuat.java:32: error: incompatible types: possible lossy conversion from long to int\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j + 1), i));\n                                                      ^\n/tmp/tmpimu9kuat.java:32: error: incompatible types: possible lossy conversion from long to int\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j + 1), i));\n                                                                       ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> visited = new HashSet<>();\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue1();\n            if (visited.contains(index)) {\n                continue;\n            }\n            visited.add(index);\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(nums1.get((int) i));\n            list.add(nums2.get((int) j));\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186548,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmphn1pvttf.java:23)\n\tat Problem.main(tmphn1pvttf.java:44)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186548,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7zx02ecq.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) p.getValue1()));\n            pair.add(nums2.get((int) p.getValue0() - (int) nums1.get((int) p.getValue1())));\n            result.add(pair);\n            if (p.getValue0() < nums1.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186548,
      "stdout": "",
      "stderr": "/tmp/tmpg_zkhqa3.java:26: error: incompatible types: Long cannot be converted to int\n            pair.add(nums1.get((int) p.getValue1()));\n                                                ^\n/tmp/tmpg_zkhqa3.java:27: error: incompatible types: Long cannot be converted to int\n            pair.add(nums2.get((int) p.getValue0() - (int) nums1.get((int) p.getValue1())));\n                                                ^\n/tmp/tmpg_zkhqa3.java:27: error: incompatible types: Long cannot be converted to int\n            pair.add(nums2.get((int) p.getValue0() - (int) nums1.get((int) p.getValue1())));\n                                                                                      ^\n/tmp/tmpg_zkhqa3.java:30: error: incompatible types: Long cannot be converted to int\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n                                                                       ^\n/tmp/tmpg_zkhqa3.java:30: error: incompatible types: Long cannot be converted to int\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n                                                                                                            ^\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186549,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpvor51375.java:23)\n\tat Problem.main(tmpvor51375.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186549,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp9k5ge9l7.java:21)\n\tat Problem.main(tmp9k5ge9l7.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2()));\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<>(nums1.get(i), nums2.get(0)));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            res.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186549,
      "stdout": "",
      "stderr": "/tmp/tmp_yz_d8u_.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2()));\n                                                                                                   ^\n  symbol:   method getValue2()\n  location: variable a of type Pair<Long,Long>\n/tmp/tmp_yz_d8u_.java:13: error: cannot find symbol\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2()));\n                                                                                                                                   ^\n  symbol:   method getValue2()\n  location: variable b of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186550,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmprmq05p_w.java:20)\n\tat Problem.main(tmprmq05p_w.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186550,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpjpn6wvhs.java:12)\n\tat Problem.main(tmpjpn6wvhs.java:31)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186551,
      "stdout": "",
      "stderr": "/tmp/tmpgvgymysm.java:18: error: cannot find symbol\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n                                               ^\n  symbol:   method getValue2()\n  location: variable a of type Pair<Long,Long>\n/tmp/tmpgvgymysm.java:18: error: cannot find symbol\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n                                                                               ^\n  symbol:   method getValue2()\n  location: variable b of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (pair.getValue1() / nums2.size())), nums2.get((int) (pair.getValue1() % nums2.size())))));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186552,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmppjpjpjox.java:23)\n\tat Problem.main(tmppjpjpjox.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            if (sum1 < sum2) {\n                return -1;\n            } else if (sum1 > sum2) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186551,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmput0qp77o.java:15)\n\tat Problem.main(tmput0qp77o.java:42)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(nums1.get((int) (pair.getValue2() / nums2.size())));\n            list.add(nums2.get((int) (pair.getValue2() % nums2.size())));\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186552,
      "stdout": "",
      "stderr": "/tmp/tmpk924uau_.java:26: error: cannot find symbol\n            list.add(nums1.get((int) (pair.getValue2() / nums2.size())));\n                                          ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n/tmp/tmpk924uau_.java:27: error: cannot find symbol\n            list.add(nums2.get((int) (pair.getValue2() % nums2.size())));\n                                          ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num : nums1) {\n            pq.add(new Pair<Long, Long>(num + nums2.get(0), 0L));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0() - nums2.get(pair.getValue1().intValue()), nums2.get(pair.getValue1().intValue()))));\n            if (pair.getValue1() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(pair.getValue0() - nums2.get(pair.getValue1().intValue()) + nums2.get(pair.getValue1().intValue() + 1), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186553,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmppjppakxc.java:22)\n\tat Problem.main(tmppjppakxc.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186516,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptun99796.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186554,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpgczxlujp.java:21)\n\tat Problem.main(tmpgczxlujp.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186554,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpr0g9b_kw.java:22)\n\tat Problem.main(tmpr0g9b_kw.java:38)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int)(o1.getValue0() + o1.getValue1() - o2.getValue0() - o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186554,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpyik089in.java:20)\n\tat Problem.main(tmpyik089in.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long aSum = a.getValue0() + a.getValue1();\n            long bSum = b.getValue0() + b.getValue1();\n            if (aSum < bSum) {\n                return -1;\n            } else if (aSum > bSum) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186554,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpjuk0hj4x.java:12)\n\tat Problem.main(tmpjuk0hj4x.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> heap = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                heap.add(pair);\n            }\n        }\n        while (k > 0 && !heap.isEmpty()) {\n            result.add(heap.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186555,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinu25iem.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() + a.getValue1() > b.getValue0() + b.getValue1()) {\n                return 1;\n            } else if (a.getValue0() + a.getValue1() < b.getValue0() + b.getValue1()) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186556,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpzxthedsp.java:12)\n\tat Problem.main(tmpzxthedsp.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) p.getValue1()));\n            pair.add(nums2.get((int) p.getValue0() - (int) pair.get(0)));\n            result.add(pair);\n            if (p.getValue0() < nums1.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186556,
      "stdout": "",
      "stderr": "/tmp/tmp_av1glg1.java:26: error: incompatible types: Long cannot be converted to int\n            pair.add(nums1.get((int) p.getValue1()));\n                                                ^\n/tmp/tmp_av1glg1.java:27: error: incompatible types: Long cannot be converted to int\n            pair.add(nums2.get((int) p.getValue0() - (int) pair.get(0)));\n                                                ^\n/tmp/tmp_av1glg1.java:27: error: incompatible types: Long cannot be converted to int\n            pair.add(nums2.get((int) p.getValue0() - (int) pair.get(0)));\n                                                                   ^\n/tmp/tmp_av1glg1.java:30: error: incompatible types: Long cannot be converted to int\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n                                                                       ^\n/tmp/tmp_av1glg1.java:30: error: incompatible types: Long cannot be converted to int\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n                                                                                                            ^\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            return Long.compare(sum1, sum2);\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186556,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp6o09uzm7.java:12)\n\tat Problem.main(tmp6o09uzm7.java:35)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            if (p.getValue1() != nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(p.getValue0(), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186556,
      "stdout": "",
      "stderr": "/tmp/tmppnokasow.java:17: error: cannot find symbol\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n                                               ^\n  symbol:   method getValue2()\n  location: variable a of type Pair<Long,Long>\n/tmp/tmppnokasow.java:17: error: cannot find symbol\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n                                                                               ^\n  symbol:   method getValue2()\n  location: variable b of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186557,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_o3r328.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue1());\n            temp.add(p.getValue0());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186558,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp5rijnl6d.java:20)\n\tat Problem.main(tmp5rijnl6d.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186558,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdb4uo5by.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return Long.compare(o1.getValue0() + o1.getValue1(), o2.getValue0() + o2.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186558,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp08yma9iz.java:23)\n\tat Problem.main(tmp08yma9iz.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue2() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue2() % nums2.size())));\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186558,
      "stdout": "",
      "stderr": "/tmp/tmpd0b5r3ch.java:29: error: cannot find symbol\n            pair.add(nums1.get((int) (p.getValue2() / nums2.size())));\n                                       ^\n  symbol:   method getValue2()\n  location: variable p of type Pair<Long,Long>\n/tmp/tmpd0b5r3ch.java:30: error: cannot find symbol\n            pair.add(nums2.get((int) (p.getValue2() % nums2.size())));\n                                       ^\n  symbol:   method getValue2()\n  location: variable p of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) p.getValue1()));\n            pair.add(nums2.get((int) p.getValue0() - (int) pair.get(0)));\n            result.add(pair);\n            if (p.getValue0() < nums1.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186556,
      "stdout": "",
      "stderr": "/tmp/tmp_av1glg1.java:26: error: incompatible types: Long cannot be converted to int\n            pair.add(nums1.get((int) p.getValue1()));\n                                                ^\n/tmp/tmp_av1glg1.java:27: error: incompatible types: Long cannot be converted to int\n            pair.add(nums2.get((int) p.getValue0() - (int) pair.get(0)));\n                                                ^\n/tmp/tmp_av1glg1.java:27: error: incompatible types: Long cannot be converted to int\n            pair.add(nums2.get((int) p.getValue0() - (int) pair.get(0)));\n                                                                   ^\n/tmp/tmp_av1glg1.java:30: error: incompatible types: Long cannot be converted to int\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n                                                                       ^\n/tmp/tmp_av1glg1.java:30: error: incompatible types: Long cannot be converted to int\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n                                                                                                            ^\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(p.getValue0().intValue()));\n            result.add(pair);\n            if (p.getValue0() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue()) + nums2.get(p.getValue0().intValue() + 1), p.getValue1()));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186559,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmprefer59j.java:21)\n\tat Problem.main(tmprefer59j.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - (b.getValue0() + b.getValue1()));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            res.add(pair);\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186560,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpc_suczap.java:21)\n\tat Problem.main(tmpc_suczap.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(i);\n                temp.add(j);\n                pq.add(temp);\n            }\n        }\n        while (k-- > 0) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186560,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkaj0lmw5.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) return result;\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (queue.isEmpty()) break;\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue0() - pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186561,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp43y4193d.java:21)\n\tat Problem.main(tmp43y4193d.java:35)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186560,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpjpt0_iyf.java:22)\n\tat Problem.main(tmpjpt0_iyf.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) (p.getValue2() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue2() % nums2.size())));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186561,
      "stdout": "",
      "stderr": "/tmp/tmpxzfl5224.java:29: error: cannot find symbol\n            pair.add(nums1.get((int) (p.getValue2() / nums2.size())));\n                                       ^\n  symbol:   method getValue2()\n  location: variable p of type Pair<Long,Long>\n/tmp/tmpxzfl5224.java:30: error: cannot find symbol\n            pair.add(nums2.get((int) (p.getValue2() % nums2.size())));\n                                       ^\n  symbol:   method getValue2()\n  location: variable p of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186562,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp7gcmlnkk.java:22)\n\tat Problem.main(tmp7gcmlnkk.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186562,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9dpoloeh.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) - b.get(0) - b.get(1) > 0 ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186563,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxn2jgxqg.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            int i = (int) (p.getValue1() / nums2.size());\n            int j = (int) (p.getValue1() % nums2.size());\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(i));\n            pair.add(nums2.get(j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186563,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp6dg2vfyn.java:23)\n\tat Problem.main(tmp6dg2vfyn.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        for (long i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186563,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpqaiqglbo.java:22)\n\tat Problem.main(tmpqaiqglbo.java:35)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186565,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl8ps33_8.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186565,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp8xrzgy6t.java:22)\n\tat Problem.main(tmp8xrzgy6t.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue1();\n            long num1 = nums1.get((int) (index / nums2.size()));\n            long num2 = nums2.get((int) (index % nums2.size()));\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(num1);\n            list.add(num2);\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186565,
      "stdout": "",
      "stderr": "/tmp/tmpe3uhkvo5.java:23: error: incompatible types: inference variable B has incompatible bounds\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n                  ^\n    equality constraints: Long\n    lower bounds: Integer\n  where B,A are type-variables:\n    B extends Object declared in method <A,B>with(A,B)\n    A extends Object declared in method <A,B>with(A,B)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186558,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdb4uo5by.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(index + 1)));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186566,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpp9b2cb97.java:21)\n\tat Problem.main(tmpp9b2cb97.java:38)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b00mn6l.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - (b.getValue0() + b.getValue1()));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186566,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpepa7yeb5.java:20)\n\tat Problem.main(tmpepa7yeb5.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue0() - pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186567,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmps2ekhxv_.java:20)\n\tat Problem.main(tmps2ekhxv_.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) (pair.getValue2() / nums2.size())));\n            temp.add(nums2.get((int) (pair.getValue2() % nums2.size())));\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186567,
      "stdout": "",
      "stderr": "/tmp/tmpgb7oxz08.java:29: error: cannot find symbol\n            temp.add(nums1.get((int) (pair.getValue2() / nums2.size())));\n                                          ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n/tmp/tmpgb7oxz08.java:30: error: cannot find symbol\n            temp.add(nums2.get((int) (pair.getValue2() % nums2.size())));\n                                          ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(a.getValue1() + a.getValue0() - b.getValue1() - b.getValue0()));\n        pq.add(new Pair<>(nums1.get(0), nums2.get(0)));\n        HashSet<Pair<Long, Long>> visited = new HashSet<>();\n        visited.add(new Pair<>(nums1.get(0), nums2.get(0)));\n        while (res.size() < k && !pq.isEmpty()) {\n            Pair<Long, Long> cur = pq.poll();\n            res.add(new ArrayList<>(Arrays.asList(cur.getValue0(), cur.getValue1())));\n            long i = cur.getValue0();\n            long j = cur.getValue1();\n            if (i + 1 < nums1.size() && !visited.contains(new Pair<>(i + 1, j))) {\n                pq.add(new Pair<>(i + 1, j));\n                visited.add(new Pair<>(i + 1, j));\n            }\n            if (j + 1 < nums2.size() && !visited.contains(new Pair<>(i, j + 1))) {\n                pq.add(new Pair<>(i, j + 1));\n                visited.add(new Pair<>(i, j + 1));\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186567,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp794xu_ct.java:13)\n\tat Problem.main(tmp794xu_ct.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0() - nums2.get((int) pair.getValue1()), nums2.get((int) pair.getValue1()))));\n            if (pair.getValue1() == nums2.size() - 1) {\n                continue;\n            }\n            pq.add(new Pair<Long, Long>(pair.getValue0() - nums2.get((int) pair.getValue1()) + nums2.get((int) pair.getValue1() + 1), pair.getValue1() + 1));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186568,
      "stdout": "",
      "stderr": "/tmp/tmpmer_rkn8.java:25: error: incompatible types: Long cannot be converted to int\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0() - nums2.get((int) pair.getValue1()), nums2.get((int) pair.getValue1()))));\n                                                                                                          ^\n/tmp/tmpmer_rkn8.java:25: error: incompatible types: Long cannot be converted to int\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0() - nums2.get((int) pair.getValue1()), nums2.get((int) pair.getValue1()))));\n                                                                                                                                             ^\n/tmp/tmpmer_rkn8.java:29: error: incompatible types: Long cannot be converted to int\n            pq.add(new Pair<Long, Long>(pair.getValue0() - nums2.get((int) pair.getValue1()) + nums2.get((int) pair.getValue1() + 1), pair.getValue1() + 1));\n                                                                                         ^\n/tmp/tmpmer_rkn8.java:29: error: incompatible types: Long cannot be converted to int\n            pq.add(new Pair<Long, Long>(pair.getValue0() - nums2.get((int) pair.getValue1()) + nums2.get((int) pair.getValue1() + 1), pair.getValue1() + 1));\n                                                                                                                             ^\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp_nh01vz2.java:23)\n\tat Problem.main(tmp_nh01vz2.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sumA = a.getValue0() + a.getValue1();\n            long sumB = b.getValue0() + b.getValue1();\n            return Long.compare(sumA, sumB);\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> pairList = new ArrayList<>();\n            pairList.add(pair.getValue0());\n            pairList.add(pair.getValue1());\n            result.add(pairList);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186568,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpx84zp3qc.java:15)\n\tat Problem.main(tmpx84zp3qc.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186516,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptun99796.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        while (!pq.isEmpty() && k-- > 0) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            ans.add(pair);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186569,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmprva22bpq.java:20)\n\tat Problem.main(tmprva22bpq.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.get(0) + a.get(1);\n            long sum2 = b.get(0) + b.get(1);\n            if (sum1 == sum2) {\n                return 0;\n            }\n            return sum1 < sum2 ? -1 : 1;\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186570,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp33lb7e2w.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue1();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (index / nums2.size())), nums2.get((int) (index % nums2.size())))));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186570,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpg42ece8r.java:23)\n\tat Problem.main(tmpg42ece8r.java:35)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186570,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmptdyfe014.java:23)\n\tat Problem.main(tmptdyfe014.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186570,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpuc53uzw8.java:23)\n\tat Problem.main(tmpuc53uzw8.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186571,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpv806689u.java:20)\n\tat Problem.main(tmpv806689u.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue1() + p1.getValue0()) - (int)(p2.getValue1() + p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                queue.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186572,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp5tatox1j.java:21)\n\tat Problem.main(tmp5tatox1j.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp_nh01vz2.java:23)\n\tat Problem.main(tmp_nh01vz2.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186571,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp38iq6ctv.java:23)\n\tat Problem.main(tmp38iq6ctv.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(p.getValue0(), p.getValue1())));\n            if (p.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(p.getValue1());\n                pq.add(new Pair<Long, Long>(p.getValue0(), nums2.get(index + 1)));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186573,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmphea7mnwe.java:22)\n\tat Problem.main(tmphea7mnwe.java:35)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1 * num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186573,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp0inpjg5_.java:20)\n\tat Problem.main(tmp0inpjg5_.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186572,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8nf78ys.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186573,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp8cmti_22.java:23)\n\tat Problem.main(tmp8cmti_22.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                queue.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> pair = queue.poll();\n            if (pair == null) {\n                break;\n            }\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue0() - pair.getValue1());\n            result.add(list);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186574,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp9bophx88.java:20)\n\tat Problem.main(tmp9bophx88.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186575,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpmb25yhuy.java:22)\n\tat Problem.main(tmpmb25yhuy.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186575,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpz2deq9ax.java:23)\n\tat Problem.main(tmpz2deq9ax.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186575,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp42xqfzea.java:23)\n\tat Problem.main(tmp42xqfzea.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> tmp = new ArrayList<>();\n            tmp.add(p.getValue0());\n            tmp.add(p.getValue1());\n            res.add(tmp);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186576,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmplmhg8rda.java:21)\n\tat Problem.main(tmplmhg8rda.java:35)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n            }\n        }\n        Collections.sort(result, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> pair1, ArrayList<Long> pair2) {\n                return (int) (pair1.get(0) + pair1.get(1) - pair2.get(0) - pair2.get(1));\n            }\n        });\n        return new ArrayList<ArrayList<Long>>(result.subList(0, (int) k));\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186577,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpyfc1xd4i.java:23)\n\tat Problem.main(tmpyfc1xd4i.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186526,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplaw45z3b.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        Set<Long> set = new HashSet<>();\n        while (res.size() < k && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            if (set.contains(pair.getValue1())) continue;\n            set.add(pair.getValue1());\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(nums1.get((int) (pair.getValue1() / nums2.size())));\n            list.add(nums2.get((int) (pair.getValue1() % nums2.size())));\n            res.add(list);\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186577,
      "stdout": "",
      "stderr": "/tmp/tmp7n9j2w46.java:21: error: incompatible types: inference variable B has incompatible bounds\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n                  ^\n    equality constraints: Long\n    lower bounds: Integer\n  where B,A are type-variables:\n    B extends Object declared in method <A,B>with(A,B)\n    A extends Object declared in method <A,B>with(A,B)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186577,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp87n15fp8.java:19)\n\tat Problem.main(tmp87n15fp8.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp_nh01vz2.java:23)\n\tat Problem.main(tmp_nh01vz2.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i) + nums2.get(j));\n                temp.add((long)i);\n                temp.add((long)j);\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ArrayList<Long> temp = pq.poll();\n            ArrayList<Long> temp2 = new ArrayList<>();\n            temp2.add(nums1.get(temp.get(1).intValue()));\n            temp2.add(nums2.get(temp.get(2).intValue()));\n            result.add(temp2);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186578,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxm6rtlp1.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(Pair.with(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue1(), pair.getValue0() - pair.getValue1())));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186579,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpdq5cnbjf.java:23)\n\tat Problem.main(tmpdq5cnbjf.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(p.getValue0(), p.getValue1())));\n            if (p.getValue1() != nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(p.getValue1());\n                pq.add(new Pair<Long, Long>(p.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186579,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpr6hggg4x.java:21)\n\tat Problem.main(tmpr6hggg4x.java:35)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue1() + a.getValue0(), b.getValue1() + b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186579,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpf4y8uumd.java:21)\n\tat Problem.main(tmpf4y8uumd.java:38)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue1() + a.getValue0() - b.getValue1() - b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186580,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp3yh44zfv.java:21)\n\tat Problem.main(tmp3yh44zfv.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186512,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b00mn6l.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int) (o1.getValue0() + o1.getValue1() - o2.getValue0() - o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186581,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp1pwi7qvz.java:21)\n\tat Problem.main(tmp1pwi7qvz.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186575,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpz2deq9ax.java:23)\n\tat Problem.main(tmpz2deq9ax.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186516,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptun99796.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(Pair.with(nums1.get(i) + nums2.get(0), i));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(0));\n            result.add(pair);\n            if (p.getValue1() == nums1.size() - 1) {\n                continue;\n            }\n            pq.add(Pair.with(nums1.get(p.getValue1().intValue() + 1) + nums2.get(0), p.getValue1() + 1));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186581,
      "stdout": "",
      "stderr": "/tmp/tmp5y6os8pb.java:22: error: incompatible types: inference variable B has incompatible bounds\n            pq.add(Pair.with(nums1.get(i) + nums2.get(0), i));\n              ^\n    equality constraints: Long\n    lower bounds: Integer\n  where B,A are type-variables:\n    B extends Object declared in method <A,B>with(A,B)\n    A extends Object declared in method <A,B>with(A,B)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        for (int i = 0; i < k && i < nums1.size() * nums2.size(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(0));\n            result.add(pair);\n            if (p.getValue1() == nums1.size() - 1) {\n                continue;\n            }\n            pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue() + 1) + nums2.get(0), p.getValue1() + 1));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186581,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp7bxwq9km.java:21)\n\tat Problem.main(tmp7bxwq9km.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int)(o1.getValue0() + o1.getValue1() - o2.getValue0() - o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186582,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp7h15lvdz.java:20)\n\tat Problem.main(tmp7h15lvdz.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (pair.getValue1() / nums2.size())), nums2.get((int) (pair.getValue1() % nums2.size())))));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186582,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpawm2ug3_.java:23)\n\tat Problem.main(tmpawm2ug3_.java:34)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186583,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpnbq91kvb.java:22)\n\tat Problem.main(tmpnbq91kvb.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> maxHeap = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p2.getValue0() + p2.getValue1() - (p1.getValue0() + p1.getValue1()));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                maxHeap.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !maxHeap.isEmpty()) {\n            Pair<Long, Long> pair = maxHeap.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186583,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp99bjwjt0.java:23)\n\tat Problem.main(tmp99bjwjt0.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.offer(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) break;\n            result.add(pq.poll());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186583,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptmrby01f.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int)i));\n            pair.add(nums2.get((int)j));\n            res.add(pair);\n            k--;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186584,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpq4e6kdxb.java:21)\n\tat Problem.main(tmpq4e6kdxb.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            long index = pair.getValue2();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (index / nums2.size())), nums2.get((int) (index % nums2.size())))));\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186584,
      "stdout": "",
      "stderr": "/tmp/tmpjpu7jwfo.java:27: error: cannot find symbol\n            long index = pair.getValue2();\n                             ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        for (long i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpo6ygqcn7.java:20)\n\tat Problem.main(tmpo6ygqcn7.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            int i = (int) (p.getValue1() / nums2.size());\n            int j = (int) (p.getValue1() % nums2.size());\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(i));\n            pair.add(nums2.get(j));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186529,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpyxs6imz8.java:23)\n\tat Problem.main(tmpyxs6imz8.java:39)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186565,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp8xrzgy6t.java:22)\n\tat Problem.main(tmp8xrzgy6t.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (!pq.isEmpty() && k > 0) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue1() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue1() % nums2.size())));\n            result.add(pair);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186585,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpwfkhez9_.java:23)\n\tat Problem.main(tmpwfkhez9_.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186539,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj5fzv1s8.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        long count = 0;\n        while (count < k && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue2();\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) i));\n            temp.add(nums2.get((int) j));\n            result.add(temp);\n            count++;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186585,
      "stdout": "",
      "stderr": "/tmp/tmp8li652ip.java:23: error: incompatible types: cannot infer type arguments for Pair<>\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n                               ^\n    reason: inference variable B has incompatible bounds\n      equality constraints: Long\n      lower bounds: Integer\n  where B is a type-variable:\n    B extends Object declared in class Pair\n/tmp/tmp8li652ip.java:29: error: cannot find symbol\n            long index = pair.getValue2();\n                             ^\n  symbol:   method getValue2()\n  location: variable pair of type Pair<Long,Long>\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue0() - pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186586,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpixz4yees.java:23)\n\tat Problem.main(tmpixz4yees.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186565,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl8ps33_8.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                queue.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (k > 0 && queue.size() > 0) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186587,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmp1l_tetnx.java:22)\n\tat Problem.main(tmp1l_tetnx.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186587,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpidfcb9f7.java:23)\n\tat Problem.main(tmpidfcb9f7.java:36)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1 * num2));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186587,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpe685xwyc.java:20)\n\tat Problem.main(tmpe685xwyc.java:33)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
      "timestamp": 1667186587,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.NoClassDefFoundError: org/javatuples/Pair\n\tat Problem.kSmallestPairs(tmpu0r3s2zy.java:23)\n\tat Problem.main(tmpu0r3s2zy.java:37)\nCaused by: java.lang.ClassNotFoundException: org.javatuples.Pair\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)\n\t... 2 more\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}