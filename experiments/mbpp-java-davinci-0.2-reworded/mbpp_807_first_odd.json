{
  "name": "mbpp_807_first_odd",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the first odd number in a given array list of numbers.\n    public static long firstOdd(ArrayList<Long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))) == (1l));\n    assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l)))) == (1l));\n    assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)1l)))) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(x -> x % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(x -> x % 2 != 0).findFirst().get();",
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(x -> x % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(x -> x % 2 != 0).findFirst().get();",
    "        return nums.stream().filter(x -> x % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(x -> x % 2 == 1).findFirst().get();",
    "        // Write your code here.\n        return nums.stream().filter(n -> n % 2 != 0).findFirst().get();",
    "        return nums.stream().filter(x -> x % 2 != 0).findFirst().get();",
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();",
    "        for (long num : nums) {\n            if (num % 2 != 0) {\n                return num;\n            }\n        }\n        return -1;",
    "        return nums.stream().filter(x -> x % 2 != 0).findFirst().get();",
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();",
    "        return nums.stream().filter(num -> num % 2 != 0).findFirst().get();",
    "        return nums.stream().filter(n -> n % 2 == 1).findFirst().get();"
  ]
}