{
  "name": "mbpp_463_max_subarray_product",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum product subarray array list of the given array array list.\n    public static long maxSubarrayProduct(ArrayList<Long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)0l, (long)7l, (long)-8l, (long)-2l)))) == (112l));\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)6l, (long)-3l, (long)-10l, (long)0l, (long)2l)))) == (180l));\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-40l, (long)0l, (long)-2l, (long)-3l)))) == (80l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long ans = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = max;\n            max = Math.max(Math.max(max * arr.get(i), min * arr.get(i)), arr.get(i));\n            min = Math.min(Math.min(temp * arr.get(i), min * arr.get(i)), arr.get(i));\n            if (max > ans) {\n                ans = max;\n            }\n        }\n        return ans;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = arr.get(0);\n        long min = arr.get(0);\n        long result = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                long temp = max;\n                max = min;\n                min = temp;\n            }\n            max = Math.max(arr.get(i), max * arr.get(i));\n            min = Math.min(arr.get(i), min * arr.get(i));\n            result = Math.max(result, max);\n        }\n        return result;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max = Long.MIN_VALUE;\n        long curr = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            curr *= arr.get(i);\n            max = Math.max(max, curr);\n            if (curr == 0) curr = 1;\n        }\n        curr = 1;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            curr *= arr.get(i);\n            max = Math.max(max, curr);\n            if (curr == 0) curr = 1;\n        }\n        return max;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;",
    "        long max_ending_here = 1;\n        long min_ending_here = 1;\n        long max_so_far = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                max_ending_here = max_ending_here * arr.get(i);\n                min_ending_here = Math.min(min_ending_here * arr.get(i), 1);\n            } else if (arr.get(i) == 0) {\n                max_ending_here = 1;\n                min_ending_here = 1;\n            } else {\n                long temp = max_ending_here;\n                max_ending_here = Math.max(min_ending_here * arr.get(i), 1);\n                min_ending_here = temp * arr.get(i);\n            }\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;"
  ]
}