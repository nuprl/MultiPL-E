{
  "name": "mbpp_407_rearrange_bigger",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    public static Object rearrangeBigger(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(rearrangeBigger((12l)).equals((Object(21l))));\n    assert(rearrangeBigger((10l)).equals((Object(false))));\n    assert(rearrangeBigger((102l)).equals((Object(120l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // If the number has only one digit, it is the biggest number possible.\n        if (n < 10) {\n            return -1;\n        }\n        // Convert the number to a string.\n        String s = Long.toString(n);\n        // Create a list of the digits.\n        List<Integer> digits = new ArrayList<Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            digits.add(Character.getNumericValue(s.charAt(i)));\n        }\n        // Find the first digit that is less than the digit to its right.\n        int i = 0;\n        while (i < digits.size() - 1 && digits.get(i) >= digits.get(i + 1)) {\n            i++;\n        }\n        // If no such digit exists, the number is the biggest possible.\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the digit found in the previous step that is greater than the digit found in the previous step.\n        int j = i + 1;\n        while (j < digits.size() - 1 && digits.get(j) <= digits.get(i)) {\n            j++;\n        }\n        // Swap the digits found in the previous two steps.\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits to the right of the digit found in the first step in ascending order.\n        List<Integer> sublist = digits.subList(i + 1, digits.size());\n        Collections.sort(sublist);\n        // Convert the list of digits back to a number.\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < digits.size(); k++) {\n            sb.append(digits.get(k));\n        }\n        return Long.parseLong(sb.toString());",
    "        // Given a number, return the next bigger number that can be formed by rearranging the digits.\n        // If the given number is the biggest possible number with its digits, return -1.\n        // For example:\n        // 12 ==> 21\n        // 513 ==> 531\n        // 2017 ==> 2071\n        // 9 ==> -1\n        // 111 ==> -1\n        // 531 ==> -1\n        // 123456789 ==> 123456798\n        // 123456798 ==> 123456879\n        // 123456879 ==> 123456897\n        // 123456897 ==> 123456978\n        // 123456978 ==> 123457689\n        // 123457689 ==> 123457869\n        // 123457869 ==> 123457896\n        // 123457896 ==> 123457968\n        // 123457968 ==> 123457986\n        // 123457986 ==> 123458679\n        // 123458679 ==> 123458697\n        // 123458697 ==> 123458769\n        // 123458769 ==> 123458796\n        // 123458796 ==> 123458867\n        // 123458867 ==> 123458876\n        // 123458876 ==> 123458897\n        // 123458897 ==> 123458967\n        // 123458967 ==> 123458976\n        // 123458976 ==> 123458987\n        // 123458987 ==> 123459768\n        // 123459768 ==> 123459786\n        // 123459786 ==> 123459867\n        // 123459867 ==> 123459876\n        // 123459876 ==> 123459887\n        // 123459887 ==> 123459967\n        // 123459967 ==> 123459976\n        // 123459976 ==> 123459987\n        // 123459987 ==> 123465789\n        // 123465789 ==> 123465879\n        // 123465879 ==> 123465897\n        // 123465897 ==> 123465978\n        // 123465978 ==> 123465987\n        // 123465987 ==>",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first index from the right that is smaller than the one to its right\n        int i = c.length - 2;\n        while (i >= 0 && c[i] >= c[i + 1]) {\n            i--;\n        }\n        // If no such index exists, the number is already the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest number to the right of i that is larger than c[i]\n        int j = c.length - 1;\n        while (j >= 0 && c[j] <= c[i]) {\n            j--;\n        }\n        // Swap c[i] and c[j]\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // Reverse the string to the right of i\n        int left = i + 1;\n        int right = c.length - 1;\n        while (left < right) {\n            temp = c[left];\n            c[left] = c[right];\n            c[right] = temp;\n            left++;\n            right--;\n        }\n        // Convert back to string and return\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If there is no decreasing digit, then the number is already the biggest\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the first decreasing digit with the smallest digit to the right of it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to long\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the first decreasing digit with the smallest digit to the right\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        // 1. Find the largest index i such that array[i \u2212 1] < array[i].\n        // If no such index exists, the permutation is the last permutation.\n        // 2. Find the largest index j greater than i such that array[j] > array[i \u2212 1].\n        // 3. Swap array[j] and array[i \u2212 1].\n        // 4. Reverse the suffix starting at array[i].\n        //\n        // Example:\n        // Input:  [1,2,3]\n        // Output: [1,3,2]\n        //\n        // Input:  [3,2,1]\n        // Output: [1,2,3]\n        //\n        // Input:  [1,1,5]\n        // Output: [1,5,1]\n        //\n        // Input:  [1,3,2]\n        // Output: [2,1,3]\n        //\n        // Input:  [2,3,1]\n        // Output: [3,1,2]\n        //\n        // Input:  [5,4,7,5,3,2]\n        // Output: [5,5,2,3,4,7]\n        //\n        // Input:  [2,2,7,5,4,3,2,2,1]\n        // Output: [2,3,1,2,2,2,4,5,7]\n        //\n        // Input:  [2,1,3]\n        // Output: [3,1,2]\n        //\n        // Input:  [1,1,1]\n        // Output: [1,1,1]\n        //\n        // Input:  [1,2]\n        // Output: [2,1]\n        //\n        // Input:  [2,1]\n        // Output: [1,2]\n        //\n        // Input:  [1]\n        // Output: [1]\n        //\n        // Input:  [1,2,3,4]\n        // Output: [1,2,4,3]\n        //\n        // Input:  [1,2,4,3]\n        //",
    "        // convert to array of digits\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int)n % 10);\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // find the first digit that is smaller than the one to the right\n        int i = 0;\n        for (i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // if no such digit exists, return -1\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // find the smallest digit to the right of the first digit that is larger than the first digit\n        int j = i + 1;\n        for (int k = i + 2; k < digits.size(); k++) {\n            if (digits.get(k) < digits.get(j) && digits.get(k) > digits.get(i)) {\n                j = k;\n            }\n        }\n        // swap the first digit and the smallest digit to the right of it\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // sort the digits to the right of the first digit\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // convert the array of digits back to a number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Create a list of chars\n        List<Character> list = new ArrayList<Character>();\n        for (char c : chars) {\n            list.add(c);\n        }\n        // Create a list of indices\n        List<Integer> indices = new ArrayList<Integer>();\n        for (int i = 0; i < list.size(); i++) {\n            indices.add(i);\n        }\n        // Create a list of pairs\n        List<Pair<Character, Integer>> pairs = new ArrayList<Pair<Character, Integer>>();\n        for (int i = 0; i < list.size(); i++) {\n            pairs.add(new Pair<Character, Integer>(list.get(i), indices.get(i)));\n        }\n        // Sort the pairs\n        Collections.sort(pairs, new Comparator<Pair<Character, Integer>>() {\n            @Override\n            public int compare(Pair<Character, Integer> p1, Pair<Character, Integer> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        // Find the first pair that is greater than the previous pair\n        int i = 0;\n        while (i < pairs.size() - 1) {\n            if (pairs.get(i).getValue0() < pairs.get(i + 1).getValue0()) {\n                break;\n            }\n            i++;\n        }\n        // If no such pair exists, return -1\n        if (i == pairs.size() - 1) {\n            return -1;\n        }\n        // Swap the two pairs\n        Pair<Character, Integer> temp = pairs.get(i);\n        pairs.set(i, pairs.get(i + 1));\n        pairs.set(i + 1, temp);\n        // Sort the pairs from i + 1 to the end\n        Collections.sort(pairs.subList(i + 1, pairs.size()), new Comparator<Pair<Character, Integer>>() {\n            @",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first index from the right that is smaller than the next\n        int i = chars.length - 1;\n        while (i > 0 && chars[i] <= chars[i - 1]) {\n            i--;\n        }\n        // If i is 0, then the number is already the largest possible\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest number to the right of i that is larger than the number at i\n        int j = chars.length - 1;\n        while (j > i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the numbers\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Sort the numbers to the right of i\n        Arrays.sort(chars, i, chars.length);\n        // Convert back to string\n        String result = new String(chars);\n        // Convert to long\n        return Long.parseLong(result);",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] chars = s.toCharArray();\n        // find first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the first digit greater than the decreasing digit\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit and the greater digit\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long and return\n        return Long.parseLong(new String(chars));",
    "        // get the digits\n        List<Integer> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add((int) (n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // find the first digit that is smaller than the next digit\n        int i = 0;\n        for (; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // if no such digit, return -1\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // find the smallest digit that is larger than the current digit\n        int j = i + 1;\n        for (; j < digits.size(); j++) {\n            if (digits.get(j) > digits.get(i)) {\n                break;\n            }\n        }\n        // swap the digits\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // sort the digits after the current digit\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // return the number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Find the first digit that is smaller than the digit to its right.\n        // Find the smallest digit to the right of the digit found in the previous step.\n        // Swap the two digits found in the previous two steps.\n        // Sort the digits to the right of the digit found in step 1 in ascending order.\n        // If no digit found in step 1, return -1.\n        String s = Long.toString(n);\n        for (int i = s.length() - 2; i >= 0; i--) {\n            if (s.charAt(i) < s.charAt(i + 1)) {\n                char c = s.charAt(i);\n                int min = i + 1;\n                for (int j = i + 1; j < s.length(); j++) {\n                    if (s.charAt(j) < s.charAt(min) && s.charAt(j) > c) {\n                        min = j;\n                    }\n                }\n                s = s.substring(0, i) + s.charAt(min) + s.substring(i + 1, min) + c + s.substring(min + 1);\n                char[] chars = s.substring(i + 1).toCharArray();\n                Arrays.sort(chars);\n                s = s.substring(0, i + 1) + new String(chars);\n                return Long.parseLong(s);\n            }\n        }\n        return -1;",
    "        // Create a list of digits\n        List<Long> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n        // Find the first digit that is less than the digit to its right\n        int i = 0;\n        for (i = digits.size() - 1; i > 0; i--) {\n            if (digits.get(i - 1) < digits.get(i)) {\n                break;\n            }\n        }\n        // If no such digit exists, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is greater than the pivot\n        int j = i;\n        for (j = i; j < digits.size(); j++) {\n            if (digits.get(j) > digits.get(i - 1)) {\n                break;\n            }\n        }\n        // Swap the pivot with the smallest digit to its right\n        long temp = digits.get(i - 1);\n        digits.set(i - 1, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits to the right of the pivot\n        Collections.sort(digits.subList(i, digits.size()));\n        // Return the new number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If there is no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than c[i - 1]\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap c[i - 1] and c[j]\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse c[i, c.length - 1]\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        String s = String.valueOf(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = Integer.parseInt(String.valueOf(s.charAt(i)));\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < a.length; k++) {\n            sb.append(a[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        String s = Long.toString(n);\n        char[] c = s.toCharArray();\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(c));",
    "        // Get the digits of the number\n        List<Integer> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add((int) (n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that is smaller than the digit after it\n        int i = 0;\n        for (i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If there is no such digit, then the number is already the biggest\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit that is bigger than the digit at i\n        int j = i + 1;\n        for (int k = i + 1; k < digits.size(); k++) {\n            if (digits.get(k) > digits.get(i) && digits.get(k) < digits.get(j)) {\n                j = k;\n            }\n        }\n        // Swap the digits at i and j\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits after i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Return the new number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit larger than the decreasing digit\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(chars));",
    "        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Convert the number to a string.\n        String number = Long.toString(n);\n        // Create a list of digits.\n        List<Integer> digits = new ArrayList<Integer>();\n        for (int i = 0; i < number.length(); i++) {\n            digits.add(Character.getNumericValue(number.charAt(i)));\n        }\n        // Find the first digit that is smaller than the digit after it.\n        int index = -1;\n        for (int i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                index = i;\n            }\n        }\n        // If no such digit exists, return -1.\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest digit that is larger than the digit at the index.\n        int min = digits.get(index + 1);\n        int minIndex = index + 1;\n        for (int i = index + 1; i < digits.size(); i++) {\n            if (digits.get(i) > digits.get(index) && digits.get(i) < min) {\n                min = digits.get(i);\n                minIndex = i;\n            }\n        }\n        // Swap the digits at the index and the minIndex.\n        int temp = digits.get(index);\n        digits.set(index, digits.get(minIndex));\n        digits.set(minIndex, temp);\n        // Sort the digits after the index.\n        List<Integer> sublist = digits.subList(index + 1, digits.size());\n        Collections.sort(sublist);\n        // Convert the list of digits to a string.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < digits.size(); i++) {\n            sb.append(digits.get(i));\n        }\n        // Convert the string to a long.\n        return Long.parseLong(sb.toString());",
    "        // Convert to array of digits\n        int[] digits = new int[(int)Math.log10(n) + 1];\n        int i = 0;\n        while (n > 0) {\n            digits[i++] = (int)n % 10;\n            n /= 10;\n        }\n        // Find the first decreasing digit\n        int firstDecreasing = -1;\n        for (i = 0; i < digits.length - 1; i++) {\n            if (digits[i] < digits[i + 1]) {\n                firstDecreasing = i;\n            }\n        }\n        // If no decreasing digit, return -1\n        if (firstDecreasing == -1) {\n            return -1;\n        }\n        // Find the smallest digit greater than the first decreasing digit\n        int smallestGreater = firstDecreasing + 1;\n        for (i = firstDecreasing + 1; i < digits.length; i++) {\n            if (digits[i] > digits[firstDecreasing] && digits[i] < digits[smallestGreater]) {\n                smallestGreater = i;\n            }\n        }\n        // Swap the first decreasing digit with the smallest greater digit\n        int temp = digits[firstDecreasing];\n        digits[firstDecreasing] = digits[smallestGreater];\n        digits[smallestGreater] = temp;\n        // Sort the digits after the first decreasing digit\n        Arrays.sort(digits, firstDecreasing + 1, digits.length);\n        // Convert digits back to number\n        long result = 0;\n        for (i = digits.length - 1; i >= 0; i--) {\n            result = result * 10 + digits[i];\n        }\n        return result;",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // convert to list\n        List<Character> l = new ArrayList<Character>();\n        for (char x : c) {\n            l.add(x);\n        }\n        // find the first decreasing digit\n        int i = l.size() - 1;\n        while (i > 0 && l.get(i) <= l.get(i - 1)) {\n            i--;\n        }\n        // if there is no decreasing digit, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // find the smallest digit larger than the decreasing digit\n        int j = l.size() - 1;\n        while (l.get(j) <= l.get(i - 1)) {\n            j--;\n        }\n        // swap the decreasing digit and the smallest digit larger than the decreasing digit\n        char temp = l.get(i - 1);\n        l.set(i - 1, l.get(j));\n        l.set(j, temp);\n        // reverse the digits after the decreasing digit\n        Collections.reverse(l.subList(i, l.size()));\n        // convert back to string\n        StringBuilder sb = new StringBuilder();\n        for (char x : l) {\n            sb.append(x);\n        }\n        // convert back to long\n        return Long.parseLong(sb.toString());",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to array\n        char[] arr = s.toCharArray();\n        // find the first decreasing digit\n        int i = arr.length - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit to the right of the decreasing digit\n        int j = arr.length - 1;\n        while (arr[j] <= arr[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit with the smallest digit to the right\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        // reverse the digits to the right of the decreasing digit\n        j = arr.length - 1;\n        while (i < j) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to string\n        String result = new String(arr);\n        // convert to long\n        return Long.parseLong(result);",
    "        String s = String.valueOf(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.valueOf(new String(chars));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] chars = s.toCharArray();\n        // find the first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the decreasing digit\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // swap the two digits\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long and return\n        return Long.parseLong(new String(chars));",
    "        // Find the first digit that is smaller than the digit to its right.\n        // Find the smallest digit to the right of the first digit that is larger than the first digit.\n        // Swap the first digit and the smallest digit.\n        // Sort the digits to the right of the first digit.\n        // If no digit is smaller than the digit to its right, return -1.\n        String s = Long.toString(n);\n        int first = -1;\n        for (int i = 0; i < s.length() - 1; i++) {\n            if (s.charAt(i) < s.charAt(i + 1)) {\n                first = i;\n                break;\n            }\n        }\n        if (first == -1) {\n            return -1;\n        }\n        int smallest = first + 1;\n        for (int i = first + 1; i < s.length(); i++) {\n            if (s.charAt(i) > s.charAt(first) && s.charAt(i) < s.charAt(smallest)) {\n                smallest = i;\n            }\n        }\n        char[] c = s.toCharArray();\n        char temp = c[first];\n        c[first] = c[smallest];\n        c[smallest] = temp;\n        Arrays.sort(c, first + 1, c.length);\n        return Long.parseLong(new String(c));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 2;\n        while (i >= 0 && c[i] >= c[i + 1]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i < 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (j >= 0 && c[j] <= c[i]) {\n            j--;\n        }\n        // swap the decreasing digit and the smallest digit greater than it\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // reverse the digits after the decreasing digit\n        int start = i + 1;\n        int end = c.length - 1;\n        while (start < end) {\n            temp = c[start];\n            c[start] = c[end];\n            c[end] = temp;\n            start++;\n            end--;\n        }\n        // convert to long\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no decreasing digit found, then no bigger number is possible\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit on the right side of (i-1)'th digit that is greater than number[i-1]\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the above found smallest digit with number[i-1]\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Sort the digits after (i-1) in ascending order\n        Arrays.sort(chars, i, chars.length);\n        // Convert to long\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the smallest digit to the right of the decreasing digit with the decreasing digit\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If there is no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the next larger digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after i\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first index where the next digit is smaller\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if no such index exists, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit to the right of the index that is greater than the digit at the index\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the digits at the index and the smallest digit to the right of the index\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits to the right of the index\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long and return\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the first decreasing digit with the smallest digit greater than it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Sort the digits after the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to string\n        s = new String(c);\n        // Convert to long\n        return Long.parseLong(s);",
    "        char[] digits = String.valueOf(n).toCharArray();\n        int i = digits.length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(digits));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If all digits are in descending order, no bigger number can be formed\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit on the right side of the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the smallest digit on the right side of the first decreasing digit with the first decreasing digit\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Sort the digits on the right side of the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert char array to string\n        s = new String(c);\n        // Convert string to long\n        return Long.parseLong(s);",
    "        if (n < 10) {\n            return -1;\n        }\n        String s = String.valueOf(n);\n        int[] arr = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            arr[i] = Integer.parseInt(String.valueOf(s.charAt(i)));\n        }\n        int i = arr.length - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = arr.length - 1;\n        while (arr[j] <= arr[i - 1]) {\n            j--;\n        }\n        int temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        j = arr.length - 1;\n        while (i < j) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < arr.length; k++) {\n            sb.append(arr[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit and the smallest digit greater than it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(c));",
    "        // Convert to char array\n        char[] chars = Long.toString(n).toCharArray();\n        // Find the first index where the digits are in descending order\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If we didn't find any, then the number is already the largest possible\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first index where the digit is greater than the digit at the previous index\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits after the index\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to long\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the first decreasing digit and the smallest digit to the right of it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(c));",
    "        // convert to array\n        char[] digits = String.valueOf(n).toCharArray();\n        // find the first digit that is smaller than the next digit\n        int i = digits.length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        // if no such digit is found, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // find the smallest digit that is larger than the digit at index i\n        int j = digits.length - 1;\n        while (j >= 0 && digits[j] <= digits[i]) {\n            j--;\n        }\n        // swap the digits at indices i and j\n        char temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // reverse the digits after index i\n        i++;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(digits));",
    "        // Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation.\n        // Find the largest index l greater than k such that a[k] < a[l].\n        // Swap the value of a[k] with that of a[l].\n        // Reverse the sequence from a[k + 1] up to and including the final element a[n].\n        String s = Long.toString(n);\n        int k = -1;\n        for (int i = 0; i < s.length() - 1; i++) {\n            if (s.charAt(i) < s.charAt(i + 1)) {\n                k = i;\n            }\n        }\n        if (k == -1) {\n            return -1;\n        }\n        int l = k;\n        for (int i = k + 1; i < s.length(); i++) {\n            if (s.charAt(k) < s.charAt(i)) {\n                l = i;\n            }\n        }\n        char[] chars = s.toCharArray();\n        char temp = chars[k];\n        chars[k] = chars[l];\n        chars[l] = temp;\n        Arrays.sort(chars, k + 1, chars.length);\n        return Long.parseLong(new String(chars));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // convert to list\n        List<Character> l = new ArrayList<Character>();\n        for (char ch : c) {\n            l.add(ch);\n        }\n        // find the first decreasing digit\n        int i = l.size() - 1;\n        while (i > 0 && l.get(i - 1) >= l.get(i)) {\n            i--;\n        }\n        // if all digits are in decreasing order, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // find the smallest digit on the right side of the first decreasing digit\n        int j = l.size() - 1;\n        while (l.get(j) <= l.get(i - 1)) {\n            j--;\n        }\n        // swap the first decreasing digit with the smallest digit on the right side of the first decreasing digit\n        char temp = l.get(i - 1);\n        l.set(i - 1, l.get(j));\n        l.set(j, temp);\n        // reverse the digits on the right side of the first decreasing digit\n        j = l.size() - 1;\n        while (i < j) {\n            temp = l.get(i);\n            l.set(i, l.get(j));\n            l.set(j, temp);\n            i++;\n            j--;\n        }\n        // convert list to string\n        StringBuilder sb = new StringBuilder();\n        for (char ch : l) {\n            sb.append(ch);\n        }\n        // convert string to long\n        return Long.parseLong(sb.toString());",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] chars = s.toCharArray();\n        // sort the array\n        Arrays.sort(chars);\n        // convert back to string\n        String sorted = new String(chars);\n        // convert to long\n        long sortedLong = Long.parseLong(sorted);\n        // check if sortedLong is bigger than n\n        if (sortedLong > n) {\n            return sortedLong;\n        }\n        return -1;",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if all digits are in descending order, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the first digit that is greater than the digit before the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the two digits\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits after the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = c.length - 2;\n        while (i >= 0 && c[i] >= c[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = c.length - 1;\n        while (j >= 0 && c[j] <= c[i]) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to the right of the pivot\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the pivot\n        i++;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        for (i = 0; i < a.length; i++) {\n            result = result * 10 + a[i];\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first number that is smaller than the number after it\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If i is 0, then the number is already the largest possible number\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest number that is larger than the number at i - 1\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the numbers\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the numbers after i\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to string\n        String result = new String(chars);\n        // Convert to long\n        return Long.parseLong(result);",
    "        // Convert to char array\n        char[] chars = Long.toString(n).toCharArray();\n        // Find the first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no decreasing digit, then no bigger number\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit and the smallest digit to the right\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(chars));",
    "        char[] digits = String.valueOf(n).toCharArray();\n        int i = digits.length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.valueOf(new String(digits));",
    "        // Convert to array\n        String s = Long.toString(n);\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        // Find the first decreasing digit\n        int i = len - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than arr[i - 1]\n        int j = len - 1;\n        while (arr[j] <= arr[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        // Reverse the digits after i\n        j = len - 1;\n        while (i < j) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(arr));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first digit that is less than the digit to its right\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if no such digit exists, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit to the right of the pivot that is greater than the pivot\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the pivot with the smallest digit to its right\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits to the right of the pivot\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert back to string\n        s = new String(c);\n        // convert back to long\n        return Long.parseLong(s);",
    "        String s = String.valueOf(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If all digits are in decreasing order, then no bigger number is possible\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit on the right side of (i-1)th digit that is greater than number[i-1]\n        int j = c.length - 1;\n        while (j >= i && c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the above found smallest digit with number[i-1]\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Sort the digits after (i-1) in ascending order\n        Arrays.sort(c, i, c.length);\n        // Convert back to string\n        s = new String(c);\n        // Convert back to long\n        return Long.parseLong(s);",
    "        // Find the first digit that is smaller than the digit to its right.\n        // Find the smallest digit to the right of the digit found in the previous step that is greater than the digit found in the previous step.\n        // Swap the two digits found in the previous two steps.\n        // Reverse all the digits to the right of the digit found in step 1.\n        // If no digit is found, return -1.\n        String s = Long.toString(n);\n        int i = s.length() - 1;\n        while (i > 0 && s.charAt(i - 1) >= s.charAt(i)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        int j = s.length() - 1;\n        while (s.charAt(j) <= s.charAt(i - 1)) {\n            j--;\n        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.setCharAt(i - 1, s.charAt(j));\n        sb.setCharAt(j, s.charAt(i - 1));\n        StringBuilder sb2 = new StringBuilder(sb.substring(i));\n        sb2.reverse();\n        sb.replace(i, sb.length(), sb2.toString());\n        return Long.parseLong(sb.toString());",
    "        String s = String.valueOf(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long num = 0;\n        for (i = 0; i < a.length; i++) {\n            num = num * 10 + a[i];\n        }\n        return num;",
    "        // get the digits of the number\n        List<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // find the first digit that is less than the digit to its right\n        int i = 0;\n        while (i < digits.size() - 1 && digits.get(i) >= digits.get(i + 1)) {\n            i++;\n        }\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // find the smallest digit to the right of the first digit that is greater than the first digit\n        int j = i + 1;\n        while (j < digits.size() && digits.get(j) > digits.get(i)) {\n            j++;\n        }\n        j--;\n        // swap the first digit with the smallest digit to its right\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // sort the digits to the right of the first digit\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // return the new number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to char array\n        char[] chars = Long.toString(n).toCharArray();\n        // Find the pivot\n        int pivot = chars.length - 1;\n        while (pivot > 0 && chars[pivot - 1] >= chars[pivot]) {\n            pivot--;\n        }\n        // If pivot is 0, then all digits are in descending order\n        if (pivot == 0) {\n            return -1;\n        }\n        // Find the successor to pivot\n        int successor = chars.length - 1;\n        while (chars[successor] <= chars[pivot - 1]) {\n            successor--;\n        }\n        // Swap the pivot and successor\n        char temp = chars[pivot - 1];\n        chars[pivot - 1] = chars[successor];\n        chars[successor] = temp;\n        // Reverse the suffix\n        successor = chars.length - 1;\n        while (pivot < successor) {\n            temp = chars[pivot];\n            chars[pivot] = chars[successor];\n            chars[successor] = temp;\n            pivot++;\n            successor--;\n        }\n        // Return the result\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Sort the array\n        Arrays.sort(chars);\n        // Convert back to string\n        String sorted = new String(chars);\n        // Convert to long\n        long sortedLong = Long.parseLong(sorted);\n        // If the sorted number is the same as the original, return -1\n        if (sortedLong == n) {\n            return -1;\n        }\n        // Otherwise, return the sorted number\n        return sortedLong;",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit and the smallest digit greater than the decreasing digit\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to string\n        s = new String(c);\n        // convert to long\n        long l = Long.parseLong(s);\n        // return the new number\n        return l;",
    "        // Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation.\n        // Find the largest index l greater than k such that a[k] < a[l].\n        // Swap the value of a[k] with that of a[l].\n        // Reverse the sequence from a[k + 1] up to and including the final element a[n].\n        char[] chars = String.valueOf(n).toCharArray();\n        int k = -1;\n        for (int i = 0; i < chars.length - 1; i++) {\n            if (chars[i] < chars[i + 1]) {\n                k = i;\n            }\n        }\n        if (k == -1) {\n            return -1;\n        }\n        int l = k + 1;\n        for (int i = k + 1; i < chars.length; i++) {\n            if (chars[k] < chars[i]) {\n                l = i;\n            }\n        }\n        char temp = chars[k];\n        chars[k] = chars[l];\n        chars[l] = temp;\n        for (int i = k + 1; i < (chars.length + k + 1) / 2; i++) {\n            temp = chars[i];\n            chars[i] = chars[chars.length - i + k];\n            chars[chars.length - i + k] = temp;\n        }\n        return Long.parseLong(new String(chars));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit to the right of the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the first decreasing digit with the smallest digit to the right of it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits to the right of the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long\n        return Long.parseLong(new String(c));",
    "        // Get the digits of the number\n        List<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that is smaller than the digit after it\n        int i = 0;\n        for (i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If no such digit exists, then the number is already the biggest possible\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit that is bigger than the digit at i\n        int j = i + 1;\n        for (int k = i + 1; k < digits.size(); k++) {\n            if (digits.get(k) > digits.get(i) && digits.get(k) < digits.get(j)) {\n                j = k;\n            }\n        }\n        // Swap the digits at i and j\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits after i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Return the new number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Find the first digit that is smaller than the digit to its right.\n        // Find the smallest digit to the right of the first digit that is larger than the first digit.\n        // Swap the first digit and the smallest digit to the right of the first digit.\n        // Sort the digits to the right of the first digit.\n        // Return the number.\n        String s = Long.toString(n);\n        int i = s.length() - 1;\n        while (i > 0 && s.charAt(i) <= s.charAt(i - 1)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        int j = s.length() - 1;\n        while (s.charAt(j) <= s.charAt(i - 1)) {\n            j--;\n        }\n        String s1 = s.substring(0, i - 1);\n        String s2 = s.substring(i - 1, i);\n        String s3 = s.substring(i, j);\n        String s4 = s.substring(j, j + 1);\n        String s5 = s.substring(j + 1);\n        String s6 = s1 + s4 + s3 + s2 + s5;\n        char[] c = s6.toCharArray();\n        Arrays.sort(c, i, c.length);\n        return Long.parseLong(new String(c));",
    "        // Convert the number to a string\n        String s = Long.toString(n);\n        // Convert the string to a char array\n        char[] chars = s.toCharArray();\n        // Create a list of the chars\n        List<Character> list = new ArrayList<Character>();\n        for (char c : chars) {\n            list.add(c);\n        }\n        // Create a list of the chars in reverse order\n        List<Character> listReverse = new ArrayList<Character>();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            listReverse.add(chars[i]);\n        }\n        // Create a list of the chars in reverse order\n        List<Character> listReverse2 = new ArrayList<Character>();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            listReverse2.add(chars[i]);\n        }\n        // Create a list of the chars in reverse order\n        List<Character> listReverse3 = new ArrayList<Character>();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            listReverse3.add(chars[i]);\n        }\n        // Create a list of the chars in reverse order\n        List<Character> listReverse4 = new ArrayList<Character>();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            listReverse4.add(chars[i]);\n        }\n        // Create a list of the chars in reverse order\n        List<Character> listReverse5 = new ArrayList<Character>();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            listReverse5.add(chars[i]);\n        }\n        // Create a list of the chars in reverse order\n        List<Character> listReverse6 = new ArrayList<Character>();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            listReverse6.add(chars[i]);\n        }\n        // Create a list",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to array\n        char[] c = s.toCharArray();\n        // Find the first digit that is not in descending order\n        int i = c.length - 1;\n        while (i > 0 && c[i] <= c[i - 1]) {\n            i--;\n        }\n        // If no digit is found, then there is no bigger number\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit in the suffix that is greater than the digit at index i - 1\n        int j = c.length - 1;\n        while (j >= i && c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the digits at index i - 1 and j\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the suffix\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert the array back to a string\n        s = new String(c);\n        // Convert the string back to a long\n        return Long.parseLong(s);",
    "        // Convert to string\n        String s = String.valueOf(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no such digit exists, the digits are in descending order, so no bigger number exists\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is greater than the pivot\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to the right of the pivot\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the pivot\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to long\n        return Long.parseLong(new String(c));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit and the smallest digit greater than the decreasing digit\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert the char array to long\n        return Long.parseLong(new String(c));",
    "        // Find the first digit that is smaller than the digit to its right\n        // Find the smallest digit to the right of that digit that is larger than it\n        // Swap those two digits\n        // Reverse the digits to the right of the swapped digit\n        // Return the new number\n        String s = Long.toString(n);\n        int i = s.length() - 1;\n        while (i > 0 && s.charAt(i - 1) >= s.charAt(i)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        int j = s.length() - 1;\n        while (s.charAt(j) <= s.charAt(i - 1)) {\n            j--;\n        }\n        s = swap(s, i - 1, j);\n        s = reverse(s, i);\n        return Long.parseLong(s);",
    "        // get the digits of the number\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int) (n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // find the first digit that is smaller than the digit to its right\n        int i = 0;\n        for (; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // if no such digit exists, the number is already the largest possible\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // find the smallest digit to the right of the digit found above that is larger than it\n        int j = i + 1;\n        for (; j < digits.size(); j++) {\n            if (digits.get(j) > digits.get(i)) {\n                break;\n            }\n        }\n        // swap the two digits\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // sort the digits to the right of the digit found above\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // return the number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        String s = Long.toString(n);\n        char[] arr = s.toCharArray();\n        int i = arr.length - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = arr.length - 1;\n        while (arr[j] <= arr[i - 1]) {\n            j--;\n        }\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        j = arr.length - 1;\n        while (i < j) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(arr));",
    "        String s = String.valueOf(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = Integer.parseInt(s.substring(i, i + 1));\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        for (i = 0; i < a.length; i++) {\n            result = result * 10 + a[i];\n        }\n        return result;",
    "        // Convert the number to a string\n        String s = Long.toString(n);\n        // Convert the string to a char array\n        char[] c = s.toCharArray();\n        // Find the first index from the right where the value is less than the value to the right\n        int i = c.length - 1;\n        while (i > 0 && c[i] <= c[i - 1]) {\n            i--;\n        }\n        // If the index is 0, then the number is already the largest possible\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest value to the right of the index that is greater than the value at the index\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the values at the index and the smallest value\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the values to the right of the index\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert the char array back to a string\n        s = new String(c);\n        // Convert the string to a long\n        return Long.parseLong(s);",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first digit that is smaller than the digit to its right\n        int i = c.length - 2;\n        while (i >= 0 && c[i] >= c[i + 1]) {\n            i--;\n        }\n        // if no such digit, then no bigger number is possible\n        if (i < 0) {\n            return -1;\n        }\n        // find the smallest digit on the right side of (i-1)'th digit that is greater than number[i-1]\n        int j = c.length - 1;\n        while (j >= 0 && c[j] <= c[i]) {\n            j--;\n        }\n        // swap the above found smallest digit with number[i-1]\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // reverse the digits after (i-1) in ascending order\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long\n        return Long.parseLong(new String(c));",
    "        if (n < 10) {\n            return -1;\n        }\n        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Convert the number to a string\n        String s = Long.toString(n);\n        // Convert the string to a list of characters\n        List<Character> l = s.chars().mapToObj(c -> (char) c).collect(Collectors.toList());\n        // Find the first index where the digit is less than the digit to the right of it\n        int i = 0;\n        while (i < l.size() - 1 && l.get(i) >= l.get(i + 1)) i++;\n        // If no such index exists, return -1\n        if (i == l.size() - 1) return -1;\n        // Find the smallest digit to the right of the index that is greater than the digit at the index\n        int j = i + 1;\n        while (j < l.size() && l.get(j) > l.get(i)) j++;\n        // Swap the digits at the index and the smallest digit to the right of the index\n        char temp = l.get(i);\n        l.set(i, l.get(j - 1));\n        l.set(j - 1, temp);\n        // Sort the digits to the right of the index\n        l.subList(i + 1, l.size()).sort(null);\n        // Convert the list of characters to a string\n        s = l.stream().map(Object::toString).collect(Collectors.joining());\n        // Convert the string to a long\n        return Long.parseLong(s);",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long and return\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        for (int k = 0; k < a.length; k++) {\n            result = result * 10 + a[k];\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than c[i - 1]\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap c[i - 1] and c[j]\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after c[i - 1]\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert char array to string\n        s = new String(c);\n        // Convert to long\n        return Long.parseLong(s);",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit with the smallest digit to the right\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first index where the next digit is smaller\n        int index = -1;\n        for (int i = chars.length - 1; i > 0; i--) {\n            if (chars[i] > chars[i - 1]) {\n                index = i - 1;\n                break;\n            }\n        }\n        // If no such index, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest digit larger than the digit at index\n        int minIndex = index + 1;\n        for (int i = index + 1; i < chars.length; i++) {\n            if (chars[i] > chars[index] && chars[i] < chars[minIndex]) {\n                minIndex = i;\n            }\n        }\n        // Swap the digits at index and minIndex\n        char temp = chars[index];\n        chars[index] = chars[minIndex];\n        chars[minIndex] = temp;\n        // Reverse the digits after index\n        for (int i = index + 1; i < (chars.length + index + 1) / 2; i++) {\n            temp = chars[i];\n            chars[i] = chars[chars.length - i + index];\n            chars[chars.length - i + index] = temp;\n        }\n        // Return the new number\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit with the smallest digit greater than it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long and return\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the first decreasing digit with the smallest digit greater than it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        // Find the first non-increasing digit from the right.\n        // Swap it with the next largest digit to the right.\n        // Reverse the digits to the right of the swap.\n        long nn = n;\n        int[] digits = new int[10];\n        int i = 0;\n        while (nn > 0) {\n            digits[i++] = (int)(nn % 10);\n            nn /= 10;\n        }\n        int j = i - 1;\n        while (j > 0 && digits[j] <= digits[j - 1]) {\n            j--;\n        }\n        if (j == 0) {\n            return -1;\n        }\n        int k = j;\n        while (k < i && digits[k] > digits[j - 1]) {\n            k++;\n        }\n        k--;\n        int tmp = digits[j - 1];\n        digits[j - 1] = digits[k];\n        digits[k] = tmp;\n        for (int l = j, m = i - 1; l < m; l++, m--) {\n            tmp = digits[l];\n            digits[l] = digits[m];\n            digits[m] = tmp;\n        }\n        long result = 0;\n        for (int l = 0; l < i; l++) {\n            result = result * 10 + digits[l];\n        }\n        return result;",
    "        char[] digits = Long.toString(n).toCharArray();\n        int i = digits.length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(digits));",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        for (int k = 0; k < a.length; k++) {\n            result = result * 10 + a[k];\n        }\n        return result;",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < a.length; k++) {\n            sb.append(a[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Get the digits of the number\n        List<Long> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that is smaller than the digit after it\n        int i = 0;\n        while (i < digits.size() - 1 && digits.get(i) >= digits.get(i + 1)) {\n            i++;\n        }\n        // If all digits are in descending order, there is no bigger number\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit that is bigger than the digit at i\n        int j = i + 1;\n        while (j < digits.size() && digits.get(j) > digits.get(i)) {\n            j++;\n        }\n        // Swap the digits at i and j\n        long temp = digits.get(i);\n        digits.set(i, digits.get(j - 1));\n        digits.set(j - 1, temp);\n        // Sort the digits after i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Return the number\n        long result = 0;\n        for (long digit : digits) {\n            result = result * 10 + digit;\n        }\n        return result;",
    "        // Get the digits of the number\n        List<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.size() - 2;\n        while (i >= 0 && digits.get(i) >= digits.get(i + 1)) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = digits.size() - 1;\n        while (digits.get(j) <= digits.get(i)) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to its right that is larger than the pivot\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Reverse the digits to the right of the pivot\n        Collections.reverse(digits.subList(i + 1, digits.size()));\n        // Return the new number\n        long result = 0;\n        for (int k = digits.size() - 1; k >= 0; k--) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < a.length; k++) {\n            sb.append(a[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Convert the number to a string\n        String s = Long.toString(n);\n        // Convert the string to a char array\n        char[] c = s.toCharArray();\n        // Create a list of integers from the char array\n        List<Integer> l = new ArrayList<>();\n        for (char ch : c) {\n            l.add(Character.getNumericValue(ch));\n        }\n        // Create a copy of the list\n        List<Integer> l2 = new ArrayList<>(l);\n        // Sort the copy of the list\n        Collections.sort(l2);\n        // Reverse the sorted copy of the list\n        Collections.reverse(l2);\n        // Create a new list of integers\n        List<Integer> l3 = new ArrayList<>();\n        // Iterate through the sorted copy of the list\n        for (int i = 0; i < l2.size(); i++) {\n            // Get the value at the current index\n            int x = l2.get(i);\n            // Get the index of the value in the original list\n            int y = l.indexOf(x);\n            // Add the value to the new list\n            l3.add(x);\n            // Remove the value from the original list\n            l.remove(y);\n        }\n        // Convert the new list to a string\n        String s2 = l3.stream().map(Object::toString).collect(Collectors.joining());\n        // Convert the string to a long\n        long n2 = Long.parseLong(s2);\n        // Return the long\n        return n2;",
    "        String s = Long.toString(n);\n        char[] c = s.toCharArray();\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(c));",
    "        // Convert the number to a string\n        String s = Long.toString(n);\n        // Convert the string to a char array\n        char[] c = s.toCharArray();\n        // Find the first index where the next number is greater than the current number\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If we have reached the beginning of the string, then we cannot rearrange the digits to get a bigger number\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest number that is greater than the number at index i - 1\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the numbers at index i - 1 and j\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the numbers from index i to the end of the array\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert the char array back to a string\n        s = new String(c);\n        // Convert the string back to a long\n        return Long.parseLong(s);",
    "        // Get the digits of the number\n        ArrayList<Integer> digits = new ArrayList<>();\n        long temp = n;\n        while (temp > 0) {\n            digits.add((int)(temp % 10));\n            temp /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that is smaller than the digit to its right\n        int i = 0;\n        for (i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If no such digit exists, then the number is the largest possible\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the digit found above that is larger than the digit found above\n        int min = i + 1;\n        for (int j = i + 1; j < digits.size(); j++) {\n            if (digits.get(j) > digits.get(i) && digits.get(j) < digits.get(min)) {\n                min = j;\n            }\n        }\n        // Swap the two digits\n        int temp2 = digits.get(i);\n        digits.set(i, digits.get(min));\n        digits.set(min, temp2);\n        // Sort the digits to the right of the digit found above\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Return the number\n        long result = 0;\n        for (int j = 0; j < digits.size(); j++) {\n            result = result * 10 + digits.get(j);\n        }\n        return result;",
    "        // find the first digit that is not in descending order\n        // find the first digit that is bigger than the digit found in the previous step\n        // swap the digits\n        // sort the digits after the digit found in the first step\n        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i] <= chars[i - 1]) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        Arrays.sort(chars, i, chars.length);\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit from the right\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, then no bigger number possible\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit on the right side of (i-1)th digit that is greater than number[i-1]\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the above found smallest digit with number[i-1]\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Sort the digits after (i-1) in ascending order\n        Arrays.sort(c, i, c.length);\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        String s = String.valueOf(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = Integer.parseInt(s.substring(i, i + 1));\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < a.length; k++) {\n            sb.append(a[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if all digits are in decreasing order, no next bigger number\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the digit at index i - 1\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the digits at index i - 1 and j\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits from index i to the end\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert the char array to a long\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        int[] digits = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            digits[i] = Character.getNumericValue(s.charAt(i));\n        }\n        int i = digits.length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        int temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < digits.length; k++) {\n            sb.append(digits[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        // get the digits of the number\n        List<Integer> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        // reverse the digits\n        Collections.reverse(digits);\n        // find the first digit that can be swapped with a digit to its right\n        int index = -1;\n        for (int i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                index = i;\n                break;\n            }\n        }\n        // if no such digit exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // find the smallest digit to the right of the digit at index that is greater than the digit at index\n        int minIndex = index + 1;\n        for (int i = index + 1; i < digits.size(); i++) {\n            if (digits.get(i) > digits.get(index) && digits.get(i) < digits.get(minIndex)) {\n                minIndex = i;\n            }\n        }\n        // swap the digits at index and minIndex\n        int temp = digits.get(index);\n        digits.set(index, digits.get(minIndex));\n        digits.set(minIndex, temp);\n        // reverse the digits to the right of index\n        Collections.reverse(digits.subList(index + 1, digits.size()));\n        // return the new number\n        long result = 0;\n        for (int i = 0; i < digits.size(); i++) {\n            result = result * 10 + digits.get(i);\n        }\n        return result;",
    "        // Convert to array of digits\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int) (n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first decreasing digit\n        int i = 0;\n        while (i < digits.size() - 1 && digits.get(i) <= digits.get(i + 1)) {\n            i++;\n        }\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = i + 1;\n        while (j < digits.size() && digits.get(j) > digits.get(i)) {\n            j++;\n        }\n        j--;\n        // Swap the digits\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits after the decreasing digit\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Convert to number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the first decreasing digit with the smallest digit to the right\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(c));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // convert to list\n        List<Character> l = new ArrayList<Character>();\n        for (char ch : c) {\n            l.add(ch);\n        }\n        // find the first decreasing digit\n        int i = l.size() - 1;\n        while (i > 0 && l.get(i - 1) >= l.get(i)) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit larger than the decreasing digit\n        int j = l.size() - 1;\n        while (l.get(j) <= l.get(i - 1)) {\n            j--;\n        }\n        // swap the decreasing digit with the smallest digit larger than it\n        Collections.swap(l, i - 1, j);\n        // reverse the digits after the decreasing digit\n        Collections.reverse(l.subList(i, l.size()));\n        // convert to string\n        StringBuilder sb = new StringBuilder();\n        for (char ch : l) {\n            sb.append(ch);\n        }\n        // convert to long\n        return Long.parseLong(sb.toString());",
    "        // Convert to array of digits\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        // Reverse digits\n        Collections.reverse(digits);\n        // Find the first digit that can be swapped\n        int i = 0;\n        while (i < digits.size() - 1 && digits.get(i) >= digits.get(i + 1)) {\n            i++;\n        }\n        // If no digit can be swapped, return -1\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit that is greater than the digit at i\n        int j = i + 1;\n        while (j < digits.size() && digits.get(j) > digits.get(i)) {\n            j++;\n        }\n        // Swap the digits at i and j\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j - 1));\n        digits.set(j - 1, temp);\n        // Sort the digits after i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Convert to long\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // find the first digit that is smaller than the digit to its right\n        // find the smallest digit to the right of the pivot that is greater than the pivot\n        // swap the pivot with the smallest digit to the right of the pivot\n        // sort the digits to the right of the pivot in ascending order\n        // return the new number\n        char[] digits = Long.toString(n).toCharArray();\n        int pivot = -1;\n        for (int i = digits.length - 2; i >= 0; i--) {\n            if (digits[i] < digits[i + 1]) {\n                pivot = i;\n                break;\n            }\n        }\n        if (pivot == -1) {\n            return -1;\n        }\n        int min = pivot + 1;\n        for (int i = pivot + 1; i < digits.length; i++) {\n            if (digits[i] > digits[pivot] && digits[i] < digits[min]) {\n                min = i;\n            }\n        }\n        char temp = digits[pivot];\n        digits[pivot] = digits[min];\n        digits[min] = temp;\n        Arrays.sort(digits, pivot + 1, digits.length);\n        return Long.parseLong(new String(digits));",
    "        char[] digits = Long.toString(n).toCharArray();\n        int i = digits.length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(digits));",
    "        char[] digits = Long.toString(n).toCharArray();\n        int i = digits.length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(digits));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] chars = s.toCharArray();\n        // find the first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the decreasing digit\n        int j = chars.length - 1;\n        while (j > 0 && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit and the smallest digit greater than the decreasing digit\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // convert back to string\n        String result = new String(chars);\n        // convert back to long\n        return Long.parseLong(result);",
    "        if (n < 10) {\n            return -1;\n        }\n        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // sort the array\n        Arrays.sort(c);\n        // convert back to string\n        String sorted = new String(c);\n        // reverse the string\n        String reversed = new StringBuilder(sorted).reverse().toString();\n        // convert to long\n        long reversedLong = Long.parseLong(reversed);\n        // if the reversed long is greater than the original number, return the reversed long\n        if (reversedLong > n) {\n            return reversedLong;\n        }\n        // else return -1\n        return -1;",
    "        // Convert to array of digits\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that can be swapped\n        int i = digits.size() - 1;\n        while (i > 0 && digits.get(i) <= digits.get(i - 1)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit that is larger than the current digit\n        int j = digits.size() - 1;\n        while (digits.get(j) <= digits.get(i - 1)) {\n            j--;\n        }\n        // Swap the digits\n        int temp = digits.get(i - 1);\n        digits.set(i - 1, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits after the swapped digit\n        Collections.sort(digits.subList(i, digits.size()));\n        // Convert to number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        for (i = 0; i < a.length; i++) {\n            result = result * 10 + a[i];\n        }\n        return result;",
    "        // Convert to array of digits\n        int[] digits = Long.toString(n).chars().map(Character::getNumericValue).toArray();\n        // Find the pivot point\n        int pivot = -1;\n        for (int i = digits.length - 1; i > 0; i--) {\n            if (digits[i] > digits[i - 1]) {\n                pivot = i - 1;\n                break;\n            }\n        }\n        // If no pivot point, return -1\n        if (pivot == -1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot point\n        int min = pivot + 1;\n        for (int i = min + 1; i < digits.length; i++) {\n            if (digits[i] > digits[pivot] && digits[i] < digits[min]) {\n                min = i;\n            }\n        }\n        // Swap the pivot point and the smallest digit to the right of the pivot point\n        int temp = digits[pivot];\n        digits[pivot] = digits[min];\n        digits[min] = temp;\n        // Sort the digits to the right of the pivot point\n        Arrays.sort(digits, pivot + 1, digits.length);\n        // Return the new number\n        return Long.parseLong(Arrays.stream(digits).mapToObj(String::valueOf).collect(Collectors.joining()));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first index from the right that is less than the next index\n        int index = -1;\n        for (int i = chars.length - 1; i > 0; i--) {\n            if (chars[i] > chars[i - 1]) {\n                index = i - 1;\n                break;\n            }\n        }\n        // If no such index exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest number to the right of the index that is greater than the number at the index\n        int min = index + 1;\n        for (int i = index + 1; i < chars.length; i++) {\n            if (chars[i] > chars[index] && chars[i] < chars[min]) {\n                min = i;\n            }\n        }\n        // Swap the two numbers\n        char temp = chars[index];\n        chars[index] = chars[min];\n        chars[min] = temp;\n        // Sort the numbers to the right of the index\n        Arrays.sort(chars, index + 1, chars.length);\n        // Return the number\n        return Long.parseLong(new String(chars));",
    "        // Find the first digit that is smaller than the digit to its right\n        String s = Long.toString(n);\n        int i = s.length() - 1;\n        while (i > 0 && s.charAt(i) <= s.charAt(i - 1)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than s[i]\n        int j = s.length() - 1;\n        while (s.charAt(j) <= s.charAt(i - 1)) {\n            j--;\n        }\n        // Swap s[i] and s[j]\n        StringBuilder sb = new StringBuilder(s);\n        sb.setCharAt(i - 1, s.charAt(j));\n        sb.setCharAt(j, s.charAt(i - 1));\n        // Reverse the digits from i to the end of the string\n        int k = s.length() - 1;\n        while (i < k) {\n            sb.setCharAt(i, s.charAt(k));\n            sb.setCharAt(k, s.charAt(i));\n            i++;\n            k--;\n        }\n        return Long.parseLong(sb.toString());",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first digit that is smaller than the next digit\n        int i = c.length - 2;\n        while (i >= 0 && c[i] >= c[i + 1]) {\n            i--;\n        }\n        // if no such digit exists, return -1\n        if (i < 0) {\n            return -1;\n        }\n        // find the smallest digit that is larger than the digit at i\n        int j = c.length - 1;\n        while (j >= 0 && c[j] <= c[i]) {\n            j--;\n        }\n        // swap the digits at i and j\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // reverse the digits after i\n        i++;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert back to string and return\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        for (i = 0; i < a.length; i++) {\n            result = result * 10 + a[i];\n        }\n        return result;",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long num = 0;\n        for (i = 0; i < a.length; i++) {\n            num = num * 10 + a[i];\n        }\n        return num;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to string\n        s = new String(c);\n        // Convert to long\n        return Long.parseLong(s);",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] chars = s.toCharArray();\n        // find the first decreasing digit from the right\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // if all digits are in decreasing order, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit on the right side of (i - 1)th digit that is greater than number[i - 1]\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // swap the above found digits\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // reverse the digits after (i - 1)th digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to string and return\n        return Long.parseLong(new String(chars));",
    "        String s = String.valueOf(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 2;\n        while (i >= 0 && a[i] >= a[i + 1]) {\n            i--;\n        }\n        if (i < 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (j > i && a[j] <= a[i]) {\n            j--;\n        }\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n        Arrays.sort(a, i + 1, a.length);\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < a.length; k++) {\n            sb.append(a[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        String s = Long.toString(n);\n        char[] a = s.toCharArray();\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        char temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(a));",
    "        // Convert to a string\n        String s = Long.toString(n);\n        // Convert to a char array\n        char[] c = s.toCharArray();\n        // Find the first index that is not in descending order\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If the entire array is in descending order, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first index that is greater than the index i - 1\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the values at i - 1 and j\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the array from i to the end\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert the char array to a string\n        s = new String(c);\n        // Convert the string to a long\n        return Long.parseLong(s);",
    "        // get the digits of the number\n        List<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int) n % 10);\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // find the first digit that is smaller than the digit to its right\n        int i = 0;\n        for (; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // if no such digit exists, return -1\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // find the smallest digit to the right of the digit found above that is larger than the digit found above\n        int j = i + 1;\n        for (; j < digits.size(); j++) {\n            if (digits.get(j) > digits.get(i)) {\n                break;\n            }\n        }\n        // swap the digits found above\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // sort the digits to the right of the digit found above\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // return the number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Get the digits of the number\n        List<Long> digits = new ArrayList<Long>();\n        while (n > 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n        // Reverse the digits\n        Collections.reverse(digits);\n        // Find the first digit that is smaller than the digit to its right\n        int index = -1;\n        for (int i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                index = i;\n            }\n        }\n        // If no such digit exists, the number is the largest possible\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the digit that is larger than it\n        long min = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = index + 1; i < digits.size(); i++) {\n            if (digits.get(i) > digits.get(index) && digits.get(i) < min) {\n                min = digits.get(i);\n                minIndex = i;\n            }\n        }\n        // Swap the digits\n        long temp = digits.get(index);\n        digits.set(index, digits.get(minIndex));\n        digits.set(minIndex, temp);\n        // Sort the digits to the right of the digit that was swapped\n        Collections.sort(digits.subList(index + 1, digits.size()));\n        // Create the new number\n        long newNum = 0;\n        for (int i = 0; i < digits.size(); i++) {\n            newNum += digits.get(i) * Math.pow(10, i);\n        }\n        return newNum;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Get length\n        int len = c.length;\n        // Create a list of integers\n        List<Integer> list = new ArrayList<Integer>();\n        // Loop through the char array\n        for (int i = 0; i < len; i++) {\n            // Add the integer to the list\n            list.add(Character.getNumericValue(c[i]));\n        }\n        // Create a list of tuples\n        List<Pair<Integer, Integer>> list2 = new ArrayList<Pair<Integer, Integer>>();\n        // Loop through the list\n        for (int i = 0; i < len; i++) {\n            // Create a tuple\n            Pair<Integer, Integer> pair = new Pair<Integer, Integer>(list.get(i), i);\n            // Add the tuple to the list\n            list2.add(pair);\n        }\n        // Sort the list\n        Collections.sort(list2);\n        // Get the last element\n        Pair<Integer, Integer> pair = list2.get(len - 1);\n        // Get the value\n        int val = pair.getValue0();\n        // Get the index\n        int index = pair.getValue1();\n        // Loop through the list\n        for (int i = len - 2; i >= 0; i--) {\n            // Get the tuple\n            Pair<Integer, Integer> pair2 = list2.get(i);\n            // Get the value\n            int val2 = pair2.getValue0();\n            // Get the index\n            int index2 = pair2.getValue1();\n            // Check if the value is less than the last value\n            if (val2 < val) {\n                // Swap the values\n                list.set(index, val2);\n                list.set(index2, val);\n                // Break the loop\n                break;\n            }\n        }\n        // Create a string builder\n        StringBuilder sb = new StringBuilder();\n        // Loop through the list\n        for (int i = 0; i < len; i++) {\n            //",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to array\n        char[] c = s.toCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = c.length - 1;\n        while (i > 0 && c[i] <= c[i - 1]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = c.length - 1;\n        while (j > i && c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to the right of the pivot\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the pivot\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to string\n        s = new String(c);\n        // Convert back to long\n        return Long.parseLong(s);",
    "        // convert to string\n        String s = String.valueOf(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit and the smallest digit greater than the decreasing digit\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long\n        return Long.valueOf(new String(c));",
    "        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Convert the number to a string\n        String s = Long.toString(n);\n        // Convert the string to a char array\n        char[] c = s.toCharArray();\n        // Create a list of the char array\n        List<Character> l = new ArrayList<Character>();\n        for (char x : c) {\n            l.add(x);\n        }\n        // Create a new list of the char array\n        List<Character> l2 = new ArrayList<Character>();\n        for (char x : c) {\n            l2.add(x);\n        }\n        // Sort the list\n        Collections.sort(l);\n        // Reverse the list\n        Collections.reverse(l);\n        // If the sorted list is the same as the original list, return -1\n        if (l.equals(l2)) {\n            return -1;\n        }\n        // Create a list of the char array\n        List<Character> l3 = new ArrayList<Character>();\n        for (char x : c) {\n            l3.add(x);\n        }\n        // Sort the list\n        Collections.sort(l3);\n        // Create a new list of the char array\n        List<Character> l4 = new ArrayList<Character>();\n        for (char x : c) {\n            l4.add(x);\n        }\n        // Reverse the list\n        Collections.reverse(l4);\n        // Create a new list of the char array\n        List<Character> l5 = new ArrayList<Character>();\n        for (char x : c) {\n            l5.add(x);\n        }\n        // Create a new list of the char array\n        List<Character> l6 = new ArrayList<Character>();\n        for (char x : c) {\n            l6.add(x);\n        }\n        // Create a new list of the char array\n        List<Character> l7 = new ArrayList<Character>();\n        for (char x : c) {\n            l7.add(x);\n        }\n        // Create a new list of the char array\n        List<Character> l8 = new ArrayList<Character>();\n        for (char",
    "        // Find the first digit that is smaller than the digit to its right.\n        // Find the smallest digit to the right of the digit found in the previous step that is greater than the digit found in the previous step.\n        // Swap the digits found in the previous two steps.\n        // Reverse the digits to the right of the digit found in the third step.\n        // If no such digit exists, return -1.\n        String s = String.valueOf(n);\n        int i = s.length() - 1;\n        while (i > 0 && s.charAt(i) <= s.charAt(i - 1)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        int j = s.length() - 1;\n        while (s.charAt(j) <= s.charAt(i - 1)) {\n            j--;\n        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.setCharAt(i - 1, s.charAt(j));\n        sb.setCharAt(j, s.charAt(i - 1));\n        sb.reverse();\n        return Long.parseLong(sb.toString());",
    "        // Get the digits of the number\n        List<Integer> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add((int) (n % 10));\n            n /= 10;\n        }\n        // Reverse the digits\n        Collections.reverse(digits);\n        // Find the first decreasing digit\n        int i = 0;\n        for (; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If no decreasing digit was found, then there is no bigger number\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int min = i + 1;\n        for (int j = i + 1; j < digits.size(); j++) {\n            if (digits.get(j) > digits.get(i) && digits.get(j) < digits.get(min)) {\n                min = j;\n            }\n        }\n        // Swap the decreasing digit with the smallest digit greater than it\n        int temp = digits.get(i);\n        digits.set(i, digits.get(min));\n        digits.set(min, temp);\n        // Sort the digits after the decreasing digit\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Create the new number\n        long result = 0;\n        for (int j = 0; j < digits.size(); j++) {\n            result = result * 10 + digits.get(j);\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit was found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit with the smallest digit to the right\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(c));",
    "        // get the digits of the number\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // find the first digit that is smaller than the digit after it\n        int i = 0;\n        for (i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // if no such digit exists, then the number is the largest possible\n        if (i == digits.size() - 1) {\n            return null;\n        }\n        // find the smallest digit that is larger than the digit at i\n        int j = i + 1;\n        for (int k = i + 2; k < digits.size(); k++) {\n            if (digits.get(k) < digits.get(j) && digits.get(k) > digits.get(i)) {\n                j = k;\n            }\n        }\n        // swap the digits at i and j\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // sort the digits after i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // return the number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to char array\n        char[] chars = String.valueOf(n).toCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than chars[i - 1]\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap chars[i - 1] and chars[j]\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the order of all digits to the right of i\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = Character.getNumericValue(s.charAt(i));\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < a.length; k++) {\n            sb.append(a[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Get the length\n        int l = c.length;\n        // Iterate through the array\n        for (int i = l - 1; i > 0; i--) {\n            // If the current element is greater than the previous element\n            if (c[i] > c[i - 1]) {\n                // Find the smallest element greater than the current element\n                int j = i;\n                while (j < l && c[j] > c[i - 1]) {\n                    j++;\n                }\n                // Swap the current element with the smallest element\n                char temp = c[i - 1];\n                c[i - 1] = c[j - 1];\n                c[j - 1] = temp;\n                // Sort the remaining elements\n                Arrays.sort(c, i, l);\n                // Return the new number\n                return Long.parseLong(new String(c));\n            }\n        }\n        // Return -1 if no bigger number exists\n        return -1;",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        for (int k = 0; k < a.length; k++) {\n            result = result * 10 + a[k];\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first digit greater than the decreasing digit\n        int j = chars.length - 1;\n        while (j > 0 && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the two digits\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long and return\n        return Long.parseLong(new String(chars));",
    "        // Convert to a string\n        String s = Long.toString(n);\n        // Convert to a char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If the number is decreasing, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the first decreasing digit with the smallest digit to the right\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to a string\n        s = new String(c);\n        // Convert back to a long\n        return Long.parseLong(s);",
    "        String s = Long.toString(n);\n        char[] a = s.toCharArray();\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        char temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(a));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit with the smallest digit to the right\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to string\n        s = new String(c);\n        // Convert back to long\n        return Long.parseLong(s);",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the first decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the first decreasing digit with the smallest digit to the right of it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the first decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to string and return\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        long result = 0;\n        for (i = 0; i < a.length; i++) {\n            result = result * 10 + a[i];\n        }\n        return result;",
    "        // Find the largest index i such that array[i \u2212 1] < array[i].\n        // (If no such i exists, then this is already the last permutation.)\n        // Find the largest index j such that j \u2265 i and array[j] > array[i \u2212 1].\n        // Swap array[j] and array[i \u2212 1].\n        // Reverse the suffix starting at array[i].\n        // return array\n        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Get the digits of the number\n        ArrayList<Long> digits = new ArrayList<Long>();\n        while (n > 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n        // Find the first digit that is smaller than the digit to its right\n        int i = digits.size() - 2;\n        while (i >= 0 && digits.get(i) >= digits.get(i + 1)) {\n            i--;\n        }\n        // If no such digit exists, then the number is the largest possible permutation\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is larger than digits[i]\n        int j = digits.size() - 1;\n        while (j > i && digits.get(j) <= digits.get(i)) {\n            j--;\n        }\n        // Swap digits[i] and digits[j]\n        long temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits to the right of i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Return the new number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Get the digits of the number\n        List<Long> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that is smaller than the next digit\n        int i = 0;\n        for (; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If no such digit exists, return -1\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit that is larger than the digit at i\n        int j = i + 1;\n        for (; j < digits.size(); j++) {\n            if (digits.get(j) > digits.get(i)) {\n                break;\n            }\n        }\n        // Swap the digits at i and j\n        long temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits after i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Return the number\n        long result = 0;\n        for (long digit : digits) {\n            result = result * 10 + digit;\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first digit that is smaller than the digit to its right\n        int i = c.length - 2;\n        while (i >= 0 && c[i] >= c[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, the digits are in descending order, so no bigger number exists\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of i that is greater than c[i]\n        int j = c.length - 1;\n        while (j >= 0 && c[j] <= c[i]) {\n            j--;\n        }\n        // Swap c[i] and c[j]\n        char temp = c[i];\n        c[i] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of i\n        i++;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to long\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the two digits\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long and return\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to array\n        char[] arr = s.toCharArray();\n        // Find the first decreasing digit\n        int i = arr.length - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        // If there is no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = arr.length - 1;\n        while (arr[j] <= arr[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit with the smallest digit greater than it\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        // Sort the digits after the decreasing digit\n        j = arr.length - 1;\n        while (i < j) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to string and return\n        return Long.parseLong(new String(arr));",
    "        String s = Long.toString(n);\n        char[] c = s.toCharArray();\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        List<Integer> digits = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            digits.add(Character.getNumericValue(s.charAt(i)));\n        }\n        int i = digits.size() - 1;\n        while (i > 0 && digits.get(i) <= digits.get(i - 1)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        int j = digits.size() - 1;\n        while (digits.get(j) <= digits.get(i - 1)) {\n            j--;\n        }\n        Collections.swap(digits, i - 1, j);\n        j = digits.size() - 1;\n        while (i < j) {\n            Collections.swap(digits, i, j);\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < digits.size(); k++) {\n            sb.append(digits.get(k));\n        }\n        return Long.parseLong(sb.toString());",
    "        // Convert to array of digits\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int) (n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that is less than the digit to its right\n        int i = 0;\n        for (; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If no such digit exists, then the number is already the largest possible\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is greater than the pivot\n        int min = i + 1;\n        for (int j = i + 2; j < digits.size(); j++) {\n            if (digits.get(j) < digits.get(min) && digits.get(j) > digits.get(i)) {\n                min = j;\n            }\n        }\n        // Swap the pivot and the smallest digit to the right of the pivot\n        int temp = digits.get(i);\n        digits.set(i, digits.get(min));\n        digits.set(min, temp);\n        // Sort the digits to the right of the pivot\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Convert to number\n        long result = 0;\n        for (int j = 0; j < digits.size(); j++) {\n            result = result * 10 + digits.get(j);\n        }\n        return result;",
    "        // find the first digit that is smaller than the digit to its right\n        // find the smallest digit to the right of the first digit that is larger than the first digit\n        // swap the two digits\n        // sort the digits to the right of the first digit\n        // return the number\n        String s = Long.toString(n);\n        int i = s.length() - 1;\n        while (i > 0 && s.charAt(i - 1) >= s.charAt(i)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        int j = s.length() - 1;\n        while (s.charAt(j) <= s.charAt(i - 1)) {\n            j--;\n        }\n        char[] chars = s.toCharArray();\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        Arrays.sort(chars, i, chars.length);\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If all digits are in descending order, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // Find the first digit greater than the pivot\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the pivot with the first digit greater than the pivot\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the pivot\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(c));",
    "        // Convert n to a string\n        String s = Long.toString(n);\n        // Convert string to a character array\n        char[] chars = s.toCharArray();\n        // Convert character array to a list\n        List<Character> list = new ArrayList<Character>();\n        for (char c : chars) {\n            list.add(c);\n        }\n        // Find the first index where the next digit is smaller than the current digit\n        int index = -1;\n        for (int i = 0; i < list.size() - 1; i++) {\n            if (list.get(i) < list.get(i + 1)) {\n                index = i;\n            }\n        }\n        // If no such index exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the index that is larger than the digit at the index\n        int min = index + 1;\n        for (int i = index + 1; i < list.size(); i++) {\n            if (list.get(i) > list.get(index) && list.get(i) < list.get(min)) {\n                min = i;\n            }\n        }\n        // Swap the digits at the index and the min\n        char temp = list.get(index);\n        list.set(index, list.get(min));\n        list.set(min, temp);\n        // Sort the digits to the right of the index\n        List<Character> sublist = list.subList(index + 1, list.size());\n        Collections.sort(sublist);\n        // Convert the list to a string\n        StringBuilder sb = new StringBuilder();\n        for (Character c : list) {\n            sb.append(c);\n        }\n        // Convert the string to a long\n        long result = Long.parseLong(sb.toString());\n        // Return the long\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the decreasing digit and the smallest digit greater than it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        char[] c = s.toCharArray();\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit, then no bigger number\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits to the right of the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(c));",
    "        String s = Long.toString(n);\n        char[] c = s.toCharArray();\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(c));",
    "        // Convert to array of digits\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first decreasing digit\n        int i = 0;\n        while (i < digits.size() - 1 && digits.get(i) <= digits.get(i + 1)) {\n            i++;\n        }\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = i + 1;\n        while (j < digits.size() && digits.get(j) > digits.get(i)) {\n            j++;\n        }\n        j--;\n        // Swap the two digits\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits after the decreasing digit\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Convert back to number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to array\n        char[] arr = s.toCharArray();\n        // Find the first decreasing digit\n        int i = arr.length - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = arr.length - 1;\n        while (arr[j] <= arr[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = arr.length - 1;\n        while (i < j) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(arr));",
    "        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i])\n            i--;\n        if (i <= 0)\n            return -1;\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1])\n            j--;\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Get the digits of the number\n        List<Integer> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add((int)(n % 10));\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that is smaller than the next digit\n        int i = 0;\n        for (; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If no such digit exists, the number is the largest possible\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit that is larger than the digit at i\n        int j = i + 1;\n        for (int k = i + 2; k < digits.size(); k++) {\n            if (digits.get(k) < digits.get(j) && digits.get(k) > digits.get(i)) {\n                j = k;\n            }\n        }\n        // Swap the digits at i and j\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits after i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Reconstruct the number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to array\n        char[] chars = s.toCharArray();\n        // Find the first decreasing digit\n        int i = chars.length - 2;\n        while (i >= 0 && chars[i] >= chars[i + 1]) {\n            i--;\n        }\n        // If no such digit exists, return -1\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the digit at i\n        int j = chars.length - 1;\n        while (j >= 0 && chars[j] <= chars[i]) {\n            j--;\n        }\n        // Swap the two digits\n        char temp = chars[i];\n        chars[i] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits after i\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(chars));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] chars = s.toCharArray();\n        // find the first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // if no decreasing digit found, then no bigger number can be formed\n        if (i <= 0) {\n            return -1;\n        }\n        // find the first digit greater than the decreasing digit\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit and the greater digit\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long\n        return Long.parseLong(new String(chars));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit with the smallest digit greater than it\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert back to string\n        s = new String(c);\n        // convert back to long\n        return Long.parseLong(s);",
    "        String s = String.valueOf(n);\n        int i = s.length() - 1;\n        while (i > 0 && s.charAt(i) <= s.charAt(i - 1)) {\n            i--;\n        }\n        if (i == 0) {\n            return -1;\n        }\n        int j = s.length() - 1;\n        while (s.charAt(j) <= s.charAt(i - 1)) {\n            j--;\n        }\n        StringBuilder sb = new StringBuilder(s);\n        sb.setCharAt(i - 1, s.charAt(j));\n        sb.setCharAt(j, s.charAt(i - 1));\n        StringBuilder sb2 = new StringBuilder(sb.substring(i));\n        sb2.reverse();\n        sb.replace(i, s.length(), sb2.toString());\n        return Long.valueOf(sb.toString());",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first index where the next char is smaller\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        // If no such index exists, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest char in the suffix that is greater than the char at the index\n        int j = chars.length - 1;\n        while (j > i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the chars\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the suffix\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Return the new number\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Sort in descending order\n        Arrays.sort(chars);\n        // Convert to string\n        String sorted = new String(chars);\n        // Convert to long\n        long sortedLong = Long.parseLong(sorted);\n        // Return next bigger number\n        return sortedLong;",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first digit that is smaller than the digit after it\n        int index = -1;\n        for (int i = 0; i < c.length - 1; i++) {\n            if (c[i] < c[i + 1]) {\n                index = i;\n            }\n        }\n        // if no such digit exists, return -1\n        if (index == -1) {\n            return -1;\n        }\n        // find the smallest digit after index that is greater than c[index]\n        int min = index + 1;\n        for (int i = index + 1; i < c.length; i++) {\n            if (c[i] > c[index] && c[i] < c[min]) {\n                min = i;\n            }\n        }\n        // swap c[index] and c[min]\n        char temp = c[index];\n        c[index] = c[min];\n        c[min] = temp;\n        // reverse the digits after index\n        for (int i = index + 1; i < c.length; i++) {\n            for (int j = i + 1; j < c.length; j++) {\n                if (c[i] > c[j]) {\n                    temp = c[i];\n                    c[i] = c[j];\n                    c[j] = temp;\n                }\n            }\n        }\n        // convert char array to string\n        String result = new String(c);\n        // convert string to long\n        return Long.parseLong(result);",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] chars = s.toCharArray();\n        // Find the first decreasing digit\n        int i = chars.length - 1;\n        while (i > 0 && chars[i] <= chars[i - 1]) {\n            i--;\n        }\n        // If there is no decreasing digit, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit larger than the decreasing digit\n        int j = chars.length - 1;\n        while (chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        // Swap the digits\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long and return\n        return Long.parseLong(new String(chars));",
    "        // convert to char array\n        char[] chars = String.valueOf(n).toCharArray();\n        // find the pivot\n        int pivot = -1;\n        for (int i = chars.length - 1; i > 0; i--) {\n            if (chars[i] > chars[i - 1]) {\n                pivot = i - 1;\n                break;\n            }\n        }\n        // if no pivot, return -1\n        if (pivot == -1) {\n            return -1;\n        }\n        // find the rightmost successor to the pivot\n        int rightmost = pivot + 1;\n        for (int i = pivot + 2; i < chars.length; i++) {\n            if (chars[i] > chars[pivot] && chars[i] < chars[rightmost]) {\n                rightmost = i;\n            }\n        }\n        // swap the pivot with the rightmost successor\n        char temp = chars[pivot];\n        chars[pivot] = chars[rightmost];\n        chars[rightmost] = temp;\n        // reverse the suffix\n        for (int i = pivot + 1; i < chars.length - 1 - (i - pivot - 1); i++) {\n            temp = chars[i];\n            chars[i] = chars[chars.length - 1 - (i - pivot - 1)];\n            chars[chars.length - 1 - (i - pivot - 1)] = temp;\n        }\n        // return the new number\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] a = s.toCharArray();\n        // Find the first decreasing digit from the right\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        // If all digits are in descending order, no answer\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first digit on the right that is greater than the pivot\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        // Swap the pivot with the first digit on the right that is greater than the pivot\n        char temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        // Reverse the digits on the right of the pivot\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long\n        return Long.parseLong(new String(a));",
    "        // Get the digits of the number\n        List<Integer> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add((int)n % 10);\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first decreasing digit\n        int i = 0;\n        for (; i < digits.size() - 1; i++) {\n            if (digits.get(i) > digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If no decreasing digit was found, return -1\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int min = digits.get(i + 1);\n        int minIndex = i + 1;\n        for (int j = i + 2; j < digits.size(); j++) {\n            if (digits.get(j) < min && digits.get(j) > digits.get(i)) {\n                min = digits.get(j);\n                minIndex = j;\n            }\n        }\n        // Swap the decreasing digit with the smallest digit greater than it\n        int temp = digits.get(i);\n        digits.set(i, min);\n        digits.set(minIndex, temp);\n        // Sort the digits after the decreasing digit\n        List<Integer> sorted = digits.subList(i + 1, digits.size());\n        Collections.sort(sorted);\n        // Return the number\n        long result = 0;\n        for (int j = 0; j < digits.size(); j++) {\n            result = result * 10 + digits.get(j);\n        }\n        return result;",
    "        String s = Long.toString(n);\n        char[] c = s.toCharArray();\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(c));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] arr = s.toCharArray();\n        // Find the first decreasing digit\n        int i = arr.length - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        // If all digits are in descending order, no answer\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first digit greater than the pivot\n        int j = arr.length - 1;\n        while (arr[j] <= arr[i - 1]) {\n            j--;\n        }\n        // Swap the pivot with the first digit greater than the pivot\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        // Reverse the digits after the pivot\n        j = arr.length - 1;\n        while (i < j) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to string\n        String str = new String(arr);\n        // Convert to long\n        long num = Long.parseLong(str);\n        // Return the number\n        return num;",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Get the length\n        int l = c.length;\n        // Loop through the array\n        for (int i = l - 1; i > 0; i--) {\n            // If the current digit is greater than the previous digit\n            if (c[i] > c[i - 1]) {\n                // Get the index of the digit to swap with\n                int j = l - 1;\n                while (c[j] <= c[i - 1]) {\n                    j--;\n                }\n                // Swap the digits\n                char temp = c[i - 1];\n                c[i - 1] = c[j];\n                c[j] = temp;\n                // Sort the rest of the digits\n                Arrays.sort(c, i, l);\n                // Return the new number\n                return Long.parseLong(new String(c));\n            }\n        }\n        // Return -1 if no bigger number is possible\n        return -1;",
    "        char[] digits = String.valueOf(n).toCharArray();\n        int i = digits.length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(digits));",
    "        char[] chars = Long.toString(n).toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Convert to list\n        List<Character> l = new ArrayList<Character>();\n        for (char ch : c) {\n            l.add(ch);\n        }\n        // Find the first decreasing digit\n        int i = l.size() - 1;\n        while (i > 0 && l.get(i) <= l.get(i - 1)) {\n            i--;\n        }\n        // If no decreasing digit, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit greater than the decreasing digit\n        int j = l.size() - 1;\n        while (l.get(j) <= l.get(i - 1)) {\n            j--;\n        }\n        // Swap the decreasing digit with the smallest digit greater than it\n        char temp = l.get(i - 1);\n        l.set(i - 1, l.get(j));\n        l.set(j, temp);\n        // Reverse the digits after the decreasing digit\n        Collections.reverse(l.subList(i, l.size()));\n        // Convert to string\n        StringBuilder sb = new StringBuilder();\n        for (char ch : l) {\n            sb.append(ch);\n        }\n        // Return the string\n        return sb.toString();",
    "        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = s.charAt(i) - '0';\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < a.length; k++) {\n            sb.append(a[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] c = s.toCharArray();\n        // find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the smallest digit greater than c[i - 1]\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // swap c[i - 1] and c[j]\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // reverse c[i] to c[c.length - 1]\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to long\n        return Long.parseLong(new String(c));",
    "        String s = String.valueOf(n);\n        char[] c = s.toCharArray();\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(String.valueOf(c));",
    "        // Convert the number to a string\n        String s = Long.toString(n);\n        // Convert the string to a character array\n        char[] chars = s.toCharArray();\n        // Convert the character array to a list\n        List<Character> list = new ArrayList<Character>();\n        for (char c : chars) {\n            list.add(c);\n        }\n        // Find the first digit that is smaller than the digit to its right\n        int i = list.size() - 1;\n        while (i > 0 && list.get(i) <= list.get(i - 1)) {\n            i--;\n        }\n        // If all digits are in descending order, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot\n        int j = list.size() - 1;\n        while (list.get(j) <= list.get(i - 1)) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to the right of the pivot\n        char temp = list.get(i - 1);\n        list.set(i - 1, list.get(j));\n        list.set(j, temp);\n        // Reverse the digits to the right of the pivot\n        j = list.size() - 1;\n        while (i < j) {\n            temp = list.get(i);\n            list.set(i, list.get(j));\n            list.set(j, temp);\n            i++;\n            j--;\n        }\n        // Convert the list back to a string\n        StringBuilder sb = new StringBuilder();\n        for (char c : list) {\n            sb.append(c);\n        }\n        // Convert the string to a long\n        return Long.parseLong(sb.toString());",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to char array\n        char[] arr = s.toCharArray();\n        // convert to list\n        List<Character> list = new ArrayList<Character>();\n        for (char c : arr) {\n            list.add(c);\n        }\n        // find the first decreasing digit\n        int i = list.size() - 1;\n        while (i > 0 && list.get(i) <= list.get(i - 1)) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i == 0) {\n            return -1;\n        }\n        // find the smallest digit greater than the decreasing digit\n        int j = list.size() - 1;\n        while (list.get(j) <= list.get(i - 1)) {\n            j--;\n        }\n        // swap the decreasing digit and the smallest digit greater than the decreasing digit\n        char temp = list.get(i - 1);\n        list.set(i - 1, list.get(j));\n        list.set(j, temp);\n        // reverse the digits after the decreasing digit\n        j = list.size() - 1;\n        while (i < j) {\n            temp = list.get(i);\n            list.set(i, list.get(j));\n            list.set(j, temp);\n            i++;\n            j--;\n        }\n        // convert to string\n        StringBuilder sb = new StringBuilder();\n        for (char c : list) {\n            sb.append(c);\n        }\n        // convert to long\n        return Long.parseLong(sb.toString());",
    "        // Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation.\n        char[] a = Long.toString(n).toCharArray();\n        int k = -1;\n        for (int i = 0; i < a.length - 1; i++) {\n            if (a[i] < a[i + 1]) {\n                k = i;\n            }\n        }\n        if (k == -1) {\n            return -1;\n        }\n        // Find the largest index l greater than k such that a[k] < a[l].\n        int l = -1;\n        for (int i = k + 1; i < a.length; i++) {\n            if (a[k] < a[i]) {\n                l = i;\n            }\n        }\n        // Swap the value of a[k] with that of a[l].\n        char temp = a[k];\n        a[k] = a[l];\n        a[l] = temp;\n        // Reverse the sequence from a[k + 1] up to and including the final element a[n].\n        for (int i = k + 1; i < a.length; i++) {\n            for (int j = i + 1; j < a.length; j++) {\n                if (a[i] < a[j]) {\n                    temp = a[i];\n                    a[i] = a[j];\n                    a[j] = temp;\n                }\n            }\n        }\n        return Long.parseLong(new String(a));",
    "        // Convert to string\n        String s = String.valueOf(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If no decreasing digit found, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the two digits\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert to long and return\n        return Long.valueOf(new String(c));",
    "        // Convert the number to a list of digits.\n        List<Long> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n        // Sort the list in descending order.\n        Collections.sort(digits, Collections.reverseOrder());\n        // Convert the list to a number.\n        long result = 0;\n        for (long digit : digits) {\n            result = result * 10 + digit;\n        }\n        return result;",
    "        String s = Long.toString(n);\n        char[] chars = s.toCharArray();\n        int i = chars.length - 1;\n        while (i > 0 && chars[i - 1] >= chars[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = chars.length - 1;\n        while (j >= i && chars[j] <= chars[i - 1]) {\n            j--;\n        }\n        char temp = chars[i - 1];\n        chars[i - 1] = chars[j];\n        chars[j] = temp;\n        j = chars.length - 1;\n        while (i < j) {\n            temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation.\n        // Find the largest index l greater than k such that a[k] < a[l].\n        // Swap the value of a[k] with that of a[l].\n        // Reverse the sequence from a[k + 1] up to and including the final element a[n].\n        int[] digits = new int[10];\n        int len = 0;\n        while (n > 0) {\n            digits[len++] = (int)(n % 10);\n            n /= 10;\n        }\n        int k = -1;\n        for (int i = 0; i < len - 1; i++) {\n            if (digits[i] < digits[i + 1]) {\n                k = i;\n            }\n        }\n        if (k == -1) {\n            return -1;\n        }\n        int l = k + 1;\n        for (int i = k + 1; i < len; i++) {\n            if (digits[k] < digits[i]) {\n                l = i;\n            }\n        }\n        int tmp = digits[k];\n        digits[k] = digits[l];\n        digits[l] = tmp;\n        for (int i = k + 1; i < (len + k + 1) / 2; i++) {\n            tmp = digits[i];\n            digits[i] = digits[len + k - i];\n            digits[len + k - i] = tmp;\n        }\n        long res = 0;\n        for (int i = 0; i < len; i++) {\n            res = res * 10 + digits[i];\n        }\n        return res;",
    "        // 1. Convert to char array\n        char[] chars = Long.toString(n).toCharArray();\n        // 2. Find the pivot\n        int pivot = -1;\n        for (int i = chars.length - 1; i > 0; i--) {\n            if (chars[i] > chars[i - 1]) {\n                pivot = i - 1;\n                break;\n            }\n        }\n        // 3. If no pivot, return -1\n        if (pivot == -1) {\n            return -1;\n        }\n        // 4. Find the rightmost successor to the pivot\n        int successor = pivot + 1;\n        for (int i = pivot + 1; i < chars.length; i++) {\n            if (chars[i] > chars[pivot] && chars[i] < chars[successor]) {\n                successor = i;\n            }\n        }\n        // 5. Swap the pivot and successor\n        char temp = chars[pivot];\n        chars[pivot] = chars[successor];\n        chars[successor] = temp;\n        // 6. Reverse the suffix\n        for (int i = pivot + 1; i < (chars.length + pivot + 1) / 2; i++) {\n            temp = chars[i];\n            chars[i] = chars[chars.length - i + pivot];\n            chars[chars.length - i + pivot] = temp;\n        }\n        return Long.parseLong(new String(chars));",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Get the length\n        int len = c.length;\n        // Create a list of integers\n        List<Integer> l = new ArrayList<>();\n        // Loop through the array\n        for (int i = 0; i < len; i++) {\n            // Convert the char to int\n            int x = Character.getNumericValue(c[i]);\n            // Add to the list\n            l.add(x);\n        }\n        // Create a list of tuples\n        List<Pair<Integer, Integer>> t = new ArrayList<>();\n        // Loop through the list\n        for (int i = 0; i < len; i++) {\n            // Create a tuple\n            Pair<Integer, Integer> p = new Pair<>(l.get(i), i);\n            // Add to the list\n            t.add(p);\n        }\n        // Sort the list\n        Collections.sort(t);\n        // Create a list of integers\n        List<Integer> l2 = new ArrayList<>();\n        // Loop through the list\n        for (int i = 0; i < len; i++) {\n            // Get the tuple\n            Pair<Integer, Integer> p = t.get(i);\n            // Get the index\n            int index = p.getValue1();\n            // Get the value\n            int value = p.getValue0();\n            // Add to the list\n            l2.add(index, value);\n        }\n        // Create a list of integers\n        List<Integer> l3 = new ArrayList<>();\n        // Loop through the list\n        for (int i = 0; i < len; i++) {\n            // Get the value\n            int value = l2.get(i);\n            // Add to the list\n            l3.add(value);\n        }\n        // Create a list of integers\n        List<Integer> l4 = new ArrayList<>();\n        // Loop through the list\n        for (int i = 0; i < len; i++) {\n            // Get the value\n            int value",
    "        // Convert to string\n        String s = Long.toString(n);\n        // Convert to array\n        char[] arr = s.toCharArray();\n        // Find the first non-increasing digit from the right\n        int i = arr.length - 1;\n        while (i > 0 && arr[i - 1] >= arr[i]) {\n            i--;\n        }\n        // If all digits are non-increasing, then no answer exists\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the smallest digit on the right side of (i-1)th digit that is greater than number[i-1]\n        int j = arr.length - 1;\n        while (arr[j] <= arr[i - 1]) {\n            j--;\n        }\n        // Swap the above found smallest digit with number[i-1]\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        // Sort the digits after (i-1) in ascending order\n        Arrays.sort(arr, i, arr.length);\n        // Convert to string\n        String result = new String(arr);\n        // Convert to long\n        long resultLong = Long.parseLong(result);\n        // Return\n        return resultLong;",
    "        if (n < 0) {\n            return -1;\n        }\n        String s = Long.toString(n);\n        int[] a = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            a[i] = Character.getNumericValue(s.charAt(i));\n        }\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        int temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < a.length; k++) {\n            sb.append(a[k]);\n        }\n        return Long.parseLong(sb.toString());",
    "        // Get the digits of the number\n        List<Long> digits = new ArrayList<>();\n        while (n > 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n        Collections.reverse(digits);\n        // Find the first digit that is smaller than the digit after it\n        int i = 0;\n        for (i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                break;\n            }\n        }\n        // If there is no such digit, return -1\n        if (i == digits.size() - 1) {\n            return -1;\n        }\n        // Find the smallest digit that is greater than the digit at i\n        int j = i + 1;\n        for (int k = i + 1; k < digits.size(); k++) {\n            if (digits.get(k) > digits.get(i) && digits.get(k) < digits.get(j)) {\n                j = k;\n            }\n        }\n        // Swap the digits at i and j\n        long temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n        // Sort the digits after i\n        Collections.sort(digits.subList(i + 1, digits.size()));\n        // Return the new number\n        long result = 0;\n        for (int k = 0; k < digits.size(); k++) {\n            result = result * 10 + digits.get(k);\n        }\n        return result;",
    "        // Convert to string\n        String s = String.valueOf(n);\n        // Convert to char array\n        char[] c = s.toCharArray();\n        // Find the first decreasing digit\n        int i = c.length - 1;\n        while (i > 0 && c[i - 1] >= c[i]) {\n            i--;\n        }\n        // If we are at the end, there is no bigger number\n        if (i <= 0) {\n            return -1;\n        }\n        // Find the first digit greater than the decreasing digit\n        int j = c.length - 1;\n        while (c[j] <= c[i - 1]) {\n            j--;\n        }\n        // Swap the two digits\n        char temp = c[i - 1];\n        c[i - 1] = c[j];\n        c[j] = temp;\n        // Reverse the digits after the decreasing digit\n        j = c.length - 1;\n        while (i < j) {\n            temp = c[i];\n            c[i] = c[j];\n            c[j] = temp;\n            i++;\n            j--;\n        }\n        // Convert back to string\n        s = new String(c);\n        // Convert back to long\n        return Long.parseLong(s);",
    "        char[] chars = Long.toString(n).toCharArray();\n        for (int i = chars.length - 1; i > 0; i--) {\n            if (chars[i] > chars[i - 1]) {\n                char temp = chars[i];\n                chars[i] = chars[i - 1];\n                chars[i - 1] = temp;\n                return Long.parseLong(new String(chars));\n            }\n        }\n        return -1;",
    "        char[] digits = String.valueOf(n).toCharArray();\n        int i = digits.length - 1;\n        while (i > 0 && digits[i - 1] >= digits[i]) {\n            i--;\n        }\n        if (i <= 0) {\n            return -1;\n        }\n        int j = digits.length - 1;\n        while (digits[j] <= digits[i - 1]) {\n            j--;\n        }\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        j = digits.length - 1;\n        while (i < j) {\n            temp = digits[i];\n            digits[i] = digits[j];\n            digits[j] = temp;\n            i++;\n            j--;\n        }\n        return Long.parseLong(new String(digits));",
    "        // convert to string\n        String s = Long.toString(n);\n        // convert to array\n        char[] a = s.toCharArray();\n        // find the first decreasing digit\n        int i = a.length - 1;\n        while (i > 0 && a[i - 1] >= a[i]) {\n            i--;\n        }\n        // if no decreasing digit, return -1\n        if (i <= 0) {\n            return -1;\n        }\n        // find the first digit greater than the decreasing digit\n        int j = a.length - 1;\n        while (a[j] <= a[i - 1]) {\n            j--;\n        }\n        // swap the decreasing digit with the greater digit\n        char temp = a[i - 1];\n        a[i - 1] = a[j];\n        a[j] = temp;\n        // reverse the digits after the decreasing digit\n        j = a.length - 1;\n        while (i < j) {\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++;\n            j--;\n        }\n        // convert to string\n        s = new String(a);\n        // convert to long\n        return Long.parseLong(s);",
    "        // Convert number to array of digits.\n        int[] digits = Arrays.stream(Long.toString(n).split(\"\")).mapToInt(Integer::parseInt).toArray();\n        // Find the first digit that is smaller than the digit to its right.\n        int i = digits.length - 2;\n        while (i >= 0 && digits[i] >= digits[i + 1]) {\n            i--;\n        }\n        if (i < 0) {\n            return -1;\n        }\n        // Find the smallest digit to the right of the pivot that is larger than the pivot.\n        int j = digits.length - 1;\n        while (j >= 0 && digits[j] <= digits[i]) {\n            j--;\n        }\n        // Swap the pivot with the smallest digit to the right of the pivot that is larger than the pivot.\n        int temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        // Reverse the digits to the right of the pivot.\n        int left = i + 1;\n        int right = digits.length - 1;\n        while (left < right) {\n            temp = digits[left];\n            digits[left] = digits[right];\n            digits[right] = temp;\n            left++;\n            right--;\n        }\n        // Convert array of digits to number.\n        return Long.parseLong(Arrays.stream(digits).mapToObj(String::valueOf).collect(Collectors.joining(\"\")));"
  ]
}