{
  "name": "mbpp_266_lateralsurface_cube",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the lateral surface area of a cube given its side length.\n    public static long lateralsurfaceCube(long l) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(lateralsurfaceCube((5l)) == (100l));\n    assert(lateralsurfaceCube((9l)) == (324l));\n    assert(lateralsurfaceCube((10l)) == (400l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return l * l * 4;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return l*l*4;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4 * l * l;",
    "        return 4*l*l;"
  ]
}