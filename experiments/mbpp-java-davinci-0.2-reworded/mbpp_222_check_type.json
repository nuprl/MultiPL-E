{
  "name": "mbpp_222_check_type",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in pair have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        Class<?>[] types = new Class<?>[2];\n        types[0] = test_tuple.getClass().getDeclaredFields()[0].getType();\n        types[1] = test_tuple.getClass().getDeclaredFields()[1].getType();\n        return types[0].equals(types[1]);",
    "        // Write your code here\n        return false;",
    "        Class[] types = new Class[2];\n        types[0] = test_tuple.getClass().getDeclaredFields()[0].getType();\n        types[1] = test_tuple.getClass().getDeclaredFields()[1].getType();\n        return types[0] == types[1];",
    "        return test_tuple.getClass().getName().equals(\"org.javatuples.Pair\");",
    "        // Write your code here\n        return true;",
    "        return test_tuple instanceof Pair;",
    "        // Write your code here.\n        // return true if all the elements in pair have same data type\n        // return false otherwise\n        if(test_tuple instanceof Pair) {\n            Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n            if(pair.getValue0().getClass().equals(pair.getValue1().getClass())) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(test_tuple instanceof Triplet) {\n            Triplet<Object, Object, Object> triplet = (Triplet<Object, Object, Object>) test_tuple;\n            if(triplet.getValue0().getClass().equals(triplet.getValue1().getClass()) && triplet.getValue1().getClass().equals(triplet.getValue2().getClass())) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(test_tuple instanceof Quartet) {\n            Quartet<Object, Object, Object, Object> quartet = (Quartet<Object, Object, Object, Object>) test_tuple;\n            if(quartet.getValue0().getClass().equals(quartet.getValue1().getClass()) && quartet.getValue1().getClass().equals(quartet.getValue2().getClass()) && quartet.getValue2().getClass().equals(quartet.getValue3().getClass())) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(test_tuple instanceof Quintet) {\n            Quintet<Object, Object, Object, Object, Object> quintet = (Quintet<Object, Object, Object, Object, Object>) test_tuple;\n            if(quintet.getValue0().getClass().equals(quintet.getValue1().getClass()) && quintet.getValue1().getClass().equals(quintet.getValue2().getClass()) && quintet.getValue2().getClass().equals(quintet.getValue3",
    "        Class<?>[] types = new Class<?>[2];\n        types[0] = test_tuple.getClass().getDeclaredFields()[0].getType();\n        types[1] = test_tuple.getClass().getDeclaredFields()[1].getType();\n        return types[0] == types[1];",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        if(test_tuple instanceof Pair) {\n            Pair<?, ?> pair = (Pair<?, ?>) test_tuple;\n            return pair.getValue0().getClass().equals(pair.getValue1().getClass());\n        }\n        return false;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        Class<?> cls = test_tuple.getClass();\n        Field[] fields = cls.getDeclaredFields();\n        for (Field f : fields) {\n            if (f.getName().equals(\"val0\")) {\n                try {\n                    f.setAccessible(true);\n                    Object val0 = f.get(test_tuple);\n                    for (Field f2 : fields) {\n                        if (f2.getName().equals(\"val1\")) {\n                            f2.setAccessible(true);\n                            Object val1 = f2.get(test_tuple);\n                            if (val0.getClass() != val1.getClass()) {\n                                return false;\n                            }\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return true;",
    "        Class<?>[] types = new Class<?>[2];\n        types[0] = test_tuple.getClass().getComponentType();\n        types[1] = test_tuple.getClass().getComponentType();\n        return types[0] == types[1];",
    "        return test_tuple.getClass().getTypeName().equals(\"org.javatuples.Pair\");",
    "        // Write your code here\n        Pair<Object, Object> pair = (Pair<Object, Object>) test_tuple;\n        return pair.getValue0().getClass().equals(pair.getValue1().getClass());",
    "        // Write your code here\n        return false;",
    "        // Write your code here\n        return false;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        boolean result = true;\n        Class<?> clazz = test_tuple.getClass();\n        Field[] fields = clazz.getDeclaredFields();\n        Class<?> first_type = null;\n        for (Field field : fields) {\n            field.setAccessible(true);\n            try {\n                if (first_type == null) {\n                    first_type = field.get(test_tuple).getClass();\n                } else {\n                    if (first_type != field.get(test_tuple).getClass()) {\n                        result = false;\n                        break;\n                    }\n                }\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n        return result;",
    "        // Write your code here\n        return true;",
    "        Object[] test_tuple_array = ((Pair)test_tuple).toArray();\n        return test_tuple_array[0].getClass() == test_tuple_array[1].getClass();",
    "        // Write your code here\n        return false;",
    "        Class<?>[] classes = new Class<?>[2];\n        classes[0] = test_tuple.getClass().getDeclaredFields()[0].getType();\n        classes[1] = test_tuple.getClass().getDeclaredFields()[1].getType();\n        return classes[0] == classes[1];"
  ]
}