{
  "name": "mbpp_802_count_rotation",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        long n = arr.size();\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long next = (low + 1) % arr.size();\n            long prev = (high - 1 + arr.size()) % arr.size();\n            mid = (low + high) / 2;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;",
    "        int n = arr.size();\n        long min = arr.get(0);\n        long min_index = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) < min) {\n                min = arr.get(i);\n                min_index = i;\n            }\n        }\n        return min_index;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;",
    "        long n = arr.size();\n        long low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;",
    "        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;"
  ]
}