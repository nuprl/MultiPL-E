{
  "name": "mbpp_736_left_insertion",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;",
    "        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            }\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;",
    "        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;",
    "        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.size();\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;",
    "        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long left = 0;\n        long right = a.size() - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a.get((int) mid) == x) {\n                return mid;\n            } else if (a.get((int) mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;",
    "        long l = 0, r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            }\n            if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;",
    "        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;"
  ]
}