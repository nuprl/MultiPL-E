{
  "name": "mbpp_167_next_power_of_2",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the smallest power of 2 greater than or equal to n.\n    public static long nextPowerOf2(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(nextPowerOf2((0l)) == (1l));\n    assert(nextPowerOf2((5l)) == (8l));\n    assert(nextPowerOf2((17l)) == (32l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long p = 1;\n        while (p < n) {\n            p *= 2;\n        }\n        return p;",
    "        long i = 1;\n        while (i < n) {\n            i *= 2;\n        }\n        return i;",
    "        long i = 1;\n        while (i < n) {\n            i *= 2;\n        }\n        return i;",
    "        long i = 1;\n        while (i < n) {\n            i *= 2;\n        }\n        return i;",
    "        long i = 1;\n        while (i < n) {\n            i *= 2;\n        }\n        return i;",
    "        return (long) Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));",
    "        return (long) Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));",
    "        return (long) Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));",
    "        return (long) Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));",
    "        return (long) Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));",
    "        // Write your code here\n        return 0;",
    "        long power = 1;\n        while (power < n) {\n            power *= 2;\n        }\n        return power;",
    "        // TODO: Implement this function.\n        return 0;",
    "        if (n == 0) {\n            return 1;\n        }\n        if (n > 0 && (n & (n - 1)) == 0) {\n            return n;\n        }\n        while ((n & (n - 1)) > 0) {\n            n = n & (n - 1);\n        }\n        return n << 1;",
    "        return (long) Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));",
    "        long p = 1;\n        while (p < n) {\n            p <<= 1;\n        }\n        return p;",
    "        long i = 1;\n        while (i < n) {\n            i <<= 1;\n        }\n        return i;",
    "        return (long)Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));",
    "        long i = 1;\n        while (i < n) {\n            i *= 2;\n        }\n        return i;",
    "        return (long) Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));"
  ]
}