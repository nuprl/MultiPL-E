{
  "name": "mbpp_771_check_expression",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.empty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.empty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpknxc99_b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp4fstp_0n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : exp.toCharArray()) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpu8idy6p0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                } else if(c == '}' && top != '{') {\n                    return false;\n                } else if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpsif53f69.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '['))) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpwq0jc_5g.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpn9we1mhu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                } else if(c == '}' && top != '{') {\n                    return false;\n                } else if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp43ps9qfq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if(c == ')' || c == ']' || c == '}') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpijifsons.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if(c == '}') {\n                if(stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpi6amn_9j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpq58dqeua.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp6jrc1xb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpn9we1mhu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                } else if(c == '}' && top != '{') {\n                    return false;\n                } else if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp43ps9qfq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbhwuwuor.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if(c == '}') {\n                if(stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpy_w4yql8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            }\n            else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpeks0ag0r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp6tuq64mq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top == '(' && c != ')') {\n                    return false;\n                } else if (top == '{' && c != '}') {\n                    return false;\n                } else if (top == '[' && c != ']') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp1hejzhj5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        if (stack.isEmpty()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp0o84ke2l.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    char top = stack.pop();\n                    if (c == ')' && top != '(') {\n                        return false;\n                    } else if (c == ']' && top != '[') {\n                        return false;\n                    } else if (c == '}' && top != '{') {\n                        return false;\n                    }\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp_zd6jxow.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpygla5028.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbhwuwuor.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if(c == '}') {\n                if(stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpy_w4yql8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.peek();\n                if (c == ')' && top == '(' || c == '}' && top == '{' || c == ']' && top == '[') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpjkue0xmv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> st = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                st.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (st.isEmpty()) {\n                    return false;\n                }\n                char top = st.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return st.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp3uvzxnj4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if(c == '}') {\n                if(stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpwmql_qr4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : exp.toCharArray()) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpp3kplghy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpn9we1mhu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpq58dqeua.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                } else if(c == '}' && top != '{') {\n                    return false;\n                } else if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp43ps9qfq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpn9we1mhu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> st = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                st.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(st.isEmpty()) {\n                    return false;\n                }\n                char top = st.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return st.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp2uqratj9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbhwuwuor.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpq58dqeua.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.peek();\n                if (top == '(' && c == ')' || top == '{' && c == '}' || top == '[' && c == ']') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmprm4emrvb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            }\n            else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpeks0ag0r.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']'))) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpxrhga_6s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbhwuwuor.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if(c == ')' || c == ']' || c == '}') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                } else if(c == ']' && top != '[') {\n                    return false;\n                } else if(c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpdf0lr5_n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.empty()) {\n                    return false;\n                }\n                char top = stack.peek();\n                if (c == ')' && top == '(' || c == '}' && top == '{' || c == ']' && top == '[') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack.empty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpmcblldvp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                } else if(c == '}' && top != '{') {\n                    return false;\n                } else if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpsif53f69.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbejm826s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char ch = exp.charAt(i);\n            if (ch == '(' || ch == '{' || ch == '[') {\n                stack.push(ch);\n            } else if (ch == ')' || ch == '}' || ch == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if ((ch == ')' && top != '(') || (ch == '}' && top != '{') || (ch == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp_tfw_oiq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(' || c == '}' && top != '{' || c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpj071d047.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : exp.toCharArray()) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpm15l52d_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            if (exp.charAt(i) == '(' || exp.charAt(i) == '[' || exp.charAt(i) == '{') {\n                stack.push(exp.charAt(i));\n            } else if (exp.charAt(i) == ')' || exp.charAt(i) == ']' || exp.charAt(i) == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char c = stack.pop();\n                if (exp.charAt(i) == ')' && c != '(') {\n                    return false;\n                }\n                if (exp.charAt(i) == ']' && c != '[') {\n                    return false;\n                }\n                if (exp.charAt(i) == '}' && c != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp8q1ooz36.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp8yav9r08.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> s = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                s.push(c);\n            } else if(c == ')') {\n                if(s.isEmpty() || s.pop() != '(') {\n                    return false;\n                }\n            } else if(c == ']') {\n                if(s.isEmpty() || s.pop() != '[') {\n                    return false;\n                }\n            } else if(c == '}') {\n                if(s.isEmpty() || s.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return s.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp2undhl61.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.isEmpty()) {\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpozk1kwpa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.peek() != '{') {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp2092ulcf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> s = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                s.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (s.isEmpty()) {\n                    return false;\n                }\n                char top = s.pop();\n                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return s.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp6v0o8tqg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if(c == '}') {\n                if(stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpwmql_qr4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(' || c == ']' && top != '[' || c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp9n9oz98n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbhwuwuor.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> st = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            if(exp.charAt(i) == '(' || exp.charAt(i) == '{' || exp.charAt(i) == '[') {\n                st.push(exp.charAt(i));\n            } else if(exp.charAt(i) == ')') {\n                if(st.isEmpty() || st.peek() != '(') {\n                    return false;\n                } else {\n                    st.pop();\n                }\n            } else if(exp.charAt(i) == '}') {\n                if(st.isEmpty() || st.peek() != '{') {\n                    return false;\n                } else {\n                    st.pop();\n                }\n            } else if(exp.charAt(i) == ']') {\n                if(st.isEmpty() || st.peek() != '[') {\n                    return false;\n                } else {\n                    st.pop();\n                }\n            }\n        }\n        return st.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp1a865ynf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (stack.isEmpty()) {\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpl2lu_e7o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.size() == 0) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.size() == 0;\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp14fmqk2n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp6tuq64mq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> st = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                st.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (st.isEmpty()) {\n                    return false;\n                }\n                char top = st.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return st.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpupvv8l1i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpq58dqeua.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.empty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.empty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp5kj99i4z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> st = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                st.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (st.isEmpty()) {\n                    return false;\n                }\n                char top = st.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        if (st.isEmpty()) {\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpn09ajtoi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if(c == ')' || c == ']' || c == '}') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                } else if(c == ']' && top != '[') {\n                    return false;\n                } else if(c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpagsn7jre.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpq58dqeua.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp6jrc1xb4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.peek() != '{') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmps5cge3v0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpn9we1mhu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbhwuwuor.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.peek();\n                if (top == '(' && c == ')' || top == '[' && c == ']' || top == '{' && c == '}') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp80apwj42.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            if (exp.charAt(i) == '(' || exp.charAt(i) == '{' || exp.charAt(i) == '[') {\n                stack.push(exp.charAt(i));\n            } else if (exp.charAt(i) == ')' || exp.charAt(i) == '}' || exp.charAt(i) == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                if (exp.charAt(i) == ')' && stack.peek() == '(') {\n                    stack.pop();\n                } else if (exp.charAt(i) == '}' && stack.peek() == '{') {\n                    stack.pop();\n                } else if (exp.charAt(i) == ']' && stack.peek() == '[') {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpmq_f1elp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbhwuwuor.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top == '(' && c != ')') {\n                    return false;\n                }\n                if (top == '[' && c != ']') {\n                    return false;\n                }\n                if (top == '{' && c != '}') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpkqrmqthj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpygla5028.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(' || c == '}' && top != '{' || c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpj071d047.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpbhwuwuor.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : exp.toCharArray()) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpp3kplghy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if(c == '}') {\n                if(stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpi6amn_9j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(' || c == '}' && top != '{' || c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpj071d047.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : exp.toCharArray()) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpm15l52d_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp6wco0ffz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(' || c == ']' && top != '[' || c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmpfm9fbcbu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<Character>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n            } else if(c == '}') {\n                if(stack.isEmpty() || stack.pop() != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmpi6amn_9j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "/tmp/tmp7u18_0ye.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i=0;i<exp.length();i++) {\n            char c = exp.charAt(i);\n            if(c=='(' || c=='{' || c=='[') {\n                stack.push(c);\n            }\n            else if(c==')' || c=='}' || c==']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c==')' && top!='(') {\n                    return false;\n                }\n                if(c=='}' && top!='{') {\n                    return false;\n                }\n                if(c==']' && top!='[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmphwis87l4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' || c == ']' || c == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpn9we1mhu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(c == ')' && top != '(') {\n                    return false;\n                }\n                if(c == '}' && top != '{') {\n                    return false;\n                }\n                if(c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmp9_9hkdjd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpmnx4xfhh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                } else if (c == '}' && top != '{') {\n                    return false;\n                } else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n",
      "timestamp": 1665509936,
      "stdout": "",
      "stderr": "/tmp/tmpqjf9po76.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}