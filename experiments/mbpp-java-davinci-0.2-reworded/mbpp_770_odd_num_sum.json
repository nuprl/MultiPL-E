{
  "name": "mbpp_770_odd_num_sum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of fourth power of first n odd natural numbers.\n    public static long oddNumSum(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(oddNumSum((2l)) == (82l));\n    assert(oddNumSum((3l)) == (707l));\n    assert(oddNumSum((4l)) == (3108l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += Math.pow(2 * i - 1, 4);\n        }\n        return sum;",
    "        return 0;",
    "        // Write your code here\n        long sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += Math.pow(2*i - 1, 4);\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += Math.pow(2 * i - 1, 4);\n        }\n        return sum;",
    "        long sum = 0;\n        for(long i = 1; i <= n; i++) {\n            sum += Math.pow(2*i - 1, 4);\n        }\n        return sum;",
    "        return (long) Math.pow(n, 4);",
    "        return (long) Math.pow(n, 5);",
    "        return Stream.iterate(1, i -> i + 2).limit(n).map(i -> i * i * i * i).reduce(0, (a, b) -> a + b);",
    "        // Write your code here\n        long sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += Math.pow(2 * i - 1, 4);\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 != 0) {\n                sum += Math.pow(i, 4);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += Math.pow(2 * i - 1, 4);\n        }\n        return sum;",
    "        return 0;",
    "        return (long) (Math.pow(n, 5) / 5 + Math.pow(n, 4) / 2 + Math.pow(n, 3) / 3 - Math.pow(n, 2) / 4);",
    "        return (long) Math.pow(n, 4);",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 != 0) {\n                sum += Math.pow(i, 4);\n            }\n        }\n        return sum;",
    "        return IntStream.rangeClosed(1, (int)n).filter(x -> x % 2 != 0).map(x -> x * x * x * x).sum();",
    "        long sum = 0;\n        for(long i = 1; i <= n; i++) {\n            sum += Math.pow(2*i-1, 4);\n        }\n        return sum;",
    "        // Write your code here\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 != 0) {\n                sum += Math.pow(i, 4);\n            }\n        }\n        return sum;",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(2 * i - 1, 4);\n        }\n        return sum;",
    "        return (long) Math.pow(n, 5);"
  ]
}