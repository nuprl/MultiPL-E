{
  "name": "mbpp_245_max_sum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp1 = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp1[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp1[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp1[i] = Math.max(dp1[i], dp1[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp1[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpcsrveegi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[0] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(arr.size() - 1 - i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n                if (arr.get(arr.size() - 1 - i) > arr.get(arr.size() - 1 - j) && maxSumRev[i] < maxSumRev[j] + arr.get(arr.size() - 1 - i)) {\n                    maxSumRev[i] = maxSumRev[j] + arr.get(arr.size() - 1 - i);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumRev[arr.size() - 1 - i] - arr.get(i)) {\n                max = maxSum[i] + maxSumRev[arr.size() - 1 - i] - arr.get(i);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpmvychkhm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpq40b5xyp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmphiia9dft.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumRev[i] < maxSumRev[j] + arr.get(i)) {\n                    maxSumRev[i] = maxSumRev[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp86wn7sij.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpstsomxnq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpjrpf_b32.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp0ctwrhln.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = Math.max(dp[i - 1] + arr.get(i), arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(dp2[i + 1] + arr.get(i), arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpwwp8dzrs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long max = Long.MIN_VALUE;\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    max = Math.max(max, dp[j]);\n                }\n            }\n            dp[i] = max + arr.get(i);\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp7g3pfix5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        return Arrays.stream(dp).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp1z2ufm62.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        Arrays.fill(dp, 0);\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpl8qcdp_1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp734n_9et.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = Math.max(dp[i - 1] + arr.get(i), arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(dp2[i + 1] + arr.get(i), arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n            max = Math.max(max, dp2[i]);\n        }\n        for (int i = 1; i < arr.size() - 1; i++) {\n            max = Math.max(max, dp[i - 1] + dp2[i + 1]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp7hpm66hw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = Math.max(inc[i - 1], arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = Math.max(dec[i + 1], arr.get(i));\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp1bpoggtx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp4dyy1tz5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpyp4e0cyf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp84v4ohd4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmprftzuq6_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumReverse[i] < maxSumReverse[j] + arr.get(i)) {\n                    maxSumReverse[i] = maxSumReverse[j] + arr.get(i);\n                }\n            }\n        }\n        long max = maxSum[0] + maxSumReverse[0] - arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumReverse[i] - arr.get(i)) {\n                max = maxSum[i] + maxSumReverse[i] - arr.get(i);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpy4cz28tz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long sum = 0;\n            for (int j = i; j < arr.size(); j++) {\n                sum += arr.get(j);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmp_xig52ed.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyxmeh5_j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp734n_9et.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpl5h9_wti.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] max = new long[arr.size()];\n        long[] min = new long[arr.size()];\n        max[0] = arr.get(0);\n        min[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            max[i] = Math.max(max[i - 1] + arr.get(i), arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            min[i] = Math.max(min[i + 1] + arr.get(i), arr.get(i));\n        }\n        long ans = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, max[i] + min[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpixir_3tj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp4dyy1tz5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpq40b5xyp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = dp[0];\n        for (int i = 1; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpv1oktvdc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7lsx3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmp_261jf5k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyxmeh5_j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            dp2[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpha76jhgg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = Math.max(arr.get(i), inc[i - 1] + arr.get(i));\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = Math.max(arr.get(i), dec[i + 1] + arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpi7_sh4ec.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpq40b5xyp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long max = maxSum[0] + maxSumRev[0] - arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpzf9p9jnd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (long i : dp) {\n            max = Math.max(max, i);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpdgzipva8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpemd0kdum.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n-1] = arr.get(n-1);\n        for(int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = n-2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for(int j = n-1; j > i; j--) {\n                if(arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyyv4kczt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyxmeh5_j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp1 = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp1[i] = arr.get(i);\n            dp2[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp1[i] = Math.max(dp1[i], dp1[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp1[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpr7scuw2y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpemd0kdum.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpltdmv3a7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpemd0kdum.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (long i : dp) {\n            ans = Math.max(ans, i);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmps9fwnnve.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpblopvljp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumReverse[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumReverse[i] = Math.max(maxSumReverse[i], maxSumReverse[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumReverse[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmp7_xej5ze.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpavh8xrvf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        dp[0] = arr.get(0);\n        dp2[n-1] = arr.get(n-1);\n        for(int i = 1; i < n; i++) {\n            dp[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = n-2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for(int j = n-1; j > i; j--) {\n                if(arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpk_a3eemo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long[] dp2 = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp2[i] = arr.get(i);\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpchp02o_k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmp1k61i1sn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n                if (arr.get(i) < arr.get(j)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmp08yslg0k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumReverse[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumReverse[i] < maxSumReverse[j] + arr.get(i)) {\n                    maxSumReverse[i] = maxSumReverse[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumReverse[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpopljcbs4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] lis = new long[n];\n        long[] lds = new long[n];\n        for (int i = 0; i < n; i++) {\n            lis[i] = arr.get(i);\n            lds[i] = arr.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && lis[i] < lis[j] + arr.get(i)) {\n                    lis[i] = lis[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && lds[i] < lds[j] + arr.get(i)) {\n                    lds[i] = lds[j] + arr.get(i);\n                }\n            }\n        }\n        long ans = Long.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, lis[i] + lds[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpxmbyu6jw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpblopvljp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpa0pklpat.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp4dyy1tz5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumRev[i] < maxSumRev[j] + arr.get(i)) {\n                    maxSumRev[i] = maxSumRev[j] + arr.get(i);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumRev[i] - arr.get(i)) {\n                max = maxSum[i] + maxSumRev[i] - arr.get(i);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpyx1ucmqg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpceupesnp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = Math.max(inc[i - 1], arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = Math.max(dec[i + 1], arr.get(i));\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpc6yd2btr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyxmeh5_j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] max = new long[arr.size()];\n        long[] min = new long[arr.size()];\n        max[0] = arr.get(0);\n        min[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            max[i] = Math.max(max[i - 1], arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            min[i] = Math.min(min[i + 1], arr.get(i));\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, max[i] + min[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpcldwh64t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumReverse[i] < maxSumReverse[j] + arr.get(i)) {\n                    maxSumReverse[i] = maxSumReverse[j] + arr.get(i);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumReverse[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmp2rp8p2z6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpkx62_hqa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmp059kosbh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmppb075wg4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmponr22qp5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumReverse[i] = Math.max(maxSumReverse[i], maxSumReverse[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumReverse[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpkbvvevxm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpl5h9_wti.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7lsx3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpexerix7l.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpa0pklpat.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpzw4wjfti.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            dp2[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n                if (arr.get(i) < arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpeo5774hj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for(int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for(int j = arr.size() - 1; j > i; j--) {\n                if(arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmp_msu140p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpl7821mly.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpjrpf_b32.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long[] dp2 = new long[arr.size()];\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpi72htks_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, maxSum[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmp5j7mrfot.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            dp2[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpssc8k4em.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp4dyy1tz5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[0] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(arr.size() - i - 1);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n                if (arr.get(arr.size() - i - 1) > arr.get(arr.size() - j - 1)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(arr.size() - i - 1));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[arr.size() - i - 1] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpzwss8dil.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long sum = 0;\n            for (int j = i; j < arr.size(); j++) {\n                sum += arr.get(j);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmp_xig52ed.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmp4gs6_ho8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp6t6c6_jn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size()-1] = arr.get(arr.size()-1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size()-2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size()-1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpl3317y11.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpa0pklpat.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = Math.max(inc[i - 1], arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = Math.max(dec[i + 1], arr.get(i));\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpnov_pnld.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = Math.max(inc[i - 1], arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = Math.max(dec[i + 1], arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpsnjha0iz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp_fsjej02.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n-1] = arr.get(n-1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = Math.max(arr.get(i), inc[i-1] + arr.get(i));\n        }\n        for (int i = n-2; i >= 0; i--) {\n            dec[i] = Math.max(arr.get(i), dec[i+1] + arr.get(i));\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpsu0f8nkg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long sum = 0;\n            for (int j = i; j < arr.size(); j++) {\n                sum += arr.get(j);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmp_xig52ed.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp5dc0_c6j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSumReverse[i] = Math.max(maxSumReverse[i], maxSumReverse[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumReverse[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpu__ruvdh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyxmeh5_j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpjrpf_b32.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSumReverse[i] = Math.max(maxSumReverse[i], maxSumReverse[j] + arr.get(i));\n                }\n            }\n        }\n        long max = maxSum[0] + maxSumReverse[0] - arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumReverse[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp2h4dkwfm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumReverse[i] < maxSumReverse[j] + arr.get(i)) {\n                    maxSumReverse[i] = maxSumReverse[j] + arr.get(i);\n                }\n            }\n        }\n        long max = maxSum[0] + maxSumReverse[0] - arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumReverse[i] - arr.get(i)) {\n                max = maxSum[i] + maxSumReverse[i] - arr.get(i);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpy4cz28tz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumRev[i] < maxSumRev[j] + arr.get(i)) {\n                    maxSumRev[i] = maxSumRev[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumRev[i] - arr.get(i)) {\n                max = maxSum[i] + maxSumRev[i] - arr.get(i);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp5r6m5c0i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        long max = arr.get(0);\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = Math.max(arr.get(i), maxSum[i - 1] + arr.get(i));\n            max = Math.max(max, maxSum[i]);\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = Math.max(arr.get(i), maxSumRev[i + 1] + arr.get(i));\n        }\n        for (int i = 1; i < arr.size() - 1; i++) {\n            max = Math.max(max, maxSum[i - 1] + maxSumRev[i + 1]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp3rxmun5v.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = dp[0];\n        for (int i = 1; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpv1oktvdc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp8fpwo75z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            dp2[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp0qyxx0us.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpjrpf_b32.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long[] dp2 = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp2[i] = arr.get(i);\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmps5_o8t0i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyxmeh5_j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp1 = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp1[i] = arr.get(i);\n            dp2[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp1[i] = Math.max(dp1[i], dp1[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp1[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmps1d45xbi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpb_toibfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] max = new long[arr.size()];\n        long[] min = new long[arr.size()];\n        max[0] = arr.get(0);\n        min[arr.size()-1] = arr.get(arr.size()-1);\n        for (int i = 1; i < arr.size(); i++) {\n            max[i] = Math.max(max[i-1], arr.get(i));\n        }\n        for (int i = arr.size()-2; i >= 0; i--) {\n            min[i] = Math.min(min[i+1], arr.get(i));\n        }\n        long res = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            res = Math.max(res, max[i] + min[i] - arr.get(i));\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp7j3yyxwr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n-1] = arr.get(n-1);\n        for(int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = n-2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for(int j = n-1; j > i; j--) {\n                if(arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyyv4kczt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long sum = 0;\n            for (int j = i; j < arr.size(); j++) {\n                sum += arr.get(j);\n                if (sum > max) {\n                    max = sum;\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmp_xig52ed.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp84v4ohd4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpg_xlzvtu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpuuifxrn4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpcxvu8z_t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long max = 0;\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmptyktt43d.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpctlrb3m3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp5dc0_c6j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpa0pklpat.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = Math.max(arr.get(i), dp[i - 1] + arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(arr.get(i), dp2[i + 1] + arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp16vbpgc0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpemd0kdum.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpwze8d3is.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumReverse[i] < maxSumReverse[j] + arr.get(i)) {\n                    maxSumReverse[i] = maxSumReverse[j] + arr.get(i);\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumReverse[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpmy5k87hp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long n = arr.size();\n        long[] inc = new long[(int) n];\n        long[] dec = new long[(int) n];\n        inc[0] = arr.get(0);\n        dec[(int) n - 1] = arr.get((int) n - 1);\n        for (long i = 1; i < n; i++) {\n            inc[(int) i] = Math.max(inc[(int) (i - 1)], arr.get((int) i));\n        }\n        for (long i = n - 2; i >= 0; i--) {\n            dec[(int) i] = Math.max(dec[(int) (i + 1)], arr.get((int) i));\n        }\n        long max = Long.MIN_VALUE;\n        for (long i = 0; i < n; i++) {\n            max = Math.max(max, inc[(int) i] + dec[(int) i] - arr.get((int) i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpc6devh7e.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n-1] = arr.get(n-1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n-2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n-1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpuizznpar.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[n - 1] = arr.get(n - 1);\n        for(int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for(int j = n - 1; j > i; j--) {\n                if(arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpsd13q21g.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmp3q_e1y2z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = Math.max(inc[i - 1], arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = Math.max(dec[i + 1], arr.get(i));\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpc6yd2btr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        ArrayList<Long> maxSum = new ArrayList<>();\n        ArrayList<Long> maxSumRev = new ArrayList<>();\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum.add(arr.get(i));\n            maxSumRev.add(arr.get(i));\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum.get(i) < maxSum.get(j) + arr.get(i)) {\n                    maxSum.set(i, maxSum.get(j) + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumRev.get(i) < maxSumRev.get(j) + arr.get(i)) {\n                    maxSumRev.set(i, maxSumRev.get(j) + arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum.get(i) + maxSumRev.get(i) - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpipt4arig.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n            max = Math.max(max, maxSum[i]);\n        }\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumReverse[i] = Math.max(maxSumReverse[i], maxSumReverse[j] + arr.get(i));\n                }\n            }\n            max = Math.max(max, maxSumReverse[i]);\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                max = Math.max(max, maxSum[i] + maxSumReverse[j]);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmp2gszed3a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size()-1] = arr.get(arr.size()-1);\n        for(int i=1;i<arr.size();i++) {\n            inc[i] = arr.get(i);\n            for(int j=0;j<i;j++) {\n                if(arr.get(j)<arr.get(i)) {\n                    inc[i] = Math.max(inc[i],inc[j]+arr.get(i));\n                }\n            }\n        }\n        for(int i=arr.size()-2;i>=0;i--) {\n            dec[i] = arr.get(i);\n            for(int j=arr.size()-1;j>i;j--) {\n                if(arr.get(j)<arr.get(i)) {\n                    dec[i] = Math.max(dec[i],dec[j]+arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for(int i=0;i<arr.size();i++) {\n            max = Math.max(max,inc[i]+dec[i]-arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpw_32a4xs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long maxSum = 0;\n        long[] maxSumEndingAt = new long[arr.size()];\n        long[] maxSumStartingAt = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            maxSumEndingAt[i] = arr.get(i);\n            maxSumStartingAt[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSumEndingAt[i] < maxSumEndingAt[j] + arr.get(i)) {\n                    maxSumEndingAt[i] = maxSumEndingAt[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumStartingAt[i] < maxSumStartingAt[j] + arr.get(i)) {\n                    maxSumStartingAt[i] = maxSumStartingAt[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum = Math.max(maxSum, maxSumEndingAt[i] + maxSumStartingAt[i] - arr.get(i));\n        }\n        return maxSum;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpkh0hdo16.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size()-1] = arr.get(arr.size()-1);\n        for(int i = 1; i < arr.size(); i++) {\n            inc[i] = Math.max(inc[i-1], arr.get(i));\n        }\n        for(int i = arr.size()-2; i >= 0; i--) {\n            dec[i] = Math.max(dec[i+1], arr.get(i));\n        }\n        long ans = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpmsw5i7qb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] max = new long[arr.size()];\n        long[] min = new long[arr.size()];\n        max[0] = arr.get(0);\n        min[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            max[i] = Math.max(max[i - 1], arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            min[i] = Math.min(min[i + 1], arr.get(i));\n        }\n        long ans = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, max[i] + min[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpiolm7fd1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpemd0kdum.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        long max = maxSum[0];\n        for (int i = 1; i < arr.size(); i++) {\n            if (max < maxSum[i]) {\n                max = maxSum[i];\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmptbhbtv29.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            dp2[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmpssc8k4em.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size()-1] = arr.get(arr.size()-1);\n        for(int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = arr.size()-2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for(int j = arr.size()-1; j > i; j--) {\n                if(arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpl7_5rb5s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long maxSum = 0;\n        long[] maxSumLeft = new long[arr.size()];\n        long[] maxSumRight = new long[arr.size()];\n        long[] maxSumLeftRight = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            maxSumLeft[i] = arr.get(i);\n            maxSumRight[i] = arr.get(i);\n            maxSumLeftRight[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSumLeft[i] < maxSumLeft[j] + arr.get(i)) {\n                    maxSumLeft[i] = maxSumLeft[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumRight[i] < maxSumRight[j] + arr.get(i)) {\n                    maxSumRight[i] = maxSumRight[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            maxSumLeftRight[i] = maxSumLeft[i] + maxSumRight[i] - arr.get(i);\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (maxSum < maxSumLeftRight[i]) {\n                maxSum = maxSumLeftRight[i];\n            }\n        }\n        return maxSum;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "/tmp/tmpig15fg5y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7lsx3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "/tmp/tmpotf39d85.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumReverse[i] < maxSumReverse[j] + arr.get(i)) {\n                    maxSumReverse[i] = maxSumReverse[j] + arr.get(i);\n                }\n            }\n        }\n        long max = maxSum[0] + maxSumReverse[0] - arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumReverse[i] - arr.get(i)) {\n                max = maxSum[i] + maxSumReverse[i] - arr.get(i);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpy4cz28tz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmprftzuq6_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpblopvljp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmp056_k5jp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "/tmp/tmpp_zii3o7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] left = new long[arr.size()];\n        long[] right = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            left[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    left[i] = Math.max(left[i], left[j] + arr.get(i));\n                }\n            }\n            max = Math.max(max, left[i]);\n        }\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            right[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    right[i] = Math.max(right[i], right[j] + arr.get(i));\n                }\n            }\n            max = Math.max(max, right[i]);\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    max = Math.max(max, left[i] + right[j]);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "/tmp/tmpp9fx5nt5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7lsx3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        for(int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            dp2[i] = arr.get(i);\n        }\n        for(int i = 1; i < arr.size(); i++) {\n            for(int j = 0; j < i; j++) {\n                if(arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = arr.size() - 2; i >= 0; i--) {\n            for(int j = arr.size() - 1; j > i; j--) {\n                if(arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "/tmp/tmpse5p0z2v.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n-1] = arr.get(n-1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n-2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n-1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "/tmp/tmpi673tbi6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "/tmp/tmp6jtgrfh1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpltdmv3a7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpl5h9_wti.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSumReverse[i] = Math.max(maxSumReverse[i], maxSumReverse[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumReverse[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "/tmp/tmpkt0x3ho2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size()-1] = arr.get(arr.size()-1);\n        for(int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = arr.size()-2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for(int j = arr.size()-1; j > i; j--) {\n                if(arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpa6zm4kak.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpg0sr0qtv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] left = new long[arr.size()];\n        long[] right = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            left[i] = arr.get(i);\n            right[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && left[i] < left[j] + arr.get(i)) {\n                    left[i] = left[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && right[i] < right[j] + arr.get(i)) {\n                    right[i] = right[j] + arr.get(i);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, left[i] + right[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpwuxcmc4n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpb_toibfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmp056_k5jp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        Arrays.fill(dp, 0);\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmp41wba25d.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] max = new long[arr.size()];\n        long[] min = new long[arr.size()];\n        long[] maxSum = new long[arr.size()];\n        long[] minSum = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            max[i] = arr.get(i);\n            min[i] = arr.get(i);\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    max[i] = Math.max(max[i], max[j] + arr.get(i));\n                }\n                if (arr.get(i) < arr.get(j)) {\n                    min[i] = Math.max(min[i], min[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n                if (arr.get(i) < arr.get(j)) {\n                    minSum[i] = Math.max(minSum[i], minSum[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, max[i] + minSum[i]);\n            ans = Math.max(ans, min[i] + maxSum[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpac71y4hg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpemd0kdum.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmp1ksfx4v2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpyxmeh5_j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumReverse[i] < maxSumReverse[j] + arr.get(i)) {\n                    maxSumReverse[i] = maxSumReverse[j] + arr.get(i);\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumReverse[i] - arr.get(i)) {\n                max = maxSum[i] + maxSumReverse[i] - arr.get(i);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmps6n201p4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpnme8j75d.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmp4gs6_ho8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        ArrayList<Long> inc = new ArrayList<Long>();\n        ArrayList<Long> dec = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n            inc.add(arr.get(i));\n            dec.add(arr.get(i));\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && inc.get(i) < inc.get(j) + arr.get(i)) {\n                    inc.set(i, inc.get(j) + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && dec.get(i) < dec.get(j) + arr.get(i)) {\n                    dec.set(i, dec.get(j) + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (max < inc.get(i) + dec.get(i) - arr.get(i)) {\n                max = inc.get(i) + dec.get(i) - arr.get(i);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpbfca7869.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpwze8d3is.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[0] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(arr.size() - 1 - i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n                if (arr.get(arr.size() - 1 - j) < arr.get(arr.size() - 1 - i)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(arr.size() - 1 - i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[arr.size() - 1 - i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpbt09rzew.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmp1ksfx4v2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmpuuifxrn4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = Math.max(dp[i - 1] + arr.get(i), arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(dp2[i + 1] + arr.get(i), arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpwwp8dzrs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp5dc0_c6j.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp_fsjej02.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp1 = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp1[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp1[i] = Math.max(arr.get(i), dp1[i - 1] + arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(arr.get(i), dp2[i + 1] + arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp1[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpg0sk9j5e.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmpika64vsg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] lis = new long[n];\n        long[] lds = new long[n];\n        for (int i = 0; i < n; i++) {\n            lis[i] = arr.get(i);\n            lds[i] = arr.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && lis[i] < lis[j] + arr.get(i)) {\n                    lis[i] = lis[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && lds[i] < lds[j] + arr.get(i)) {\n                    lds[i] = lds[j] + arr.get(i);\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, lis[i] + lds[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmpn6jku0cl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumRev[i] < maxSumRev[j] + arr.get(i)) {\n                    maxSumRev[i] = maxSumRev[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmp86wn7sij.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmp1ksfx4v2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpf3r7lsx3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmphiia9dft.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        long max = maxSum[0];\n        for (int i = 1; i < arr.size(); i++) {\n            if (max < maxSum[i]) {\n                max = maxSum[i];\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmptbhbtv29.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for(int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for(int j = arr.size() - 1; j > i; j--) {\n                if(arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmp_msu140p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpceupesnp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmponr22qp5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size()-1] = arr.get(arr.size()-1);\n        for(int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = arr.size()-2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for(int j = arr.size()-1; j > i; j--) {\n                if(arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpo7evm19c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123881,
      "stdout": "",
      "stderr": "/tmp/tmppb075wg4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpl5h9_wti.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmp1ksfx4v2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size()-1] = arr.get(arr.size()-1);\n        for(int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for(int i = arr.size()-2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for(int j = arr.size()-1; j > i; j--) {\n                if(arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "/tmp/tmpl7_5rb5s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123878,
      "stdout": "",
      "stderr": "/tmp/tmpblopvljp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long maxSum = 0;\n        long[] maxSumEndingAt = new long[arr.size()];\n        long[] maxSumStartingAt = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            maxSumEndingAt[i] = arr.get(i);\n            maxSumStartingAt[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumEndingAt[i] = Math.max(maxSumEndingAt[i], maxSumEndingAt[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumStartingAt[i] = Math.max(maxSumStartingAt[i], maxSumStartingAt[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum = Math.max(maxSum, maxSumEndingAt[i] + maxSumStartingAt[i] - arr.get(i));\n        }\n        return maxSum;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmpcax8oass.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "/tmp/tmpyjmry2am.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long max = 0;\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmp_kj29wwy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        ArrayList<Long> inc = new ArrayList<Long>();\n        ArrayList<Long> dec = new ArrayList<Long>();\n        inc.add(arr.get(0));\n        dec.add(arr.get(arr.size()-1));\n        for (int i = 1; i < arr.size(); i++) {\n            inc.add(Math.max(inc.get(i-1), arr.get(i)));\n        }\n        for (int i = arr.size()-2; i >= 0; i--) {\n            dec.add(Math.max(dec.get(arr.size()-i-2), arr.get(i)));\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc.get(i) + dec.get(arr.size()-i-1) - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmpbo82_e9c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        // Write your code here\n        long max = 0;\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n            max = Math.max(max, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmpt3gng7_m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = Math.max(arr.get(i), dp[i - 1] + arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(arr.get(i), dp2[i + 1] + arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123883,
      "stdout": "",
      "stderr": "/tmp/tmp16vbpgc0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123880,
      "stdout": "",
      "stderr": "/tmp/tmpa0pklpat.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSum[i] = Math.max(maxSum[i], maxSum[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumRev[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    maxSumRev[i] = Math.max(maxSumRev[i], maxSumRev[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "/tmp/tmpaib584wq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = Math.max(dp[i - 1] + arr.get(i), arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(dp2[i + 1] + arr.get(i), arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
      "timestamp": 1665510559,
      "stdout": "",
      "stderr": "/tmp/tmpwwp8dzrs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}