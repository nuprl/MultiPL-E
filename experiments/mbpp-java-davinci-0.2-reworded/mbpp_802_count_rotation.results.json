{
  "name": "mbpp_802_count_rotation",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long n = arr.size();\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        // Write your code here\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        // Write your code here\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long next = (low + 1) % arr.size();\n            long prev = (high - 1 + arr.size()) % arr.size();\n            mid = (low + high) / 2;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189974,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpypawxm4m.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long min = arr.get(0);\n        long min_index = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) < min) {\n                min = arr.get(i);\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189974,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp991v7cbi.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189989,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190005,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.size() + next - 1) % arr.size();\n            if (arr.get((int) next) <= arr.get((int) prev)) {\n                return next;\n            } else if (arr.get((int) next) <= arr.get((int) high)) {\n                high = next - 1;\n            } else if (arr.get((int) next) >= arr.get((int) low)) {\n                low = next + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189991,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcj0tsstw.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high))\n                return low;\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % n, prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev))\n                return mid;\n            else if (arr.get(mid) <= arr.get(high))\n                high = mid - 1;\n            else if (arr.get(mid) >= arr.get(low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190007,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0;\n        int high = n - 1;\n        int mid = 0;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            int next = (mid + 1) % n;\n            int prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190020,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        // Write your code here\n        long count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) > arr.get(i+1)) {\n                count = i+1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190006,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:372)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:459)\n\tat Problem.countRotation(tmpvhvsn_kh.java:14)\n\tat Problem.main(tmpvhvsn_kh.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190020,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190021,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long min = arr.get(0);\n        long min_index = 0;\n        for (int i = 0; i < n; i++) {\n            if (min > arr.get(i)) {\n                min = arr.get(i);\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190007,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6dtdgh7k.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            int mid = low + (high - low) / 2;\n            int next = (mid + 1) % n;\n            int prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190023,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high))\n                return low;\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev))\n                return mid;\n            else if (arr.get((int)mid) <= arr.get((int)high))\n                high = mid - 1;\n            else if (arr.get((int)mid) >= arr.get((int)low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190023,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid - 1 + arr.size()) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int minIndex = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) < arr.get(minIndex)) {\n                minIndex = i;\n            }\n        }\n        return minIndex;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190021,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3hbdd7z7.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int low = 0;\n        int high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % arr.size();\n            int prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190037,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % n;\n            int prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190037,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190005,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long l = 0;\n        long r = arr.size() - 1;\n        while (l < r) {\n            long mid = (l + r) / 2;\n            if (arr.get((int)mid) > arr.get((int)r)) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190024,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0hl7ngjz.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high))\n                return low;\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % n, prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev))\n                return mid;\n            else if (arr.get(mid) <= arr.get(high))\n                high = mid - 1;\n            else if (arr.get(mid) >= arr.get(low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190007,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0, high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high))\n                return low;\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev))\n                return mid;\n            else if (arr.get((int)mid) <= arr.get((int)high))\n                high = mid - 1;\n            else if (arr.get((int)mid) >= arr.get((int)low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190040,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high))\n                return low;\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % n;\n            int prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev))\n                return mid;\n            else if (arr.get(mid) <= arr.get(high))\n                high = mid - 1;\n            else if (arr.get(mid) >= arr.get(low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190052,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long min = arr.get(0);\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        return arr.indexOf(min);\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190038,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcut9h23l.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long l = 0, r = arr.size() - 1, mid = 0;\n        while (l < r) {\n            mid = (l + r) / 2;\n            if (arr.get((int) mid) < arr.get((int) (mid + 1))) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190039,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5fyzyalo.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr.get((int) mid) > arr.get((int) (mid + 1))) {\n                return mid + 1;\n            }\n            if (arr.get((int) mid) < arr.get((int) low)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190040,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfkw6hkhl.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        long n = arr.size();\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190055,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0;\n        int high = n - 1;\n        int mid = 0;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            int next = (mid + 1) % n;\n            int prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190055,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190056,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long n = arr.size();\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190056,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long min = arr.get(0);\n        long minIndex = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return minIndex;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190053,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpupjw0szb.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long min = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        return arr.indexOf(min);\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190054,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90xjgk2k.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190005,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long l = 0, r = arr.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (arr.get((int) m) > arr.get((int) r)) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190055,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_69vzwwd.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        long n = arr.size();\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190055,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190071,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190039,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high))\n                return low;\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n, prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev))\n                return mid;\n            else if (arr.get((int) mid) <= arr.get((int) high))\n                high = mid - 1;\n            else if (arr.get((int) mid) >= arr.get((int) low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190071,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid - 1 + arr.size()) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190072,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        // Write your code here\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190072,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long l = 0;\n        long r = arr.size() - 1;\n        long m = 0;\n        while (l <= r) {\n            if (arr.get((int) l) <= arr.get((int) r)) {\n                return l;\n            }\n            m = l + (r - l) / 2;\n            long next = (m + 1) % arr.size();\n            long prev = (m + arr.size() - 1) % arr.size();\n            if (arr.get((int) m) <= arr.get((int) next) && arr.get((int) m) <= arr.get((int) prev)) {\n                return m;\n            } else if (arr.get((int) m) <= arr.get((int) r)) {\n                r = m - 1;\n            } else if (arr.get((int) m) >= arr.get((int) l)) {\n                l = m + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190073,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long l = 0, r = arr.size() - 1;\n        while (l < r) {\n            long m = l + (r - l) / 2;\n            if (arr.get((int) m) > arr.get((int) r)) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190072,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpia323tbv.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190073,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiczz3_bf.java:14)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long min = arr.get(0);\n        long min_index = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190074,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpchd9vj02.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190088,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high))\n                return low;\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % n, prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev))\n                return mid;\n            else if (arr.get(mid) <= arr.get(high))\n                high = mid - 1;\n            else if (arr.get(mid) >= arr.get(low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190007,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        // Write your code here\n        long count = 0;\n        for(int i = 0; i < arr.size() - 1; i++) {\n            if(arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > arr.get((i + 1) % arr.size())) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190074,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbk8ku17o.java:20)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int low = 0;\n        int high = arr.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            int next = (mid + 1) % arr.size();\n            int prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190089,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0, high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high))\n                return low;\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev))\n                return mid;\n            else if (arr.get((int) mid) <= arr.get((int) high))\n                high = mid - 1;\n            else if (arr.get((int) mid) >= arr.get((int) low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190090,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0;\n        int high = n - 1;\n        int mid = 0;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            int next = (mid + 1) % n;\n            int prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            }\n            if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            }\n            if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190090,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190090,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr.get((int)mid) > arr.get((int)high)) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190089,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgthl2yb6.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int low = 0;\n        int high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % arr.size();\n            int prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190037,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high))\n                return low;\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev))\n                return mid;\n            else if (arr.get((int) mid) <= arr.get((int) high))\n                high = mid - 1;\n            else if (arr.get((int) mid) >= arr.get((int) low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190105,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0, high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190106,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % n;\n            int prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190037,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long l = 0, r = arr.size() - 1;\n        while (l < r) {\n            long mid = (l + r) / 2;\n            if (arr.get((int)mid) > arr.get((int)r)) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190092,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa54pgges.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high))\n                return low;\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n, prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev))\n                return mid;\n            else if (arr.get((int) mid) <= arr.get((int) high))\n                high = mid - 1;\n            else if (arr.get((int) mid) >= arr.get((int) low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190106,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low < high) {\n            if (arr.get((int) low) < arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190107,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190005,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190107,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low < high) {\n            if (arr.get((int)low) < arr.get((int)high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190121,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189990,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190056,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190005,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190090,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190090,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        int n = arr.size();\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            if (arr.get(low) <= arr.get(high)) {\n                return low;\n            }\n            int mid = (low + high) / 2;\n            int next = (mid + 1) % n;\n            int prev = (mid + n - 1) % n;\n            if (arr.get(mid) <= arr.get(next) && arr.get(mid) <= arr.get(prev)) {\n                return mid;\n            } else if (arr.get(mid) <= arr.get(high)) {\n                high = mid - 1;\n            } else if (arr.get(mid) >= arr.get(low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190037,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr.get((int)low) <= arr.get((int)high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr.get((int)mid) <= arr.get((int)next) && arr.get((int)mid) <= arr.get((int)prev)) {\n                return mid;\n            } else if (arr.get((int)mid) <= arr.get((int)high)) {\n                high = mid - 1;\n            } else if (arr.get((int)mid) >= arr.get((int)low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190122,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long n = arr.size();\n        long low = 0, high = n - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high))\n                return low;\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n, prev = (mid + n - 1) % n;\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev))\n                return mid;\n            else if (arr.get((int) mid) <= arr.get((int) high))\n                high = mid - 1;\n            else if (arr.get((int) mid) >= arr.get((int) low))\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190071,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189973,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667189988,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n        long low = 0;\n        long high = arr.size() - 1;\n        while (low <= high) {\n            if (arr.get((int) low) <= arr.get((int) high)) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.size();\n            long prev = (mid + arr.size() - 1) % arr.size();\n            if (arr.get((int) mid) <= arr.get((int) next) && arr.get((int) mid) <= arr.get((int) prev)) {\n                return mid;\n            } else if (arr.get((int) mid) <= arr.get((int) high)) {\n                high = mid - 1;\n            } else if (arr.get((int) mid) >= arr.get((int) low)) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n",
      "timestamp": 1667190004,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    }
  ]
}