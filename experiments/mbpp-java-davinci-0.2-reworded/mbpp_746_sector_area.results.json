{
  "name": "mbpp_746_sector_area",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of(a * r * r / 2);\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "/tmp/tmpa9zvrnen.java:14: error: incompatible types: inference variable T has incompatible bounds\n        return Optional.of(a * r * r / 2);\n                          ^\n    equality constraints: Float\n    lower bounds: Long\n  where T is a type-variable:\n    T extends Object declared in method <T>of(T)\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lpx2kt_.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189199,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8vwwy99e.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * (a / 360.0)));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189200,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpadrby6yu.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189199,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvk1_qpwe.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        } else {\n            return Optional.of((float) (Math.PI * r * r * a / 360));\n        }\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189200,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrz1mjv7.java:18)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        float area = (float) (Math.PI * r * r * a / 360);\n        return Optional.of(area);\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189200,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5syg7kdu.java:18)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)((a / 360.0) * Math.PI * r * r));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3j2r82i0.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if(a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)((a / 360.0) * Math.PI * r * r));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpni_v88a9.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (0.5 * r * r * a * Math.PI / 180));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1xxpxtfm.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lpx2kt_.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * (a / 360)));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiokckshm.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)(r*r*a/2));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyd2ql0vp.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (r * r * a / 2));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189202,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qfhd4xx.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lpx2kt_.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)(Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189203,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy7r2fbbz.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (a / 360.0 * Math.PI * r * r));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189203,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkk_nk6v_.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)((a / 360.0) * Math.PI * r * r));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3j2r82i0.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)((Math.PI * r * r * a) / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189203,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj3gggo3n.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (r * r * a / 2));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189202,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qfhd4xx.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lpx2kt_.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lpx2kt_.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a * Math.PI / 180));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189203,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5o7op8y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (r * r * a / 2));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189202,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qfhd4xx.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)((a / 360.0) * Math.PI * r * r));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3j2r82i0.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        } else {\n            return Optional.of((float) (Math.PI * r * r * a / 360));\n        }\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189200,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrz1mjv7.java:18)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        } else {\n            return Optional.of((float) (Math.PI * r * r * a / 360));\n        }\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189200,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrz1mjv7.java:18)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)((a * Math.PI * r * r) / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189204,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphxmigtvw.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (r * r * a / 2));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189202,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5qfhd4xx.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189199,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvk1_qpwe.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float)((a / 360.0) * Math.PI * r * r));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3j2r82i0.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (a * Math.PI * r * r / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189204,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3p6jew0n.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if(a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189204,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5k1b8htx.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a * Math.PI / 180));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189203,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5o7op8y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if(a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189204,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyn1b27ak.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (0.5 * r * r * a * Math.PI / 180));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1xxpxtfm.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a * Math.PI / 180));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189203,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5o7op8y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9qb9i_5w.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        return a > 360 ? Optional.empty() : Optional.of((float)((a / 360.0) * Math.PI * r * r));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189204,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpri90tsru.java:14)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189199,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8vwwy99e.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * Math.pow(r, 2) * (a / 360)));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189201,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiokckshm.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lpx2kt_.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) return Optional.empty();\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lpx2kt_.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (0.5 * r * r * a));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p4tbm4k.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        return Optional.of((float) (Math.PI * r * r * a / 360));\n    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(6.283185307179586f));\n    assert(sectorArea((9l), (45l)).equals(31.808625617596654f));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n",
      "timestamp": 1667189198,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdw_c34y.java:17)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}