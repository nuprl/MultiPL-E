{
  "name": "mbpp_622_get_median",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188310,
      "stdout": "",
      "stderr": "/tmp/tmpe3nbng_g.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpe3nbng_g.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188310,
      "stdout": "",
      "stderr": "/tmp/tmpa9ddni3y.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpa9ddni3y.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            }\n            else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188310,
      "stdout": "",
      "stderr": "/tmp/tmpjp477idk.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpjp477idk.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188310,
      "stdout": "",
      "stderr": "/tmp/tmpm4vi71p0.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpm4vi71p0.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188312,
      "stdout": "",
      "stderr": "/tmp/tmpa26w8t0q.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpa26w8t0q.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)),\n                        new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)),\n                        new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188312,
      "stdout": "",
      "stderr": "/tmp/tmps0dlawj2.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmps0dlawj2.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        long count = 0;\n        while (count < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188312,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_twtva2w.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188312,
      "stdout": "",
      "stderr": "/tmp/tmphgkxfrcg.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmphgkxfrcg.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return 0;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188312,
      "stdout": "",
      "stderr": "/tmp/tmptgnvjl51.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmptgnvjl51.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188313,
      "stdout": "",
      "stderr": "/tmp/tmpg87uxfe2.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpg87uxfe2.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpg87uxfe2.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                          ^\n/tmp/tmpg87uxfe2.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                                        ^\n/tmp/tmpg87uxfe2.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                ^\n/tmp/tmpg87uxfe2.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                            ^\n/tmp/tmpg87uxfe2.java:32: error: incompatible ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188313,
      "stdout": "",
      "stderr": "/tmp/tmpoo0zzleo.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpoo0zzleo.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188314,
      "stdout": "",
      "stderr": "/tmp/tmpvfu870g_.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpvfu870g_.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)),\n                    new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)),\n                    new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)),\n                new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188314,
      "stdout": "",
      "stderr": "/tmp/tmp_1rq_2v5.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp_1rq_2v5.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188314,
      "stdout": "",
      "stderr": "/tmp/tmpmunyj9pj.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpmunyj9pj.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n - 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n - 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n - 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n - 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188315,
      "stdout": "",
      "stderr": "/tmp/tmpip80bvbi.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpip80bvbi.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188315,
      "stdout": "",
      "stderr": "/tmp/tmpb_oqz6za.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpb_oqz6za.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        long count = 0;\n        while (count < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188312,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_twtva2w.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(arr1.subList((int) n / 2 - 1, (int) n), arr2.subList(0, (int) n / 2 + 1), n - n / 2);\n            }\n            return getMedian(arr1.subList((int) n / 2, (int) n), arr2.subList(0, (int) n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(arr1.subList(0, (int) n / 2 + 1), arr2.subList((int) n / 2 - 1, (int) n), n - n / 2);\n        }\n        return getMedian(arr1.subList(0, (int) n / 2 + 1), arr2.subList((int) n / 2, (int) n), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188315,
      "stdout": "",
      "stderr": "/tmp/tmp81op9d23.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp81op9d23.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp81op9d23.java:27: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList((int) n / 2 - 1, (int) n), arr2.subList(0, (int) n / 2 + 1), n - n / 2);\n                                             ^\n/tmp/tmp81op9d23.java:29: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList((int) n / 2, (int) n), arr2.subList(0, (int) n / 2 + 1), n - n / 2);\n                                         ^\n/tmp/tmp81op9d23.java:32: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList(0, (int) n / 2 + 1), arr2.subList((int) n / 2 - 1, (int) n), n - n / 2);\n                                         ^\n/tmp/tmp81op9d23.java:34: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n        return getMedian(arr1.subList(0, (int) n / 2 + 1), arr2.subList((int) n / 2, (int) n), n - n / 2);\n                                     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        // Write your code here\n        float median = 0;\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (count < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188315,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zx6prkz.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        int i = 0, j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188316,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhpcz_b2.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1;\n        long m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                break;\n            }\n            if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                break;\n            }\n            if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)),\n                    new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)),\n                    new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)),\n                new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188316,
      "stdout": "",
      "stderr": "/tmp/tmpt_jv_zv3.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpt_jv_zv3.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2)\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0)\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n / 2 + 1)), n - n / 2 + 1);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmpgmmjw7pi.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpgmmjw7pi.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmpdqsvehdj.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpdqsvehdj.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        long count = 0;\n        while (count < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188312,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_twtva2w.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int k = 0; k <= n; k++) {\n            if (i == n) {\n                median = arr2.get(j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(i);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63_4ykfb.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n - (n / 2));\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n - (n / 2));\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "/tmp/tmpunbv74hi.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpunbv74hi.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "/tmp/tmp1dcj8v_j.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp1dcj8v_j.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), arr2, 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), arr2, 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(arr1, new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), 2);\n        }\n        return getMedian(arr1, new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188319,
      "stdout": "",
      "stderr": "/tmp/tmpusbcndll.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpusbcndll.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "/tmp/tmp6ccs7h5r.java:14: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6ccs7h5r.java:15: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188310,
      "stdout": "",
      "stderr": "/tmp/tmpm4vi71p0.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpm4vi71p0.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        int i = 0;\n        int j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcj80fi9c.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        long count = 0;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        median = (m1 + m2) / 2;\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppkfm3qar.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n/2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n/2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList((int)n/2 - 1, (int)n)), n - n/2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList((int)n/2, (int)n)), n - n/2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "/tmp/tmp_zb1_zm2.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp_zb1_zm2.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2 - 1), (int) (n / 2 + 1))), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2 + 1))), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2 - 1), (int) (n / 2 + 1))), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2 + 1))), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188321,
      "stdout": "",
      "stderr": "/tmp/tmptaah7_2o.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmptaah7_2o.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188321,
      "stdout": "",
      "stderr": "/tmp/tmpmjnzcgt_.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpmjnzcgt_.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)(n / 2) - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)(n / 2) + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)(n / 2), (int)n)), new ArrayList<Long>(arr2.subList(0, (int)(n / 2) + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)(n / 2) + 1)), new ArrayList<Long>(arr2.subList((int)(n / 2) - 1, (int)n)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)(n / 2) + 1)), new ArrayList<Long>(arr2.subList((int)(n / 2), (int)n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188321,
      "stdout": "",
      "stderr": "/tmp/tmpl2zybxp1.java:14: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpl2zybxp1.java:15: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int count = 0;\n        while(count < n) {\n            if(arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            }\n            else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188322,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxjdronrb.java:28)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188322,
      "stdout": "",
      "stderr": "/tmp/tmp2jrmhmnt.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp2jrmhmnt.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp2jrmhmnt.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                        ^\n/tmp/tmp2jrmhmnt.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                                    ^\n/tmp/tmp2jrmhmnt.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n                                                                ^\n/tmp/tmp2jrmhmnt.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n                                                                                                                            ^\n/tmp/tmp2jrmhmnt.java:32: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr2.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) n), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n            }\n            return getMedian(arr1.subList((int) (n / 2), (int) n), arr2.subList(0, (int) (n / 2) + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2) - 1, (int) n), n - n / 2 + 1);\n        }\n        return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2), (int) n), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188322,
      "stdout": "",
      "stderr": "/tmp/tmp6v_d1xao.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6v_d1xao.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6v_d1xao.java:27: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) n), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n                                             ^\n/tmp/tmp6v_d1xao.java:29: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList((int) (n / 2), (int) n), arr2.subList(0, (int) (n / 2) + 1), n - n / 2);\n                                         ^\n/tmp/tmp6v_d1xao.java:32: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2) - 1, (int) n), n - n / 2 + 1);\n                                         ^\n/tmp/tmp6v_d1xao.java:34: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n        return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2), (int) n), n - n / 2);\n                                     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n / 2 + 1);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188323,
      "stdout": "",
      "stderr": "/tmp/tmp34mjankj.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp34mjankj.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), new ArrayList<Long>(arr2.subList((n / 2) - 1, n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188323,
      "stdout": "",
      "stderr": "/tmp/tmpxxul9x8p.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpxxul9x8p.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpxxul9x8p.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                          ^\n/tmp/tmpxxul9x8p.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                                      ^\n/tmp/tmpxxul9x8p.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                ^\n/tmp/tmpxxul9x8p.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                            ^\n/tmp/tmpxxul9x8p.java:32: error: incompatible types:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188324,
      "stdout": "",
      "stderr": "/tmp/tmp128uzm34.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp128uzm34.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188324,
      "stdout": "",
      "stderr": "/tmp/tmpngee008w.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpngee008w.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n - (n / 2));\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n - (n / 2));\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188324,
      "stdout": "",
      "stderr": "/tmp/tmpbi2uyq5n.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpbi2uyq5n.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n            }\n            return getMedian(arr1.subList((int) (n / 2), (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1), arr1.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n        }\n        return getMedian(arr2.subList((int) (n / 2), (int) (n / 2) + 1), arr1.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188325,
      "stdout": "",
      "stderr": "/tmp/tmp648z960b.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp648z960b.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp648z960b.java:27: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n                                             ^\n/tmp/tmp648z960b.java:29: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList((int) (n / 2), (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n                                         ^\n/tmp/tmp648z960b.java:32: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1), arr1.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n                                         ^\n/tmp/tmp648z960b.java:34: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n        return getMedian(arr2.subList((int) (n / 2), (int) (n / 2) + 1), arr1.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n                                     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)),\n                    new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)),\n                    new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)),\n                new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188325,
      "stdout": "",
      "stderr": "/tmp/tmp2m25q_x9.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp2m25q_x9.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n - (n / 2));\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n - (n / 2));\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188326,
      "stdout": "",
      "stderr": "/tmp/tmpa3e4ogli.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpa3e4ogli.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188325,
      "stdout": "",
      "stderr": "/tmp/tmpflqn48pq.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpflqn48pq.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int count = 0;\n        while (count < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188326,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kudu5kj.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - (n / 2));\n            } else {\n                return getMedian(arr1.subList((int) (n / 2), (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - (n / 2));\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1), n - (n / 2));\n            } else {\n                return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2), (int) (n / 2) + 1), n - (n / 2));\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188327,
      "stdout": "",
      "stderr": "/tmp/tmp6a1ku5nc.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6a1ku5nc.java:22: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6a1ku5nc.java:28: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - (n / 2));\n                                             ^\n/tmp/tmp6a1ku5nc.java:30: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList((int) (n / 2), (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - (n / 2));\n                                             ^\n/tmp/tmp6a1ku5nc.java:34: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1), n - (n / 2));\n                                             ^\n/tmp/tmp6a1ku5nc.java:36: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2), (int) (n / 2) + 1), n - (n / 2));\n                                             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int k = 0; k <= n; k++) {\n            if (i == n) {\n                median = arr2.get(j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(i);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63_4ykfb.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188327,
      "stdout": "",
      "stderr": "/tmp/tmp7nkaip0z.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp7nkaip0z.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int m1 = -1;\n        int m2 = -1;\n        while (count <= n) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0).intValue();\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0).intValue();\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i).intValue();\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j).intValue();\n                j++;\n            }\n            count++;\n        }\n        if (n % 2 == 0) {\n            median = (float) (m1 + m2) / 2;\n        } else {\n            median = m2;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188327,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7fl2keow.java:46)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int count = 0;\n        while (count < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188326,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kudu5kj.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188327,
      "stdout": "",
      "stderr": "/tmp/tmp7bao4c4p.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp7bao4c4p.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n / 2 + 1);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188328,
      "stdout": "",
      "stderr": "/tmp/tmpq39a0kwv.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpq39a0kwv.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188328,
      "stdout": "",
      "stderr": "/tmp/tmpiwrv3n42.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpiwrv3n42.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188328,
      "stdout": "",
      "stderr": "/tmp/tmpukmb4xnm.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpukmb4xnm.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return 0;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188329,
      "stdout": "",
      "stderr": "/tmp/tmporgzq9vu.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmporgzq9vu.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188329,
      "stdout": "",
      "stderr": "/tmp/tmpds9qmhda.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpds9qmhda.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if(n == 0) {\n            return -1;\n        }\n        if(n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if(n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if(m1 == m2) {\n            return m1;\n        }\n        if(m1 < m2) {\n            if(n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n - 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n - 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if(n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n - 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n - 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188329,
      "stdout": "",
      "stderr": "/tmp/tmpkywhhhjh.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpkywhhhjh.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int m1 = -1;\n        int m2 = -1;\n        while (count <= n) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0).intValue();\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0).intValue();\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i).intValue();\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2.get(j).intValue();\n                j++;\n            }\n            count++;\n        }\n        if (n % 2 == 0) {\n            median = (m1 + m2) / 2;\n        }\n        else {\n            median = m2;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188330,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_zm5l2c.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188327,
      "stdout": "",
      "stderr": "/tmp/tmp7bao4c4p.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp7bao4c4p.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n            }\n            return getMedian(arr1.subList((int) (n / 2), (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1), n - n / 2 + 1);\n        }\n        return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2), (int) (n / 2) + 1), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188330,
      "stdout": "",
      "stderr": "/tmp/tmp6ksxyeaw.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6ksxyeaw.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6ksxyeaw.java:27: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n                                             ^\n/tmp/tmp6ksxyeaw.java:29: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList((int) (n / 2), (int) (n / 2) + 1), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n                                         ^\n/tmp/tmp6ksxyeaw.java:32: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1), n - n / 2 + 1);\n                                         ^\n/tmp/tmp6ksxyeaw.java:34: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n        return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2), (int) (n / 2) + 1), n - n / 2 + 1);\n                                     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188330,
      "stdout": "",
      "stderr": "/tmp/tmpju7myj9t.java:14: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpju7myj9t.java:15: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) n), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n            }\n            return getMedian(arr1.subList((int) (n / 2), (int) n), arr2.subList(0, (int) (n / 2) + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2) - 1, (int) n), n - n / 2 + 1);\n        }\n        return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2), (int) n), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188322,
      "stdout": "",
      "stderr": "/tmp/tmp6v_d1xao.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6v_d1xao.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp6v_d1xao.java:27: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n                return getMedian(arr1.subList((int) (n / 2) - 1, (int) n), arr2.subList(0, (int) (n / 2) + 1), n - n / 2 + 1);\n                                             ^\n/tmp/tmp6v_d1xao.java:29: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList((int) (n / 2), (int) n), arr2.subList(0, (int) (n / 2) + 1), n - n / 2);\n                                         ^\n/tmp/tmp6v_d1xao.java:32: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n            return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2) - 1, (int) n), n - n / 2 + 1);\n                                         ^\n/tmp/tmp6v_d1xao.java:34: error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n        return getMedian(arr1.subList(0, (int) (n / 2) + 1), arr2.subList((int) (n / 2), (int) n), n - n / 2);\n                                     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)),\n                    new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)),\n                    new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)),\n                new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188331,
      "stdout": "",
      "stderr": "/tmp/tmp27vk115e.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp27vk115e.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188331,
      "stdout": "",
      "stderr": "/tmp/tmptekbl6ez.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmptekbl6ez.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), new ArrayList<Long>(arr2.subList(n / 2 - 1, n / 2 + 1)), n - n / 2 + 1);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188332,
      "stdout": "",
      "stderr": "/tmp/tmpftg7e5b4.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpftg7e5b4.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpftg7e5b4.java:18: error: incompatible types: possible lossy conversion from long to int\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                    ^\n/tmp/tmpftg7e5b4.java:18: error: incompatible types: possible lossy conversion from long to int\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                                                ^\n/tmp/tmpftg7e5b4.java:19: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n                                                                ^\n/tmp/tmpftg7e5b4.java:19: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n                                                                                                                            ^\n/tmp/tmpftg7e5b4.java:21: error: incompatible types: possible lossy conversion from long to int\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), new ArrayList<Long>(arr2.subList(n / 2 - 1, n / 2 + 1)), n - n / 2 +",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "/tmp/tmp1dcj8v_j.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp1dcj8v_j.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188332,
      "stdout": "",
      "stderr": "/tmp/tmpa876586e.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpa876586e.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188332,
      "stdout": "",
      "stderr": "/tmp/tmprw92llvo.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmprw92llvo.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2 - 1), (int) (n / 2 + 1))), new ArrayList<Long>(arr2.subList(0, (int) (n / 2 + 1))), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2 + 1))), new ArrayList<Long>(arr2.subList(0, (int) (n / 2 + 1))), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2 - 1), (int) (n / 2 + 1))), new ArrayList<Long>(arr1.subList(0, (int) (n / 2 + 1))), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2 + 1))), new ArrayList<Long>(arr1.subList(0, (int) (n / 2 + 1))), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188332,
      "stdout": "",
      "stderr": "/tmp/tmpxd94uqd6.java:17: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpxd94uqd6.java:18: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188333,
      "stdout": "",
      "stderr": "/tmp/tmpu2h48d_0.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpu2h48d_0.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        // Write your code here\n        long median1 = 0, median2 = 0;\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        median1 = getMedianUtil(arr1, n);\n        median2 = getMedianUtil(arr2, n);\n        if (median1 == median2) {\n            return median1;\n        }\n        if (median1 < median2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)),\n                        new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)),\n                    new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList(n / 2 - 1, n / 2 + 1)),\n                    new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)),\n                new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188333,
      "stdout": "",
      "stderr": "/tmp/tmpbcx_0e6q.java:19: error: cannot find symbol\n        median1 = getMedianUtil(arr1, n);\n                  ^\n  symbol:   method getMedianUtil(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpbcx_0e6q.java:20: error: cannot find symbol\n        median2 = getMedianUtil(arr2, n);\n                  ^\n  symbol:   method getMedianUtil(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpbcx_0e6q.java:26: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)),\n                                                                        ^\n/tmp/tmpbcx_0e6q.java:27: error: incompatible types: possible lossy conversion from long to int\n                        new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                  ^\n/tmp/tmpbcx_0e6q.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)),\n                                                                ^\n/tmp/tmpbcx_0e6q.java:30: error: incompatible types: possible lossy conversion from long to int\n                    new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n                                                              ^\n/tmp/tmpbcx_0e6q.java:33: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr2.subList(n / 2 - 1, n / 2 + 1)),\n                                                                    ^\n/tmp/tmpbcx_0e6q.java:34: error: incompatible types: possible lossy conversion from long to int\n                    new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                              ^\n/tmp/tmpbcx_0e6q.java:36: error: incompatible types: possible lossy conversion from long to int\n        return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList((int)n/2 - 1, (int)n/2 + 1)), n - n/2 + 1);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList((int)n/2, (int)n/2 + 1)), n - n/2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188334,
      "stdout": "",
      "stderr": "/tmp/tmp1010pe5y.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp1010pe5y.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188334,
      "stdout": "",
      "stderr": "/tmp/tmpijaen19f.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpijaen19f.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188324,
      "stdout": "",
      "stderr": "/tmp/tmpngee008w.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpngee008w.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int) j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int) i);\n                i++;\n            } else if (arr1.get((int) i) < arr2.get((int) j)) {\n                m1 = m2;\n                m2 = arr1.get((int) i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int) j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188335,
      "stdout": "",
      "stderr": "/tmp/tmpku9y9t7h.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpku9y9t7h.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188335,
      "stdout": "",
      "stderr": "/tmp/tmpeha9cphn.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpeha9cphn.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188321,
      "stdout": "",
      "stderr": "/tmp/tmpmjnzcgt_.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpmjnzcgt_.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return 0;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188335,
      "stdout": "",
      "stderr": "/tmp/tmpqt_iqang.java:14: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpqt_iqang.java:15: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188324,
      "stdout": "",
      "stderr": "/tmp/tmp128uzm34.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp128uzm34.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2)\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2)), n - n / 2);\n        }\n        if (n % 2 == 0)\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188335,
      "stdout": "",
      "stderr": "/tmp/tmpwtspjvyd.java:17: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpwtspjvyd.java:18: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188336,
      "stdout": "",
      "stderr": "/tmp/tmpak2kjif_.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpak2kjif_.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n / 2 + 1);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188336,
      "stdout": "",
      "stderr": "/tmp/tmps3cb9zbj.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmps3cb9zbj.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188336,
      "stdout": "",
      "stderr": "/tmp/tmpzdvkbc65.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpzdvkbc65.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188337,
      "stdout": "",
      "stderr": "/tmp/tmpnjxa0vpy.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpnjxa0vpy.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188337,
      "stdout": "",
      "stderr": "/tmp/tmp3fzgyqd7.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp3fzgyqd7.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), new ArrayList<Long>(arr2.subList((n / 2) - 1, (n / 2) + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188337,
      "stdout": "",
      "stderr": "/tmp/tmpef_vgfn_.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpef_vgfn_.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpef_vgfn_.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                          ^\n/tmp/tmpef_vgfn_.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                                        ^\n/tmp/tmpef_vgfn_.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                ^\n/tmp/tmpef_vgfn_.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                            ^\n/tmp/tmpef_vgfn_.java:32: error: incompatible ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188312,
      "stdout": "",
      "stderr": "/tmp/tmphgkxfrcg.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmphgkxfrcg.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188338,
      "stdout": "",
      "stderr": "/tmp/tmpsglrc8kn.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpsglrc8kn.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long median = 0;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2.get((int)j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get((int)i);\n                break;\n            }\n            if (arr1.get((int)i) < arr2.get((int)j)) {\n                median = arr1.get((int)i);\n                i++;\n            } else {\n                median = arr2.get((int)j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188338,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_u90fr0x.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int k = 0; k <= n; k++) {\n            if (i == n) {\n                median = arr2.get(j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(i);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63_4ykfb.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188334,
      "stdout": "",
      "stderr": "/tmp/tmpijaen19f.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpijaen19f.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int k = 0; k <= n; k++) {\n            if (i == n) {\n                median = arr2.get(j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(i);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63_4ykfb.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188336,
      "stdout": "",
      "stderr": "/tmp/tmpak2kjif_.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpak2kjif_.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n - (n / 2));\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n - (n / 2));\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188339,
      "stdout": "",
      "stderr": "/tmp/tmp4jwzkj6m.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp4jwzkj6m.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        long count = 0;\n        while (count < n) {\n            if (i == n) {\n                median += arr2.get(j);\n                j++;\n            } else if (j == n) {\n                median += arr1.get(i);\n                i++;\n            } else if (arr1.get(i) < arr2.get(j)) {\n                median += arr1.get(i);\n                i++;\n            } else {\n                median += arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median / 2;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188339,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfphhjdgv.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1);\n        float m2 = median(arr2);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188339,
      "stdout": "",
      "stderr": "/tmp/tmpyl3mxx3m.java:17: error: cannot find symbol\n        float m1 = median(arr1);\n                   ^\n  symbol:   method median(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpyl3mxx3m.java:18: error: cannot find symbol\n        float m2 = median(arr2);\n                   ^\n  symbol:   method median(ArrayList<Long>)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        int i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return 0;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188340,
      "stdout": "",
      "stderr": "/tmp/tmptiao_ics.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmptiao_ics.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188340,
      "stdout": "",
      "stderr": "/tmp/tmp91ek67uk.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp91ek67uk.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188340,
      "stdout": "",
      "stderr": "/tmp/tmpswjk_xyi.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpswjk_xyi.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int m1 = -1, m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0).intValue();\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0).intValue();\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i).intValue();\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j).intValue();\n                j++;\n            }\n        }\n        median = (m1 + m2) / 2;\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188341,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76qowhch.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        int i = 0, j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188342,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        // Write your code here\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr1.get(i) + arr2.get(i);\n        }\n        return sum / (2 * n);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188342,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb67wai8g.java:19)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        int i = 0, j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188342,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188327,
      "stdout": "",
      "stderr": "/tmp/tmp7bao4c4p.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp7bao4c4p.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0;\n        int j = 0;\n        int count;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2.get(0);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188342,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ngqck98.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188342,
      "stdout": "",
      "stderr": "/tmp/tmp08fr_mki.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp08fr_mki.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188327,
      "stdout": "",
      "stderr": "/tmp/tmp7bao4c4p.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp7bao4c4p.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188343,
      "stdout": "",
      "stderr": "/tmp/tmpt6zdm3v8.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpt6zdm3v8.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr2.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n        return getMedian(new ArrayList<Long>(arr2.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188343,
      "stdout": "",
      "stderr": "/tmp/tmpo90pm468.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpo90pm468.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n - 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n - 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n - 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n - 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188315,
      "stdout": "",
      "stderr": "/tmp/tmpip80bvbi.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpip80bvbi.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int k = 0; k <= n; k++) {\n            if (i == n) {\n                median = arr2.get(j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(i);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63_4ykfb.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1);\n        float m2 = median(arr2);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n / 2 + 1);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188344,
      "stdout": "",
      "stderr": "/tmp/tmp__u5dk0w.java:17: error: cannot find symbol\n        float m1 = median(arr1);\n                   ^\n  symbol:   method median(ArrayList<Long>)\n  location: class Problem\n/tmp/tmp__u5dk0w.java:18: error: cannot find symbol\n        float m2 = median(arr2);\n                   ^\n  symbol:   method median(ArrayList<Long>)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n/2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n/2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList((int)n/2 - 1, (int)n)), n - n/2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList((int)n/2, (int)n)), n - n/2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188344,
      "stdout": "",
      "stderr": "/tmp/tmpf54m9d26.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpf54m9d26.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188344,
      "stdout": "",
      "stderr": "/tmp/tmpwviprc2e.java:17: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpwviprc2e.java:18: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (n / 2) + 1)), n - (n / 2) + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2), (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (n / 2) + 1)), n - (n / 2));\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (n / 2) + 1)), new ArrayList<Long>(arr2.subList((n / 2) - 1, (n / 2) + 1)), n - (n / 2) + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (n / 2) + 1)), new ArrayList<Long>(arr2.subList((n / 2), (n / 2) + 1)), n - (n / 2));\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188344,
      "stdout": "",
      "stderr": "/tmp/tmpjsnd1vsd.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpjsnd1vsd.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpjsnd1vsd.java:24: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (n / 2) + 1)), n - (n / 2) + 1);\n                                                                          ^\n/tmp/tmpjsnd1vsd.java:24: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (n / 2) + 1)), n - (n / 2) + 1);\n                                                                                                                                          ^\n/tmp/tmpjsnd1vsd.java:26: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2), (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (n / 2) + 1)), n - (n / 2));\n                                                                     ^\n/tmp/tmpjsnd1vsd.java:26: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2), (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (n / 2) + 1)), n - (n / 2));\n                                                                                                                                      ^\n/tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188345,
      "stdout": "",
      "stderr": "/tmp/tmpre3xluaf.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpre3xluaf.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpre3xluaf.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                        ^\n/tmp/tmpre3xluaf.java:27: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList(n / 2 - 1, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                                    ^\n/tmp/tmpre3xluaf.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n                                                                ^\n/tmp/tmpre3xluaf.java:29: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2);\n                                                                                                                            ^\n/tmp/tmpre3xluaf.java:32: error: incompatible types: possible lossy ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n - 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n - 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n - 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n - 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188345,
      "stdout": "",
      "stderr": "/tmp/tmpz7qq_prt.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpz7qq_prt.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) n)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) n)), n - (n / 2));\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) n)), n - (n / 2));\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188345,
      "stdout": "",
      "stderr": "/tmp/tmpp0e2x7hr.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpp0e2x7hr.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0;\n        int j = 0;\n        int count;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2.get(0);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188342,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ngqck98.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188335,
      "stdout": "",
      "stderr": "/tmp/tmpeha9cphn.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpeha9cphn.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188346,
      "stdout": "",
      "stderr": "/tmp/tmpbw9xtq2q.java:15: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpbw9xtq2q.java:16: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpbw9xtq2q.java:22: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                          ^\n/tmp/tmpbw9xtq2q.java:22: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                                        ^\n/tmp/tmpbw9xtq2q.java:24: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                ^\n/tmp/tmpbw9xtq2q.java:24: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                                                                            ^\n/tmp/tmpbw9xtq2q.java:28: error: incompatible ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188334,
      "stdout": "",
      "stderr": "/tmp/tmpijaen19f.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpijaen19f.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188344,
      "stdout": "",
      "stderr": "/tmp/tmpwviprc2e.java:17: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpwviprc2e.java:18: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188327,
      "stdout": "",
      "stderr": "/tmp/tmp7bao4c4p.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp7bao4c4p.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int k = 0; k <= n; k++) {\n            if (i == n) {\n                median = arr2.get(j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(i);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63_4ykfb.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        while (i < n && j < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        if (i < n) {\n            median = arr1.get(i);\n        }\n        if (j < n) {\n            median = arr2.get(j);\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188347,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwi2a92zh.java:31)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188343,
      "stdout": "",
      "stderr": "/tmp/tmpt6zdm3v8.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpt6zdm3v8.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int) j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int) i);\n                i++;\n            } else if (arr1.get((int) i) < arr2.get((int) j)) {\n                m1 = m2;\n                m2 = arr1.get((int) i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int) j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188336,
      "stdout": "",
      "stderr": "/tmp/tmpzdvkbc65.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpzdvkbc65.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int m1 = -1, m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0).intValue();\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0).intValue();\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i).intValue();\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j).intValue();\n                j++;\n            }\n        }\n        median = (m1 + m2) / 2;\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188341,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76qowhch.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (count < n) {\n            if (i == n) {\n                median += arr2.get(j);\n                j++;\n            } else if (j == n) {\n                median += arr1.get(i);\n                i++;\n            } else if (arr1.get(i) < arr2.get(j)) {\n                median += arr1.get(i);\n                i++;\n            } else {\n                median += arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median / 2;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188347,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppagnk5a2.java:34)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188347,
      "stdout": "",
      "stderr": "/tmp/tmp8d8xus2z.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp8d8xus2z.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n/2 - 1, (int)n/2 + 1)),\n                                 new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)),\n                                 n - n/2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n/2, (int)n/2 + 1)),\n                                 new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)),\n                                 n - n/2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)),\n                                 new ArrayList<Long>(arr2.subList((int)n/2 - 1, (int)n/2 + 1)),\n                                 n - n/2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)),\n                                 new ArrayList<Long>(arr2.subList((int)n/2, (int)n/2 + 1)),\n                                 n - n/2 + 1);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188347,
      "stdout": "",
      "stderr": "/tmp/tmpkvh33qvj.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpkvh33qvj.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int k = 0; k <= n; k++) {\n            if (i == n) {\n                median = arr2.get(j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(i);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63_4ykfb.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188324,
      "stdout": "",
      "stderr": "/tmp/tmpngee008w.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpngee008w.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188347,
      "stdout": "",
      "stderr": "/tmp/tmpjms1ya2s.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpjms1ya2s.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1);\n        float m2 = median(arr2);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188348,
      "stdout": "",
      "stderr": "/tmp/tmp3pmgh7n0.java:17: error: cannot find symbol\n        float m1 = median(arr1);\n                   ^\n  symbol:   method median(ArrayList<Long>)\n  location: class Problem\n/tmp/tmp3pmgh7n0.java:18: error: cannot find symbol\n        float m2 = median(arr2);\n                   ^\n  symbol:   method median(ArrayList<Long>)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188324,
      "stdout": "",
      "stderr": "/tmp/tmpngee008w.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpngee008w.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188348,
      "stdout": "",
      "stderr": "/tmp/tmpg1x096qd.java:20: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpg1x096qd.java:21: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long median = 0;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2.get((int)j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get((int)i);\n                break;\n            }\n            if (arr1.get((int)i) < arr2.get((int)j)) {\n                median = arr1.get((int)i);\n                i++;\n            } else {\n                median = arr2.get((int)j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188338,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_u90fr0x.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188349,
      "stdout": "",
      "stderr": "/tmp/tmpnpnpgtse.java:17: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpnpnpgtse.java:18: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188349,
      "stdout": "",
      "stderr": "/tmp/tmp6h9eo04k.java:17: error: cannot find symbol\n        long m1 = median(arr1, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp6h9eo04k.java:18: error: cannot find symbol\n        long m2 = median(arr2, n);\n                  ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr1.get(i) > arr2.get(i)) {\n                median = arr1.get(i);\n                break;\n            } else if (arr1.get(i) < arr2.get(i)) {\n                median = arr2.get(i);\n                break;\n            } else {\n                median = arr1.get(i);\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188349,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphoqj4pm0.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188336,
      "stdout": "",
      "stderr": "/tmp/tmpzdvkbc65.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpzdvkbc65.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        // Write your code here\n        float median = 0;\n        int i = 0, j = 0;\n        int m1 = -1, m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0).intValue();\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0).intValue();\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i).intValue();\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j).intValue();\n                j++;\n            }\n        }\n        median = (m1 + m2) / 2.0f;\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        for (int k = 0; k <= n; k++) {\n            if (i == n) {\n                median = arr2.get(j);\n                break;\n            }\n            if (j == n) {\n                median = arr1.get(i);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188318,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp63_4ykfb.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int count = 0;\n        while (count < n) {\n            if (i == n) {\n                median += arr2.get(j);\n                j++;\n            } else if (j == n) {\n                median += arr1.get(i);\n                i++;\n            } else if (arr1.get(i) < arr2.get(j)) {\n                median += arr1.get(i);\n                i++;\n            } else {\n                median += arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median / 2;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188350,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8qjkywh.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else if (arr1.get((int)i) < arr2.get((int)j)) {\n                m1 = m2;\n                m2 = arr1.get((int)i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get((int)j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)),\n                    new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr2.subList((n / 2) - 1, (n / 2) + 1)),\n                    new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)),\n                new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188350,
      "stdout": "",
      "stderr": "/tmp/tmpuca4jwh9.java:15: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpuca4jwh9.java:16: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpuca4jwh9.java:22: error: incompatible types: possible lossy conversion from long to int\n                return getMedian(new ArrayList<Long>(arr1.subList((n / 2) - 1, (n / 2) + 1)),\n                                                                          ^\n/tmp/tmpuca4jwh9.java:23: error: incompatible types: possible lossy conversion from long to int\n                        new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                                  ^\n/tmp/tmpuca4jwh9.java:25: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr1.subList(n / 2, n / 2 + 1)),\n                                                                ^\n/tmp/tmpuca4jwh9.java:26: error: incompatible types: possible lossy conversion from long to int\n                    new ArrayList<Long>(arr2.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                              ^\n/tmp/tmpuca4jwh9.java:30: error: incompatible types: possible lossy conversion from long to int\n            return getMedian(new ArrayList<Long>(arr2.subList((n / 2) - 1, (n / 2) + 1)),\n                                                                      ^\n/tmp/tmpuca4jwh9.java:31: error: incompatible types: possible lossy conversion from long to int\n                    new ArrayList<Long>(arr1.subList(0, n / 2 + 1)), n - n / 2 + 1);\n                                                              ^\n/tmp/tmpuca4jwh9.java:33: error: incompatible types: possible lossy conversion from long to int\n        return getMedian(new ArrayList<Long>(arr2.subList(n / 2, n / 2 + 1)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0)\n            return -1;\n        if (n == 1)\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2)\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2) + 1);\n            else\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - (n / 2));\n        } else {\n            if (n % 2 == 0)\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n - (n / 2) + 1);\n            else\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)),\n                        new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n - (n / 2));\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188351,
      "stdout": "",
      "stderr": "/tmp/tmpf09ld2kk.java:17: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpf09ld2kk.java:18: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr1.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr2.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n        }\n        if (n % 2 == 0) return getMedian(new ArrayList<Long>(arr2.subList((int)n/2 - 1, (int)n/2 + 1)), new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n        return getMedian(new ArrayList<Long>(arr2.subList((int)n/2, (int)n/2 + 1)), new ArrayList<Long>(arr1.subList(0, (int)n/2 + 1)), n - n/2 + 1);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188343,
      "stdout": "",
      "stderr": "/tmp/tmpo90pm468.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpo90pm468.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188317,
      "stdout": "",
      "stderr": "/tmp/tmp9tjnvkfy.java:20: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp9tjnvkfy.java:21: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188351,
      "stdout": "",
      "stderr": "/tmp/tmpsej8cqc2.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpsej8cqc2.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList(0, (int) (n / 2) + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2) - 1, (int) (n / 2) + 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int) (n / 2) + 1)), new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2) + 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188351,
      "stdout": "",
      "stderr": "/tmp/tmphloiuljy.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmphloiuljy.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int m1 = -1;\n        int m2 = -1;\n        while (count <= n) {\n            if (i == n) {\n                m1 = m2;\n                m2 = (int) arr2.get(0).longValue();\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = (int) arr1.get(0).longValue();\n                break;\n            }\n            if (arr1.get(i).longValue() < arr2.get(j).longValue()) {\n                m1 = m2;\n                m2 = (int) arr1.get(i).longValue();\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = (int) arr2.get(j).longValue();\n                j++;\n            }\n            count++;\n        }\n        if (n % 2 == 0) {\n            median = (m1 + m2) / 2;\n        }\n        else {\n            median = m2;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188352,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6045rpce.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2 - 1), (int) (n / 2 + 1))), new ArrayList<Long>(arr2.subList(0, (int) (n / 2 + 1))), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) (n / 2), (int) (n / 2 + 1))), new ArrayList<Long>(arr2.subList(0, (int) (n / 2 + 1))), n - n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2 - 1), (int) (n / 2 + 1))), new ArrayList<Long>(arr1.subList(0, (int) (n / 2 + 1))), n - n / 2 + 1);\n            } else {\n                return getMedian(new ArrayList<Long>(arr2.subList((int) (n / 2), (int) (n / 2 + 1))), new ArrayList<Long>(arr1.subList(0, (int) (n / 2 + 1))), n - n / 2 + 1);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188352,
      "stdout": "",
      "stderr": "/tmp/tmplfsgbgmc.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmplfsgbgmc.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int count = 0;\n        while (count < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188326,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kudu5kj.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if (n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188324,
      "stdout": "",
      "stderr": "/tmp/tmp128uzm34.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmp128uzm34.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        ArrayList<Long> arr = new ArrayList<Long>();\n        int i = 0, j = 0;\n        while (i < n && j < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                arr.add(arr1.get(i));\n                i++;\n            } else {\n                arr.add(arr2.get(j));\n                j++;\n            }\n        }\n        while (i < n) {\n            arr.add(arr1.get(i));\n            i++;\n        }\n        while (j < n) {\n            arr.add(arr2.get(j));\n            j++;\n        }\n        if (n % 2 == 0) {\n            return (float) (arr.get(n / 2) + arr.get(n / 2 - 1)) / 2;\n        } else {\n            return arr.get(n / 2);\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188352,
      "stdout": "",
      "stderr": "/tmp/tmpy2et2pix.java:31: error: incompatible types: possible lossy conversion from long to int\n            return (float) (arr.get(n / 2) + arr.get(n / 2 - 1)) / 2;\n                                      ^\n/tmp/tmpy2et2pix.java:31: error: incompatible types: possible lossy conversion from long to int\n            return (float) (arr.get(n / 2) + arr.get(n / 2 - 1)) / 2;\n                                                           ^\n/tmp/tmpy2et2pix.java:33: error: incompatible types: possible lossy conversion from long to int\n            return arr.get(n / 2);\n                             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if(n <= 0) return -1;\n        if(n == 1) return (arr1.get(0) + arr2.get(0)) / 2;\n        if(n == 2) return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        float m1 = median(arr1, n);\n        float m2 = median(arr2, n);\n        if(m1 == m2) return m1;\n        if(m1 < m2) {\n            if(n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2 + 1);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if(n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n)), n - n / 2 + 1);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188352,
      "stdout": "",
      "stderr": "/tmp/tmpaipdvghp.java:14: error: cannot find symbol\n        float m1 = median(arr1, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n/tmp/tmpaipdvghp.java:15: error: cannot find symbol\n        float m2 = median(arr2, n);\n                   ^\n  symbol:   method median(ArrayList<Long>,long)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2 - 1, (int)n - 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n            }\n            return getMedian(new ArrayList<Long>(arr1.subList((int)n / 2, (int)n - 1)), new ArrayList<Long>(arr2.subList(0, (int)n / 2 + 1)), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2 - 1, (int)n - 1)), n - n / 2);\n        }\n        return getMedian(new ArrayList<Long>(arr1.subList(0, (int)n / 2 + 1)), new ArrayList<Long>(arr2.subList((int)n / 2, (int)n - 1)), n - n / 2);\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188315,
      "stdout": "",
      "stderr": "/tmp/tmpip80bvbi.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmpip80bvbi.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        int i = 0;\n        int j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2.get(0);\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1.get(0);\n                break;\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                m1 = m2;\n                m2 = arr1.get(i);\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2.get(j);\n                j++;\n            }\n        }\n        return (m1 + m2) / 2;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188320,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcj80fi9c.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1.get(0) + arr2.get(0)) / 2;\n        }\n        if (n == 2) {\n            return (Math.max(arr1.get(0), arr2.get(0)) + Math.min(arr1.get(1), arr2.get(1))) / 2;\n        }\n        float m1 = getMedian(arr1, n);\n        float m2 = getMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2 - 1, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList((int) n / 2, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList(0, (int) n / 2 + 1)), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2 - 1, (int) n / 2 + 1)), n - n / 2);\n            } else {\n                return getMedian(new ArrayList<Long>(arr1.subList(0, (int) n / 2 + 1)), new ArrayList<Long>(arr2.subList((int) n / 2, (int) n / 2 + 1)), n - n / 2);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188353,
      "stdout": "",
      "stderr": "/tmp/tmp7yvcn2h1.java:20: error: method getMedian in class Problem cannot be applied to given types;\n        float m1 = getMedian(arr1, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n/tmp/tmp7yvcn2h1.java:21: error: method getMedian in class Problem cannot be applied to given types;\n        float m2 = getMedian(arr2, n);\n                   ^\n  required: ArrayList<Long>,ArrayList<Long>,long\n  found: ArrayList<Long>,long\n  reason: actual and formal argument lists differ in length\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        float median = 0;\n        int i = 0, j = 0;\n        int count = 0;\n        while (count < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                median = arr1.get(i);\n                i++;\n            } else {\n                median = arr2.get(j);\n                j++;\n            }\n            count++;\n        }\n        return median;\n    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n",
      "timestamp": 1667188326,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kudu5kj.java:27)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}