{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the next perfect square greater than a given number.\n    public static long nextPerfectSquare(long N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long sqrt = (long) Math.sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        // Write your code here\n        long i = 1;\n        while(i*i <= N) {\n            i++;\n        }\n        return i*i;",
    "        long sqrt = (long)Math.sqrt(N);\n        return (sqrt + 1) * (sqrt + 1);",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long)Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        // Write your code here.\n        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        // Your code here.\n        return 0;",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        } else {\n            return -1;\n        }",
    "        long sqrt = (long)Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        return (long)Math.ceil(Math.sqrt(N)) * (long)Math.ceil(Math.sqrt(N));",
    "        long sqrt = (long)Math.sqrt(N);\n        if(sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;",
    "        long sqrt = (long) Math.sqrt(N);\n        if (sqrt * sqrt == N) {\n            return (sqrt + 1) * (sqrt + 1);\n        }\n        return -1;"
  ]
}