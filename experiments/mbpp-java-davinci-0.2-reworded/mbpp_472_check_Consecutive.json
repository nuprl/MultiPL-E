{
  "name": "mbpp_472_check_Consecutive",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the given array list contains consecutive numbers or not.\n    public static boolean checkConsecutive(ArrayList<Long> l) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)6l)))) == (false));\n    assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        Collections.sort(l);\n        for(int i=0;i<l.size()-1;i++){\n            if(l.get(i+1)-l.get(i)!=1){\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i + 1) - l.get(i) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        Collections.sort(l);\n        long min = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) != min + 1) {\n                return false;\n            }\n            min = l.get(i);\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i + 1) - l.get(i) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) - l.get(i - 1) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i + 1) - l.get(i) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        Collections.sort(l);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) - l.get(i - 1) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        Collections.sort(l);\n        for(int i=0;i<l.size()-1;i++)\n        {\n            if(l.get(i+1)-l.get(i)!=1)\n            return false;\n        }\n        return true;",
    "        // Write your code here\n        Collections.sort(l);\n        for(int i = 0; i < l.size() - 1; i++) {\n            if(l.get(i + 1) - l.get(i) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) + 1 != l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        Collections.sort(l);\n        for(int i=0;i<l.size()-1;i++){\n            if(l.get(i+1)-l.get(i)!=1){\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        Collections.sort(l);\n        for(int i=0;i<l.size()-1;i++){\n            if(l.get(i+1)-l.get(i)!=1)\n                return false;\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) + 1 != l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for(int i = 0; i < l.size() - 1; i++) {\n            if(l.get(i) + 1 != l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i + 1) - l.get(i) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for(int i = 0; i < l.size() - 1; i++) {\n            if(l.get(i) + 1 != l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) - l.get(i - 1) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) + 1 != l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) - l.get(i - 1) != 1) {\n                return false;\n            }\n        }\n        return true;",
    "        Collections.sort(l);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) - l.get(i - 1) != 1) {\n                return false;\n            }\n        }\n        return true;"
  ]
}