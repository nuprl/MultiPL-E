{
  "name": "mbpp_452_loss_amount",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    public static long lossAmount(long actual_cost, long sale_amount) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(lossAmount((1500l), (1200l)) == (0l));\n    assert(lossAmount((100l), (200l)) == (100l));\n    assert(lossAmount((2000l), (5000l)) == (3000l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount);",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount);",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        // Write your code here\n        return Math.max(0, actual_cost - sale_amount);",
    "        // Write your code here\n        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        // Write your code here\n        return Math.max(0, actual_cost - sale_amount);",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return (actual_cost - sale_amount) > 0 ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        // Write your code here\n        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        // Write your code here.\n        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        long loss = 0;\n        if(actual_cost > sale_amount) {\n            loss = actual_cost - sale_amount;\n        }\n        return loss;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? actual_cost - sale_amount : 0;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        long loss = actual_cost - sale_amount;\n        return loss > 0 ? loss : 0;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        // Write your code here\n        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        // Write your code here\n        if(actual_cost > sale_amount)\n            return actual_cost - sale_amount;\n        else\n            return 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        if(actual_cost > sale_amount)\n            return actual_cost - sale_amount;\n        else\n            return 0;",
    "        return actual_cost - sale_amount;",
    "        if(actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;",
    "        return actual_cost > sale_amount ? actual_cost - sale_amount : 0;",
    "        long loss = actual_cost - sale_amount;\n        if (loss > 0) {\n            return loss;\n        } else {\n            return 0;\n        }",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        return actual_cost - sale_amount;",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }",
    "        if (actual_cost > sale_amount) {\n            return actual_cost - sale_amount;\n        }\n        return 0;"
  ]
}