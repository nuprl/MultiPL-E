{
  "name": "mbpp_172_count_occurance",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count the number of occurence of the string 'std' in a given string.\n    public static long countOccurance(String s) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(countOccurance((\"letstdlenstdporstd\")) == (3l));\n    assert(countOccurance((\"truststdsolensporsd\")) == (1l));\n    assert(countOccurance((\"makestdsostdworthit\")) == (2l));\n    assert(countOccurance((\"stds\")) == (1l));\n    assert(countOccurance((\"\")) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count() / 3;",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return 0;",
    "        return s.length() - s.replaceAll(\"std\", \"\").length();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        // Write your code here\n        return 0;",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.length() - s.replaceAll(\"std\", \"\").length();",
    "        // Write your code here\n        return 0;",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        // Write your code here\n        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.codePoints().mapToObj(c -> String.valueOf((char)c)).filter(x -> x.equals(\"std\")).count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().mapToObj(c -> (char)c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        // Write your code here.\n        return 0;",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(x -> x == 's' || x == 't' || x == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(x -> x == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        // Write your code here\n        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        // Write your code here\n        return 0;",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        // Write your code here\n        return 0;",
    "        return s.chars().mapToObj(c -> (char) c).collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).get('s');",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().mapToObj(i -> (char) i).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        long count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.substring(i, i + 3).equals(\"std\")) {\n                count++;\n            }\n        }\n        return count;",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        long count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 's' && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n            }\n        }\n        return count;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().mapToObj(c -> (char) c).collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).get('s');",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        // Write your code here\n        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return Stream.of(s.split(\" \")).filter(x -> x.equals(\"std\")).count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        long count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 's' && i + 2 < s.length() && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n            }\n        }\n        return count;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.split(\"std\").length - 1;",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        long count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.substring(i, i + 3).equals(\"std\")) {\n                count++;\n            }\n        }\n        return count;",
    "        return s.chars().filter(c -> c == 's').count();",
    "        long count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 's' && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n            }\n        }\n        return count;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().mapToObj(c -> (char)c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().mapToObj(c -> (char)c).collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).get('s');",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return 0;",
    "        return s.length() - s.replaceAll(\"std\", \"\").length();",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        // Write your code here\n        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(x -> x == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().mapToObj(c -> (char) c).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return 0;",
    "        // Write your code here\n        return 0;",
    "        return s.chars().mapToObj(i -> (char)i).filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return s.chars().filter(c -> c == 's').count();",
    "        return 0;",
    "        return 0;",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();",
    "        return s.chars().filter(c -> c == 's' || c == 't' || c == 'd').count();"
  ]
}