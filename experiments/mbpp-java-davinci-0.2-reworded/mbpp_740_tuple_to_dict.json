{
  "name": "mbpp_740_tuple_to_dict",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.put(test_arr[i],test_arr[i+1]);\n        }\n        return dict;",
    "        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;",
    "        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        test_dict.put(test_arr[0], test_arr[1]);\n        return test_dict;",
    "        // Write your code here\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i+=2) {\n            hm.put(arr[i],arr[i+1]);\n        }\n        return hm;",
    "        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;",
    "        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup;\n        test_arr[1] = test_tup;\n        for (int i = 0; i < test_arr.length; i++) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;",
    "        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i == arr.length - 1) {\n                dict.put(arr[i], null);\n            } else {\n                dict.put(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;",
    "        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup;\n        arr[1] = test_tup;\n        for(int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;",
    "        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;",
    "        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_tup_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.put(test_tup_arr[i], test_tup_arr[i+1]);\n        }\n        return dict;",
    "        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i == arr.length - 1) {\n                dict.put(arr[i], arr[0]);\n            } else {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;",
    "        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for(int i = 0; i < test_tup.size(); i += 2) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;",
    "        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup = new long[2];\n        tup[0] = test_tup;\n        tup[1] = test_tup + 1;\n        dict.put(tup[0], tup[1]);\n        return dict;",
    "        HashMap<Long,Long> res = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i % 2 == 0) {\n                res.put(arr[i], arr[i + 1]);\n            }\n        }\n        return res;",
    "        HashMap<Long,Long> res = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup / 1000000000;\n        arr[1] = test_tup % 1000000000;\n        for (int i = 0; i < arr.length; i++) {\n            res.put(arr[i], arr[(i+1)%arr.length]);\n        }\n        return res;",
    "        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;",
    "        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i++) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;",
    "        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;",
    "        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i+=2) {\n            if(i+1 < test_tup) {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;",
    "        HashMap<Long,Long> dict = new HashMap<>();\n        long[] test_arr = new long[test_tup.length];\n        for (int i = 0; i < test_tup.length; i++) {\n            test_arr[i] = test_tup.getValue(i);\n        }\n        for (int i = 0; i < test_arr.length; i += 2) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;"
  ]
}