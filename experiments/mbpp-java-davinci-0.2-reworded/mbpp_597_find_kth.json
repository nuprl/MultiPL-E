{
  "name": "mbpp_597_find_kth",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find kth element from the given two sorted array array lists.\n    public static long findKth(ArrayList<Long> arr1, ArrayList<Long> arr2, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findKth((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)6l, (long)7l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)8l, (long)10l))), (5l)) == (6l));\n    assert(findKth((new ArrayList<Long>(Arrays.asList((long)100l, (long)112l, (long)256l, (long)349l, (long)770l))), (new ArrayList<Long>(Arrays.asList((long)72l, (long)86l, (long)113l, (long)119l, (long)265l, (long)445l, (long)892l))), (7l)) == (256l));\n    assert(findKth((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)7l, (long)8l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)9l, (long)11l))), (6l)) == (8l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (count < k) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        }\n        return Math.min(arr1.get(i), arr2.get(j));",
    "        // Write your code here\n        long n = arr1.size();\n        long m = arr2.size();\n        long i = 0, j = 0;\n        while (i < n && j < m) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                if (i + j == k - 1) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                if (i + j == k - 1) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        if (i < n) {\n            return arr1.get((int) (k - j - 1));\n        }\n        return arr2.get((int) (k - i - 1));",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) k / 2, arr2.size())), k - k / 2);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() <= k/2) {\n            if (arr1.get(arr1.size()-1) < arr2.get((int)(k/2))) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)(k/2), arr2.size())), k-k/2);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)(k/2))), k/2);\n            }\n        } else if (arr2.size() <= k/2) {\n            if (arr2.get(arr2.size()-1) < arr1.get((int)(k/2))) {\n                return findKth(new ArrayList<Long>(arr1.subList((int)(k/2), arr1.size())), arr2, k-k/2);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)(k/2))), arr2, k/2);\n            }\n        } else {\n            if (arr1.get((int)(k/2)) < arr2.get((int)(k/2))) {\n                return findKth(new ArrayList<Long>(arr1.subList((int)(k/2), arr1.size())), arr2, k-k/2);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)(k/2), arr2.size())), k-k/2);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        // Write your code here.\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        // Write your code here\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        // Write your code here\n        long n = arr1.size();\n        long m = arr2.size();\n        long i = (long) Math.ceil((double) (n + m) / 2);\n        long j = k - i;\n        if (j < 0) {\n            j = 0;\n            i = k;\n        }\n        if (j > m) {\n            j = m;\n            i = k - j;\n        }\n        if (i > n) {\n            i = n;\n            j = k - i;\n        }\n        if (i == 0) {\n            return arr2.get((int) j - 1);\n        }\n        if (j == 0) {\n            return arr1.get((int) i - 1);\n        }\n        if (arr1.get((int) i - 1) > arr2.get((int) j - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) j, (int) m)), i);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList((int) i, (int) n)), arr2, j);\n        }",
    "        int i = 0, j = 0;\n        long ans = 0;\n        while (k > 0) {\n            if (i < arr1.size() && j < arr2.size()) {\n                if (arr1.get(i) < arr2.get(j)) {\n                    ans = arr1.get(i);\n                    i++;\n                } else {\n                    ans = arr2.get(j);\n                    j++;\n                }\n            } else if (i < arr1.size()) {\n                ans = arr1.get(i);\n                i++;\n            } else {\n                ans = arr2.get(j);\n                j++;\n            }\n            k--;\n        }\n        return ans;",
    "        long i = 0;\n        long j = 0;\n        while (k > 0) {\n            if (i < arr1.size() && j < arr2.size()) {\n                if (arr1.get((int) i) < arr2.get((int) j)) {\n                    i++;\n                } else {\n                    j++;\n                }\n            } else if (i < arr1.size()) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        if (i < arr1.size() && j < arr2.size()) {\n            return Math.min(arr1.get((int) i), arr2.get((int) j));\n        } else if (i < arr1.size()) {\n            return arr1.get((int) i);\n        } else {\n            return arr2.get((int) j);\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        long prev = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                prev = arr1.get(i);\n                i++;\n            } else {\n                prev = arr2.get(j);\n                j++;\n            }\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        while (i < arr1.size()) {\n            prev = arr1.get(i);\n            i++;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        while (j < arr2.size()) {\n            prev = arr2.get(j);\n            j++;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return prev;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int) Math.min(k / 2, arr1.size()) - 1);\n        long mid2 = arr2.get((int) Math.min(k / 2, arr2.size()) - 1);\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) Math.min(k / 2, arr1.size()), arr1.size())), arr2, k - Math.min(k / 2, arr1.size()));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) Math.min(k / 2, arr2.size()), arr2.size())), k - Math.min(k / 2, arr2.size()));\n        }",
    "        int i = 0, j = 0;\n        long ans = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                ans = arr1.get(i);\n                i++;\n            } else {\n                ans = arr2.get(j);\n                j++;\n            }\n            k--;\n            if (k == 0)\n                break;\n        }\n        while (i < arr1.size()) {\n            ans = arr1.get(i);\n            i++;\n            k--;\n            if (k == 0)\n                break;\n        }\n        while (j < arr2.size()) {\n            ans = arr2.get(j);\n            j++;\n            k--;\n            if (k == 0)\n                break;\n        }\n        return ans;",
    "        // Write your code here\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) <= arr2.get(j)) {\n                if (count == k - 1) {\n                    return arr1.get(i);\n                }\n                i++;\n                count++;\n            } else {\n                if (count == k - 1) {\n                    return arr2.get(j);\n                }\n                j++;\n                count++;\n            }\n        }\n        while (i < arr1.size()) {\n            if (count == k - 1) {\n                return arr1.get(i);\n            }\n            i++;\n            count++;\n        }\n        while (j < arr2.size()) {\n            if (count == k - 1) {\n                return arr2.get(j);\n            }\n            j++;\n            count++;\n        }\n        return -1;",
    "        int n = arr1.size();\n        int m = arr2.size();\n        if (n > m) {\n            return findKth(arr2, arr1, k);\n        }\n        if (n == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int pa = Math.min((int)k / 2, n);\n        int pb = (int)k - pa;\n        if (arr1.get(pa - 1) < arr2.get(pb - 1)) {\n            ArrayList<Long> new_arr1 = new ArrayList<Long>(arr1.subList(pa, n));\n            return findKth(new_arr1, arr2, k - pa);\n        } else if (arr1.get(pa - 1) > arr2.get(pb - 1)) {\n            ArrayList<Long> new_arr2 = new ArrayList<Long>(arr2.subList(pb, m));\n            return findKth(arr1, new_arr2, k - pb);\n        } else {\n            return arr1.get(pa - 1);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) (k - 1));\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) (k - 1));\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long a = arr1.get(0);\n        long b = arr2.get(0);\n        if (a < b) {\n            arr1.remove(0);\n        } else {\n            arr2.remove(0);\n        }\n        return findKth(arr1, arr2, k - 1);",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)Math.min(k/2, arr1.size() - 1));\n        long mid2 = arr2.get((int)Math.min(k/2, arr2.size() - 1));\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)Math.min(k/2, arr1.size() - 1), arr1.size())), arr2, k - Math.min(k/2, arr1.size() - 1));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.min(k/2, arr2.size() - 1), arr2.size())), k - Math.min(k/2, arr2.size() - 1));\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) k / 2, arr2.size())), k - k / 2);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)Math.min(k / 2, arr1.size()) - 1);\n        long mid2 = arr2.get((int)Math.min(k / 2, arr2.size()) - 1);\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)Math.min(k / 2, arr1.size()), arr1.size())), arr2, k - Math.min(k / 2, arr1.size()));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.min(k / 2, arr2.size()), arr2.size())), k - Math.min(k / 2, arr2.size()));\n        }",
    "        int i = 0, j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        if (i == arr1.size()) {\n            return arr2.get((int) (k - i - 1));\n        } else if (j == arr2.size()) {\n            return arr1.get((int) (k - j - 1));\n        } else {\n            return Math.min(arr1.get(i), arr2.get(j));\n        }",
    "        int i = 0, j = 0;\n        long count = 0;\n        while(i < arr1.size() && j < arr2.size()) {\n            if(arr1.get(i) < arr2.get(j)) {\n                count++;\n                if(count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if(count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while(i < arr1.size()) {\n            count++;\n            if(count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while(j < arr2.size()) {\n            count++;\n            if(count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = (int)(k / 2);\n        int mid2 = (int)(k - mid1);\n        if (mid1 >= arr1.size()) {\n            mid1 = arr1.size() - 1;\n            mid2 = (int)k - mid1;\n        }\n        if (mid2 >= arr2.size()) {\n            mid2 = arr2.size() - 1;\n            mid1 = (int)k - mid2;\n        }\n        if (arr1.get(mid1) < arr2.get(mid2)) {\n            return findKth(new ArrayList<Long>(arr1.subList(mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(mid2 + 1, arr2.size())), k - mid2 - 1);\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        // Write your code here\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        long prev = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                prev = arr1.get(i);\n                i++;\n            } else {\n                count++;\n                prev = arr2.get(j);\n                j++;\n            }\n            if (count == k) {\n                return prev;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            prev = arr1.get(i);\n            i++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        while (j < arr2.size()) {\n            count++;\n            prev = arr2.get(j);\n            j++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        return 0;",
    "        if (k >= arr1.size() + arr2.size()) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int) Math.min(k / 2, arr1.size()) - 1);\n        long mid2 = arr2.get((int) Math.min(k / 2, arr2.size()) - 1);\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) Math.min(k / 2, arr1.size()), arr1.size())), arr2,\n                    k - Math.min(k / 2, arr1.size()));\n        } else {\n            return findKth(arr1,\n                    new ArrayList<Long>(arr2.subList((int) Math.min(k / 2, arr2.size()), arr2.size())),\n                    k - Math.min(k / 2, arr2.size()));\n        }",
    "        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int)i) < arr2.get((int)j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get((int)i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get((int)j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get((int)i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get((int)j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0)\n            return arr2.get((int)k);\n        if (arr2.size() == 0)\n            return arr1.get((int)k);\n        if (k == 0)\n            return Math.min(arr1.get(0), arr2.get(0));\n        int i = (int)Math.min(k/2, arr1.size()-1);\n        int j = (int)Math.min(k/2, arr2.size()-1);\n        if (arr1.get(i) < arr2.get(j)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i+1, arr1.size())), arr2, k-i-1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j+1, arr2.size())), k-j-1);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = (int)Math.min(k/2, arr1.size()-1);\n        int mid2 = (int)Math.min(k/2, arr2.size()-1);\n        if (arr1.get(mid1) < arr2.get(mid2)) {\n            return findKth(new ArrayList<Long>(arr1.subList(mid1+1, arr1.size())), arr2, k-mid1-1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(mid2+1, arr2.size())), k-mid2-1);\n        }",
    "        if (arr1.size() == 0) return arr2.get((int) k);\n        if (arr2.size() == 0) return arr1.get((int) k);\n        if (k == 0) return Math.min(arr1.get(0), arr2.get(0));\n        long mid1 = arr1.get((int) (k / 2));\n        long mid2 = arr2.get((int) (k / 2));\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) (k / 2), arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) (k / 2), arr2.size())), k - k / 2);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k / 2, arr2.size())), k - k / 2);\n        }",
    "        if(arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if(arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if(k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if(arr1.size() == 1 && arr2.size() == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)Math.ceil(arr1.size()/2.0) - 1);\n        long mid2 = arr2.get((int)Math.ceil(arr2.size()/2.0) - 1);\n        if(mid1 < mid2) {\n            if(k <= arr1.size()/2.0 + arr2.size()/2.0) {\n                return findKth(new ArrayList<Long>(arr1.subList((int)Math.ceil(arr1.size()/2.0), arr1.size())), arr2, k - Math.ceil(arr1.size()/2.0));\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)Math.ceil(arr2.size()/2.0))), k);\n            }\n        } else {\n            if(k <= arr1.size()/2.0 + arr2.size()/2.0) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.ceil(arr2.size()/2.0), arr2.size())), k - Math.ceil(arr2.size()/2.0));\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)Math.ceil(arr1.size()/2.0))), arr2, k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1 && arr2.size() == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = arr1.size() / 2;\n        int mid2 = arr2.size() / 2;\n        if (arr1.get(mid1) <= arr2.get(mid2)) {\n            if (k <= mid1 + mid2) {\n                return findKth(arr1.subList(0, mid1), arr2, k);\n            } else {\n                return findKth(arr1, arr2.subList(mid2 + 1, arr2.size()), k - mid2 - 1);\n            }\n        } else {\n            if (k <= mid1 + mid2) {\n                return findKth(arr1, arr2.subList(0, mid2), k);\n            } else {\n                return findKth(arr1.subList(mid1 + 1, arr1.size()), arr2, k - mid1 - 1);\n            }\n        }",
    "        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get((int) i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get((int) j);\n            }\n            j++;\n        }\n        return -1;",
    "        // Write your code here\n        return 0;",
    "        long i = 0, j = 0;\n        long count = 0;\n        long ans = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int)i) < arr2.get((int)j)) {\n                ans = arr1.get((int)i);\n                i++;\n            } else {\n                ans = arr2.get((int)j);\n                j++;\n            }\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        if (i == arr1.size()) {\n            while (j < arr2.size()) {\n                ans = arr2.get((int)j);\n                j++;\n                count++;\n                if (count == k) {\n                    break;\n                }\n            }\n        }\n        if (j == arr2.size()) {\n            while (i < arr1.size()) {\n                ans = arr1.get((int)i);\n                i++;\n                count++;\n                if (count == k) {\n                    break;\n                }\n            }\n        }\n        return ans;",
    "        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get((int) i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get((int) j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (k < 1 || k > arr1.size() + arr2.size()) {\n            return -1;\n        }\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        // Write your code here\n        long n = arr1.size();\n        long m = arr2.size();\n        if (k > (n + m) || k < 1) {\n            return -1;\n        }\n        long i = 0, j = 0;\n        long count = 0;\n        while (i < n && j < m) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                i++;\n                count++;\n            } else {\n                j++;\n                count++;\n            }\n            if (count == k) {\n                if (i < n && j < m) {\n                    return Math.min(arr1.get((int) i), arr2.get((int) j));\n                } else if (i < n) {\n                    return arr1.get((int) i);\n                } else {\n                    return arr2.get((int) j);\n                }\n            }\n        }\n        while (i < n) {\n            i++;\n            count++;\n            if (count == k) {\n                return arr1.get((int) i);\n            }\n        }\n        while (j < m) {\n            j++;\n            count++;\n            if (count == k) {\n                return arr2.get((int) j);\n            }\n        }\n        return -1;",
    "        int n1 = arr1.size();\n        int n2 = arr2.size();\n        if (k > n1 + n2) {\n            return -1;\n        }\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < n1 && j < n2) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < n1) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < n2) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        long i = 0, j = 0;\n        long n = arr1.size(), m = arr2.size();\n        while (i < n && j < m) {\n            if (arr1.get((int)i) < arr2.get((int)j)) {\n                if (i + j + 1 == k) {\n                    return arr1.get((int)i);\n                }\n                i++;\n            } else {\n                if (i + j + 1 == k) {\n                    return arr2.get((int)j);\n                }\n                j++;\n            }\n        }\n        while (i < n) {\n            if (i + j + 1 == k) {\n                return arr1.get((int)i);\n            }\n            i++;\n        }\n        while (j < m) {\n            if (i + j + 1 == k) {\n                return arr2.get((int)j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = (int)Math.min(k/2, arr1.size());\n        int mid2 = (int)Math.min(k/2, arr2.size());\n        if (arr1.get(mid1 - 1) < arr2.get(mid2 - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList(mid1, arr1.size())), arr2, k - mid1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(mid2, arr2.size())), k - mid2);\n        }",
    "        // Write your code here\n        return 0;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (k <= 0) return -1;\n        if (k > arr1.size() + arr2.size()) return -1;\n        if (arr1.size() == 0) return arr2.get((int)k - 1);\n        if (arr2.size() == 0) return arr1.get((int)k - 1);\n        if (arr1.get(0) > arr2.get(0)) {\n            ArrayList<Long> temp = arr1;\n            arr1 = arr2;\n            arr2 = temp;\n        }\n        if (k == 1) return arr1.get(0);\n        if (arr1.size() == 1) {\n            if (arr2.size() == 1) {\n                return arr2.get(0);\n            } else {\n                if (k == 2) return arr2.get(0);\n                if (k == 3) return arr2.get(1);\n            }\n        }\n        long k1 = Math.min(k / 2, arr1.size());\n        long k2 = k - k1;\n        if (arr1.get((int)k1 - 1) < arr2.get((int)k2 - 1)) {\n            ArrayList<Long> newArr1 = new ArrayList<Long>(arr1.subList((int)k1, arr1.size()));\n            return findKth(newArr1, arr2, k - k1);\n        } else if (arr1.get((int)k1 - 1) > arr2.get((int)k2 - 1)) {\n            ArrayList<Long> newArr2 = new ArrayList<Long>(arr2.subList((int)k2, arr2.size()));\n            return findKth(arr1, newArr2, k - k2);\n        } else {\n            return arr1.get((int)k1 - 1);\n        }",
    "        // Write your code here\n        int i = 0;\n        int j = 0;\n        long kth = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                kth = arr1.get(i);\n                i++;\n            } else {\n                kth = arr2.get(j);\n                j++;\n            }\n            if (i + j == k) {\n                break;\n            }\n        }\n        if (i == arr1.size()) {\n            while (j < arr2.size()) {\n                kth = arr2.get(j);\n                j++;\n                if (i + j == k) {\n                    break;\n                }\n            }\n        } else if (j == arr2.size()) {\n            while (i < arr1.size()) {\n                kth = arr1.get(i);\n                i++;\n                if (i + j == k) {\n                    break;\n                }\n            }\n        }\n        return kth;",
    "        // Write your code here\n        int i = 0;\n        int j = 0;\n        long ans = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                ans = arr1.get(i);\n                i++;\n            } else {\n                ans = arr2.get(j);\n                j++;\n            }\n            if (i + j == k) {\n                break;\n            }\n        }\n        while (i < arr1.size()) {\n            ans = arr1.get(i);\n            i++;\n            if (i + j == k) {\n                break;\n            }\n        }\n        while (j < arr2.size()) {\n            ans = arr2.get(j);\n            j++;\n            if (i + j == k) {\n                break;\n            }\n        }\n        return ans;",
    "        // Write your code here.\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (count < k) {\n            if (arr1.get((int)i) < arr2.get((int)j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        }\n        return Math.min(arr1.get((int)i - 1), arr2.get((int)j - 1));",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = (int)Math.min(k/2, arr1.size()-1);\n        int mid2 = (int)Math.min(k/2, arr2.size()-1);\n        if (arr1.get(mid1) < arr2.get(mid2)) {\n            return findKth(new ArrayList<Long>(arr1.subList(mid1+1, arr1.size())), arr2, k-mid1-1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(mid2+1, arr2.size())), k-mid2-1);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = (int)Math.min(k/2, arr1.size()-1);\n        int j = (int)Math.min(k/2, arr2.size()-1);\n        if (arr1.get(i) < arr2.get(j)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i+1, arr1.size())), arr2, k-i-1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j+1, arr2.size())), k-j-1);\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                if (count == k - 1) {\n                    return arr1.get(i);\n                }\n                i++;\n                count++;\n            } else {\n                if (count == k - 1) {\n                    return arr2.get(j);\n                }\n                j++;\n                count++;\n            }\n        }\n        while (i < arr1.size()) {\n            if (count == k - 1) {\n                return arr1.get(i);\n            }\n            i++;\n            count++;\n        }\n        while (j < arr2.size()) {\n            if (count == k - 1) {\n                return arr2.get(j);\n            }\n            j++;\n            count++;\n        }\n        return -1;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        long prev = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                prev = arr1.get(i);\n                i++;\n            } else {\n                prev = arr2.get(j);\n                j++;\n            }\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        while (i < arr1.size()) {\n            prev = arr1.get(i);\n            i++;\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        while (j < arr2.size()) {\n            prev = arr2.get(j);\n            j++;\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        return prev;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int) mid1) > arr2.get((int) mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int) mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int) mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int) mid1) > arr2.get((int) mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int) mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int) mid2)), k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = (int) Math.min(k / 2, arr1.size());\n        int j = (int) Math.min(k / 2, arr2.size());\n        if (arr1.get(i - 1) < arr2.get(j - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        // Write your code here\n        return 0;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1) {\n            if (arr2.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (arr2.size() > k) {\n                return arr2.get((int)k);\n            }\n            return Math.max(arr1.get(0), arr2.get((int)k - 1));\n        }\n        if (arr2.size() == 1) {\n            if (arr1.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (arr1.size() > k) {\n                return arr1.get((int)k);\n            }\n            return Math.max(arr2.get(0), arr1.get((int)k - 1));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            }\n            return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n        }\n        if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid",
    "        long i = 0, j = 0;\n        long n = arr1.size(), m = arr2.size();\n        while (i < n && j < m) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                if (i + j + 1 == k) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                if (i + j + 1 == k) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        if (i < n) {\n            return arr1.get((int) (k - j - 1));\n        } else {\n            return arr2.get((int) (k - i - 1));\n        }",
    "        if (arr1.size() == 0) return arr2.get((int)k);\n        if (arr2.size() == 0) return arr1.get((int)k);\n        if (k == 0) return Math.min(arr1.get(0), arr2.get(0));\n        if (k == arr1.size() + arr2.size() - 1) return Math.max(arr1.get(arr1.size() - 1), arr2.get(arr2.size() - 1));\n        long mid1 = arr1.get((int)(k / 2));\n        long mid2 = arr2.get((int)(k / 2));\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)(k / 2), arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)(k / 2), arr2.size())), k - k / 2);\n        }",
    "        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long m = Math.min(arr1.size(), k / 2);\n        long n = Math.min(arr2.size(), k / 2);\n        if (arr1.get((int) m - 1) > arr2.get((int) n - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) n, arr2.size())), k - n);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList((int) m, arr1.size())), arr2, k - m);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) (k - 1));\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) (k - 1));\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = (int) Math.min(k / 2, arr1.size());\n        int j = (int) Math.min(k / 2, arr2.size());\n        if (arr1.get(i - 1) < arr2.get(j - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) k / 2, arr2.size())), k - k / 2);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(1), arr2.get(1));\n        }\n        long mid1 = arr1.get((int)k/2);\n        long mid2 = arr2.get((int)k/2);\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k/2, arr1.size())), arr2, k - (int)k/2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k/2, arr2.size())), k - (int)k/2);\n        }",
    "        int i = 0, j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        int i = 0;\n        int j = 0;\n        while (k > 0) {\n            if (i == arr1.size()) {\n                return arr2.get(j + (int)k - 1);\n            }\n            if (j == arr2.size()) {\n                return arr1.get(i + (int)k - 1);\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        return Math.min(arr1.get(i), arr2.get(j));",
    "        if (arr1.size() > arr2.size()) {\n            return findKth(arr2, arr1, k);\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int pa = Math.min((int)k/2, arr1.size());\n        int pb = (int)k - pa;\n        if (arr1.get(pa - 1) < arr2.get(pb - 1)) {\n            arr1 = new ArrayList<Long>(arr1.subList(pa, arr1.size()));\n            return findKth(arr1, arr2, k - pa);\n        } else if (arr1.get(pa - 1) > arr2.get(pb - 1)) {\n            arr2 = new ArrayList<Long>(arr2.subList(pb, arr2.size()));\n            return findKth(arr1, arr2, k - pb);\n        } else {\n            return arr1.get(pa - 1);\n        }",
    "        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (arr1.size() + arr2.size() < k) {\n            return -1;\n        }\n        if (arr1.get(arr1.size() - 1) < arr2.get(0)) {\n            return arr1.get((int)k - 1);\n        }\n        if (arr2.get(arr2.size() - 1) < arr1.get(0)) {\n            return arr2.get((int)k - 1);\n        }\n        long mid1 = arr1.get(arr1.size() / 2);\n        long mid2 = arr2.get(arr2.size() / 2);\n        if (mid1 == mid2) {\n            if (k == arr1.size() + arr2.size() / 2) {\n                return mid1;\n            }\n            if (k < arr1.size() + arr2.size() / 2) {\n                return findKth(arr1.subList(0, arr1.size() / 2), arr2.subList(0, arr2.size() / 2), k);\n            }\n            return findKth(arr1.subList(arr1.size() / 2 + 1, arr1.size()), arr2.subList(arr2.size() / 2 + 1, arr2.size()), k - arr1.size() - arr2.size() / 2 - 1);\n        }\n        if (mid1 < mid2) {\n            if (k <= arr1.size() / 2 + arr2.size() / 2) {\n                return findKth(arr1.subList(0, arr1.size() / 2), arr2.subList(0, arr2.size() / 2), k);\n            }\n            return findKth(arr1.sub",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        long prev = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                prev = arr1.get(i);\n                i++;\n            } else {\n                prev = arr2.get(j);\n                j++;\n            }\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        while (i < arr1.size()) {\n            prev = arr1.get(i);\n            i++;\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        while (j < arr2.size()) {\n            prev = arr2.get(j);\n            j++;\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        return prev;",
    "        int n = arr1.size();\n        int m = arr2.size();\n        if (k > n + m)\n            return -1;\n        if (n == 0)\n            return arr2.get((int) k - 1);\n        if (m == 0)\n            return arr1.get((int) k - 1);\n        if (k == 1)\n            return Math.min(arr1.get(0), arr2.get(0));\n        int i = Math.min(n, (int) k / 2);\n        int j = Math.min(m, (int) k / 2);\n        if (arr1.get(i - 1) > arr2.get(j - 1))\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, m)), k - j);\n        else\n            return findKth(new ArrayList<Long>(arr1.subList(i, n)), arr2, k - i);",
    "        if (arr1.size() > arr2.size()) {\n            return findKth(arr2, arr1, k);\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = Math.min(arr1.size(), (int)k / 2);\n        int j = Math.min(arr2.size(), (int)k / 2);\n        if (arr1.get(i - 1) > arr2.get(j - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        }",
    "        if (arr1.size() == 0) return arr2.get((int) (k - 1));\n        if (arr2.size() == 0) return arr1.get((int) (k - 1));\n        if (k == 1) return Math.min(arr1.get(0), arr2.get(0));\n        long i = Math.min(arr1.size(), k / 2);\n        long j = Math.min(arr2.size(), k / 2);\n        if (arr1.get((int) (i - 1)) > arr2.get((int) (j - 1))) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) j, arr2.size())), k - j);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList((int) i, arr1.size())), arr2, k - i);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)Math.min(k/2, arr1.size()) - 1);\n        long mid2 = arr2.get((int)Math.min(k/2, arr2.size()) - 1);\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)Math.min(k/2, arr1.size()), arr1.size())), arr2, k - Math.min(k/2, arr1.size()));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.min(k/2, arr2.size()), arr2.size())), k - Math.min(k/2, arr2.size()));\n        }",
    "        // Write your code here\n        // return -1;\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (count < k) {\n            if (i == arr1.size()) {\n                j++;\n            } else if (j == arr2.size()) {\n                i++;\n            } else if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        }\n        if (i == arr1.size()) {\n            return arr2.get(j);\n        } else if (j == arr2.size()) {\n            return arr1.get(i);\n        } else {\n            return Math.min(arr1.get(i), arr2.get(j));\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long val1 = arr1.get((int) Math.min(k / 2, arr1.size()) - 1);\n        long val2 = arr2.get((int) Math.min(k / 2, arr2.size()) - 1);\n        if (val1 < val2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) Math.min(k / 2, arr1.size()), arr1.size())), arr2, k - Math.min(k / 2, arr1.size()));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) Math.min(k / 2, arr2.size()), arr2.size())), k - Math.min(k / 2, arr2.size()));\n        }",
    "        if (arr1.size() == 0) return arr2.get((int)k - 1);\n        if (arr2.size() == 0) return arr1.get((int)k - 1);\n        if (k == 1) return Math.min(arr1.get(0), arr2.get(0));\n        int i = Math.min(arr1.size() - 1, (int)k / 2 - 1);\n        int j = Math.min(arr2.size() - 1, (int)k / 2 - 1);\n        if (arr1.get(i) > arr2.get(j)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j + 1, arr2.size())), k - j - 1);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList(i + 1, arr1.size())), arr2, k - i - 1);\n        }",
    "        long i = 0;\n        long j = 0;\n        long count = 0;\n        long result = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                result = arr1.get((int) i);\n                i++;\n            } else {\n                result = arr2.get((int) j);\n                j++;\n            }\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        while (i < arr1.size()) {\n            result = arr1.get((int) i);\n            i++;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        while (j < arr2.size()) {\n            result = arr2.get((int) j);\n            j++;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return result;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int index1 = (int) Math.min(k / 2, arr1.size()) - 1;\n        int index2 = (int) Math.min(k / 2, arr2.size()) - 1;\n        if (arr1.get(index1) < arr2.get(index2)) {\n            return findKth(new ArrayList<Long>(arr1.subList(index1 + 1, arr1.size())), arr2, k - index1 - 1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(index2 + 1, arr2.size())), k - index2 - 1);\n        }",
    "        // Write your code here\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        int i = 0, j = 0;\n        while (k > 0 && i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(i), arr2.get(j));\n        }\n        if (i == arr1.size()) {\n            return arr2.get((int) (k - 1));\n        }\n        return arr1.get((int) (k - 1));",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)Math.min(k/2, arr1.size()-1));\n        long mid2 = arr2.get((int)Math.min(k/2, arr2.size()-1));\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)Math.min(k/2, arr1.size()-1), arr1.size())), arr2, k - Math.min(k/2, arr1.size()));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.min(k/2, arr2.size()-1), arr2.size())), k - Math.min(k/2, arr2.size()));\n        }",
    "        int i = 0;\n        int j = 0;\n        while (k > 0) {\n            if (i == arr1.size()) {\n                return arr2.get(j + (int)k - 1);\n            }\n            if (j == arr2.size()) {\n                return arr1.get(i + (int)k - 1);\n            }\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        return Math.min(arr1.get(i), arr2.get(j));",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) k / 2, arr2.size())), k - k / 2);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k / 2, arr2.size())), k - k / 2);\n        }",
    "        if (k <= 0) {\n            return -1;\n        }\n        if (k > arr1.size() + arr2.size()) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = Math.min(k / 2, arr1.size());\n        long mid2 = Math.min(k / 2, arr2.size());\n        if (arr1.get((int)mid1 - 1) > arr2.get((int)mid2 - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2, arr2.size())), k - mid2);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList((int)mid1, arr1.size())), arr2, k - mid1);\n        }",
    "        int i = 0, j = 0;\n        while (k > 0) {\n            if (i < arr1.size() && j < arr2.size()) {\n                if (arr1.get(i) < arr2.get(j)) {\n                    i++;\n                } else {\n                    j++;\n                }\n            } else if (i < arr1.size()) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        if (i < arr1.size() && j < arr2.size()) {\n            return Math.min(arr1.get(i), arr2.get(j));\n        } else if (i < arr1.size()) {\n            return arr1.get(i);\n        } else {\n            return arr2.get(j);\n        }",
    "        if (arr1.size() == 0) return arr2.get((int)k-1);\n        if (arr2.size() == 0) return arr1.get((int)k-1);\n        if (k == 1) return Math.min(arr1.get(0), arr2.get(0));\n        long i = Math.min(arr1.size(), k/2);\n        long j = Math.min(arr2.size(), k/2);\n        if (arr1.get((int)i-1) > arr2.get((int)j-1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)j, arr2.size())), k-j);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList((int)i, arr1.size())), arr2, k-i);\n        }",
    "        if (arr1.size() > arr2.size()) {\n            return findKth(arr2, arr1, k);\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = Math.min((int)k / 2, arr1.size());\n        int j = Math.min((int)k / 2, arr2.size());\n        if (arr1.get(i - 1) > arr2.get(j - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        int i = 0, j = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                if (i + j + 1 == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                if (i + j + 1 == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        if (i < arr1.size()) {\n            return arr1.get((int) (k - j - 1));\n        } else {\n            return arr2.get((int) (k - i - 1));\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = (int)Math.min(k/2, arr1.size()-1);\n        int mid2 = (int)Math.min(k/2, arr2.size()-1);\n        if (arr1.get(mid1) < arr2.get(mid2)) {\n            return findKth(new ArrayList<Long>(arr1.subList(mid1+1, arr1.size())), arr2, k-mid1-1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(mid2+1, arr2.size())), k-mid2-1);\n        }",
    "        if (arr1.size() == 0) return arr2.get((int)k);\n        if (arr2.size() == 0) return arr1.get((int)k);\n        if (k == 0) return Math.min(arr1.get(0), arr2.get(0));\n        if (arr1.size() == 1 && arr2.size() == 1) return Math.max(arr1.get(0), arr2.get(0));\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                arr2 = new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size()));\n                return findKth(arr1, arr2, k - mid2 - 1);\n            } else {\n                arr1 = new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size()));\n                return findKth(arr1, arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                arr1 = new ArrayList<Long>(arr1.subList(0, (int)mid1));\n                return findKth(arr1, arr2, k);\n            } else {\n                arr2 = new ArrayList<Long>(arr2.subList(0, (int)mid2));\n                return findKth(arr1, arr2, k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1) {\n            if (arr2.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (k == 1) {\n                return Math.min(arr1.get(0), arr2.get(1));\n            }\n            if (k == 2) {\n                return Math.max(arr1.get(0), arr2.get(1));\n            }\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 1) {\n            if (arr1.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (k == 1) {\n                return Math.min(arr1.get(1), arr2.get(0));\n            }\n            if (k == 2) {\n                return Math.max(arr1.get(1), arr2.get(0));\n            }\n            return arr1.get((int)k);\n        }\n        long mid1 = arr1.get((int)(arr1.size() / 2));\n        long mid2 = arr2.get((int)(arr2.size() / 2));\n        if (mid1 == mid2) {\n            if (k == arr1.size() / 2 + arr2.size() / 2) {\n                return mid1;\n            }\n            if (k < arr1.size() / 2 + arr2.size() / 2) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)(arr1.size() / 2))), new ArrayList<Long>(arr2.subList(0, (int)(arr2.",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long a = arr1.get(0);\n        long b = arr2.get(0);\n        if (a > b) {\n            arr2.remove(0);\n        } else {\n            arr1.remove(0);\n        }\n        return findKth(arr1, arr2, k - 1);",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) k / 2, arr2.size())), k - k / 2);\n        }",
    "        int i = 0, j = 0;\n        long ans = 0;\n        while (k > 0 && i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                ans = arr1.get(i);\n                i++;\n            } else {\n                ans = arr2.get(j);\n                j++;\n            }\n            k--;\n        }\n        while (k > 0 && i < arr1.size()) {\n            ans = arr1.get(i);\n            i++;\n            k--;\n        }\n        while (k > 0 && j < arr2.size()) {\n            ans = arr2.get(j);\n            j++;\n            k--;\n        }\n        return ans;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (k == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        int i = (int)Math.min(k/2, arr1.size()-1);\n        int j = (int)Math.min(k/2, arr2.size()-1);\n        if (arr1.get(i) < arr2.get(j)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i+1, arr1.size())), arr2, k-i-1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j+1, arr2.size())), k-j-1);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k / 2, arr2.size())), k - k / 2);\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k / 2, arr2.size())), k - k / 2);\n        }",
    "        int i = 0, j = 0;\n        while (k > 0) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        return Math.min(arr1.get(i), arr2.get(j));",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get((int) i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get((int) j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() > arr2.size()) {\n            return findKth(arr2, arr1, k);\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = Math.min((int)k/2, arr1.size());\n        int j = (int)k - i;\n        if (arr1.get(i - 1) < arr2.get(j - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        } else if (arr1.get(i - 1) > arr2.get(j - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        } else {\n            return arr1.get(i - 1);\n        }",
    "        int i = 0, j = 0;\n        long curr = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                curr = arr1.get(i);\n                i++;\n            } else {\n                curr = arr2.get(j);\n                j++;\n            }\n            if (i + j == k) {\n                return curr;\n            }\n        }\n        while (i < arr1.size()) {\n            curr = arr1.get(i);\n            i++;\n            if (i + j == k) {\n                return curr;\n            }\n        }\n        while (j < arr2.size()) {\n            curr = arr2.get(j);\n            j++;\n            if (i + j == k) {\n                return curr;\n            }\n        }\n        return curr;",
    "        long i = 0, j = 0;\n        while (k > 0) {\n            if (i < arr1.size() && j < arr2.size()) {\n                if (arr1.get((int) i) < arr2.get((int) j)) {\n                    i++;\n                } else {\n                    j++;\n                }\n            } else if (i < arr1.size()) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        if (i < arr1.size() && j < arr2.size()) {\n            return Math.min(arr1.get((int) i), arr2.get((int) j));\n        } else if (i < arr1.size()) {\n            return arr1.get((int) i);\n        } else {\n            return arr2.get((int) j);\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        long prev = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                prev = arr1.get(i);\n                i++;\n            } else {\n                prev = arr2.get(j);\n                j++;\n            }\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        while (i < arr1.size()) {\n            prev = arr1.get(i);\n            i++;\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        while (j < arr2.size()) {\n            prev = arr2.get(j);\n            j++;\n            count++;\n            if (count == k) {\n                return prev;\n            }\n        }\n        return prev;",
    "        // Write your code here\n        return 0;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (k == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1) {\n            return Math.max(arr1.get(0), arr2.get((int)k - 1));\n        }\n        if (arr2.size() == 1) {\n            return Math.max(arr2.get(0), arr1.get((int)k - 1));\n        }\n        long mid1 = arr1.get(arr1.size() / 2);\n        long mid2 = arr2.get(arr2.size() / 2);\n        if (mid1 == mid2) {\n            if (k == arr1.size() + arr2.size() - 1) {\n                return mid1;\n            }\n            if (k == arr1.size() + arr2.size() - 2) {\n                return Math.max(arr1.get(arr1.size() - 1), arr2.get(arr2.size() - 1));\n            }\n            if (k < arr1.size() + arr2.size() - 2) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, arr1.size() - 1)), new ArrayList<Long>(arr2.subList(0, arr2.size() - 1)), k);\n            }\n            if (k > arr1.size() + arr2.size() - 2) {\n                return findKth(new ArrayList<Long>(arr1.subList(1, arr1.size())), new ArrayList<Long>(arr2.subList(1, arr2.size())), k - 2);\n            }\n        }\n        if (mid1 < mid2) {\n            if (k <=",
    "        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k / 2, arr2.size())), k - k / 2);\n        }",
    "        if (arr1.size() + arr2.size() < k) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long a1 = arr1.get(0);\n        long a2 = arr2.get(0);\n        if (a1 < a2) {\n            arr1.remove(0);\n            return findKth(arr1, arr2, k - 1);\n        } else {\n            arr2.remove(0);\n            return findKth(arr1, arr2, k - 1);\n        }",
    "        // Write your code here\n        long i = 0;\n        long j = 0;\n        long count = 0;\n        long result = 0;\n        while (count < k) {\n            if (i < arr1.size() && j < arr2.size()) {\n                if (arr1.get((int) i) < arr2.get((int) j)) {\n                    result = arr1.get((int) i);\n                    i++;\n                } else {\n                    result = arr2.get((int) j);\n                    j++;\n                }\n            } else if (i < arr1.size()) {\n                result = arr1.get((int) i);\n                i++;\n            } else if (j < arr2.size()) {\n                result = arr2.get((int) j);\n                j++;\n            }\n            count++;\n        }\n        return result;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n                count++;\n            } else {\n                j++;\n                count++;\n            }\n            if (count == k) {\n                if (i < arr1.size() && j < arr2.size()) {\n                    return Math.min(arr1.get(i), arr2.get(j));\n                } else if (i < arr1.size()) {\n                    return arr1.get(i);\n                } else {\n                    return arr2.get(j);\n                }\n            }\n        }\n        if (i < arr1.size()) {\n            count += arr1.size() - i;\n            if (count >= k) {\n                return arr1.get((int) (k - count + arr1.size() - i));\n            }\n        }\n        if (j < arr2.size()) {\n            count += arr2.size() - j;\n            if (count >= k) {\n                return arr2.get((int) (k - count + arr2.size() - j));\n            }\n        }\n        return -1;",
    "        int i = 0, j = 0;\n        long kth = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                kth = arr1.get(i);\n                i++;\n            } else {\n                kth = arr2.get(j);\n                j++;\n            }\n            k--;\n            if (k == 0) {\n                break;\n            }\n        }\n        if (i == arr1.size()) {\n            while (j < arr2.size()) {\n                kth = arr2.get(j);\n                j++;\n                k--;\n                if (k == 0) {\n                    break;\n                }\n            }\n        }\n        if (j == arr2.size()) {\n            while (i < arr1.size()) {\n                kth = arr1.get(i);\n                i++;\n                k--;\n                if (k == 0) {\n                    break;\n                }\n            }\n        }\n        return kth;",
    "        // Write your code here\n        int n = arr1.size();\n        int m = arr2.size();\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < n && j < m) {\n            if (arr1.get(i) < arr2.get(j)) {\n                if (count + i + j + 1 == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                if (count + i + j + 1 == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < n) {\n            if (count + i + j + 1 == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < m) {\n            if (count + i + j + 1 == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        // Write your code here\n        return 0;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)Math.min(k / 2, arr1.size()) - 1);\n        long mid2 = arr2.get((int)Math.min(k / 2, arr2.size()) - 1);\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)Math.min(k / 2, arr1.size()), arr1.size())), arr2, k - Math.min(k / 2, arr1.size()));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.min(k / 2, arr2.size()), arr2.size())), k - Math.min(k / 2, arr2.size()));\n        }",
    "        int n = arr1.size();\n        int m = arr2.size();\n        int i = 0;\n        int j = 0;\n        while (k > 0 && i < n && j < m) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(i), arr2.get(j));\n        }\n        if (i == n) {\n            return arr2.get((int) (k - 1));\n        }\n        return arr1.get((int) (k - 1));",
    "        // Write your code here\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        long prev = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                prev = arr1.get(i);\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                prev = arr2.get(j);\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            prev = arr1.get(i);\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            prev = arr2.get(j);\n            j++;\n        }\n        return prev;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) (k - 1));\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) (k - 1));\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = (int) Math.min(arr1.size(), k / 2);\n        int j = (int) Math.min(arr2.size(), k / 2);\n        if (arr1.get(i - 1) < arr2.get(j - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) k / 2, arr2.size())), k - k / 2);\n        }",
    "        // Write your code here\n        int n = arr1.size();\n        int m = arr2.size();\n        if (k > (n + m) || k < 1)\n            return -1;\n        return findKth(arr1, arr2, 0, n - 1, 0, m - 1, k);",
    "        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get((int) i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get((int) j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (k < 1 || k > arr1.size() + arr2.size()) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = (int) Math.min(k / 2, arr1.size());\n        int j = (int) Math.min(k / 2, arr2.size());\n        if (arr1.get(i - 1) < arr2.get(j - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        // Write your code here\n        int i = 0, j = 0;\n        while (k > 0) {\n            if (i < arr1.size() && j < arr2.size()) {\n                if (arr1.get(i) < arr2.get(j)) {\n                    i++;\n                } else {\n                    j++;\n                }\n            } else if (i < arr1.size()) {\n                i++;\n            } else {\n                j++;\n            }\n            k--;\n        }\n        if (i < arr1.size() && j < arr2.size()) {\n            return Math.min(arr1.get(i), arr2.get(j));\n        } else if (i < arr1.size()) {\n            return arr1.get(i);\n        } else {\n            return arr2.get(j);\n        }",
    "        if (arr1.size() > arr2.size()) {\n            return findKth(arr2, arr1, k);\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int p1 = Math.min((int)k / 2, arr1.size());\n        int p2 = (int)k - p1;\n        if (arr1.get(p1 - 1) < arr2.get(p2 - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList(p1, arr1.size())), arr2, k - p1);\n        } else if (arr1.get(p1 - 1) > arr2.get(p2 - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(p2, arr2.size())), k - p2);\n        } else {\n            return arr1.get(p1 - 1);\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                if (count == k - 1) {\n                    return arr1.get(i);\n                }\n                i++;\n                count++;\n            } else {\n                if (count == k - 1) {\n                    return arr2.get(j);\n                }\n                j++;\n                count++;\n            }\n        }\n        while (i < arr1.size()) {\n            if (count == k - 1) {\n                return arr1.get(i);\n            }\n            i++;\n            count++;\n        }\n        while (j < arr2.size()) {\n            if (count == k - 1) {\n                return arr2.get(j);\n            }\n            j++;\n            count++;\n        }\n        return -1;",
    "        if (k > arr1.size() + arr2.size()) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid = k / 2;\n        long mid1 = Math.min(mid, arr1.size());\n        long mid2 = Math.min(mid, arr2.size());\n        if (arr1.get((int)mid1 - 1) < arr2.get((int)mid2 - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)mid1, arr1.size())), arr2, k - mid1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2, arr2.size())), k - mid2);\n        }",
    "        // Write your code here\n        long n = arr1.size();\n        long m = arr2.size();\n        if (k > (n + m))\n            return -1;\n        if (n == 0)\n            return arr2.get((int) k - 1);\n        if (m == 0)\n            return arr1.get((int) k - 1);\n        if (k == 1)\n            return Math.min(arr1.get(0), arr2.get(0));\n        long i = Math.min(n, k / 2);\n        long j = Math.min(m, k / 2);\n        if (arr1.get((int) i - 1) > arr2.get((int) j - 1))\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) j, (int) m)), k - j);\n        else\n            return findKth(new ArrayList<Long>(arr1.subList((int) i, (int) n)), arr2, k - i);",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.get(arr1.size() - 1) < arr2.get(0)) {\n            return arr2.get((int)k);\n        }\n        if (arr2.get(arr2.size() - 1) < arr1.get(0)) {\n            return arr1.get((int)k);\n        }\n        long mid1 = arr1.get(arr1.size() / 2);\n        long mid2 = arr2.get(arr2.size() / 2);\n        if (mid1 < mid2) {\n            if (k < arr1.size() / 2 + arr2.size() / 2 + 1) {\n                return findKth(arr1.subList(0, arr1.size() / 2), arr2, k);\n            } else {\n                return findKth(arr1, arr2.subList(arr2.size() / 2 + 1, arr2.size()), k - arr2.size() / 2 - 1);\n            }\n        } else {\n            if (k < arr1.size() / 2 + arr2.size() / 2 + 1) {\n                return findKth(arr1, arr2.subList(0, arr2.size() / 2), k);\n            } else {\n                return findKth(arr1.subList(arr1.size() / 2 + 1, arr1.size()), arr2, k - arr1.size() / 2 - 1);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1 && arr2.size() == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = (int)Math.floor(arr1.size() / 2.0);\n        int mid2 = (int)Math.floor(arr2.size() / 2.0);\n        if (arr1.get(mid1) <= arr2.get(mid2)) {\n            if (mid1 + mid2 < k) {\n                return findKth(new ArrayList<Long>(arr1.subList(mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, mid2)), k);\n            }\n        } else {\n            if (mid1 + mid2 < k) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList(0, mid1)), arr2, k);\n            }\n        }",
    "        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long a = arr1.get(0);\n        long b = arr2.get(0);\n        if (a < b) {\n            arr1.remove(0);\n            return findKth(arr1, arr2, k - 1);\n        } else {\n            arr2.remove(0);\n            return findKth(arr1, arr2, k - 1);\n        }",
    "        if (arr1.size() > arr2.size()) {\n            return findKth(arr2, arr1, k);\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = Math.min(arr1.size(), (int)k / 2);\n        int j = Math.min(arr2.size(), (int)k / 2);\n        if (arr1.get(i - 1) > arr2.get(j - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() < k / 2) {\n            return findKth(arr1, arr2.subList((int)k / 2, arr2.size()), k - k / 2);\n        }\n        if (arr2.size() < k / 2) {\n            return findKth(arr1.subList((int)k / 2, arr1.size()), arr2, k - k / 2);\n        }\n        if (arr1.get((int)k / 2 - 1) < arr2.get((int)k / 2 - 1)) {\n            return findKth(arr1.subList((int)k / 2, arr1.size()), arr2, k - k / 2);\n        }\n        return findKth(arr1, arr2.subList((int)k / 2, arr2.size()), k - k / 2);",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)Math.min(k/2, arr1.size()) - 1);\n        long mid2 = arr2.get((int)Math.min(k/2, arr2.size()) - 1);\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)Math.min(k/2, arr1.size()), arr1.size())), arr2, k - Math.min(k/2, arr1.size()));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.min(k/2, arr2.size()), arr2.size())), k - Math.min(k/2, arr2.size()));\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n            if (count == k) {\n                if (arr1.get(i) < arr2.get(j)) {\n                    return arr1.get(i);\n                } else {\n                    return arr2.get(j);\n                }\n            }\n        }\n        while (i < arr1.size()) {\n            i++;\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n        }\n        while (j < arr2.size()) {\n            j++;\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n        }\n        return -1;",
    "        // Write your code here\n        return 0;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1) {\n            if (arr2.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (arr2.size() == 2) {\n                return Math.max(arr1.get(0), Math.min(arr2.get(0), arr2.get(1)));\n            }\n            long mid = arr2.size() / 2;\n            if (arr2.get((int)mid) < arr1.get(0)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid, arr2.size())), k - mid);\n            }\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid)), k);\n        }\n        if (arr2.size() == 1) {\n            if (arr1.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (arr1.size() == 2) {\n                return Math.max(arr2.get(0), Math.min(arr1.get(0), arr1.get(1)));\n            }\n            long mid = arr1.size() / 2;\n            if (arr1.get((int)mid) < arr2.get(0)) {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid, arr1.size())), arr2, k - mid);\n            }\n            return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid)), arr2, k);\n        }\n        long mid1 = arr1.",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.get(0) < arr2.get(0)) {\n            arr1.remove(0);\n            return findKth(arr1, arr2, k - 1);\n        } else {\n            arr2.remove(0);\n            return findKth(arr1, arr2, k - 1);\n        }",
    "        int n = arr1.size();\n        int m = arr2.size();\n        if (k > (n + m)) {\n            return -1;\n        }\n        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < n && j < m) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n            if (count == k) {\n                return Math.min(arr1.get(i), arr2.get(j));\n            }\n        }\n        while (i < n) {\n            i++;\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n        }\n        while (j < m) {\n            j++;\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        long i = 0;\n        long j = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                if (i + j + 1 == k) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                if (i + j + 1 == k) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        if (i < arr1.size()) {\n            return arr1.get((int) (k - j - 1));\n        } else {\n            return arr2.get((int) (k - i - 1));\n        }",
    "        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(1), arr2.get(1));\n        }\n        if (k == 2) {\n            return Math.min(arr1.get(2), arr2.get(2));\n        }\n        if (k == 3) {\n            return Math.min(arr1.get(3), arr2.get(3));\n        }\n        if (k == 4) {\n            return Math.min(arr1.get(4), arr2.get(4));\n        }\n        if (k == 5) {\n            return Math.min(arr1.get(5), arr2.get(5));\n        }\n        if (k == 6) {\n            return Math.min(arr1.get(6), arr2.get(6));\n        }\n        if (k == 7) {\n            return Math.min(arr1.get(7), arr2.get(7));\n        }\n        if (k == 8) {\n            return Math.min(arr1.get(8), arr2.get(8));\n        }\n        if (k == 9) {\n            return Math.min(arr1.get(9), arr2.get(9));\n        }\n        if (k == 10) {\n            return Math.min(arr1.get(10), arr2.get(10));\n        }\n        if (k == 11) {\n            return Math.min(arr1.get(11), arr2.get(11));\n        }\n        if (k == 12) {\n            return Math.min(arr1.get(12), arr2.get(12));\n        }\n        if (k == 13) {\n            return Math.min(arr1.get(13), arr2.get(13));\n        }\n        if (k == 14) {\n            return Math.min(arr1.get(14), arr2.get(14));\n        }\n        if (k == 15) {\n            return Math.min(arr",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() > arr2.size()) {\n            return findKth(arr2, arr1, k);\n        }\n        long mid = arr1.size() / 2;\n        if (arr1.get((int) mid) <= arr2.get((int) mid)) {\n            if (k > mid) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int) mid + 1, arr2.size())), k - mid - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int) mid)), arr2, k);\n            }\n        } else {\n            if (k > mid) {\n                return findKth(arr2, new ArrayList<Long>(arr1.subList((int) mid + 1, arr1.size())), k - mid - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr2.subList(0, (int) mid)), arr1, k);\n            }\n        }",
    "        // Write your code here\n        int n = arr1.size();\n        int m = arr2.size();\n        if (n == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (m == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = (int) Math.min(k / 2, n);\n        int j = (int) Math.min(k / 2, m);\n        if (arr1.get(i - 1) > arr2.get(j - 1)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, m)), k - j);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList(i, n)), arr2, k - i);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1 && arr2.size() == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = arr1.size() / 2;\n        int mid2 = arr2.size() / 2;\n        if (arr1.get(mid1) <= arr2.get(mid2)) {\n            if (k <= mid1 + mid2) {\n                return findKth(arr1.subList(0, mid1), arr2, k);\n            } else {\n                return findKth(arr1, arr2.subList(mid2 + 1, arr2.size()), k - mid2 - 1);\n            }\n        } else {\n            if (k <= mid1 + mid2) {\n                return findKth(arr1, arr2.subList(0, mid2), k);\n            } else {\n                return findKth(arr1.subList(mid1 + 1, arr1.size()), arr2, k - mid1 - 1);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int mid1 = (int)Math.min(k/2, arr1.size() - 1);\n        int mid2 = (int)Math.min(k/2, arr2.size() - 1);\n        if (arr1.get(mid1) < arr2.get(mid2)) {\n            return findKth(new ArrayList<Long>(arr1.subList(mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(mid2 + 1, arr2.size())), k - mid2 - 1);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1) {\n            if (arr2.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (k == 1) {\n                return Math.min(arr2.get(1), arr1.get(0));\n            }\n            if (k == 2) {\n                return Math.max(arr2.get(1), arr1.get(0));\n            }\n            if (arr2.get((int)k) > arr1.get(0)) {\n                return arr2.get((int)k);\n            }\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(1, arr2.size())), k - 1);\n        }\n        if (arr2.size() == 1) {\n            if (k == 1) {\n                return Math.min(arr1.get(1), arr2.get(0));\n            }\n            if (k == 2) {\n                return Math.max(arr1.get(1), arr2.get(0));\n            }\n            if (arr1.get((int)k) > arr2.get(0)) {\n                return arr1.get((int)k);\n            }\n            return findKth(new ArrayList<Long>(arr1.subList(1, arr1.size())), arr2, k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(1), arr2.get(1));\n        }\n        if (k == 2) {\n            return Math.max(Math.min(arr1.get(1), arr2.get(1)), Math.max(arr1.get(0), arr2",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (k == arr1.size() + arr2.size() - 1) {\n            return Math.max(arr1.get(arr1.size() - 1), arr2.get(arr2.size() - 1));\n        }\n        long mid1 = arr1.get((int)(k / 2));\n        long mid2 = arr2.get((int)(k / 2));\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)(k / 2), arr1.size())), arr2, k - (k / 2));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)(k / 2), arr2.size())), k - (k / 2));\n        }",
    "        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get((int) i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get((int) j);\n            }\n            j++;\n        }\n        return 0;",
    "        if (k > arr1.size() + arr2.size()) {\n            throw new IllegalArgumentException(\"k is larger than the size of the two arrays\");\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = Math.min((int)Math.ceil(k / 2.0) - 1, arr1.size() - 1);\n        int j = Math.min((int)Math.ceil(k / 2.0) - 1, arr2.size() - 1);\n        if (arr1.get(i) < arr2.get(j)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i + 1, arr1.size())), arr2, k - i - 1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j + 1, arr2.size())), k - j - 1);\n        }",
    "        if(arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if(arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if(k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k/2 ? arr1.get((int)k/2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k/2 ? arr2.get((int)k/2 - 1) : Long.MAX_VALUE;\n        if(mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k/2, arr1.size())), arr2, k - k/2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k/2, arr2.size())), k - k/2);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        // Write your code here\n        return 0;",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n            if (count == k) {\n                if (arr1.get(i) < arr2.get(j)) {\n                    return arr1.get(i);\n                } else {\n                    return arr2.get(j);\n                }\n            }\n        }\n        if (i == arr1.size()) {\n            return arr2.get(j + (int) (k - count));\n        } else {\n            return arr1.get(i + (int) (k - count));\n        }",
    "        if (k > arr1.size() + arr2.size()) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = Math.min(k / 2, arr1.size());\n        long mid2 = Math.min(k / 2, arr2.size());\n        if (arr1.get((int)mid1 - 1) < arr2.get((int)mid2 - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)mid1, arr1.size())), arr2, k - mid1);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2, arr2.size())), k - mid2);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)k / 2 - 1);\n        long mid2 = arr2.get((int)k / 2 - 1);\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k / 2, arr2.size())), k - k / 2);\n        }",
    "        return findKth(arr1, 0, arr2, 0, k);",
    "        // Write your code here\n        long n = arr1.size();\n        long m = arr2.size();\n        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (i < n && j < m) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get((int) i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get((int) j);\n                }\n                j++;\n            }\n        }\n        while (i < n) {\n            count++;\n            if (count == k) {\n                return arr1.get((int) i);\n            }\n            i++;\n        }\n        while (j < m) {\n            count++;\n            if (count == k) {\n                return arr2.get((int) j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1 && arr2.size() == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        long i = Math.min(arr1.size() - 1, k / 2);\n        long j = Math.min(arr2.size() - 1, k / 2);\n        if (arr1.get((int)i) > arr2.get((int)j)) {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)j + 1, arr2.size())), k - j - 1);\n        } else {\n            return findKth(new ArrayList<Long>(arr1.subList((int)i + 1, arr1.size())), arr2, k - i - 1);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1) {\n            if (arr2.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (k == 1) {\n                return Math.min(arr1.get(0), arr2.get(1));\n            }\n            if (k == 2) {\n                return Math.max(arr1.get(0), arr2.get(1));\n            }\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 1) {\n            if (arr1.size() == 1) {\n                return Math.max(arr1.get(0), arr2.get(0));\n            }\n            if (k == 1) {\n                return Math.min(arr1.get(1), arr2.get(0));\n            }\n            if (k == 2) {\n                return Math.max(arr1.get(1), arr2.get(0));\n            }\n            return arr1.get((int)k);\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            }\n            return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n        }\n        if (",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() > arr2.size()) {\n            return findKth(arr2, arr1, k);\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() >= k / 2 ? arr1.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() >= k / 2 ? arr2.get((int)k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)k / 2, arr1.size())), arr2, k - k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)k / 2, arr2.size())), k - k / 2);\n        }",
    "        if (k <= 0) {\n            return -1;\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1 && arr2.size() == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                arr2 = new ArrayList<Long>(arr2.subList((int)mid2, arr2.size()));\n                return findKth(arr1, arr2, k - mid2);\n            } else {\n                arr1 = new ArrayList<Long>(arr1.subList((int)mid1, arr1.size()));\n                return findKth(arr1, arr2, k - mid1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                arr1 = new ArrayList<Long>(arr1.subList(0, (int)mid1));\n                return findKth(arr1, arr2, k);\n            } else {\n                arr2 = new ArrayList<Long>(arr2.subList(0, (int)mid2));\n                return findKth(arr1, arr2, k);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() > (k / 2) ? arr1.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        long mid2 = arr2.size() > (k / 2) ? arr2.get((int) k / 2 - 1) : Long.MAX_VALUE;\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int) k / 2, arr1.size())), arr2, k - (int) k / 2);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int) k / 2, arr2.size())), k - (int) k / 2);\n        }",
    "        return findKth(arr1, arr2, 0, 0, k);",
    "        int i = 0, j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1) {\n            return Math.min(arr1.get(0), arr2.get((int)k - 1));\n        }\n        if (arr2.size() == 1) {\n            return Math.min(arr2.get(0), arr1.get((int)k - 1));\n        }\n        int mid1 = arr1.size() / 2;\n        int mid2 = arr2.size() / 2;\n        if (arr1.get(mid1) < arr2.get(mid2)) {\n            if (k <= mid1 + mid2 + 1) {\n                return findKth(arr1.subList(0, mid1), arr2, k);\n            } else {\n                return findKth(arr1, arr2.subList(mid2 + 1, arr2.size()), k - mid2 - 1);\n            }\n        } else {\n            if (k <= mid1 + mid2 + 1) {\n                return findKth(arr1, arr2.subList(0, mid2), k);\n            } else {\n                return findKth(arr1.subList(mid1 + 1, arr1.size()), arr2, k - mid1 - 1);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k - 1);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        int i = (int)Math.min(k / 2, arr1.size());\n        int j = (int)Math.min(k / 2, arr2.size());\n        if (arr1.get(i - 1) < arr2.get(j - 1)) {\n            return findKth(new ArrayList<Long>(arr1.subList(i, arr1.size())), arr2, k - i);\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList(j, arr2.size())), k - j);\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        if (arr1.size() == 1 && arr2.size() == 1) {\n            return Math.max(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)Math.floor(arr1.size()/2));\n        long mid2 = arr2.get((int)Math.floor(arr2.size()/2));\n        if (mid1 < mid2) {\n            if (k <= arr1.size()/2 + arr2.size()/2) {\n                return findKth(new ArrayList<Long>(arr1.subList((int)Math.floor(arr1.size()/2), arr1.size())), arr2, k - Math.floor(arr1.size()/2));\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.floor(arr2.size()/2) + 1, arr2.size())), k - Math.floor(arr2.size()/2) - 1);\n            }\n        } else {\n            if (k <= arr1.size()/2 + arr2.size()/2) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)Math.floor(arr2.size()/2), arr2.size())), k - Math.floor(arr2.size()/2));\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)Math.floor(arr1.size()/2) + 1, arr1.size())), arr2, k - Math.floor(arr1.size()/2) - 1);\n            }\n        }",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.size() / 2;\n        long mid2 = arr2.size() / 2;\n        if (mid1 + mid2 < k) {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList((int)mid2 + 1, arr2.size())), k - mid2 - 1);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList((int)mid1 + 1, arr1.size())), arr2, k - mid1 - 1);\n            }\n        } else {\n            if (arr1.get((int)mid1) > arr2.get((int)mid2)) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, (int)mid1)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, (int)mid2)), k);\n            }\n        }",
    "        long i = 0;\n        long j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get((int) i) < arr2.get((int) j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n            if (count == k) {\n                if (arr1.get((int) i) < arr2.get((int) j)) {\n                    return arr1.get((int) i);\n                } else {\n                    return arr2.get((int) j);\n                }\n            }\n        }\n        if (i == arr1.size()) {\n            return arr2.get((int) (j + k - count));\n        } else {\n            return arr1.get((int) (i + k - count));\n        }",
    "        // Write your code here.\n        int n = arr1.size();\n        int m = arr2.size();\n        if (n == 0) {\n            return arr2.get((int) k - 1);\n        }\n        if (m == 0) {\n            return arr1.get((int) k - 1);\n        }\n        if (k == 1) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = (n % 2 == 0) ? (arr1.get(n / 2 - 1) + arr1.get(n / 2)) / 2 : arr1.get(n / 2);\n        long mid2 = (m % 2 == 0) ? (arr2.get(m / 2 - 1) + arr2.get(m / 2)) / 2 : arr2.get(m / 2);\n        if (mid1 == mid2) {\n            return mid1;\n        }\n        if (mid1 < mid2) {\n            if (n / 2 + m / 2 + 1 >= k) {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(0, m / 2)), k);\n            } else {\n                return findKth(new ArrayList<Long>(arr1.subList(n / 2, n)), arr2, k - n / 2);\n            }\n        } else {\n            if (n / 2 + m / 2 + 1 >= k) {\n                return findKth(new ArrayList<Long>(arr1.subList(0, n / 2)), arr2, k);\n            } else {\n                return findKth(arr1, new ArrayList<Long>(arr2.subList(m / 2, m)), k - m / 2);\n            }\n        }",
    "        int i = 0;\n        int j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        int i = 0, j = 0;\n        long count = 0;\n        while (i < arr1.size() && j < arr2.size()) {\n            if (arr1.get(i) < arr2.get(j)) {\n                count++;\n                if (count == k) {\n                    return arr1.get(i);\n                }\n                i++;\n            } else {\n                count++;\n                if (count == k) {\n                    return arr2.get(j);\n                }\n                j++;\n            }\n        }\n        while (i < arr1.size()) {\n            count++;\n            if (count == k) {\n                return arr1.get(i);\n            }\n            i++;\n        }\n        while (j < arr2.size()) {\n            count++;\n            if (count == k) {\n                return arr2.get(j);\n            }\n            j++;\n        }\n        return -1;",
    "        // Write your code here\n        return 0;",
    "        if (arr1.size() == 0) {\n            return arr2.get((int)k);\n        }\n        if (arr2.size() == 0) {\n            return arr1.get((int)k);\n        }\n        if (k == 0) {\n            return Math.min(arr1.get(0), arr2.get(0));\n        }\n        long mid1 = arr1.get((int)(k / 2));\n        long mid2 = arr2.get((int)(k / 2));\n        if (mid1 < mid2) {\n            return findKth(new ArrayList<Long>(arr1.subList((int)(k / 2), arr1.size())), arr2, k - (k / 2));\n        } else {\n            return findKth(arr1, new ArrayList<Long>(arr2.subList((int)(k / 2), arr2.size())), k - (k / 2));\n        }"
  ]
}