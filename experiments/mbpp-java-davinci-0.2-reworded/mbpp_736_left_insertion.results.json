{
  "name": "mbpp_736_left_insertion",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            }\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size();\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9bbt34z.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long left = 0;\n        long right = a.size() - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a.get((int) mid) == x) {\n                return mid;\n            } else if (a.get((int) mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189005,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            }\n            if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189005,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // Binary search\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9bbt34z.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long left = 0;\n        long right = a.size() - 1;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0, hi = a.size() - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsa1ochj1.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) == x) {\n                return m;\n            } else if (a.get((int) m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0, hi = a.size() - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfmno3up.java:20)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9bbt34z.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long low = 0;\n        long high = a.size() - 1;\n        long mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size();\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxqmgyxx.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a.get((int)m) >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1, m;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) >= x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        if (a.get(l) < x) {\n            return l + 1;\n        } else {\n            return l;\n        }\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size();\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) >= x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        if (a.size() == 0) {\n            return 0;\n        }\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        if (a.get(l) < x) {\n            return l + 1;\n        } else {\n            return l;\n        }\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) l = m + 1;\n            else r = m;\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189015,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxv9nfd6m.java:20)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) >= x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189016,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprthrsn83.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long left = 0;\n        long right = a.size() - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189017,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189017,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size()-1;\n        while (l <= r) {\n            int m = l + (r-l)/2;\n            if (a.get(m) == x) {\n                return m;\n            }\n            if (a.get(m) > x) {\n                r = m-1;\n            } else {\n                l = m+1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x <= a.get(mid)) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            }\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        if (a.size() == 0) return 0;\n        if (x < a.get(0)) return 0;\n        if (x > a.get(a.size() - 1)) return a.size();\n        int l = 0, r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) l = m + 1;\n            else r = m;\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) == x) {\n                return m;\n            } else if (a.get((int) m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189020,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesaylk_x.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int low = 0;\n        int high = a.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // binary search\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) >= x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189022,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pnwaac2.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // Write - Your - Code\n        int low = 0;\n        int high = a.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) return m;\n            if (a.get(m) > x) r = m - 1;\n            else l = m + 1;\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // binary search\n        int l = 0, r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) >= x) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189023,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb0ohkr3m.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189023,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189023,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptfxw6f9z.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189023,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0xz9uy2.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9bbt34z.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxqmgyxx.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l < r) {\n            long mid = (l + r) / 2;\n            if (a.get((int)mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189025,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzrctq72s.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // Write your code here\n        long low = 0;\n        long high = a.size() - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (a.get((int) mid) == x) {\n                return mid;\n            } else if (a.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            }\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxqmgyxx.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // Write - Your - Code\n        int start = 0;\n        int end = a.size() - 1;\n        int mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return start;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189023,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptfxw6f9z.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) == x) {\n                return m;\n            } else if (a.get((int) m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) >= x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0, r = a.size() - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189021,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // Write - Your - Code\n        int low = 0;\n        int high = a.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long lo = 0;\n        long hi = a.size()-1;\n        while (lo <= hi) {\n            long mid = (lo + hi) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189027,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) == x) {\n                return m;\n            } else if (a.get((int) m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) == x) {\n                return m;\n            } else if (a.get((int) m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189026,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0, hi = a.size() - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfmno3up.java:20)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        if (a.size() == 0) return 0;\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0fwp29d.java:25)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6yl5eu2j.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long lo = 0;\n        long hi = a.size() - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189025,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = l + (r - l) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189017,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb9bbt34z.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189029,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        if (a.size() == 0) return 0;\n        if (a.get(0) >= x) return 0;\n        if (a.get(a.size() - 1) < x) return a.size();\n        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) >= x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189029,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size();\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189029,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        if (x <= a.get(0)) {\n            return 0;\n        }\n        if (x > a.get(n - 1)) {\n            return n;\n        }\n        int lo = 0;\n        int hi = n - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x && a.get(mid + 1) > x) {\n                return mid + 1;\n            } else if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189030,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size();\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int l = 0, r = a.size() - 1;\n        while(l < r) {\n            int mid = (l + r) / 2;\n            if(a.get(mid) >= x) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189030,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp517w5myf.java:26)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxqmgyxx.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxqmgyxx.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189030,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        if (a.size() == 0) return 0;\n        int l = 0, r = a.size() - 1;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) < x) l = mid + 1;\n            else r = mid;\n        }\n        return a.get(l) >= x ? l : l + 1;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int left = 0;\n        int right = a.size() - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189003,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189031,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int lo = 0;\n        int hi = a.size() - 1;\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (a.get(mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189023,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0xz9uy2.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int) m) == x) {\n                return m;\n            } else if (a.get((int) m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189029,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxqmgyxx.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189032,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpftcbq34a.java:23)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long lo = 0;\n        long hi = a.size() - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long l = 0;\n        long r = a.size() - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (a.get((int)m) == x) {\n                return m;\n            } else if (a.get((int)m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0, high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long lo = 0;\n        long hi = a.size() - 1;\n        while (lo <= hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (a.get((int)mid) < x) {\n                lo = mid + 1;\n            } else {\n                hi = mid - 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxqmgyxx.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        if (x <= a.get(0)) {\n            return 0;\n        }\n        if (x > a.get(n - 1)) {\n            return n;\n        }\n        int lo = 0;\n        int hi = n - 1;\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (x <= a.get(mid)) {\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return lo;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long low = 0;\n        long high = a.size() - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (a.get((int)mid) == x) {\n                return mid;\n            } else if (a.get((int)mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0, r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l < r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxqmgyxx.java:24)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        // Write - Your - Code\n        int low = 0;\n        int high = a.size() - 1;\n        int mid = 0;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189022,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189030,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) < x) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int n = a.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int m = (l + r) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) == x) {\n                return mid;\n            } else if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int l = 0;\n        int r = a.size() - 1;\n        while (l <= r) {\n            int m = l + (r - l) / 2;\n            if (a.get(m) == x) {\n                return m;\n            } else if (a.get(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long low = 0, high = a.size() - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (a.get((int) mid) == x) {\n                return mid;\n            } else if (a.get((int) mid) > x) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1667189033,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}