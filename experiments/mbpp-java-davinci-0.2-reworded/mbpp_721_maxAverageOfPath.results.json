{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpmabn2a7a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpwn885khp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpaztiqw64.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // Return the maximum average of all paths\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpynm0wcw2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2.0f * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmp5800n7pk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpq6xipdcu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = cost.get(i).get(j);\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            dp[0][i] += dp[0][i - 1];\n            dp[i][0] += dp[i - 1][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpbpllnaeu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpmabn2a7a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // Return the maximum average of all paths\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpynm0wcw2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpmabn2a7a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpz4t3hl_l.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpq6xipdcu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpwn885khp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpqsyu39sb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpmabn2a7a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1zc1ubo3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpq6xipdcu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpmabn2a7a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpaztiqw64.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        Pair<Long, Long>[][] dp = new Pair[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = Pair.with(0L, 0L);\n            }\n        }\n        dp[0][0] = Pair.with(cost.get(0).get(0), 1L);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                if (i == 0) {\n                    dp[i][j] = Pair.with(dp[i][j - 1].getValue0() + cost.get(i).get(j), dp[i][j - 1].getValue1() + 1);\n                } else if (j == 0) {\n                    dp[i][j] = Pair.with(dp[i - 1][j].getValue0() + cost.get(i).get(j), dp[i - 1][j].getValue1() + 1);\n                } else {\n                    Pair<Long, Long> left = Pair.with(dp[i][j - 1].getValue0() + cost.get(i).get(j), dp[i][j - 1].getValue1() + 1);\n                    Pair<Long, Long> up = Pair.with(dp[i - 1][j].getValue0() + cost.get(i).get(j), dp[i - 1][j].getValue1() + 1);\n                    if (left.getValue0() * up.getValue1() > up.getValue0() * left.getValue1()) {\n                        dp[i][j] = left;\n                    } else {\n                        dp[i][j] = up;\n                    }\n                }\n            }\n        }\n        return (float) dp[n - 1][n - 1].getValue0() / (float) dp[n - 1][n - 1\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "/tmp/tmps6qb4o1a.java:39: error: ']' expected\n        return (float) dp[n - 1][n - 1].getValue0() / (float) dp[n - 1][n - 1\n                                                                             ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        int m = cost.get(0).size();\n        float[][] dp = new float[n][m];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int j = 1; j < m; j++) {\n            dp[0][j] = dp[0][j - 1] + cost.get(0).get(j);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][m - 1] / (n + m - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmppcphnevy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        // Return the maximum average of all possible paths\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpht3472sc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpygjy0swi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpj17l5t90.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = cost.get(i).get(j);\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            dp[0][i] += dp[0][i - 1];\n            dp[i][0] += dp[i - 1][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpbpllnaeu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        // dp[i][j] = max average of path from (0, 0) to (i, j)\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int j = 1; j < n; j++) {\n            dp[0][j] = dp[0][j - 1] + cost.get(0).get(j);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpm6pcn_co.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpmabn2a7a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpq6xipdcu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpqsyu39sb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpqsyu39sb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpmabn2a7a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp5mqr_etl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpj17l5t90.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpj17l5t90.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpaztiqw64.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = cost.get(i).get(j) + Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp890oodcy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = cost.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                if (i == 0) {\n                    dp[i][j] += dp[i][j - 1];\n                } else if (j == 0) {\n                    dp[i][j] += dp[i - 1][j];\n                } else {\n                    dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpq4sm32uv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpaztiqw64.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // We will use dynamic programming to solve this problem.\n        // We will use a 2D array to store the maximum average of a path that ends at a specific cell.\n        // We will use a 2D array to store the number of paths that end at a specific cell.\n        // We will use a 2D array to store the total cost of a path that ends at a specific cell.\n        float[][] maxAverage = new float[cost.size()][cost.size()];\n        int[][] numPaths = new int[cost.size()][cost.size()];\n        long[][] totalCost = new long[cost.size()][cost.size()];\n        // We will initialize the first column and first row.\n        // We will initialize the first column.\n        for (int i = 0; i < cost.size(); i++) {\n            numPaths[i][0] = 1;\n            totalCost[i][0] = cost.get(i).get(0);\n            maxAverage[i][0] = (float)totalCost[i][0] / (float)numPaths[i][0];\n        }\n        // We will initialize the first row.\n        for (int j = 0; j < cost.size(); j++) {\n            numPaths[0][j] = 1;\n            totalCost[0][j] = cost.get(0).get(j);\n            maxAverage[0][j] = (float)totalCost[0][j] / (float)numPaths[0][j];\n        }\n        // We will now iterate through the rest of the matrix.\n        for (int i = 1; i < cost.size(); i++) {\n            for (int j = 1; j < cost.size(); j++) {\n                // We will check the cell above and to the left.\n                // We will check the cell above.\n                if (maxAverage[i - 1][j] > maxAverage[i][j - 1]) {\n                    // We will update the max average, num paths, and total cost.\n                    maxAverage[i][j] = maxAverage[i - 1][j];\n                    numPaths[i][j] = numPaths[i - 1][\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpi6x2jeo_.java:40: error: illegal start of expression\n    }\n    ^\n/tmp/tmpi6x2jeo_.java:41: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpqsyu39sb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpq6xipdcu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpqsyu39sb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpq6xipdcu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmptb1iqv5_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpq6xipdcu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // We can use dynamic programming to solve this problem. Let's define a 2D array dp[i][j] to be the maximum average of a path that ends at cell (i, j).\n        // dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        // The base case is dp[0][0] = cost[0][0]\n        // The answer is dp[n - 1][n - 1]\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1p26uct2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpqsyu39sb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // We use dynamic programming to solve this problem.\n        // We create an array of array lists, where each cell is an array list of tuples.\n        // Each tuple contains the average of the path and the cost of the path.\n        // We start with the first cell and we compute the average of the path and the cost of the path.\n        // Then we move to the right cell and we compute the average of the path and the cost of the path.\n        // We do this for all the cells in the first row.\n        // Then we move to the second row and we compute the average of the path and the cost of the path.\n        // We do this for all the cells in the second row.\n        // We do this for all the rows.\n        // We return the maximum average of the path.\n        ArrayList<ArrayList<ArrayList<Pair<Float, Long>>>> dp = new ArrayList<>();\n        for (int i = 0; i < cost.size(); i++) {\n            dp.add(new ArrayList<>());\n            for (int j = 0; j < cost.get(i).size(); j++) {\n                dp.get(i).add(new ArrayList<>());\n            }\n        }\n        for (int i = 0; i < cost.size(); i++) {\n            for (int j = 0; j < cost.get(i).size(); j++) {\n                if (i == 0 && j == 0) {\n                    dp.get(i).get(j).add(new Pair<Float, Long>(cost.get(i).get(j).floatValue(), cost.get(i).get(j)));\n                } else if (i == 0) {\n                    for (Pair<Float, Long> p : dp.get(i).get(j - 1)) {\n                        dp.get(i).get(j).add(new Pair<Float, Long>((p.getValue1() + cost.get(i).get(j)) / (j + 1), p.getValue1() + cost.get(i).get(j)));\n                    }\n                } else if (j == 0) {\n                    for (Pair<Float, Long> p : dp\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "/tmp/tmp7k5svj7v.java:37: error: ')' expected\n                    for (Pair<Float, Long> p : dp\n                                                 ^\n/tmp/tmp7k5svj7v.java:38: error: illegal start of statement\n    }\n    ^\n/tmp/tmp7k5svj7v.java:39: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpj17l5t90.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // We will use dynamic programming to solve this problem.\n        // We will use a 2D array to store the maximum average of a path that ends at a specific cell.\n        // We will initialize the first row and the first column of the array to the cost of the cell.\n        // We will then iterate over the rest of the cells and update the maximum average of a path that ends at a specific cell.\n        // We will update the maximum average of a path that ends at a specific cell by taking the maximum of the maximum average of a path that ends at the cell above and the maximum average of a path that ends at the cell to the left.\n        // We will then divide the maximum average of a path that ends at a specific cell by the number of cells visited in the path.\n        // We will then return the maximum average of a path that ends at the bottom right cell.\n        // We will use a 2D array to store the maximum average of a path that ends at a specific cell.\n        float[][] maxAverage = new float[cost.size()][cost.size()];\n        // We will initialize the first row and the first column of the array to the cost of the cell.\n        for (int i = 0; i < cost.size(); i++) {\n            maxAverage[0][i] = cost.get(0).get(i);\n            maxAverage[i][0] = cost.get(i).get(0);\n        }\n        // We will then iterate over the rest of the cells and update the maximum average of a path that ends at a specific cell.\n        for (int i = 1; i < cost.size(); i++) {\n            for (int j = 1; j < cost.size(); j++) {\n                // We will update the maximum average of a path that ends at a specific cell by taking the maximum of the maximum average of a path that ends at the cell above and the maximum average of a path that ends at the cell to the left.\n                maxAverage[i][j] = Math.max(maxAverage[i - 1][j], maxAverage[i][j - 1]);\n                // We will then divide the maximum average of a path that ends at a specific cell by the number of cells visited in the path.\n                maxAverage[i][j] /= (i\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "/tmp/tmp4tny_dlh.java:31: error: ')' expected\n                maxAverage[i][j] /= (i\n                                      ^\n/tmp/tmp4tny_dlh.java:33: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpy6f8ymu3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        long dp[][] = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return (float)dp[n-1][n-1] / (2*n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp73snb50x.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp1l_r450f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2.0f * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpy_utnp2n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpq6xipdcu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpkx0i_20m.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // We will use dynamic programming to solve this problem.\n        // Let dp[i][j] be the maximum average of a path that ends at cell (i, j).\n        // Then, dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        // The base case is dp[0][0] = cost[0][0]\n        // The answer is dp[n - 1][n - 1]\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp0cdgamyh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmpqsyu39sb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpgp0obx8o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpznabqk0s.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        // We can use dynamic programming to solve this problem.\n        // Let's define a 2D array dp[i][j] as the maximum average of a path that ends at cell (i, j).\n        // We can easily compute dp[0][0] = cost[0][0]\n        // For the first row, we have dp[i][0] = dp[i - 1][0] + cost[i][0]\n        // For the first column, we have dp[0][j] = dp[0][j - 1] + cost[0][j]\n        // For the rest of the cells, we have dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        // The answer is dp[n - 1][n - 1] / (n * n)\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int j = 1; j < n; j++) {\n            dp[0][j] = dp[0][j - 1] + cost.get(0).get(j);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (n * n);\n    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "/tmp/tmp72qay68n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}