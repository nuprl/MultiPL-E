{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - 1 - i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyem512ku.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int)k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = k; i >= 0; i--) {\n            output.add(input.get((int) i));\n        }\n        for (long i = k + 1; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ijca1zp.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int)k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(k - i - 1));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "/tmp/tmpevisdsk7.java:14: error: incompatible types: possible lossy conversion from long to int\n                output.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - 1 - i + (int) k));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jfdh5fb.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get((int) k - i - 1));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get((int) (k - i - 1)));\n            } else {\n                result.add(input.get((int) i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "/tmp/tmpx2g3tl4l.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - i - 1));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpynsx46z3.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i = 0; i < k; i++) {\n            result.add(input.get((int) i));\n        }\n        Collections.reverse(result);\n        for (long i = k; i < input.size(); i++) {\n            result.add(input.get((int) i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(long i = 0; i < k; i++) {\n            output.add(input.get((int)(k - i - 1)));\n        }\n        for(long i = k; i < input.size(); i++) {\n            output.add(input.get((int)i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - 1 - i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188635,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppd6m6633.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for(int i = 0; i < input.size(); i++) {\n            if(i < k) {\n                result.add(input.get(i));\n            } else {\n                result.add(input.get(input.size() - i + k - 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188635,
      "stdout": "",
      "stderr": "/tmp/tmpz9jlvpa8.java:16: error: incompatible types: possible lossy conversion from long to int\n                result.add(input.get(input.size() - i + k - 1));\n                                                          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - 1 - i + (int) k));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jfdh5fb.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(input.size() - i - 1));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188635,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp25pbelho.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get((int) (k - i - 1)));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188636,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(k - i - 1));\n            } else {\n                result.add(input.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188636,
      "stdout": "",
      "stderr": "/tmp/tmp1bvnlt5i.java:14: error: incompatible types: possible lossy conversion from long to int\n                result.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - 1 - i + (int) k));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jfdh5fb.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(k - i - 1));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "/tmp/tmp8b7vd130.java:14: error: incompatible types: possible lossy conversion from long to int\n                output.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "/tmp/tmp0yc80riw.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for(int i = (int)k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - i + (int) k - 1));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188638,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwq3ml3_1.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(k - i - 1));\n            } else {\n                result.add(input.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188636,
      "stdout": "",
      "stderr": "/tmp/tmp1bvnlt5i.java:14: error: incompatible types: possible lossy conversion from long to int\n                result.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(0, input.get(i));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        int i = 0;\n        for (; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188638,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_acpbqb.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for(int i = (int)k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for(int i = (int)k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get((int) k - i - 1));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            result.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            result.add(input.get((int) i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - 1 - i + (int) k));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9jfdh5fb.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for(int i = (int)k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - i + (int) k - 1));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188638,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwq3ml3_1.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < input.size(); i++) {\n            if(i < k) {\n                output.add(input.get(input.size() - 1 - i));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5vjjn2x3.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(input.size() - 1 - i));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9s30ghr7.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) k - (int) i - 1));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < input.size(); i++) {\n            if(i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpab5cvgx8.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "/tmp/tmpx2g3tl4l.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - 1 - i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188635,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppd6m6633.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - 1 - i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyem512ku.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(i));\n            } else {\n                result.add(input.get(input.size() - i - 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd16g__wr.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get((int) k - i - 1));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "/tmp/tmp0yc80riw.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(k - i - 1));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "/tmp/tmp8b7vd130.java:14: error: incompatible types: possible lossy conversion from long to int\n                output.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(k - i - 1));\n            } else {\n                result.add(input.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188642,
      "stdout": "",
      "stderr": "/tmp/tmpvbhffdsc.java:14: error: incompatible types: possible lossy conversion from long to int\n                result.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(0, input.get(i));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(i));\n            } else {\n                result.add(input.get(input.size() - i - 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd16g__wr.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for(int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - i + (int) k - 1));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188638,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwq3ml3_1.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - i + (int) k - 1));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188638,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwq3ml3_1.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "/tmp/tmp0yc80riw.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(k - i - 1));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "/tmp/tmp8b7vd130.java:14: error: incompatible types: possible lossy conversion from long to int\n                output.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> reversed = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            reversed.add(input.get(i));\n        }\n        Collections.reverse(reversed);\n        for (int i = k; i < input.size(); i++) {\n            reversed.add(input.get(i));\n        }\n        return reversed;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188643,
      "stdout": "",
      "stderr": "/tmp/tmp1sb3379b.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(0, input.get(i));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(k - i - 1));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "/tmp/tmp8b7vd130.java:14: error: incompatible types: possible lossy conversion from long to int\n                output.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(input.size() - 1 - i));\n        }\n        for (int i = k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188643,
      "stdout": "",
      "stderr": "/tmp/tmprgxjogx9.java:15: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(i));\n            } else {\n                result.add(input.get(input.size() - i - 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd16g__wr.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        if (input.size() == 0) {\n            return input;\n        }\n        if (k > input.size()) {\n            k = input.size();\n        }\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188643,
      "stdout": "",
      "stderr": "/tmp/tmpuenccxrz.java:22: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(input.size() - 1 - i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyem512ku.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(k - i - 1));\n        }\n        for (int i = k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188644,
      "stdout": "",
      "stderr": "/tmp/tmpu9dw8eex.java:13: error: incompatible types: possible lossy conversion from long to int\n            output.add(input.get(k - i - 1));\n                                       ^\n/tmp/tmpu9dw8eex.java:15: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(i));\n            } else {\n                result.add(input.get(input.size() - i - 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd16g__wr.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(k - i - 1));\n            } else {\n                result.add(input.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188642,
      "stdout": "",
      "stderr": "/tmp/tmpvbhffdsc.java:14: error: incompatible types: possible lossy conversion from long to int\n                result.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(0, input.get(i));\n            } else {\n                output.add(input.get(i));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get((int) k - i - 1));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "/tmp/tmpx2g3tl4l.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        for (int i = (int)k; i < input.size(); i++) {\n            output.add(input.get(input.size() - i + (int)k - 1));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188645,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8m5e4tww.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(k - i - 1));\n            } else {\n                result.add(input.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188636,
      "stdout": "",
      "stderr": "/tmp/tmp1bvnlt5i.java:14: error: incompatible types: possible lossy conversion from long to int\n                result.add(input.get(k - i - 1));\n                                           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "/tmp/tmpx2g3tl4l.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get((int) k - i - 1));\n        }\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "/tmp/tmpx2g3tl4l.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(k - i - 1));\n        }\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188645,
      "stdout": "",
      "stderr": "/tmp/tmpr9rseqez.java:13: error: incompatible types: possible lossy conversion from long to int\n            result.add(input.get(k - i - 1));\n                                       ^\n/tmp/tmpr9rseqez.java:15: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(i));\n            } else {\n                result.add(input.get(input.size() - i - 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd16g__wr.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "/tmp/tmpx2g3tl4l.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(input.get(i));\n            } else {\n                result.add(input.get(input.size() - i - 1));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd16g__wr.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                result.add(0, input.get(i));\n            } else {\n                result.add(input.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188645,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (long i = 0; i < k; i++) {\n            output.add(input.get((int) (k - i - 1)));\n        }\n        for (long i = k; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188631,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for(int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for(int i = (int)k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188645,
      "stdout": "",
      "stderr": "/tmp/tmp_yyj3z9d.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (long i = k; i >= 0; i--) {\n            output.add(input.get((int) i));\n        }\n        for (long i = k + 1; i < input.size(); i++) {\n            output.add(input.get((int) i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188646,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqy4djpo.java:21)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            output.add(input.get(i));\n        }\n        Collections.reverse(output);\n        for (int i = (int) k; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<Long>();\n        for (int i = 0; i < input.size(); i++) {\n            if (i < k) {\n                output.add(input.get(i));\n            } else {\n                output.add(input.get(input.size() - i - 1));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188632,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpabukp0jk.java:22)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188633,
      "stdout": "",
      "stderr": "/tmp/tmpx2g3tl4l.java:16: error: incompatible types: possible lossy conversion from long to int\n        for (int i = k; i < input.size(); i++) {\n                     ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < k; i++) {\n            result.add(input.get(i));\n        }\n        Collections.reverse(result);\n        for (int i = (int) k; i < input.size(); i++) {\n            result.add(input.get(i));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n",
      "timestamp": 1667188634,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}