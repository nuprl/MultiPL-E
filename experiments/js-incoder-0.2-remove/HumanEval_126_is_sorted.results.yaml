language: js
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] > lst[i-1]){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqvg1v_mz.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqvg1v_mz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i-1]\
    \ == lst[i]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm_bkku4e.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_bkku4e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2) return true;\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] === lst[i-1]) return false;\n  }\n  return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg7vz0ykq.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpg7vz0ykq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i=0; i<lst.length; i++){\n\
    \        if(lst[i] !== lst[i+1]){\n            sorted = false;\n            break;\n\
    \        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpccbdo2by.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpccbdo2by.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2){\n    return true\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n      return false\n\
    \    }\n  }\n  return true\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6wawonsr.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6wawonsr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] > lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq92it7jh.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq92it7jh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tlet sorted = true;\n\tfor(let i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] > lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpubxpgsza.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpubxpgsza.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i=0; i<lst.length-1; i++){\n        if(lst[i]==lst[i+1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1aooing3.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1aooing3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i-1] ==\
    \ lst[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbhl02b1c.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbhl02b1c.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] < lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp51xcoj47.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp51xcoj47.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i=0; i<lst.length-1; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            sorted = false;\n            break;\n\
    \        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcwiy8utd.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcwiy8utd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] > lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph08xbsjq.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph08xbsjq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxbybcgix.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxbybcgix.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted_lst = lst.sort();\n\tfor(var i = 1; i < sorted_lst.length;\
    \ i++){\n\t\tif(sorted_lst[i-1] == sorted_lst[i]){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvr60smnd.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvr60smnd.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] < lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp51xcoj47.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp51xcoj47.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] > lst[i-1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptjla7km8.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptjla7km8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2){\n    return true;\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphxy5h4le.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphxy5h4le.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i=0; i<lst.length-1; i++){\n\
    \    if(lst[i] > lst[i+1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4jnfkrpd.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4jnfkrpd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0n7pthfy.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n7pthfy.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i\
    \ - 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4ukz6klf.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4ukz6klf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tlet sorted = true;\n\tfor(let i = 0; i < lst.length - 1;\
    \ i++){\n\t\tfor(let j = i + 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\
    \t\t\t\tsorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphwsgn_50.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphwsgn_50.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < lst[i - 1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp29xf0nd2.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp29xf0nd2.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length <= 1) return true;\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i-1] == lst[i]) return false;\n  }\n  return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpj5ygee9u.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj5ygee9u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqhjeb0th.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqhjeb0th.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp28f6x1qe.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp28f6x1qe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i\
    \ - 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4ukz6klf.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4ukz6klf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i=0; i<lst.length-1; i++){\n        if(lst[i]==lst[i+1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1aooing3.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1aooing3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2){\n    return true\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n      return false\n\
    \    }\n  }\n  return true\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6wawonsr.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6wawonsr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpav1gwqtg.js:19:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpav1gwqtg.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpta_nh4sv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpta_nh4sv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length <= 1){\n    return lst.length <= 1;\n  }\n\
    \  for(var i = 0; i < lst.length; i++){\n    if(lst[i] != lst[i - 1]){\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe23nm4en.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe23nm4en.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i-1] ==\
    \ lst[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp72htwmv5.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp72htwmv5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] < lst[i-1]){\n\
    \t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwvvubnkf.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwvvubnkf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2){\n    return true;\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphxy5h4le.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphxy5h4le.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length <= 1) return true;\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] > lst[i-1]) return false;\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph2nvusml.js:19:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph2nvusml.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] < lst[i-1]){\n\
    \t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwvvubnkf.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwvvubnkf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptn36wfqg.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptn36wfqg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tlet sorted = true;\n\tfor(let i = 0; i < lst.length - 1;\
    \ i++){\n\t\tif(lst[i] > lst[i+1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn\
    \ sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl1y35l3w.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl1y35l3w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpav1gwqtg.js:19:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpav1gwqtg.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted=true;\n\tfor(var i=0;i<lst.length;i++){\n\t\t\
    for(var j=i+1;j<lst.length;j++){\n\t\t\tif(lst[i]>lst[j]){\n\t\t\t\tsorted=false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_klkr6kq.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_klkr6kq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] < lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp51xcoj47.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp51xcoj47.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i-1] ==\
    \ lst[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp72htwmv5.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp72htwmv5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0n7pthfy.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n7pthfy.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpta_nh4sv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpta_nh4sv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] > lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq92it7jh.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq92it7jh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0n7pthfy.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n7pthfy.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2){\n    return true;\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphxy5h4le.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphxy5h4le.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxbybcgix.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxbybcgix.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] < lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphmfwk4qt.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphmfwk4qt.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i - 1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg1hqpczd.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpg1hqpczd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i=0; i<lst.length-1; i++){\n        if(lst[i]==lst[i+1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1aooing3.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1aooing3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] > lst[i-1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptjla7km8.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptjla7km8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp6p7pdhq.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp6p7pdhq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqhjeb0th.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqhjeb0th.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpta_nh4sv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpta_nh4sv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i=0; i<lst.length-1; i++){\n        if(lst[i]==lst[i+1]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1aooing3.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1aooing3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpta_nh4sv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpta_nh4sv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length <= 1) return true;\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] === lst[i-1]){\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp16nlbv90.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp16nlbv90.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp28f6x1qe.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp28f6x1qe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp28f6x1qe.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp28f6x1qe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tlet sorted = true;\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tfor(let j = i + 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\t\t\
    \t\tsorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi85v9dbh.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpi85v9dbh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted=true;\n\tfor(var i=0;i<lst.length;i++){\n\t\t\
    if(lst[i]!=lst[i+1]){\n\t\t\tsorted=false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8zu6kr0f.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8zu6kr0f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted_lst = lst.sort();\n\tfor(var i = 1; i < sorted_lst.length;\
    \ i++){\n\t\tif(sorted_lst[i-1] == sorted_lst[i]){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvr60smnd.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvr60smnd.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i-1]\
    \ == lst[i]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm_bkku4e.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_bkku4e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i=0; i<lst.length-1; i++){\n\t\tif(lst[i]==lst[i+1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp66grj8dj.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp66grj8dj.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5j5iztle.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j5iztle.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2){\n    return true;\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    if(lst[i] === lst[i - 1]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6l1a7ag4.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6l1a7ag4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i-1] ===\
    \ lst[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvzry92ro.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvzry92ro.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i-1] ==\
    \ lst[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp72htwmv5.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp72htwmv5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptn36wfqg.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptn36wfqg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp6p7pdhq.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp6p7pdhq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < lst[i-1]) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7ecin8cy.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ecin8cy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] > lst[i-1]){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqvg1v_mz.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqvg1v_mz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length <= 1) return true;\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] === lst[i-1]){\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp16nlbv90.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp16nlbv90.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5j5iztle.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j5iztle.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i-1] ==\
    \ lst[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp72htwmv5.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp72htwmv5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] < lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphmfwk4qt.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphmfwk4qt.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i-1]\
    \ == lst[i]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm_bkku4e.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_bkku4e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i-1] ==\
    \ lst[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp72htwmv5.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp72htwmv5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] > lst[i-1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptjla7km8.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptjla7km8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i-1] ==\
    \ lst[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbhl02b1c.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbhl02b1c.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpta_nh4sv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpta_nh4sv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0n7pthfy.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n7pthfy.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i-1]\
    \ == lst[i]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm_bkku4e.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_bkku4e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    var prev = 0;\n    for(var i =\
    \ 1; i < lst.length; i++){\n        if(lst[i] < lst[prev]){\n            sorted\
    \ = false;\n            break;\n        }\n        prev = i;\n    }\n    return\
    \ sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxaz4_zha.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxaz4_zha.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted=true;\n\tfor(var i=0;i<lst.length;i++){\n\t\t\
    if(!is_sorted([lst[i]])){\n\t\t\tsorted=false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ sorted;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxynjtk7l.js:8\n\t\tif(!is_sorted([lst[i]])){\n\t\t^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at is_sorted (/tmp/tmpxynjtk7l.js:8:3)\n\
    \    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n\
    \    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n\
    \    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n\
    \    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n\
    \    at is_sorted (/tmp/tmpxynjtk7l.js:8:7)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp28f6x1qe.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp28f6x1qe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i-1]\
    \ == lst[i]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nvar lst = [1,1,2,3,4,4,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu1kvkpg_.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpu1kvkpg_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2){\n    return true;\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphxy5h4le.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphxy5h4le.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted_lst = lst.sort();\n\tvar unique_nums = sorted_lst.filter(function(elem,\
    \ index, self) {\n\t\treturn index == self.indexOf(elem);\n\t});\n\treturn unique_nums.length\
    \ == lst.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb8otr_gb.js:19:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpb8otr_gb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i=0; i<lst.length; i++){\n\t\
    \tif(lst[i] != lst[i+1]){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa8pd3t8w.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa8pd3t8w.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpta_nh4sv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpta_nh4sv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2){\n    return true\n  }\n  for(var i =\
    \ 1; i < lst.length; i++){\n    if(lst[i] === lst[i-1]){\n      return false\n\
    \    }\n  }\n  return true\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6wawonsr.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6wawonsr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] > lst[i-1]){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqvg1v_mz.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqvg1v_mz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpta_nh4sv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpta_nh4sv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i-1]\
    \ == lst[i]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm_bkku4e.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_bkku4e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] < lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphmfwk4qt.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphmfwk4qt.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i-1] ==\
    \ lst[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp72htwmv5.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp72htwmv5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i=0; i<lst.length; i++){\n\
    \        for(var j=i+1; j<lst.length; j++){\n            if(lst[i]>lst[j]){\n\
    \                sorted = false;\n                break;\n            }\n    \
    \    }\n        if(!sorted){\n            break;\n        }\n    }\n    return\
    \ sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpydxgtzg_.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpydxgtzg_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2) return true;\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] < lst[i-1]) return false;\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp94ieh3zk.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp94ieh3zk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp28f6x1qe.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp28f6x1qe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] < lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphmfwk4qt.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphmfwk4qt.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] < lst[i-1])\
    \ return false;\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptnoa_ctc.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptnoa_ctc.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i-1] ==\
    \ lst[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp72htwmv5.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp72htwmv5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i\
    \ - 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4ukz6klf.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4ukz6klf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  if(lst.length < 2) return true;\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] === lst[i-1]) return false;\n  }\n  return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg7vz0ykq.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpg7vz0ykq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < lst[i-1]) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7ecin8cy.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ecin8cy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuep8ke35.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuep8ke35.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted=true;\n\tfor(var i=0;i<lst.length;i++){\n\t\t\
    if(!is_sorted(lst,i)){\n\t\t\tsorted=false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpz2y759cz.js:6\n\tvar sorted=true;\n\t           ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at is_sorted (/tmp/tmpz2y759cz.js:6:13)\n\
    \    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n\
    \    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n\
    \    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n\
    \    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n\
    \    at is_sorted (/tmp/tmpz2y759cz.js:8:7)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqhjeb0th.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqhjeb0th.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i=0; i<lst.length-1; i++){\n\
    \t\tif(lst[i]>lst[i+1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptv4s38pn.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptv4s38pn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] > lst[i-1]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptjla7km8.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptjla7km8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] > lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq92it7jh.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq92it7jh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5j5iztle.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j5iztle.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] > lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq92it7jh.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq92it7jh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] > lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq92it7jh.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq92it7jh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i-1]\
    \ == lst[i]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm_bkku4e.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_bkku4e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp28f6x1qe.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp28f6x1qe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp28f6x1qe.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp28f6x1qe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted=true;\n\tfor(var i=0;i<lst.length;i++){\n\t\t\
    if(lst[i]!=lst[i+1]){\n\t\t\tsorted=false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8zu6kr0f.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8zu6kr0f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5j5iztle.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j5iztle.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < lst[i-1])\
    \ return false;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz7aib8mz.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz7aib8mz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] > lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph08xbsjq.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph08xbsjq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tlet sorted = true;\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tfor(let j = i + 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\t\t\
    \t\tsorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi85v9dbh.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpi85v9dbh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpta_nh4sv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpta_nh4sv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] > lst[i-1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9vatz971.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vatz971.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxt780wnt.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxt780wnt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ === lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptm8y7bci.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm8y7bci.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ > lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nvar lst = [1,2,2,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0__9b5j3.js:14\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\
    \t\tif(lst[i] < lst[i-1]){\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqhjeb0th.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqhjeb0th.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] < lst[i - 1]){\n            sorted = false;\n     \
    \       break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8frktas1.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8frktas1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n    var sorted = true;\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] > lst[i-1]){\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3n3kcha.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3n3kcha.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977468
- exit_code: 1
  program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\nfunction\
    \ is_sorted(lst){\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] < lst[i-1])\
    \ return false;\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptnoa_ctc.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptnoa_ctc.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977469
