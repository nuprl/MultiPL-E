name: HumanEval_30_get_positive
language: js
results:
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){return x>0;});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \  var positive = [];\n  for(var i=0;i<l.length;i++){\n    if(l[i] > 0){\n   \
    \   positive.push(l[i]);\n    }\n  }\n  return positive;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \  var positive = [];\n  for(var i=0; i<l.length; i++){\n    if(l[i] > 0){\n \
    \     positive.push(l[i]);\n    }\n  }\n  return positive;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){return x>0;});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \  var positive = [];\n  for(var i=0;i<l.length;i++){\n    if(l[i]>0){\n     \
    \ positive.push(l[i]);\n    }\n  }\n  return positive;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \  var positive = [];\n  for(var i=0;i<l.length;i++){\n    if(l[i]>0){\n     \
    \ positive.push(l[i]);\n    }\n  }\n  return positive;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){return x>0;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){return x>0;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){return x>0;});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){return x>0;});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \  var positive = [];\n  for(var i=0;i<l.length;i++){\n    if(l[i] > 0){\n   \
    \   positive.push(l[i]);\n    }\n  }\n  return positive;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \  var positive = [];\n  for(var i=0;i<l.length;i++){\n    if(l[i]>0){\n     \
    \ positive.push(l[i]);\n    }\n  }\n  return positive;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){return x>0;});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \  var positive = [];\n  for(var i=0;i<l.length;i++){\n    if(l[i]>0){\n     \
    \ positive.push(l[i]);\n    }\n  }\n  return positive;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){return x>0;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \  var positive = [];\n  for(var i=0;i<l.length;i++){\n    if(l[i]>0){\n     \
    \ positive.push(l[i]);\n    }\n  }\n  return positive;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1,\
    \ -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    return l.filter(function(x){\n        return x > 0;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n\
    \  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
    \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] >\
    \ 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]>0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return only positive numbers in the list.\nfunction get_positive(l){\n\
    \    var positive = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i] > 0){\n\
    \            positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
    \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
