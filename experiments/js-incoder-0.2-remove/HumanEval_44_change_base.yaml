name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
  \ base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["    var r = \"\";\n    var sign = \"\";\n    if(x<0){\n        sign\
    \ = \"-\";\n        x = -x;\n    }\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x / base);\n    }\n    return sign + r;\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m\
    \ >= 10){\n        r = m%10 + r + String(base);\n        m = Math.floor(m/10);\n\
    \    }\n    r = m + r;\n    return sign*r;\n}\n", "    var s = \"\" + x;\n   \
    \ var n = s.length;\n    var digits = Math.log(n) / Math.log(base);\n    var res\
    \ = \"\";\n    for(var i = 0; i < digits; i++){\n        var index = parseInt(s.charAt(s.length\
    \ - i - 1));\n        var digit = parseInt(s.charAt(s.length - i - 1));\n    \
    \    var new_digit = digit * Math.pow(base, digits);\n        res += new_digit;\n\
    \    }\n    return res;\n}\n", "\tvar bases = {\n\t\t'0': '0',\n\t\t'1': '1',\n\
    \t\t'2': '10',\n\t\t'3': '11',\n\t\t'4': '12',\n\t\t'5': '13',\n\t\t'6': '14',\n\
    \t\t'7': '15',\n\t\t'8': '16',\n\t\t'9': '17',\n\t\t'10': '10',\n\t\t'11': '11',\n\
    \t\t'12': '12',\n\t\t'13': '13',\n\t\t'14': '14',\n\t\t'15': '15',\n\t\t'16':\
    \ '16',\n\t\t'17': '17',\n\t\t'18': '18',\n\t\t'19': '19',\n\t\t'20': '20',\n\t\
    \t'21': '21',\n\t\t'22': '22',\n\t\t'23': '23',\n\t\t'24': '24',\n\t\t'25': '25',\n\
    \t\t'26': '26',\n\t\t'27': '27',\n\t\t'28': '28',\n\t\t'29': '29',\n\t\t'30':\
    \ '30',\n\t\t'31': '31',\n\t\t'32': '32',\n\t\t'33': '33',\n\t\t'34': '34',\n\t\
    \t'35': '35',\n\t\t'36': '36',\n\t\t'37': '37',\n\t\t'38': '38',\n\t\t'39': '39',\n\
    \t\t'40': '40',\n\t\t'41': '41',\n\t\t'42': '42',\n\t\t'43': '43',\n\t\t'44':\
    \ '44',\n\t\t'45': '45',\n\t\t'46': '46',\n\t\t'47': '47',\n\t\t'48': '48',\n\t\
    \t'49': '49',\n\t\t'50': '50',\n\t\t'51': '51',\n\t\t'52': '52',\n\t\t'53': '53',\n\
    \t\t'54': '54',\n\t\t'55': '55',\n\t\t'56': '56',\n\t\t'57': '57',\n\t\t'58':\
    \ '58',\n\t\t'59': '59',\n\t\t'60': '60',\n\t\t'61': '61',\n\t\t'62': '62',\n\t\
    \t'63': '63',\n\t\t'64': '64',\n\t\t'65': '65',\n\t\t'66': '66',\n\t\t'67': '67',\n\
    \t\t'68': '68',\n\t\t'69': '69',\n\t\t'70': '70',\n\t\t'71': '71',\n\t\t'72':\
    \ '72',\n\t\t'73': '73',\n\t\t'74': '74',\n\t\t'75': '75',\n\t\t'76': '76',\n\t\
    \t'77': '77',\n\t\t'78': '78',\n\t\t'79': '79',\n\t\t'80': '80',\n\t\t'81': '81',\n\
    \t\t'82': '82',\n\t\t'83': '83',\n\t\t'84': '84',\n\t\t'", "    var s = \"\" +\
    \ x;\n    var l = s.length;\n    var n = 0;\n    var digit = 0;\n    while(n <\
    \ l){\n        digit = s.charCodeAt(n++) - \"0\".charCodeAt(0);\n        if(digit\
    \ >= base){\n            digit -= base;\n            while(digit < 0){\n     \
    \           s = \"0\" + s;\n                digit++;\n            }\n        \
    \    break;\n        }\n        s += \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    .charAt(digit);\n    }\n    return s;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string =\
    \ \"0123456789ABCDEF\";\n\t\n\tvar base_index = bases.indexOf(base);\n\tvar base_reversed_index\
    \ = bases_reversed.indexOf(base);\n\t\n\tvar base_reversed_string = bases_reversed_string.substr(base_reversed_index,\
    \ 1);\n\t\n\tvar x = x.toString();\n\t\n\tvar x_array = x.split(\"\");\n\t\n\t\
    var x_array_reversed = x_array.map(function(x){\n\t\treturn base_reversed_string[base_reversed_index-x];\n\
    \t});\n\t\n\treturn x_array_reversed.join(\"\");\n}\n", "    var s = \"\" + x;\n\
    \    var n = s.length;\n    var c = 0;\n    while(n < base){\n        s += \"\
    0\";\n        n++;\n    }\n    while(n > base){\n        s = s.substring(0, s.length\
    \ - 1);\n        n--;\n    }\n    return s;\n}\n", "    var r = \"\";\n    var\
    \ sign = \"\";\n    var m = Math.pow(base,x);\n    var d = Math.floor(m/Math.pow(base,base));\n\
    \    var r = m%Math.pow(base,base);\n    var i = 1;\n    while(i<d){\n       \
    \ r = r + base;\n        i++;\n    }\n    sign = sign+(x<0?\"-\":\"+\");\n   \
    \ return sign+r;\n}\n", "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\"\
    ;\n    x = Math.abs(x);\n    base = base || 10;\n    while (x !== 0){\n      \
    \  r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n    }\n\
    \    return sign + r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_length\
    \ = bases.length;\n\tvar result = '';\n\t\n\tfor(var i = 0; i < bases_length;\
    \ i++){\n\t\tresult += bases[i] * Math.pow(base,bases_length-i-1);\n\t}\n\t\n\t\
    return Math.round(x/Math.pow(base,bases_length-1)) * Math.pow(base,bases_length-1)\
    \ + result;\n}\n", "    var r = \"\";\n    var i;\n    for(i = base; i >= 2; i--){\n\
    \        r = base_convert(x, i, base) + r;\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m >=\
    \ 10){\n        r = m%10 + r + String(base);\n        m = Math.floor(m*base/10);\n\
    \    }\n    r = m%10 + r;\n    return sign*r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_length = bases.length;\n\tvar bases_index = bases.indexOf(base);\n\
    \tvar bases_value = bases[bases_index];\n\tvar bases_power = bases_value.toString().length\
    \ - 1;\n\tvar bases_power = Math.pow(bases_value, bases_power);\n\tvar bases_value\
    \ = bases_value.toString().substr(0, bases_power);\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar bases_value\
    \ = bases_value.replace(/^0+/, '');\n\tvar bases_value = bases_value.replace(/0$/,\
    \ '');\n\tvar bases_value = bases_value.replace(/\\.$/, '');\n\tvar ", "\tvar\
    \ bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar base0 = bases[0];\n\tvar base1 = bases[1];\n\
    \tvar base2 = bases[2];\n\tvar base3 = bases[3];\n\tvar base4 = bases[4];\n\t\
    var base5 = bases[5];\n\tvar base6 = bases[6];\n\tvar base7 = bases[7];\n\tvar\
    \ base8 = bases[8];\n\tvar base9 = bases[9];\n\tvar base10 = bases[10];\n\tvar\
    \ base11 = bases[11];\n\tvar base12 = bases[12];\n\tvar base13 = bases[13];\n\t\
    var base14 = bases[14];\n\tvar base15 = bases[15];\n\tvar base16 = bases[16];\n\
    \tvar base17 = bases[17];\n\tvar base18 = bases[18];\n\tvar base19 = bases[19];\n\
    \tvar base20 = bases[20];\n\tvar base21 = bases[21];\n\tvar base22 = bases[22];\n\
    \tvar base23 = bases[23];\n\tvar base24 = bases[24];\n\tvar base25 = bases[25];\n\
    \tvar base26 = bases[26];\n\tvar base27 = bases[27];\n\tvar base28 = bases[28];\n\
    \tvar base29 = bases[29];\n\tvar base30 = bases[30];\n\tvar base31 = bases[31];\n\
    \tvar base32 = bases[32];\n\tvar base33 = bases[33];\n\tvar base34 = bases[34];\n\
    \tvar base35 = bases[35];\n\tvar base36 = bases[36];\n\tvar base37 = bases[37];\n\
    \tvar base38 = bases[38];\n\tvar base39 = bases[39];\n\tvar base40 = bases[40];\n\
    \tvar base41 = bases[41];\n\tvar base42 = bases[42];\n\tvar base43 = bases[43];\n\
    \tvar base44 = bases[44];\n\tvar base45 = bases[45];\n\tvar base46 = bases[46];\n\
    \tvar base47 = bases[47];\n\tvar base48 = bases[48];\n\tvar base49 = bases[49];\n\
    \tvar base50 = bases[50];\n\tvar base51 = bases[51];\n\tvar base52 = bases[52];\n\
    \tvar base53 = bases[53];\n\tvar base54 = bases[54];\n\tvar base55 = bases[55];\n\
    \tvar base56 = bases[56];\n\tvar base57", "\tvar digits = x.toString().split('');\n\
    \tvar new_digits = [];\n\tfor(var i = 0; i < digits.length; i++){\n\t\tnew_digits.push(parseInt(digits[i],\
    \ base));\n\t}\n\treturn new_digits.reverse().join('');\n}\n", "\tvar bases =\
    \ {\n\t\t2:\"binary\",\n\t\t8:\"octal\",\n\t\t16:\"hexadecimal\"\n\t};\n\tvar\
    \ base_name = bases[base];\n\t\n\tvar based_x = x.toString(base);\n\tvar based_x_length\
    \ = based_x.length;\n\tvar based_x_remainder = based_x.substr(based_x_length-1);\n\
    \tvar based_x_remainder_length = based_x_remainder.length;\n\t\n\tvar based_x_quotient\
    \ = based_x.substr(0, based_x_length-1);\n\tvar based_x_quotient_length = based_x_quotient.length;\n\
    \t\n\tvar based_x_quotient_remainder = based_x.substr(based_x_length-1, based_x_length);\n\
    \tvar based_x_quotient_remainder_length = based_x_quotient_remainder.length;\n\
    \t\n\tvar based_x_quotient_quotient = based_x.substr(0, based_x_length-2);\n\t\
    var based_x_quotient_quotient_length = based_x_quotient_quotient.length;\n\t\n\
    \tvar based_x_quotient_quotient_remainder = based_x.substr(based_x_length-2, based_x_length);\n\
    \tvar based_x_quotient_quotient_remainder_length = based_x_quotient_quotient_remainder.length;\n\
    \t\n\tvar based_x_quotient_quotient_quotient = based_x.substr(0, based_x_length-3);\
    \ \n\tvar based_x_quotient_quotient_quotient_length = based_x_quotient_quotient_quotient.length;\n\
    \t\n\tvar based_x_quotient_quotient_quotient_remainder = based_x.substr(based_x_length-3,\
    \ based_x_length);\n\tvar based_x_quotient_quotient_quotient_remainder_length\
    \ = based_x_quotient_quotient_quotient_remainder.length;\n\t\n\tvar based_x_quotient_quotient_quotient_quotient\
    \ = based_x.substr(0, based_x_length-4); \n\tvar based_x_quotient_quotient_quotient_quotient_length\
    \ = based_x_quotient_quotient_quotient_quotient.length;\n\t\n\tvar based_x_quotient_quotient_quotient_remainder\
    \ = based_x.substr(based_x_length-4, based_x_length);\n\tvar based_x_quotient_quotient_quotient_remainder_length\
    \ = based_x_quotient_quotient_quotient_remainder.length;\n\t\n\tvar based_x_quotient_quotient_quotient_quotient\
    \ = based_x.substr(0, based_x_length-5); \n\tvar based_x_quotient_quotient_quotient_quotient_length\
    \ = based_x_quotient_quotient_quotient_quotient.length;\n\t", "    var r = \"\"\
    ;\n    var sign = 1;\n    var m = Math.pow(base,x);\n    var n = x;\n    while(n>0){\n\
    \        r = m%base+r; \n        sign *= -1; \n        n = Math.floor(n/base);\n\
    \    }\n    return r+sign;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\tvar base11 = bases[base-10]\n\tvar base12 = bases[base-11]\n\
    \tvar base13 = bases[base-12]\n\tvar base14 = bases[base-13]\n\tvar base15 = bases[base-14]\n\
    \tvar base16 = bases[base-15]\n\tvar base17 = bases[base-16]\n\tvar base18 = bases[base-17]\n\
    \tvar base19 = bases[base-18]\n\tvar base20 = bases[base-19]\n\tvar base21 = bases[base-20]\n\
    \tvar base22 = bases[base-21]\n\tvar base23 = bases[base-22]\n\tvar base24 = bases[base-23]\n\
    \tvar base25 = bases[base-24]\n\tvar base26 = bases[base-25]\n\tvar base27 = bases[base-26]\n\
    \tvar base28 = bases[base-27]\n\tvar base29 = bases[base-28]\n\tvar base30 = bases[base-29]\n\
    \tvar base31 = bases[base-30]\n\tvar base32 = bases[base-31]\n\tvar base33 = bases[base-32]\n\
    \tvar base34 = bases[base-33]\n\tvar base35 = bases[base-34]\n\tvar base36 = bases[base-35]\n\
    \tvar base37 = bases[base-36]\n\tvar base38 = bases[base-37]\n\tvar base39 = bases[base-38]\n\
    \tvar base40 = bases[base-39]\n\tvar base41 = bases[base-40]\n\tvar base42 = bases[base-41]\n\
    \tvar base43 = bases[base-42]\n\tvar base44 = bases[base-43]\n\tvar base45 = bases[base-44]\n\
    \tvar base46 = bases[base-45]\n\tvar base47 = bases[base-46]\n\tvar base48 = bases[base-47]\n\
    \tvar base49 = bases[base-48]\n\tvar base50 = bases[base-49]\n\tvar base51 = bases[base-50]\n\
    \tvar base52 = bases[base-51]", "    var r = \"\";\n    var sign = \"\";\n   \
    \ var m = Math.pow(base,x);\n    var n = x;\n    while(n>0){\n        r = n%base\
    \ + r;\n        n = Math.floor(n/base);\n    }\n    if(n < 0){\n        r = Math.abs(r)\
    \ + sign;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n\
    \    var m = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10 + r + String(base);\n\
    \        m = Math.floor(m/10);\n    }\n    if(m>0){\n        r = m%10 + r + String(base);\n\
    \    }\n    if(r.length == 1){\n        r = \"0\" + r;\n    }\n    return sign*r;\n\
    }\n", "\tvar bases = {\n\t\t'binary' : 1,\n\t\t'octal' : 8,\n\t\t'decimal' : 10,\n\
    \t\t'hexadecimal' : 16\n\t};\n\tvar base_name = bases[base];\n\tvar result = '';\n\
    \twhile (x > 0){\n\t\tvar remainder = x % base_name;\n\t\tx = parseInt(x/base_name,\
    \ 10);\n\t\tresult = base_name + base_name + result;\n\t}\n\treturn result;\n\
    }\n", "\tvar bases = {\n\t\t2:\"binary\",\n\t\t8:\"octal\",\n\t\t16:\"hexadecimal\"\
    \n\t};\n\tvar base_name = bases[base];\n\tif(!base_name){\n\t\tthrow(\"Invalid\
    \ base\");\n\t}\n\tvar num = x.toString();\n\tvar res = \"\";\n\tfor(var i = num.length-1;\
    \ i >= 0; i--){\n\t\tvar c = num.charAt(i);\n\t\tif(c == \"-\"){\n\t\t\tres =\
    \ base_name;\n\t\t\tbreak;\n\t\t}\n\t\tres = c + res;\n\t}\n\treturn res;\n}\n",
  "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n    while(m\
    \ >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    if(m>0){\n        r = m%10 + r + String(m%10);\n    }\n    sign =\
    \ x < 0 ? \"-\" : \"\";\n    return sign + r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\t\n\tvar base_index = bases.indexOf(base);\n\
    \tvar base_reversed_index = bases_reversed.indexOf(base);\n\t\n\tvar result =\
    \ \"\";\n\t\n\twhile(base_index >= 0){\n\t\tresult += x.toString().charAt(base_index);\n\
    \t\tx = parseInt(x.toString().charAt(base_index), base);\n\t\tbase_index = base_index\
    \ - 1;\n\t}\n\t\n\twhile(base_reversed_index >= 0){\n\t\tresult += x.toString().charAt(base_reversed_index);\n\
    \t\tx = parseInt(x.toString().charAt(base_reversed_index), base);\n\t\tbase_reversed_index\
    \ = base_reversed_index - 1;\n\t}\n\t\n\treturn result;\n}\n", "\tvar bases =\
    \ [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\t\n\
    \tbase = bases[base];\n\t\n\tx = x.toString();\n\t\n\tvar n = x.length;\n\t\n\t\
    for(var i = 0; i < n; i++){\n\t\tif(x[i] === '0'){\n\t\t\tx[i] = base;\n\t\t}\n\
    \t\telse{\n\t\t\tx[i] = bases_reversed[base];\n\t\t\tbases_reversed[base] = base;\n\
    \t\t\tbase--;\n\t\t}\n\t}\n\t\n\treturn x.toString();\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string =\
    \ [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_base_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_base_reversed_string\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed_string\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed_string_base\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed_string_base_reversed\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed_string_",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_string = \"\";\n\t\n\tfor(var i = 0; i < bases.length; i++){\n\
    \t\tif(bases[i] == base){\n\t\t\tbases_reversed_string += bases[i];\n\t\t}\n\t\
    \telse{\n\t\t\tbases_reversed_string += bases_reversed[i];\n\t\t}\n\t}\n\t\n\t\
    var bases_reversed_number = parseInt(bases_reversed_string);\n\tvar bases_reversed_number_string\
    \ = \"\";\n\t\n\tfor(var i = 0; i < bases_reversed_number; i++){\n\t\tbases_reversed_number_string\
    \ += x;\n\t}\n\t\n\treturn bases_reversed_number_string;\n}\n", "    var r = \"\
    \";\n    while(x>0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar bases = ['', 'K', 'M', 'G', 'T', 'P', 'E',\
    \ 'Z', 'Y'];\n\tvar ret = '';\n\tvar i = 0;\n\tvar len = bases.length;\n\twhile(i\
    \ < len){\n\t\tret = x + bases[i++] + ret;\n\t}\n\treturn ret;\n}\n", "\tvar bases\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar base10 = bases[base];\n\tvar base2 = bases[base-1];\n\
    \tvar base3 = bases[base-2];\n\tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\
    \tvar base6 = bases[base-5]\n\tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\
    \tvar base9 = bases[base-8]\n\tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar ", "\tvar bases = {\n\t\t'0': '0',\n\t\t'1': '1',\n\
    \t\t'2': '10',\n\t\t'3': '11',\n\t\t'4': '12',\n\t\t'5': '13',\n\t\t'6': '14',\n\
    \t\t'7': '15',\n\t\t'8': '16',\n\t\t'9': '17',\n\t\t'10': '10',\n\t\t'11': '11',\n\
    \t\t'12': '12',\n\t\t'13': '13',\n\t\t'14': '14',\n\t\t'15': '15',\n\t\t'16':\
    \ '16',\n\t\t'17': '17',\n\t\t'18': '18',\n\t\t'19': '19',\n\t\t'20': '20',\n\t\
    \t'21': '21',\n\t\t'22': '22',\n\t\t'23': '23',\n\t\t'24': '24',\n\t\t'25': '25',\n\
    \t\t'26': '26',\n\t\t'27': '27',\n\t\t'28': '28',\n\t\t'29': '29',\n\t\t'30':\
    \ '30',\n\t\t'31': '31',\n\t\t'32': '32',\n\t\t'33': '33',\n\t\t'34': '34',\n\t\
    \t'35': '35',\n\t\t'36': '36',\n\t\t'37': '37',\n\t\t'38': '38',\n\t\t'39': '39',\n\
    \t\t'40': '40',\n\t\t'41': '41',\n\t\t'42': '42',\n\t\t'43': '43',\n\t\t'44':\
    \ '44',\n\t\t'45': '45',\n\t\t'46': '46',\n\t\t'47': '47',\n\t\t'48': '48',\n\t\
    \t'49': '49',\n\t\t'50': '50',\n\t\t'51': '51',\n\t\t'52': '52',\n\t\t'53': '53',\n\
    \t\t'54': '54',\n\t\t'55': '55',\n\t\t'56': '56',\n\t\t'57': '57',\n\t\t'58':\
    \ '58',\n\t\t'59': '59',\n\t\t'60': '60',\n\t\t'61': '61',\n\t\t'62': '62',\n\t\
    \t'63': '63',\n\t\t'64': '64',\n\t\t'65': '65',\n\t\t'66': '66',\n\t\t'67': '67',\n\
    \t\t'68': '68',\n\t\t'69': '69',\n\t\t'70': '70',\n\t\t'71': '71',\n\t\t'72':\
    \ '72',\n\t\t'73': '73',\n\t\t'74': '74',\n\t\t'75': '75',\n\t\t'76': '76',\n\t\
    \t'77': '77',\n\t\t'78': '78',\n\t\t'79': '79',\n\t\t'80': '80',\n\t\t'81': '81',\n\
    \t\t'82': '82',\n\t\t'83': '83',\n\t\t'84': '84',\n\t\t'", "    var r = \"\";\n\
    \    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n     \
    \   r = m%10 + r + String(base);\n        m = Math.floor(m/10);\n    }\n    if(m\
    \ != 0){\n        r = m%10 + r + String(base);\n    }\n    return sign*r;\n}\n",
  "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n    var\
    \ d = Math.floor(m/Math.pow(base,base));\n    var r = m%Math.pow(base,base);\n\
    \    while(d>0){\n        r = r*base+(x%base);\n        x = Math.floor(x/base);\n\
    \        d = Math.floor(m/Math.pow(base,base));\n    }\n    if(x < 0){\n     \
    \   sign = \"-\";\n        x = Math.abs(x);\n    }\n    r = sign+r+\"\";\n   \
    \ return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_string = [\"\",\"K\",\"M\",\"G\",\"T\"\
    ,\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed = [\"\",\"K\",\"M\",\"\
    G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed = [\"\
    \",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = ", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base] +\
    \ r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar bases\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\t\
    var bases_reversed_string = \"\";\n\t\n\tfor(var i = 0; i < bases.length; i++){\n\
    \t\tbases_reversed_string += bases[bases_reversed[i]];\n\t}\n\t\n\tx = x.toString();\n\
    \t\n\tfor(var i = 0; i < x.length; i++){\n\t\tif(x[i] >= bases_reversed_string.length){\n\
    \t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(x[i] < bases_reversed_string){\n\t\t\tx = x.replace(x[i],\
    \ bases_reversed_string.charAt(x[i]));\n\t\t}\n\t}\n\t\n\treturn x;\n}\n", " \
    \   var r = \"\";\n    var negative = false;\n    if (x < 0){\n        negative\
    \ = true;\n        x = -x;\n    }\n    var x_str = x.toString();\n    var x_len\
    \ = x_str.length;\n    var x_pos = x_str.indexOf(\".\");\n    var x_num_len =\
    \ x_len - x_pos;\n    var x_num_str = x_str.substr(x_pos+1, x_num_len);\n    var\
    \ x_num_pos = x_num_str.indexOf(\".\");\n    var x_num_num_len = x_num_len - x_num_pos;\n\
    \    var x_num_num_str = x_num_str.substr(x_num_pos+1, x_num_num_len);\n    var\
    \ x_num_num_pos = x_num_num_str.indexOf(\".\");\n    var x_num_num_num_len = x_num_num_len\
    \ - x_num_num_pos;\n    var x_num_num_num_str = x_num_num_str.substr(x_num_num_pos+1,\
    \ x_num_num_num_len);\n    var x_num_num_num_pos = x_num_num_num_str.indexOf(\"\
    .\");\n    var x_num_num_num_num_len = x_num_num_num_len - x_num_num_num_pos;\n\
    \    var x_num_num_num_num_str = x_num_num_num_str.substr(x_num_num_num_pos+1,\
    \ x_num_num_num_num_len);\n    var x_num_num_num_num_pos = x_num_num_num_num_str.indexOf(\"\
    .\");\n    var x_num_num_num_num_num_len = x_num_num_num_num_len - x_num_num_num_num_pos;\n\
    \    var x_num_num_num_num_num_str = x_num_num_num_num_str.substr(x_num_num_num_num_pos+1,\
    \ x_num_num_num_num_num_len);\n    var x_num_num_num_num_num_pos = x_num_num_num_num_num_str.indexOf(\"\
    .\");\n    var x_num_num_num_num_num_num_len = x_num_num_num_num_num_len - x_num_num_num_num_num_pos;\n\
    \    var x_num_num_num_num_num_num_str = x_num_num_num_num_num_str.substr(x_num_num_num_num_num_pos+1,\
    \ x_num_num_num_num_num_num_len);\n    var x_num_num_num_num_num_num_pos = x_num_num_num_num_num_num_str.indexOf(\"\
    .\");\n    var x_num_num_num_num_num_num_num_len = x_num_num_num_num_num_num_len\
    \ - x_num_num_num_num_num_num_num_pos;\n    var x_num_num_num_num_num_num_num_str\
    \ = x_num_num_num_num_num_num_num_str.substr(x_num_num_num_num_num_num_num_pos+1,\
    \ x_num_num_num_num_num_num_num_len);\n    var x_num_num_num_num_num_num_num_pos\
    \ = x_num_num_num_num_num_num_num_str.indexOf(\".\");\n    var x_num_num_num_num_num_num_num_num_len\
    \ = x_num_num_num_num_num_num_num_num_len - x_num_num_num_num_num_num_num_num_",
  "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n   \
    \     x = -x;\n    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n\
    \    var baseNum = parseInt(x_str.charAt(x_len-1), 10);\n    var baseChar = base.charAt(base.length-1);\n\
    \    while (baseNum > 0){\n        r = baseNum%baseChar + r;\n        baseNum\
    \ = Math.floor(baseNum/baseChar);\n        baseChar = base.charAt(base.length-1);\n\
    \    }\n    if (sign < 0){\n        r = sign*(r+x_str.charAt(x_len-1));\n    }\n\
    \    return r;\n}\n", "\tvar bases = [2,8,10,16,20,32,40,64,80,100];\n\tvar bases_length\
    \ = bases.length;\n\tvar result = '';\n\tvar i = 0;\n\twhile(i < bases_length){\n\
    \t\tresult += bases[x%bases[i]];\n\t\tx = Math.floor(x/bases[i]);\n\t\ti++;\n\t\
    }\n\treturn result;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar base10\
    \ = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3];\n\tvar base5 = bases[base-4]; // bases[base-5]\n\t\
    var base6 = bases[base-5]; // bases[base-6]\n\tvar base7 = bases[base-6]; // bases[base-7]\n\
    \tvar base8 = bases[base-7]; // bases[base-8]\n\tvar base9 = bases[base-8]; //\
    \ bases[base-9]\n\tvar base10 = bases[base-9]; // bases[base-10]\n\tvar base11\
    \ = bases[base-10]; // bases[base-11]\n\tvar base12 = bases[base-11]; // bases[base-12]\n\
    \tvar base13 = bases[base-12]; // bases[base-13]\n\tvar base14 = bases[base-13];\
    \ // bases[base-14]\n\tvar base15 = bases[base-14]; // bases[base-15]\n\tvar base16\
    \ = bases[base-15]; // bases[base-16]\n\tvar base17 = bases[base-16]; // bases[base-17]\n\
    \tvar base18 = bases[base-17]; // bases[base-18]\n\tvar base19 = bases[base-18];\
    \ // bases[base-19]\n\tvar base20 = bases[base-19]; // bases[base-20]\n\tvar base21\
    \ = bases[base-20]; // bases[base-21]\n\tvar base22 = bases[base-21]; // bases[base-22]\n\
    \tvar base23 = bases[base-22]; // bases[base-23]\n\tvar base24 = bases[base-23];\
    \ // bases[base-24]\n\tvar base25 = bases[base-24]; // bases[base-25]\n\tvar base26\
    \ = bases[base-25]; // bases[base-26]\n\tvar base27 = bases[base-26]; // bases[base-27]\n\
    \tvar base28 = bases[base-27]; // bases[base-28]\n\tvar base29 = bases[base-28];\
    \ // bases[base-29]\n\tvar base30 = bases[base-29]; // bases[base-30]\n\tvar base31\
    \ = bases[base-30]; // bases[base-31]\n\tvar base32 = bases[base-31]; // bases[base-32]\n\
    \tvar base33 = bases[base-32]; // bases[base-33]\n\tvar base34 = bases[base-33];\
    \ // bases[base-34]\n\tvar base", "\tvar bases = {\n\t\t2:\"binary\",\n\t\t8:\"\
    octal\",\n\t\t16:\"hexadecimal\"\n\t};\n\tvar base_name = bases[base];\n\tif(x\
    \ == 0) return \"0\";\n\tif(x == 1) return \"1\";\n\tif(x == -1) return \"-1\"\
    ;\n\tvar s = \"\";\n\twhile(x > 0){\n\t\tvar t = x % base;\n\t\tx = Math.floor(x/base);\n\
    \t\ts = base_name + s;\n\t}\n\treturn s;\n}\n", "    var s = \"\" + x;\n    var\
    \ n = s.length;\n    var digits = Math.log(n) / Math.log(base);\n    var result\
    \ = \"\";\n    while(digits > 0){\n        var digit = Math.floor(digits % base);\n\
    \        digits = Math.floor(digits / base);\n        result = s[digit] + result;\n\
    \    }\n    return result;\n}\n", "\tvar bases = {\n\t\t'0': '0',\n\t\t'1': '1',\n\
    \t\t'2': '10',\n\t\t'3': '11',\n\t\t'4': '100',\n\t\t'5': '101',\n\t\t'6': '1000',\n\
    \t\t'7': '1001',\n\t\t'8': '10000',\n\t\t'9': '10001',\n\t\t'10': '100000',\n\t\
    \t'11': '100001',\n\t\t'12': '1000000',\n\t\t'13': '100000',\n\t\t'14': '1000000',\n\
    \t\t'15': '100000000',\n\t\t'16': '10000000',\n\t\t'17': '100000000',\n\t\t'18':\
    \ '1000000000',\n\t\t'19': '10000000000',\n\t\t'20': '1000000000000',\n\t\t'21':\
    \ '10000000000000',\n\t\t'22': '100000000000000',\n\t\t'23': '1000000000000000',\n\
    \t\t'24': '1000000000000000000',\n\t\t'25': '10000000000000000000',\n\t\t'26':\
    \ '100000000000000000000',\n\t\t'27': '1000000000000000000000',\n\t\t'28': '10000000000000000000000',\n\
    \t\t'29': '100000000000000000000000',\n\t\t'30': '1000000000000000000000000',\n\
    \t\t'31': '10000000000000000000000000',\n\t\t'32': '100000000000000000000000000',\n\
    \t\t'33': '1000000000000000000000000000'\n\t};\n\tvar base10 = bases[base];\n\t\
    var base2 = bases[base10];\n\tvar base16 = bases[base2];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[base8];\n\tvar base16 = bases[base10];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[base8];\n\tvar base16 = bases[base10];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[base8];\n\tvar base16 = bases[base10];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[base8];\n\tvar base16 = bases[base10];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[base8];\n\tvar base16 = bases[base10];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[base8];\n\tvar base16 = bases[base10];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[base8];\n\tvar base16 = bases[base10];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[base8];\n\tvar base16 = bases[base10];\n\tvar base8  = bases[base16];\n\
    \tvar base10 = bases[", "\tvar bases = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z',\
    \ 'Y'];\n\tvar index = 0;\n\twhile(bases.indexOf(base) > -1){\n\t\tindex++;\n\t\
    \tbase = bases[bases.indexOf(base)];\n\t}\n\tx = Math.round(x * Math.pow(10, index))\
    \ / Math.pow(10, index);\n\treturn x + base;\n}\n", "    var r = \"\";\n    for(var\
    \ i = 0; i < x.length; i++){\n        var c = x.charAt(i);\n        if(c == \"\
    -\"){\n            r += \"0\";\n        }else if(c == \"0\"){\n            r +=\
    \ \"0\";\n        }else if(c == \"1\"){\n            r += \"1\";\n        }else{\n\
    \            var n = parseInt(c);\n            if(n == 0 || n == 1){\n       \
    \         r += c;\n            }else{\n                r += base_ten[base][n];\n\
    \            }\n        }\n    }\n    return r;\n}\n", "\tvar bases = {\n\t\t\
    '0': '0',\n\t\t'1': '1',\n\t\t'2': '10',\n\t\t'3': '11',\n\t\t'4': '100',\n\t\t\
    '5': '101',\n\t\t'6': '1000',\n\t\t'7': '1001',\n\t\t'8': '10000',\n\t\t'9': '10001',\n\
    \t\t'10': '100000',\n\t\t'11': '100001',\n\t\t'12': '1000000',\n\t\t'13': '1000001',\n\
    \t\t'14': '10000000'\n\t};\n\tvar base10 = bases[base];\n\tvar base2 = bases[base10];\n\
    \tvar base16 = bases[base2];\n\tvar base8 = Math.pow(base10, base2);\n\tvar base8\
    \ = Math.round(base8 * 100) / 100;\n\tvar base16 = Math.round(base16 * 100) /\
    \ 100;\n\tvar base8str = base8.toString();\n\tvar base16str = base16.toString();\n\
    \tvar base8str = base8str.length < 2 ? base8str + '0' : base8str;\n\tvar base16str\
    \ = base16str.length < 2 ? base16str + '0' : base16str;\n\tvar base8str = base8str.length\
    \ < 2 ? base8str + '0' : base8str;\n\tvar base16str = base16str.length < 2 ? base16str\
    \ + '0' : base16str;\n\tvar base8str = base8str.length < 2 ? base8str + '0' :\
    \ base8str;\n\tvar base16str = base16str.length < 2 ? base16str + '0' : base16str;\n\
    \tvar base8str = base8str.length < 2 ? base8str + '0' : base8str;\n\tvar base16str\
    \ = base16str.length < 2 ? base16str + '0' : base16str;\n\tvar base8str = base8str.length\
    \ < 2 ? base8str + '0' : base8str;\n\tvar base16str = base16str.length < 2 ? base16str\
    \ + '0' : base16str;\n\tvar base8str = base8str.length < 2 ? base8str + '0' :\
    \ base8str;\n\tvar base16str = base16str.length < 2 ? base16str + '0' : base16str;\n\
    \tvar base8str = base8str.length < 2 ? base8str + '0' : base8str;\n\tvar base16str\
    \ = base16str.length < 2 ? base16str + '0' : base16str;\n\tvar base8str = base8str.length\
    \ < 2 ? base8str + '0' : base8str;\n\tvar base16str = base16str.length < 2 ? base16str\
    \ + '0' : base16str;\n\tvar base8str = base", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string =\
    \ \"\";\n\tfor(var i = 0; i < bases.length; i++){\n\t\tbases_reversed_string +=\
    \ bases[bases_reversed[i]];\n\t}\n\tbases_reversed_string += bases_reversed[x];\n\
    \treturn bases_reversed_string;\n}\n", "\tvar bases = {\n\t\t'binary': {\n\t\t\
    \t'base': 2, \n\t\t\t'symbol': 'binary'\n\t\t},\n\t\t'octal': {\n\t\t\t'base':\
    \ 8, \n\t\t\t'symbol': 'octal'\n\t\t},\n\t\t'decimal': {\n\t\t\t'base': 10, \n\
    \t\t\t'symbol': 'decimal'\n\t\t}\n\t};\n\tvar base_name = bases[base]['base'];\n\
    \tvar base_symbol = bases[base]['symbol'];\n\tvar symbol = '';\n\tvar result =\
    \ '';\n\t\n\tif(x == 0){\n\t\tresult = '0';\n\t}\n\t\n\tif(x == 1){\n\t\tresult\
    \ = '1';\n\t}\n\t\n\tif(x == 2){\n\t\tresult = '10';\n\t}\n\t\n\tif(x == 3){\n\
    \t\tresult = '11';\n\t}\n\t\n\tif(x == 4){\n\t\tresult = '100';\n\t}\n\t\n\tif(x\
    \ == 5){\n\t\tresult = '101';\n\t}\n\t\n\tif(x == 6){\n\t\tresult = '1000';\n\t\
    }\n\t\n\tif(x == 7){\n\t\tresult = '1001';\n\t}\n\t\n\tif(x == 8){\n\t\tresult\
    \ = '10000';\n\t}\n\t\n\tif(x == 9){\n\t\tresult = '10001';\n\t}\n\t\n\tif(x ==\
    \ 10){\n\t\tresult = '100000';\n\t}\n\t\n\tif(x == 11){\n\t\tresult = '100001';\n\
    \t}\n\t\n\tif(x == 12){\n\t\tresult = '1000000';\n\t}\n\t\n\tif(x == 13){\n\t\t\
    result = '1000001';\n\t}\n\t\n\tif(x == 14){\n\t\tresult = '1000000';\n\t}\n\t\
    \n\tif(x == 15){\n\t\tresult = '1000001';\n\t}\n\t\n\tif(x == 16){\n\t\tresult\
    \ = '10000000';\n\t}\n\t\n\tif(x == 17){\n\t\tresult = '10000001';\n\t}\n\t\n\t\
    if(x == 18){\n\t\tresult = '100000000';\n\t}\n\t\n\tif(x == 19){\n\t\tresult =\
    \ '100000000';\n\t}\n\t\n\tif(x == 20){\n\t\tresult = '100000000';\n\t}\n\t\n\t\
    if(x == 21){\n\t\tresult = '100000000';\n\t}\n\t\n\tif(x == 22){\n\t\tresult =\
    \ '100000000';\n\t}\n\t\n\tif(x == 23){\n\t\tresult = '100000000';\n\t}\n\t\n\t\
    if(x == 24){\n\t\t", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string = \"0123456789ABCDEF\"\
    ;\n\tvar bases_reversed_string_reversed = bases_reversed_string.split(\"\");\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_reversed_string_reversed.length;\n\
    \t\n\tvar bases_reversed_string_reversed_length = bases_", "    var r = \"\";\n\
    \    while(x>0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_string = [\"\",\"K\",\"M\",\"G\",\"T\"\
    ,\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed = [\"\",\"K\",\"M\",\"\
    G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed = [\"\
    \",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = ", "\tvar bases = [2,8,10,16,22,36,48,64,80];\n\tvar bases_length = bases.length;\n\
    \tvar result = '';\n\t\n\tfor(var i = 0; i < bases_length; i++){\n\t\tif(x ==\
    \ bases[i]){\n\t\t\tresult += bases[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn\
    \ result;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar base10 = bases[base];\n\
    \tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\tvar base4 = bases[base-3]\n\
    \tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\tvar base7 = bases[base-6]\n\
    \tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\tvar base10 = bases[base-9]\n\
    \tvar base11 = bases[base-10]\n\tvar base12 = bases[base-11]\n\tvar base13 = bases[base-12]\n\
    \tvar base14 = bases[base-13]\n\tvar base15 = bases[base-14]\n\tvar base16 = bases[base-15]\n\
    \tvar base17 = bases[base-16]\n\tvar base18 = bases[base-17]\n\tvar base19 = bases[base-18]\n\
    \tvar base20 = bases[base-19]\n\tvar base21 = bases[base-20]\n\tvar base22 = bases[base-21]\n\
    \tvar base23 = bases[base-22]\n\tvar base24 = bases[base-23]\n\tvar base25 = bases[base-24]\n\
    \tvar base26 = bases[base-25]\n\tvar base27 = bases[base-26]\n\tvar base28 = bases[base-27]\n\
    \tvar base29 = bases[base-28]\n\tvar base30 = bases[base-29]\n\tvar base31 = bases[base-30]\n\
    \tvar base32 = bases[base-31]\n\tvar base33 = bases[base-32]\n\tvar base34 = bases[base-33]\n\
    \tvar base35 = bases[base-34]\n\tvar base36 = bases[base-35]\n\tvar base37 = bases[base-36]\n\
    \tvar base38 = bases[base-37]\n\tvar base39 = bases[base-38]\n\tvar base40 = bases[base-39]\n\
    \tvar base41 = bases[base-40]\n\tvar base42 = bases[base-41]\n\tvar base43 = bases[base-42]\n\
    \tvar base44 = bases[base-43]\n\tvar base45 = bases[base-44]\n\tvar base46 = bases[base-45]\n\
    \tvar base47 = bases[base-46]\n\tvar base48 = bases[base-47]\n\tvar base49 = bases[base-48]\n\
    \tvar base50 = bases[base-49]\n\tvar base51 = bases[base-50]\n\tvar base52 = bases[base-51]",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_length = bases.length;\n\tvar\
    \ result = '';\n\t\n\tfor(var i = 0; i < bases_length; i++){\n\t\tresult += bases[i]\
    \ * Math.pow(x, bases_length - i - 1);\n\t}\n\t\n\treturn result;\n}\n", "   \
    \ var r = \"\";\n    var sign = \"\";\n    if (x < 0){\n        sign = \"-\";\n\
    \        x = -x;\n    }\n    if (base < 2 || base > 36){\n        console.log(\"\
    Base must be between 2 and 36\");\n        return \"\";\n    }\n    if (base ==\
    \ 10){\n        r = x.toString();\n    }\n    else{\n        var m = Math.pow(base,x);\n\
    \        r = m.toString();\n    }\n    return sign + r;\n}\n", "    var r = \"\
    \";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n\
    \    }\n    if (base < 2 || base > 36){\n        console.log(\"Invalid base\"\
    );\n        return NaN;\n    }\n    while (base > 0){\n        var rem = x % base;\n\
    \        x = x / base;\n        r = rem + r;\n        base--;\n    }\n    if (sign\
    \ == -1){\n        r = r * -1;\n    }\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_index = 0;\n\twhile(bases_index < bases.length){\n\t\tif(bases[bases_index]\
    \ == base){\n\t\t\tbreak;\n\t\t}\n\t\tbases_index++;\n\t}\n\tbases_index--;\n\t\
    var res = \"\";\n\twhile(x >= bases[bases_index]){\n\t\tres = bases[bases_index]\
    \ + res;\n\t\tx = x/bases[bases_index];\n\t\tbases_index--;\n\t}\n\treturn res;\n\
    }\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_string = '0123456789ABCDEF';\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_", "\tvar r = \"\";\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar temp;\n\tvar\
    \ count = 0;\n\tvar bases = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\tfor(i = 0;\
    \ i<bases.length; i++){\n\t\tif(x == 0){\n\t\t\tbreak;\n\t\t}\n\t\ttemp = x;\n\
    \t\tx = x/bases[i];\n\t\tfor(j = 0; j<bases.length; j++){\n\t\t\tif(x == 0){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp = temp*bases[j];\n\t\t}\n\t\tcount++;\n\t\t\
    if(count == bases.length){\n\t\t\tr += bases[i];\n\t\t\tcount = 0;\n\t\t}\n\t\
    }\n\treturn r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index2 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index3\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index4 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index5 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index6\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index7 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index8 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index9\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index10 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index11 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index12\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index13 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index14 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index15\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index16 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index17 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index18\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index19 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index20 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index21\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index22 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index23 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index24\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index25 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index26 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index27\
    \ = [10,9,8,7,6,5,4,3,2,", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string = '0123456789abcdefghijklmnopqrstuvwxyz';\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string_length-1;\n\tvar bases_reversed_string_length = bases_reversed_string_length-1;\n\
    \tvar bases_reversed_string_length = bases_reversed_string_length", "\tvar bases\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\t\
    var bases_string = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar bases_string_reversed = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar bases_string_base = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_string_base_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_string_base_string = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar bases_string_base_string_reversed = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar bases_string_base_string = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar bases_string_base_string_reversed = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar bases_string_base_string_base = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar bases_string_base_string_base_reversed = ['a','b','c','d','e','f','g','h",
  "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n    \
    \    x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_length = bases.length;\n\tvar new_base;\n\tvar i;\n\t\n\tfor(i=0;i<bases_length;i++){\n\
    \t\tnew_base = bases[i]*base;\n\t\tif(new_base >= 10){\n\t\t\tnew_base /= 10;\n\
    \t\t}\n\t\tx = new_base*x + x;\n\t}\n\treturn x;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_reversed_reversed_reversed = [1,2,3,4,5,6,7,8,9,10];\n\t\
    var bases_reversed_reversed_reversed_reversed_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_reversed_reversed_reversed_reversed_reversed = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_",
  "\tvar bases = {\n\t\t'binary':{\n\t\t\t'2':'bin',\n\t\t\t'8':'oct',\n\t\t\t'16':'hex',\n\
    \t\t\t'32':'dez',\n\t\t\t'64':'dwarf'\n\t\t},\n\t\t'octal':{\n\t\t\t'8':'oct',\n\
    \t\t\t'16':'hex',\n\t\t\t'32':'dez',\n\t\t\t'64':'dwarf'\n\t\t},\n\t\t'hexadecimal':{\n\
    \t\t\t'16':'hex',\n\t\t\t'32':'dez',\n\t\t\t'64':'dwarf'\n\t\t},\n\t\t'decimal':{\n\
    \t\t\t'10':'dec',\n\t\t\t'16':'hex',\n\t\t\t'32':'dez',\n\t\t\t'64':'dwarf'\n\t\
    \t},\n\t\t'dwarf':{\n\t\t\t'64':'dwarf'\n\t\t}\n\t};\n\tvar base_name = bases[base];\n\
    \tvar base_value = bases[base_name];\n\tvar base_values = base_value.split('');\n\
    \tvar base_length = base_values.length;\n\tvar base_length = base_length-1;\n\t\
    var base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n\tvar base_length = base_length+base_length;\n\
    \tvar base_length = base_length+base_length;\n", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n \
    \   }\n    return r;\n}\n", "    var s = \"\" + x;\n    var n = s.length;\n  \
    \  var digits = Math.log(n)/Math.log(base);\n    var res = \"\";\n    while(digits\
    \ > 0){\n        var digit = Math.floor(digits);\n        res += s.charAt(digit*base);\n\
    \        digits -= digit;\n    }\n    return res;\n}\n", "    var r = \"\";\n\
    \    var i;\n    for(i = base; i >= 0; i--){\n        r = base_convert(x, i, base)\
    \ + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n\
    \    var isNegative = false;\n    if (x < 0){\n        isNegative = true;\n  \
    \      x = -x;\n    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n\
    \    var base = parseInt(base);\n    var base_str = base.toString();\n    var\
    \ base_len = base_str.length;\n    if (x_len < base_len){\n        r = x_str.substring(0,\
    \ base_len - x_len) + base_str;\n    }\n    else{\n        r = x_str;\n    }\n\
    \    if (isNegative){\n        r = \"-\" + r;\n    }\n    r = r + base_str;\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    var neg =\
    \ false;\n    var i;\n    \n    if (x < 0){\n        neg = true;\n        x =\
    \ -x;\n    }\n    \n    if (base < 2 || base > 36){\n        return \"Invalid\
    \ base\";\n    }\n    \n    if (base == 10){\n        sign = \"+\";\n    }\n \
    \   \n    if (base == 16){\n        sign = \"0x\";\n    }\n    \n    if (base\
    \ == 16){\n        sign = \"0X\";\n    }\n    \n    if (base == 16){\n       \
    \ sign = \"0X\";\n    }\n    \n    if (base == 16){\n        sign = \"0X\";\n\
    \    }\n    \n    if (base == 16){\n        sign = \"0X\";\n    }\n    \n    if\
    \ (base == 16){\n        sign = \"0X\";\n    }\n    \n    if (base == 16){\n \
    \       sign = \"0X\";\n    }\n    \n    if (base == 16){\n        sign = \"0X\"\
    ;\n    }\n    \n    if (base == 16){\n        sign = \"0X\";\n    }\n    \n  \
    \  if (base == 16){\n        sign = \"0X\";\n    }\n    \n    if (base == 16){\n\
    \        sign = \"0X\";\n    }\n    \n    if (base == 16){\n        sign = \"\
    0X\";\n    }\n    \n    if (base == 16){\n        sign = \"0X\";\n    }\n    \n\
    \    if (base == 16){\n        sign = \"0X\";\n    }\n    \n    if (base == 16){\n\
    \        sign = \"0X\";\n    }\n    \n    if (base == 16){\n        sign = \"\
    0X\";\n    }\n    \n    if (base == 16){\n        sign = \"0X\";\n    }\n    \n\
    \    if (base == 16){\n        sign = \"0X\";\n    }\n    \n    if (base == 16){\n\
    \        sign = \"0X\";\n    }\n    \n    if (base == 16){\n        sign = \"\
    0X\";\n    }\n    \n    if (base == 16){\n        sign = \"0X\";\n    }\n    \n\
    \    if (base == 16){\n        sign = \"0X\";\n    }\n    \n    if (base == 16){\n\
    \        sign = \"0X\";\n    }\n    \n    if (base == 16){\n        sign = \"\
    0X\";\n    }\n    \n    if (base == 16){\n        sign = \"0X\";\n    }\n    \n\
    \    if (base == 16){\n        sign = \"0X\";\n    }\n    \n    if (base ", "\t\
    var bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index2\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index3 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index4 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index5\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index6 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index7 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index8\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index9 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index10 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index11\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index12 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index13 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index14\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index15 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index16 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index17\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index18 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index19 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index20\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index21 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index22 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index23\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index24 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index25 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index26\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index27 = [10,9,8,7,6,5,4,3,2,",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_length = bases.length;\n\tvar\
    \ digits = [];\n\t\n\twhile(bases_length--){\n\t\tdigits.push(bases[bases_length]*Math.pow(base,bases_length));\n\
    \t}\n\t\n\tvar res = [];\n\t\n\twhile(digits.length){\n\t\tres.push(digits.pop()*Math.pow(base,digits.length));\n\
    \t}\n\t\n\treturn res.reverse().join('');\n}\n", "    var s = \"\" + x;\n    var\
    \ n = s.length;\n    var c = 0;\n    while(n > base){\n        c += s.charAt(n\
    \ - base);\n        s = s.substr(0, n - base);\n        n -= base;\n    }\n  \
    \  return c + s;\n}\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x\
    \ % base] + r;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn r;\n}\n", "\tvar\
    \ bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_string = [\"\",\"K\",\"M\",\"B\",\"T\",\"P\",\"E\",\"Z\"\
    ,\"Y\"];\n\tvar bases_string = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\"\
    ,\"Zi\",\"Yi\"];\n\tvar bases_string_long = [\"\",\"K\",\"M\",\"B\",\"T\",\"P\"\
    ,\"E\",\"Z\",\"Y\"];\n\tvar bases_string_long_reversed = [\"\",\"Y\",\"Z\",\"\
    E\",\"P\",\"T\",\"B\",\"M\",\"K\"];\n\tvar bases_string_long_reversed_string =\
    \ [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long\
    \ = [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long_reversed\
    \ = [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long_reversed_string\
    \ = [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long_reversed_string_long\
    \ = [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long_reversed_string_long_reversed\
    \ = [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long_reversed_string_long_reversed_string\
    \ = [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long_reversed_string_long_reversed_string_long\
    \ = [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long_reversed_string_long_reversed_string_long_reversed\
    \ = [\"\",\"Yi\",\"Zi\",\"Ei\",\"Pi\",\"Ti\",\"Gi\",\"Mi\",\"Ki\"];\n\tvar bases_string_long_reversed_string_long_reversed_string_long_reversed_string_",
  "    var r = \"\";\n    var i;\n    for(i = base; i >= 10; i--){\n        r += (x\
    \ % i) + \"\";\n        x /= i;\n    }\n    return r;\n}\n", "    var s = \"\"\
    \ + x;\n    var l = s.length - 1;\n    var digits = [];\n    while(l >= 0){\n\
    \        digits.push(parseInt(s.charAt(l)));\n        l--;\n    }\n    var res\
    \ = \"\";\n    for(var i = 0; i < digits.length; i++){\n        var d = digits[i];\n\
    \        var r = parseInt(d / base);\n        var rem = d % base;\n        res\
    \ = digits[i] + base + res;\n        if(rem > 0){\n            res = res + \"\
    .\" + change_base(rem, base);\n        }\n    }\n    return res;\n}\n", "\tvar\
    \ bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar base10 = bases[base];\n\tvar base2 =\
    \ bases[base-1];\n\tvar base3 = bases[base-2];\n\tvar base4 = bases[base-3]\n\t\
    var base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\tvar base7 = bases[base-6]\n\
    \tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\tvar base10 = bases[base-9]\n\
    \tvar base11 = bases[base-10]\n\tvar base12 = bases[base-11]\n\tvar base13 = bases[base-12]\n\
    \tvar base14 = bases[base-13]\n\tvar base15 = bases[base-14]\n\tvar base16 = bases[base-15]\n\
    \tvar base17 = bases[base-16]\n\tvar base18 = bases[base-17]\n\tvar base19 = bases[base-18]\n\
    \tvar base20 = bases[base-19]\n\tvar base21 = bases[base-20]\n\tvar base22 = bases[base-21]\n\
    \tvar base23 = bases[base-22]\n\tvar base24 = bases[base-23]\n\tvar base25 = bases[base-24]\n\
    \tvar base26 = bases[base-25]\n\tvar base27 = bases[base-26]\n\tvar base28 = bases[base-27]\n\
    \tvar base29 = bases[base-28]\n\tvar base30 = bases[base-29]\n\tvar base31 = bases[base-30]\n\
    \tvar base32 = bases[base-31]\n\tvar base33 = bases[base-32]\n\tvar base34 = bases[base-33]\n\
    \tvar base35 = bases[base-34]\n\tvar base36 = bases[base-35]\n\tvar base37 = bases[base-36]\n\
    \tvar base38 = bases[base-37]\n\tvar base39 = bases[base-38]\n\tvar base40 = bases[base-39]\n\
    \tvar base41 = bases[base-40]\n\tvar base42 = bases[base-41]\n\tvar base43 = bases[base-42]\n\
    \tvar base44 = bases[base-43]\n\tvar base45 = bases[base-44]\n\tvar base46 = bases[base-45]\n\
    \tvar base47 = bases[base-46]\n\tvar base48 = bases[base-47]\n\tvar base49 = bases[base-48]\n\
    \tvar base50 = bases[base-49]\n\tvar base51 = bases[base-50]\n\tvar base52 = bases[base-51]",
  "    var r = \"\";\n    var sign = 1;\n    var m = 1;\n    var i = 0;\n    var j\
    \ = 0;\n    var k = 0;\n    var n = base;\n    var digits = 1;\n    var tmp;\n\
    \    var basedigits;\n    var basedigit;\n    var basepower;\n    var basepow;\n\
    \    var digit;\n    var power;\n    var powerpower;\n    var powerpow;\n    var\
    \ powerpowpow;\n    var powerpowpowpow;\n    var powerpowpowpowpow;\n    var powerpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpow;\n    var\
    \ powerpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpowpowpowpowpowpowpowpowpow;\n\
    \    var powerpowpowpowpowpowpowpowpowpowpowpow;\n    var powerpowpowpow", " \
    \   var s = \"\" + x;\n    var n = s.length;\n    var c = 0;\n    while(n > base){\n\
    \        c = n % base;\n        s = c + s.substr(base);\n        n = Math.floor(n\
    \ / base);\n    }\n    return s;\n}\n", "    var r = \"\";\n    var sign = 1;\n\
    \    var m = 1;\n    var isNegative = false;\n    var isPositive = false;\n  \
    \  var isZero = false;\n    var isOdd = false;\n    var isEven = false;\n    var\
    \ isNegativeEven = false;\n    var isPositiveEven = false;\n    var isNegativeOdd\
    \ = false;\n    var isPositiveOdd = false;\n    var isEvenOdd = false;\n    var\
    \ isNegativeEvenOdd = false;\n    var isPositiveEvenOdd = false;\n    var isNegativeOddOdd\
    \ = false;\n    var isPositiveOddOdd = false;\n    var isEvenOddOdd = false;\n\
    \    var isNegativeEvenOddOdd = false;\n    var isPositiveEvenOddOdd = false;\n\
    \    var isNegativeOddEvenOdd = false;\n    var isPositiveOddEvenOdd = false;\n\
    \    var isEvenOddEvenOdd = false;\n    var isNegativeEvenOddEvenOdd = false;\n\
    \    var isPositiveEvenOddEvenOdd = false;\n    var isNegativeOddEvenOddOdd =\
    \ false;\n    var isPositiveOddEvenOddOdd = false;\n    var isEvenOddEvenOddOdd\
    \ = false;\n    var isNegativeEvenOddEvenOddOdd = false;\n    var isPositiveEvenOddEvenOddOdd\
    \ = false;\n    var isNegativeOddEvenOddEvenOdd = false;\n    var isPositiveOddEvenOddEvenOdd\
    \ = false;\n    var isEvenOddEvenOddEvenOdd = false;\n    var isNegativeEvenOddEvenOddEvenOdd\
    \ = false;\n    var isPositiveEvenOddEvenOddEvenOdd = false;\n    var isNegativeOddEvenOddEvenOddOdd\
    \ = false;\n    var isPositiveOddEvenOddEvenOddOdd = false;\n    var isEvenOddEvenOddEvenOddOdd\
    \ = false;\n    var isNegativeEvenOddEvenOddEvenOddOdd = false;\n    var isPositiveEvenOddEvenOddEvenOddOdd\
    \ = false;\n    var isNegativeOddEvenOddEvenOddEvenOdd = false;\n    var isPositiveOddEvenOddEvenOddEvenOddOdd\
    \ = false;\n    var isEvenOddEvenOddEvenOddEvenOddOdd = false;\n    var isNegativeEvenOddEvenOddEvenOddEvenOdd\
    \ = false;\n    var isPositiveEvenOddEvenOddEvenOddEvenOddOdd = false;\n    var\
    \ isNegativeOddEvenOddEvenOddEvenOddEvenOdd = false;\n    var isPositiveOddEvenOddEvenOddEvenO",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_string = \"0123456789ABCDEF\";\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar base0 = bases[0];\n\
    \tvar base1 = bases[1];\n\tvar base2 = bases[2];\n\tvar base3 = bases[3];\n\t\
    var base4 = bases[4];\n\tvar base5 = bases[5];\n\tvar base6 = bases[6];\n\tvar\
    \ base7 = bases[7];\n\tvar base8 = bases[8];\n\tvar base9 = bases[9];\n\tvar base10\
    \ = bases[10];\n\tvar base11 = bases[11];\n\tvar base12 = bases[12];\n\tvar base13\
    \ = bases[13];\n\tvar base14 = bases[14];\n\tvar base15 = bases[15];\n\tvar base16\
    \ = bases[16];\n\tvar base17 = bases[17];\n\tvar base18 = bases[18];\n\tvar base19\
    \ = bases[19];\n\tvar base20 = bases[20];\n\tvar base21 = bases[21];\n\tvar base22\
    \ = bases[22];\n\tvar base23 = bases[23];\n\tvar base24 = bases[24];\n\tvar base25\
    \ = bases[25];\n\tvar base26 = bases[26];\n\tvar base27 = bases[27];\n\tvar base28\
    \ = bases[28];\n\tvar base29 = bases[29];\n\tvar base30 = bases[30];\n\tvar base31\
    \ = bases[31];\n\tvar base32 = bases[32];\n\tvar base33 = bases[33];\n\tvar base34\
    \ = bases[34];\n\tvar base35 = bases[35];\n\tvar base36 = bases[36];\n\tvar base37\
    \ = bases[37];\n\tvar base38 = bases[38];\n\tvar base39 = bases[39];\n\tvar base40\
    \ = bases[40];\n\tvar base41 = bases[41];\n\tvar base42 = bases[42];\n\tvar base43\
    \ = bases[43];\n\tvar base44 = bases[44];\n\tvar base45 = bases[45];\n\tvar base46\
    \ = bases[46];\n\tvar base47 = bases[47];\n\tvar base48 = bases[48];\n\tvar base49\
    \ = bases[49];\n\tvar base50 = bases[50];\n\tvar base51 = bases[51];\n\tvar base52\
    \ = bases[52];\n\tvar base53 = bases[53];\n\tvar base54 = bases[54];\n\tvar base55\
    \ = bases[55];\n\tvar base56 = bases[56];\n\tvar base57", "    var s = \"\" +\
    \ x;\n    var n = s.length;\n    var c = 0;\n    while(c < n){\n        var m\
    \ = s.charAt(c++);\n        if(m >= \"0\" && m <= \"9\"){\n            if(m ==\
    \ \"0\"){\n                s = s.substr(0, c) + \"0\";\n            }else{\n \
    \               s = s.substr(0, c) + m;\n            }\n        }else{\n     \
    \       if(c == n){\n                s += \"0\";\n            }\n            s\
    \ += m;\n        }\n    }\n    return s;\n}\n", "    var s = \"\" + x;\n    var\
    \ n = s.length;\n    var digits = Math.log(n) / Math.log(base);\n    var result\
    \ = \"\";\n    while(n > 0){\n        var digit = Math.floor(n/Math.pow(base,digits));\n\
    \        result += s[digit];\n        n -= digit * Math.pow(base,digits);\n  \
    \      digits--;\n    }\n    return result;\n}\n", "    var r = \"\";\n    var\
    \ sign = x < 0 ? \"-\" : \"\";\n    var m = Math.pow(base,x);\n    while(m !=\
    \ 0){\n        r = m + r;\n        m = Math.pow(base,++x);\n    }\n    return\
    \ sign + r;\n}\n", "    var r = \"\";\n    var i;\n    for(i = base; i >= 0; i--){\n\
    \        if((x % i) == 0){\n            r += i;\n            x /= i;\n       \
    \ }\n    }\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\t\n\tvar base_index = bases.indexOf(base);\n\
    \tvar base_reversed_index = bases_reversed.indexOf(base);\n\t\n\tvar base_reversed\
    \ = base_reversed_index >= 0 ? bases_reversed[base_reversed_index] : bases[base_reversed_index];\n\
    \t\n\tvar base_str = x.toString();\n\tvar base_str_length = base_str.length;\n\
    \t\n\tvar base_str_length_str = base_str_length.toString();\n\t\n\tvar base_str_length_str_length\
    \ = base_str_length_str.length;\n\t\n\tvar base_str_length_str_length_str = base_str_length_str_length.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length = base_str_length_str_length_str.length;\n\
    \t\n\tvar base_str_length_str_length_str_length_str = base_str_length_str_length_str_length.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length = base_str_length_str_length_str_length_str.length;\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str = base_str_length_str_length_str_length_str_length.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str_length = base_str_length_str_length_str_length_str_length_str.length;\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str_length_str = base_str_length_str_length_str_length_str_length_str_length.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = base_str_length_str_length_str_length_str_length_str_length_str_length.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = base_str_length_str_length_str_length_str_length_str_length_str_length_str.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = base_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = base_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = base_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str.toString();\n\
    \t\n\tvar base_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = base_str_length_str_length_str_", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string =\
    \ \"0123456789ABCDEF\";\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_",
  "    var r = \"\";\n    var i;\n    for(i = base; i < 10; i++){\n        if(x ==\
    \ i){\n            r += i;\n        }else{\n            r += x.toString(base);\n\
    \        }\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n\
    \        r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n \
    \   }\n    return r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    if(x<0){\n\
    \        sign = \"-\";\n        x = -x;\n    }\n    while(x != 0){\n        r\
    \ = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ sign + r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string = \"0123456789ABCDEF\"\
    ;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string =\
    \ '0123456789ABCDEF';\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_",
  "    var r = \"\";\n    var sign = \"\";\n    var digits = \"\";\n    var i;\n \
    \   var j;\n    \n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n  \
    \  }\n    \n    if (base < 2 || base > 36){\n        console.log(\"Base must be\
    \ between 2 and 36\");\n        return;\n    }\n    \n    if (base == 2){\n  \
    \      digits = x.toString();\n    }\n    \n    for (i = 0; i <= digits.length;\
    \ i++){\n        digits = digits.replace(/[0-9]/g, \"\");\n    }\n    \n    for\
    \ (i = digits.length - 1; i >= 0; i--){\n        for (j = digits.length - 1; j\
    \ >= 0; j--){\n            if (digits[j] > digits[j + 1]){\n                digits\
    \ = digits.substring(0, j) + digits.substring(j + 1, digits.length);\n       \
    \     }\n        }\n    }\n    \n    for (i = digits.length - 1; i >= 0; i--){\n\
    \        r += digits[i] * base;\n    }\n    \n    return sign + r;\n}\n", "  \
    \  var r = \"\";\n    var sign = \"\";\n    var neg = false;\n    var i;\n   \
    \ var j;\n    var k;\n    var temp;\n    var basechar;\n    var digit;\n    var\
    \ carry;\n    var digits;\n    var k;\n    var digit;\n    var carry;\n    var\
    \ digits;\n    var k;\n    var digit;\n    var carry;\n    var digits;\n    var\
    \ k;\n    var digit;\n    var carry;\n    var digits;\n    var k;\n    var digit;\n\
    \    var carry;\n    var digits;\n    var k;\n    var digit;\n    var carry;\n\
    \    var digits;\n    var k;\n    var digit;\n    var carry;\n    var digits;\n\
    \    var k;\n    var digit;\n    var carry;\n    var digits;\n    var k;\n   \
    \ var digit;\n    var carry;\n    var digits;\n    var k;\n    var digit;\n  \
    \  var carry;\n    var digits;\n    var k;\n    var digit;\n    var carry;\n \
    \   var digits;\n    var k;\n    var digit;\n    var carry;\n    var digits;\n\
    \    var k;\n    var digit;\n    var carry;\n    var digits;\n    var k;\n   \
    \ var digit;\n    var carry;\n    var digits;\n    var k;\n    var digit;\n  \
    \  var carry;\n    var digits;\n    var k;\n    var digit;\n    var carry;\n \
    \   var digits;\n    var k;\n    var digit;\n    var carry;\n    var digits;\n\
    \    var k;\n    var digit;\n    var carry;\n    var digits;\n    var k;\n   \
    \ var digit;\n    var carry;\n    var digits;\n    var k;\n    var digit;\n  \
    \  var carry;\n    var digits;\n    var k;\n    var digit;\n    var carry;\n \
    \   var digits;\n    var k;\n    var digit;\n    var carry;\n    var digits;\n\
    \    var k;\n    var digit;\n    var carry;\n    var digits;\n    var k;\n   \
    \ var digit;\n    var carry;\n    var digits;\n    var k;\n    var digit;\n  \
    \  var carry;\n    var digits;\n    var k;\n    var digit;\n    var carry;\n \
    \   var digits;\n    var k;\n    var digit;\n    var carry;\n    var digits;\n\
    \    var k;\n    var digit;\n    var carry;\n    var digits;\n    var k;\n   \
    \ var digit;\n    var carry;\n    var digits;\n    var k;\n    var digit;\n  \
    \  var carry;\n    var digits;\n    var k;\n    var digit;\n    var carry;\n \
    \   var digits;\n    var k;\n    var digit;\n    var carry;\n    var digits;\n\
    \    var k;\n    var ", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_index\
    \ = 0;\n\twhile(bases_index < bases.length){\n\t\tif(bases[bases_index] == base){\n\
    \t\t\tbreak;\n\t\t}\n\t\tbases_index++;\n\t}\n\tbases_index--;\n\tvar res = [];\n\
    \twhile(x >= bases[bases_index]){\n\t\tres.push(bases[bases_index]);\n\t\tx =\
    \ x/bases[bases_index];\n\t\tbases_index--;\n\t}\n\tres.push(bases[bases_index]);\n\
    \treturn res.reverse().join(\"\");\n}\n", "\tvar bases = {\n\t\t2:\"binary\",\n\
    \t\t8:\"octal\",\n\t\t16:\"hexadecimal\"\n\t};\n\tvar base_name = bases[base];\n\
    \tvar base_digits = base_name.length;\n\tvar base_digits_str = base_digits+\"\"\
    ;\n\tvar base_digits_arr = base_digits_str.split(\"\");\n\tvar base_digits_arr_length\
    \ = base_digits_arr.length;\n\tvar base_digits_arr_length_str = base_digits_arr_length+\"\
    \";\n\tvar base_digits_arr_length_arr = base_digits_arr_length_str.split(\"\"\
    );\n\tvar base_digits_arr_length_arr_length = base_digits_arr_length_arr.length;\n\
    \tvar base_digits_arr_length_arr_length_str = base_digits_arr_length_arr_length+\"\
    \";\n\tvar base_digits_arr_length_arr_length_arr = base_digits_arr_length_arr_length_str.split(\"\
    \");\n\tvar base_digits_arr_length_arr_length_arr_length = base_digits_arr_length_arr_length_arr.length;\n\
    \tvar base_digits_arr_length_arr_length_arr_length_str = base_digits_arr_length_arr_length_arr_length+\"\
    \";\n\tvar base_digits_arr_length_arr_length_arr_length_arr = base_digits_arr_length_arr_length_arr_length_str.split(\"\
    \");\n\tvar base_digits_arr_length_arr_length_arr_length_arr_length = base_digits_arr_length_arr_length_arr_length_arr.length;\n\
    \tvar base_digits_arr_length_arr_length_arr_length_arr_length_str = base_digits_arr_length_arr_length_arr_length_arr_length_arr.join(\"\
    \");\n\tvar base_digits_arr_length_arr_length_arr_length_arr_length_arr_length\
    \ = base_digits_arr_length_arr_length_arr_length_arr_length_arr_length+\"\";\n\
    \tvar base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr =\
    \ base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_str.split(\"\
    \");\n\tvar base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length\
    \ = base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length+\"\
    \";\n\tvar base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_arr\
    \ = base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_str.split(\"\
    \");\n\tvar base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length\
    \ = base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length+\"\
    \";\n\tvar base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_str\
    \ = base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_arr.join(\"\
    \");\n\tvar base_digits_arr_length_arr_length_arr_length_arr_length_arr_length_arr_length_",
  "    var r = \"\";\n    var negative = false;\n    var i;\n    var digit;\n    \n\
    \    if (x < 0){\n        negative = true;\n        x = -x;\n    }\n    \n   \
    \ if (base < 2 || base > 36){\n        throw \"Invalid base\";\n    }\n    \n\
    \    if (base == 2){\n        for (i = 0; i < x.length; i++){\n            digit\
    \ = x.charCodeAt(i) - 48;\n            if (digit < 0 || digit > 9){\n        \
    \        throw \"Invalid base\";\n            }\n            r += digit;\n   \
    \     }\n    }\n    else {\n        for (i = 0; i < x.length; i++){\n        \
    \    digit = x.charCodeAt(i) - 48;\n            if (digit < 0 || digit > 9){\n\
    \                throw \"Invalid base\";\n            }\n            r += digit;\n\
    \        }\n    }\n    \n    if (negative){\n        r = \"-\" + r;\n    }\n \
    \   \n    return r;\n}\n", "    var r = \"\";\n    var negative = false;\n   \
    \ var negativeBase = false;\n    var i;\n    var j;\n    var k;\n    var temp;\n\
    \    var baseChar;\n    var digit;\n    var carry = 0;\n    var digits = \"\"\
    ;\n    var digitBase;\n    var digitBaseChar;\n    var digitBaseCount;\n    var\
    \ digitBaseCountChar;\n    var digitBaseCountDigits;\n    var digitBaseCountDigitChar;\n\
    \    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChars;\n    var\
    \ digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n\
    \    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var\
    \ digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n\
    \    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var\
    \ digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n\
    \    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var\
    \ digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n\
    \    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var\
    \ digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n\
    \    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var\
    \ digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n\
    \    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var\
    \ digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n\
    \    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var\
    \ digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n\
    \    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var\
    \ digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n\
    \    var digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var\
    \ digitBaseCountDigitChars;\n    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n\
    \    var digitBaseCountDigitChar;\n    var digitBaseCountDigitChars;\n    var\
    \ digitBaseCountDigitChar;\n    var digitBaseCount", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_length = bases.length;\n\tvar result = '';\n\t\n\twhile(bases_length--){\n\
    \t\tresult += bases[bases_length]*Math.pow(base,bases_length);\n\t}\n\t\n\treturn\
    \ Math.round(x/Math.pow(base,bases_length))+result;\n}\n", "\tvar bases = {\n\t\
    \t2 : '0123456789',\n\t\t10 : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\
    \t\t16 : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\
    \t\t10 : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n\
    \t\t16 : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz',\n\
    \t\t2 : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789',\n\
    \t\t16 : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz'\n\
    \t};\n\tvar base10 = bases[base];\n\tvar base16 = bases[base10];\n\tvar base2\
    \ = bases[base16];\n\tvar base8 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \tvar base16 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\
    \tvar base32 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz';\n\
    \tvar base32hex = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopq",
  "\tvar bases = {\n\t\t'binary' : 1,\n\t\t'octal' : 8,\n\t\t'decimal' : 10,\n\t\t\
    'hexadecimal' : 16\n\t};\n\t\n\tvar base_name = bases[base];\n\t\n\tvar num =\
    \ Math.abs(x);\n\tvar num_str = num.toString(base);\n\t\n\tvar num_len = num_str.length;\n\
    \t\n\tvar decimal_len = bases[base_name];\n\t\n\tvar decimal_str = num_str.substring(num_len\
    \ - decimal_len);\n\t\n\treturn decimal_str;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string =\
    \ \"0123456789ABCDEF\";\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length = bases_reversed_string.length;\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\tvar bases_reversed_string_length = bases_",
  "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n    var\
    \ n = x;\n    while(n>0){\n        r = n%base;\n        n = Math.floor(n/base);\n\
    \    }\n    if(r>0){\n        sign = \"-\";\n    }\n    while(base>0){\n     \
    \   r = r*base;\n        base--;\n    }\n    return sign+r;\n}\n", "\tvar bases\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\t\
    var bases_string = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\t\
    var bases_string_base = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\"\
    ,\"Yi\"];\n\tvar bases_string_base_reversed = [\"\",\"K\",\"M\",\"G\",\"T\",\"\
    P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_base_reversed_string = [\"\",\"Ki\"\
    ,\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_base_reversed_string_base_reversed\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed_string\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed_string_base\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed_string_base_reversed\
    \ = [\"\",\"Ki\",\"Mi\",\"Gi\",\"Ti\",\"Pi\",\"Ei\",\"Zi\",\"Yi\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reversed_string_base_reversed_string\
    \ = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar bases_string_base_reversed_string_base_reversed_string_base_reverse",
  "    var r = \"\";\n    var negative = false;\n    if (x < 0){\n        negative\
    \ = true;\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[base]\
    \ + r;\n        x = x/base;\n        base--;\n    }\n    r = base_digits[base]\
    \ + r;\n    if (negative){\n        r = \"-\" + r;\n    }\n    return r;\n}\n",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index2\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index3 = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index4 = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index5\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index6 = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index7 = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index8\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index9 = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index10 = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index11\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index12 = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index13 = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index14\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index15 = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index16 = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index17\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index18 = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index19 = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index20\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index21 = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index22 = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index23\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index24 = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_index25 = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index26\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_index27 = [1,2,3,4,5,6,7,8,9,10",
  "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m\
    \ >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    if(m){\n        r = m%10 + r + String(m%10);\n    }\n    if(x < 0){\n\
    \        sign = -1;\n    }\n    r = sign*parseInt(r,base);\n    return r;\n}\n",
  "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x % base] + r;\n\
    \        x = Math.floor(x / base);\n    }\n    return r;\n}\n", "\tvar bases =\
    \ [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_length = bases.length;\n\tvar result =\
    \ '';\n\t\n\tfor(var i=0; i<bases_length; i++){\n\t\tif(x == bases[i]){\n\t\t\t\
    result = bases[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\n", "\t\
    var r = \"\";\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m = Math.pow(base,x);\n\
    \tfor(i=1;i<=x;i++){\n\t\tif(i<10){\n\t\t\tr += i;\n\t\t}else{\n\t\t\tj = i%base;\n\
    \t\t\tk = base/j;\n\t\t\tl = Math.pow(base,j);\n\t\t\tr += k*i;\n\t\t\tr += l%10+j;\n\
    \t\t}\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x\
    \ < 0){\n        sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n\
    \        r = base_digits[base] + r; \n        x = Math.floor(x/base);\n    }\n\
    \    r = base_digits[base] + r; \n    return sign*r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_length = bases.length;\n\tvar bases_index = bases.indexOf(base);\n\
    \tvar bases_value = bases[bases_index];\n\tvar bases_value = bases_value * Math.pow(bases_value,\
    \ bases_length);\n\tvar bases_value = bases_value + x;\n\treturn bases_value;\n\
    }\n", "    var r = \"\";\n    for(var i = 0; i < base; i++){\n        r += x.charAt(i);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var i;\n    for(i = base;\
    \ i >= 2; i--){\n        if(x == 0){\n            r += \"0\";\n            break;\n\
    \        }\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r =\
    \ base_digits[base%10] + r;\n        x = Math.floor(x/base);\n        base--;\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m\
    \ = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10 + r + String(base);\n\
    \        m = Math.floor(m/10);\n    }\n    if(m > 0){\n        r = m%10 + r +\
    \ String(base);\n    }\n    if(sign == -1){\n        r = r.substr(0,r.length-1);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m\
    \ = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10 + r + String(m%10);\n\
    \        m /= 10;\n    }\n    r = m%10 + r + String(m%10);\n    while(x < 0){\n\
    \        r = r + String(-x%10) + String(m%10);\n        x /= 10;\n        m /=\
    \ 10;\n    }\n    return sign*r + String(m%10);\n}\n", "\tvar bases = {\n\t\t\
    '0': '0',\n\t\t'1': '1',\n\t\t'2': '10',\n\t\t'3': '11',\n\t\t'4': '12',\n\t\t\
    '5': '13',\n\t\t'6': '14',\n\t\t'7': '15',\n\t\t'8': '16',\n\t\t'9': '17',\n\t\
    \t'10': '10',\n\t\t'11': '11',\n\t\t'12': '12',\n\t\t'13': '13',\n\t\t'14': '14',\n\
    \t\t'15': '15',\n\t\t'16': '16',\n\t\t'17': '17',\n\t\t'18': '18',\n\t\t'19':\
    \ '19',\n\t\t'20': '20',\n\t\t'21': '21',\n\t\t'22': '22',\n\t\t'23': '23',\n\t\
    \t'24': '24',\n\t\t'25': '25',\n\t\t'26': '26',\n\t\t'27': '27',\n\t\t'28': '28',\n\
    \t\t'29': '29',\n\t\t'30': '30',\n\t\t'31': '31',\n\t\t'32': '32',\n\t\t'33':\
    \ '33',\n\t\t'34': '34',\n\t\t'35': '35',\n\t\t'36': '36',\n\t\t'37': '37',\n\t\
    \t'38': '38',\n\t\t'39': '39',\n\t\t'40': '40',\n\t\t'41': '41',\n\t\t'42': '42',\n\
    \t\t'43': '43',\n\t\t'44': '44',\n\t\t'45': '45',\n\t\t'46': '46',\n\t\t'47':\
    \ '47',\n\t\t'48': '48',\n\t\t'49': '49',\n\t\t'50': '50',\n\t\t'51': '51',\n\t\
    \t'52': '52',\n\t\t'53': '53',\n\t\t'54': '54',\n\t\t'55': '55',\n\t\t'56': '56',\n\
    \t\t'57': '57',\n\t\t'58': '58',\n\t\t'59': '59',\n\t\t'60': '60',\n\t\t'61':\
    \ '61',\n\t\t'62': '62',\n\t\t'63': '63',\n\t\t'64': '64',\n\t\t'65': '65',\n\t\
    \t'66': '66',\n\t\t'67': '67',\n\t\t'68': '68',\n\t\t'69': '69',\n\t\t'70': '70',\n\
    \t\t'71': '71',\n\t\t'72': '72',\n\t\t'73': '73',\n\t\t'74': '74',\n\t\t'75':\
    \ '75',\n\t\t'76': '76',\n\t\t'77': '77',\n\t\t'78': '78',\n\t\t'79': '79',\n\t\
    \t'80': '80',\n\t\t'81': '81',\n\t\t'82': '82',\n\t\t'83': '83',\n\t\t'84': '84',\n\
    \t\t'", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar base10 = bases[base];\n\t\
    var base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\tvar base4 = bases[base-3]\n\
    \tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\tvar base7 = bases[base-6]\n\
    \tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\tvar base10 = bases[base-9]\n\
    \t\n\tvar base10pow = base10*base;\n\tvar base2pow = base2*base;\n\tvar base3pow\
    \ = base3*base;\n\tvar base4pow = base4*base;\n\tvar base5pow = base5*base;\n\t\
    var base6pow = base6*base;\n\tvar base7pow = base7*base;\n\tvar base8pow = base8*base;\n\
    \tvar base9pow = base9*base;\n\tvar base10pow2 = base10pow*base;\n\tvar base2pow2\
    \ = base2pow*base;\n\tvar base3pow2 = base3pow*base;\n\tvar base4pow2 = base4pow*base;\n\
    \tvar base5pow2 = base5pow*base;\n\tvar base6pow2 = base6pow*base;\n\tvar base7pow2\
    \ = base7pow*base;\n\tvar base8pow2 = base8pow*base;\n\tvar base9pow2 = base9pow*base;\n\
    \t\n\tvar base10pow3 = base10pow2*base;\n\tvar base2pow3 = base2pow2*base;\n\t\
    var base3pow3 = base3pow2*base;\n\tvar base4pow3 = base4pow2*base;\n\tvar base5pow3\
    \ = base5pow2*base;\n\tvar base6pow3 = base6pow2*base;\n\tvar base7pow3 = base7pow2*base;\n\
    \tvar base8pow3 = base8pow2*base;\n\tvar base9pow3 = base9pow2*base;\n\t\n\tvar\
    \ base10pow4 = base10pow3*base;\n\tvar base2pow4 = base2pow3*base;\n\tvar base3pow4\
    \ = base3pow3*base;\n\tvar base4pow4 = base4pow3*base;\n\tvar base5pow4 = base5pow3*base;\n\
    \tvar base6pow4 = base6pow3*base;\n\tvar base7pow4 = base7pow3*base;\n\tvar base8pow4\
    \ = base8pow3*base;\n\tvar base9pow", "    var r = \"\";\n    var sign = 1;\n\
    \    var m = 1;\n    var digit;\n    \n    if (x < 0){\n        sign = -1;\n \
    \       x = -x;\n    }\n    \n    while (x >= base){\n        digit = x % base;\n\
    \        x = x / base;\n        r += digit;\n    }\n    \n    if (x != 1){\n \
    \       digit = x % base;\n        r += digit;\n    }\n    \n    return sign*r;\n\
    }\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_length = bases.length;\n\
    \tvar bases_index = bases.indexOf(base);\n\tvar bases_value = bases[bases_index];\n\
    \tvar bases_digit = bases_value.toString().length;\n\tvar bases_power = bases_length\
    \ - bases_digit;\n\tvar bases_power_value = bases_power + 1;\n\tvar bases_power_value_string\
    \ = bases_power_value.toString();\n\tvar bases_power_value_length = bases_power_value_string.length;\n\
    \tvar bases_power_value_length_str = bases_power_value_length.toString();\n\t\
    var bases_power_value_length_str_length = bases_power_value_length_str.length;\n\
    \tvar bases_power_value_length_str_length_str = bases_power_value_length_str_length.toString();\n\
    \tvar bases_power_value_length_str_length_str_length = bases_power_value_length_str_length_str.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str = bases_power_value_length_str_length_str_length.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length = bases_power_value_length_str_length_str_length_str.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length_str = bases_power_value_length_str_length_str_length_str_length.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length_str_length = bases_power_value_length_str_length_str_length_str_length_str.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length_str_length_str\
    \ = bases_power_value_length_str_length_str_length_str_length_str_length.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length_str_length_str_length\
    \ = bases_power_value_length_str_length_str_length_str_length_str_length_str.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = bases_power_value_length_str_length_str_length_str_length_str_length_str_length_str.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = bases_power_value_length_str_length_str_length_str_length_str_length_str_length_str_length.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length\
    \ = bases_power_value_length_str_length_str_length_str_length_str_length_str_length_str_length_str.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length_str\
    \ = bases_power_value_length_str_length_str_length_str_length_str_length_str_length_str_length_str_length.toString();\n\
    \tvar bases_power_value_length_str_length_str_length_str_", "    var r = \"\"\
    ;\n    while(x != 0){\n        r = base_digits[x % base] + r;\n        x = Math.floor(x\
    \ / base);\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n\
    \    var m = Math.pow(base,x.length);\n    for(var i = 0; i < x.length; i++){\n\
    \        var c = x.charAt(i);\n        var n = parseInt(c,base);\n        if((i\
    \ == 0) && (c == \".\")){\n            n = m;\n        }\n        r = r + pad(n,base);\n\
    \    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n \
    \   if(x<0){\n        sign = \"-\";\n        x = -x;\n    }\n    var x_str = x.toString();\n\
    \    var x_len = x_str.length;\n    var digits = x_len % base.length;\n    var\
    \ digits_str = Array(digits).join(\"0\");\n    var digits_len = digits.length;\n\
    \    var decimal_len = base - digits_len;\n    var decimal_str = Array(decimal_len).join(\"\
    0\");\n    for(var i = 0; i < x_len; i++){\n        var c = x_str.charAt(i);\n\
    \        var d = digits_str.indexOf(c);\n        if(d != -1){\n            r +=\
    \ digits_str.slice(d, d+1);\n        }else{\n            r += c;\n        }\n\
    \    }\n    r += Array(decimal_len+1).join(\"0\");\n    return sign + r;\n}\n",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_string = \"\";\n\tfor(var i = 0; i < bases.length; i++){\n\
    \t\tbases_reversed_string += bases[bases_reversed[i]];\n\t}\n\tvar bases_reversed_string\
    \ = bases_reversed_string.split(\"\");\n\tvar bases_reversed_string_length = bases_reversed_string.length;\n\
    \tvar bases_reversed_string_length_half = bases_reversed_string_length/2;\n\t\
    var bases_reversed_string_length_quarter = bases_reversed_string_length/4;\n\t\
    var bases_reversed_string_length_three = bases_reversed_string_length/3;\n\tvar\
    \ bases_reversed_string_length_five = bases_reversed_string_length/5;\n\tvar bases_reversed_string_length_seven\
    \ = bases_reversed_string_length/7;\n\tvar bases_reversed_string_length_eight\
    \ = bases_reversed_string_length/8;\n\tvar bases_reversed_string_length_nine =\
    \ bases_reversed_string_length/9;\n\tvar bases_reversed_string_length_ten = bases_reversed_string_length/10;\n\
    \tvar bases_reversed_string_length_eleven = bases_reversed_string_length/11;\n\
    \tvar bases_reversed_string_length_thirteen = bases_reversed_string_length/12;\n\
    \tvar bases_reversed_string_length_fourteen = bases_reversed_string_length/13;\n\
    \tvar bases_reversed_string_length_fifteen = bases_reversed_string_length/14;\n\
    \tvar bases_reversed_string_length_sixteen = bases_reversed_string_length/15;\n\
    \tvar bases_reversed_string_length_seventeen = bases_reversed_string_length/16;\n\
    \tvar bases_reversed_string_length_eighteen = bases_reversed_string_length/17;\n\
    \tvar bases_reversed_string_length_nineteen = bases_reversed_string_length/18;\n\
    \tvar bases_reversed_string_length_twenty = bases_reversed_string_length/19;\n\
    \tvar bases_reversed_string_length_twenty_one = bases_reversed_string_length/20;\n\
    \tvar bases_reversed_string_length_twenty_two = bases_reversed_string_length/21;\n\
    \tvar bases_reversed_string_length_twenty_three = bases_reversed_string_length/22;\n\
    \tvar bases_reversed_string_length_twenty_four = bases_reversed_string_length/23;\n\
    \tvar bases_reversed_string_length_twenty_", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_length = bases.length;\n\tvar new_base = 0;\n\tvar new_base_index\
    \ = 0;\n\t\n\twhile(bases_length){\n\t\tnew_base = bases[new_base_index];\n\t\t\
    new_base_index++;\n\t\tif(new_base == base){\n\t\t\tbases_length--;\n\t\t}else{\n\
    \t\t\tbases_length--;\n\t\t\tbases[new_base_index] = new_base;\n\t\t}\n\t}\n\t\
    \n\tvar new_x = \"\";\n\t\n\tfor(var i = 0; i < x.length; i++){\n\t\tnew_x +=\
    \ x.charAt(i);\n\t}\n\t\n\treturn new_x;\n}\n", "\tvar bases = {\n\t\t'0': '0',\n\
    \t\t'1': '1',\n\t\t'2': '10',\n\t\t'3': '11',\n\t\t'4': '12',\n\t\t'5': '13',\n\
    \t\t'6': '14',\n\t\t'7': '15',\n\t\t'8': '16',\n\t\t'9': '17',\n\t\t'10': '10',\n\
    \t\t'11': '11',\n\t\t'12': '12',\n\t\t'13': '13',\n\t\t'14': '14',\n\t\t'15':\
    \ '15',\n\t\t'16': '16',\n\t\t'17': '17',\n\t\t'18': '18',\n\t\t'19': '19',\n\t\
    \t'20': '20',\n\t\t'21': '21',\n\t\t'22': '22',\n\t\t'23': '23',\n\t\t'24': '24',\n\
    \t\t'25': '25',\n\t\t'26': '26',\n\t\t'27': '27',\n\t\t'28': '28',\n\t\t'29':\
    \ '29',\n\t\t'30': '30',\n\t\t'31': '31',\n\t\t'32': '32',\n\t\t'33': '33',\n\t\
    \t'34': '34',\n\t\t'35': '35',\n\t\t'36': '36',\n\t\t'37': '37',\n\t\t'38': '38',\n\
    \t\t'39': '39',\n\t\t'40': '40',\n\t\t'41': '41',\n\t\t'42': '42',\n\t\t'43':\
    \ '43',\n\t\t'44': '44',\n\t\t'45': '45',\n\t\t'46': '46',\n\t\t'47': '47',\n\t\
    \t'48': '48',\n\t\t'49': '49',\n\t\t'50': '50',\n\t\t'51': '51',\n\t\t'52': '52',\n\
    \t\t'53': '53',\n\t\t'54': '54',\n\t\t'55': '55',\n\t\t'56': '56',\n\t\t'57':\
    \ '57',\n\t\t'58': '58',\n\t\t'59': '59',\n\t\t'60': '60',\n\t\t'61': '61',\n\t\
    \t'62': '62',\n\t\t'63': '63',\n\t\t'64': '64',\n\t\t'65': '65',\n\t\t'66': '66',\n\
    \t\t'67': '67',\n\t\t'68': '68',\n\t\t'69': '69',\n\t\t'70': '70',\n\t\t'71':\
    \ '71',\n\t\t'72': '72',\n\t\t'73': '73',\n\t\t'74': '74',\n\t\t'75': '75',\n\t\
    \t'76': '76',\n\t\t'77': '77',\n\t\t'78': '78',\n\t\t'79': '79',\n\t\t'80': '80',\n\
    \t\t'81': '81',\n\t\t'82': '82',\n\t\t'83': '83',\n\t\t'84': '84',\n\t\t'", " \
    \   var s = \"\" + x;\n    var l = s.length;\n    var n = 0;\n    while(n < l){\n\
    \        var m = n % base;\n        s = s.substring(0,m) + s.substring(m+1,m+1)\
    \ + String.fromCharCode(s.charCodeAt(m)+1);\n        n++;\n    }\n    return s;\n\
    }\n", "    var r = \"\";\n    while(x > 0){\n        r = base_digits[x % base]\
    \ + r;\n        x = Math.floor(x / base);\n    }\n    return r;\n}\n", "\tvar\
    \ bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_index = 0;\n\twhile(bases_index\
    \ < bases.length){\n\t\tif(bases[bases_index] == base){\n\t\t\tbreak;\n\t\t}\n\
    \t\tbases_index++;\n\t}\n\tvar result = \"\";\n\twhile(x > 0){\n\t\tresult = bases[bases_index]\
    \ + result;\n\t\tx = x/bases[bases_index];\n\t\tbases_index++;\n\t}\n\treturn\
    \ result;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n\
    \    var n = Math.floor(m);\n    var digits = m/n;\n    while(digits--){\n   \
    \     r += digits;\n    }\n    sign = n < 0 ? \"-\" : \"\";\n    r = sign + r;\n\
    \    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ s = \"\" + x;\n    var l = s.length - 1;\n    var digits = \"\";\n    while(l\
    \ >= 0){\n        digits = digits+s[l];\n        l--;\n    }\n    var num = parseInt(digits,\
    \ base);\n    var res = \"\";\n    while(num > 0){\n        res = digits[num %\
    \ base] + res;\n        num = Math.floor(num / base);\n    }\n    return res;\n\
    }\n", "\tvar bases = {\n\t\t'binary': {\n\t\t\t'base': 2, // binary\n\t\t\t'symbol':\
    \ 'binary'\n\t\t},\n\t\t'octal': {\n\t\t\t'base': 8, // octal\n\t\t\t'symbol':\
    \ 'octal'\n\t\t},\n\t\t'decimal': {\n\t\t\t'base': 10, // decimal\n\t\t\t'symbol':\
    \ 'decimal'\n\t\t}\n\t};\n\tvar base_name = bases[base]['symbol'];\n\tvar base_number\
    \ = bases[base]['base'];\n\tvar base_length = base_number + 1;\n\tvar base_string\
    \ = x.toString(base_length);\n\tvar base_length = base_string.length;\n\tvar base_string_reversed\
    \ = base_string.split(\"\").reverse().join(\"\");\n\tvar base_length = base_string_reversed.length;\n\
    \tvar base_string_reversed_reversed = base_string_reversed.split(\"\").reverse().join(\"\
    \");\n\tvar base_length = base_string_reversed_reversed.length;\n\tvar base_string_reversed_reversed_reversed\
    \ = base_string_reversed_reversed.split(\"\").reverse().join(\"\");\n\tvar base_length\
    \ = base_string_reversed_reversed_reversed.length;\n\tvar base_string_reversed_reversed_reversed_reversed\
    \ = base_string_reversed_reversed_reversed.split(\"\").reverse().join(\"\");\n\
    \tvar base_length = base_string_reversed_reversed_reversed_reversed_reversed.length;\n\
    \tvar base_string_reversed_reversed_reversed_reversed_reversed = base_string_reversed_reversed_reversed_reversed_reversed.split(\"\
    \").reverse().join(\"\");\n\tvar base_length = base_string_reversed_reversed_reversed_reversed_reversed_reversed.length;\n\
    \tvar base_string_reversed_reversed_reversed_reversed_reversed_reversed = base_string_reversed_reversed_reversed_reversed_reversed_reversed.split(\"\
    \").reverse().join(\"\");\n\tvar base_length = base_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed.length;\n\
    \tvar base_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = base_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.split(\"\
    \").reverse().join(\"\");\n\tvar base_length = base_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.length;\n\
    \tvar base_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = base_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.split(\"\
    \").reverse().join(\"\");\n\tvar base_length = base_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index2\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index3 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index4 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index5\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index6 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index7 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index8\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index9 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index10 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index11\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index12 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index13 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index14\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index15 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index16 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index17\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index18 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index19 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index20\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index21 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index22 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index23\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index24 = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_index25 = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index26\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_index27 = [10,9,8,7,6,5,4,3,2,",
  "\tvar bases = {\n\t\t'10': '0123456789',\n\t\t'16': '0123456789abcdef',\n\t\t'32':\
    \ '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\t\t'64':\
    \ '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm",
  "    var r = \"\";\n    while(x>0){\n        r = base_digits[base%10] + r;\n   \
    \     x = Math.floor(x/base);\n        base = base*10;\n    }\n    return r;\n\
    }\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_string = \"0123456789ABCDEF\";\n\tvar bases_reversed_string_reversed\
    \ = bases_reversed_string.split(\"\");\n\t\n\tfor(var i = 0; i < bases.length;\
    \ i++){\n\t\tif(bases[i] == base){\n\t\t\treturn x;\n\t\t}\n\t}\n\t\n\tvar bases_reversed_index\
    \ = bases_reversed.indexOf(base);\n\t\n\tif(bases_reversed_index != -1){\n\t\t\
    x = x.toString(bases_reversed_string_reversed[bases_reversed_index]);\n\t}\n\t\
    \n\treturn x;\n}\n", "\tvar bases = ['', 'K', 'M', 'B', 'T'];\n\tvar base10 =\
    \ bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\t\
    var base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\tvar base11 = bases[base-10]\n\tvar base12 = bases[base-11]\n\
    \tvar base13 = bases[base-12]\n\tvar base14 = bases[base-13]\n\tvar base15 = bases[base-14]\n\
    \tvar base16 = bases[base-15]\n\tvar base17 = bases[base-16]\n\tvar base18 = bases[base-17]\n\
    \tvar base19 = bases[base-18]\n\tvar base20 = bases[base-19]\n\tvar base21 = bases[base-20]\n\
    \tvar base22 = bases[base-21]\n\tvar base23 = bases[base-22]\n\tvar base24 = bases[base-23]\n\
    \tvar base25 = bases[base-24]\n\tvar base26 = bases[base-25]\n\tvar base27 = bases[base-26]\n\
    \tvar base28 = bases[base-27]\n\tvar base29 = bases[base-28]\n\tvar base30 = bases[base-29]\n\
    \tvar base31 = bases[base-30]\n\tvar base32 = bases[base-31]\n\tvar base33 = bases[base-32]\n\
    \tvar base34 = bases[base-33]\n\tvar base35 = bases[base-34]\n\tvar base36 = bases[base-35]\n\
    \tvar base37 = bases[base-36]\n\tvar base38 = bases[base-37]\n\tvar base39 = bases[base-38]\n\
    \tvar base40 = bases[base-39]\n\tvar base41 = bases[base-40]\n\tvar base42 = bases[base-41]\n\
    \tvar base43 = bases[base-42]\n\tvar base44 = bases[base-43]\n\tvar base45 = bases[base-44]\n\
    \tvar base46 = bases[base-45]\n\tvar base47 = bases[base-46]\n\tvar base48 = bases[base-47]\n\
    \tvar base49 = bases[base-48]\n\tvar base50 = bases[base-49]\n\tvar base51 = bases[base-50]\n\
    \tvar base52 = bases[base-51]\n\tvar ", "    var r = \"\";\n    var sign = \"\"\
    ;\n    var digits = \"\";\n    var i = 0;\n    var j = 0;\n    var k = 0;\n  \
    \  var z = 0;\n    var basedigits = base.length;\n    var xdigits = x.length;\n\
    \    var xdigit = x.charAt(0);\n    var xdigits = x.length;\n    var basedigit\
    \ = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n\
    \    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n    var\
    \ basedigits = base.length;\n    var basedigit = base.charAt(0);\n    var basedigits\
    \ = base.length;\n    var basedigit = base.charAt(0);\n    var basedigits = base.length;\n\
    \    var basedigit = base.charAt(0);\n    var basedigits = base.length;\n    var\
    \ basedigit = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit\
    \ = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n\
    \    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n    var\
    \ basedigits = base.length;\n    var basedigit = base.charAt(0);\n    var basedigits\
    \ = base.length;\n    var basedigit = base.charAt(0);\n    var basedigits = base.length;\n\
    \    var basedigit = base.charAt(0);\n    var basedigits = base.length;\n    var\
    \ basedigit = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit\
    \ = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n\
    \    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n    var\
    \ basedigits = base.length;\n    var basedigit = base.charAt(0);\n    var basedigits\
    \ = base.length;\n    var basedigit = base.charAt(0);\n    var basedigits = base.length;\n\
    \    var basedigit = base.charAt(0);\n    var basedigits = base.length;\n    var\
    \ basedigit = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit\
    \ = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n\
    \    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n    var\
    \ basedigits = base.length;\n    var basedigit = base.charAt(0);\n    var basedigits\
    \ = base.length;\n    var basedigit = base.charAt(0);\n    var basedigits = base.length;\n\
    \    var basedigit = base.charAt(0);\n    var basedigits = base.length;\n    var\
    \ basedigit = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit\
    \ = base.charAt(0);\n    var basedigits = base.length;\n    var basedigit = base.charAt(0);\n\
    \    var basedigits = base.length;\n    var basedigit = base.", "\tvar bases =\
    \ [1,2,3,4,5,6,7,8,9,10];\n\tvar base10 = bases[base];\n\tvar base2 = bases[base-1];\n\
    \tvar base3 = bases[base-2];\n\tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\
    \tvar base6 = bases[base-5]\n\tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\
    \tvar base9 = bases[base-8]\n\tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar base2 = bases[base-1];\n\tvar base3 = bases[base-2];\n\
    \tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\tvar base6 = bases[base-5]\n\
    \tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\tvar base9 = bases[base-8]\n\
    \tvar base10 = bases[base-9]\n\t\n\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ base10 = bases[base];\n\tvar ", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ bases_length = bases.length;\n\tvar result = '';\n\tvar i;\n\t\n\tfor(i = 0;\
    \ i < bases_length; i++){\n\t\tresult += bases[i] * Math.pow(x, bases_length -\
    \ i - 1);\n\t}\n\t\n\treturn result;\n}\n", "    var r = \"\";\n    var sign =\
    \ \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n    var\
    \ x_str = x.toString();\n    var x_len = x_str.length;\n    var bases = [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\"];\n    var bases_len = bases.length;\n    var i;\n\
    \    for (i = 0; i < x_len; i++){\n        var c = x_str.charAt(i);\n        var\
    \ b = bases.indexOf(c);\n        if (b >= bases_len){\n            r += c;\n \
    \       }else{\n            r += bases[b];\n        }\n    }\n    return sign\
    \ + r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_string = \"0123456789ABCDEF\";\n\tvar bases_reversed_string_reversed\
    \ = bases_reversed_string.split(\"\");\n\t\n\tvar bases_reversed_string_reversed_length\
    \ = bases_reversed_string_reversed.length;\n\t\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\t\n\tvar bases_reversed_string_length_length\
    \ = bases_reversed_string_length.length;\n\t\n\tvar bases_reversed_string_length_length_length\
    \ = bases_reversed_string_length_length.length;\n\t\n\tvar bases_reversed_string_length_length_length_length\
    \ = bases_reversed_string_length_length_length.length;\n\t\n\tvar bases_reversed_string_length_length_length_length_length_length\
    \ = bases_reversed_string_length_length_length_length_length.length;\n\t\n\tvar\
    \ bases_reversed_string_length_length_length_length_length_length_length_length\
    \ = bases_reversed_string_length_length_length_length_length_length_length_length.length;\n\
    \t\n\tvar bases_reversed_string_length_length_length_length_length_length_length_length_length_length_length\
    \ = bases_reversed_string_length_length_length_length_length_length_length_length_length_length.length;\n\
    \t\n\tvar bases_reversed_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = bases_reversed_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length.length;\n\
    \t\n\tvar bases_reversed_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_",
  "\tvar bases = ['', 'K', 'M', 'B', 'T'];\n\tvar index = 0;\n\tvar result = \"\"\
    ;\n\twhile(x < base){\n\t\tresult += bases[base];\n\t\tx = Math.floor(x / base);\n\
    \t\tindex++;\n\t}\n\treturn result;\n}\n", "    var s = \"\" + x;\n    var n =\
    \ s.length;\n    var n1 = Math.pow(base, n);\n    var n2 = Math.pow(base, n-1);\n\
    \    var n3 = Math.pow(base, n-2);\n    var n4 = Math.pow(base, n-3);\n    var\
    \ n5 = Math.pow(base, n-4);\n    var n6 = Math.pow(base, n-5);\n    var n7 = Math.pow(base,\
    \ n-6);\n    var n8 = Math.pow(base, n-7);\n    var n9 = Math.pow(base, n-8);\n\
    \    var n10 = Math.pow(base, n-9);\n    var n11 = Math.pow(base, n-10);\n   \
    \ var n12 = Math.pow(base, n-11);\n    var n13 = Math.pow(base, n-12);\n    var\
    \ n14 = Math.pow(base, n-13);\n    var n15 = Math.pow(base, n-14);\n    var n16\
    \ = Math.pow(base, n-15);\n    var n17 = Math.pow(base, n-16);\n    var n18 =\
    \ Math.pow(base, n-17);\n    var n19 = Math.pow(base, n-18);\n    var n20 = Math.pow(base,\
    \ n-19);\n    var n21 = Math.pow(base, n-20);\n    var n22 = Math.pow(base, n-21);\n\
    \    var n23 = Math.pow(base, n-22);\n    var n24 = Math.pow(base, n-23);\n  \
    \  var n25 = Math.pow(base, n-24);\n    var n26 = Math.pow(base, n-25);\n    var\
    \ n27 = Math.pow(base, n-26);\n    var n28 = Math.pow(base, n-27);\n    var n29\
    \ = Math.pow(base, n-28);\n    var n30 = Math.pow(base, n-29);\n    var n31 =\
    \ Math.pow(base, n-30);\n    var n32 = Math.pow(base, n-31); \n    var n33 = Math.pow(base,\
    \ n-32);\n    var n34 = Math.pow(base, n-33);\n    var n35 = Math.pow(base, n-34);\n\
    \    var n36 = Math.pow(base, n-35);\n    var n37 = Math.pow(base, n-36);\n  \
    \  var n38 = Math.pow(base, n-37);\n    var n39 = Math.pow(base, n-38);\n    var\
    \ n40 = Math.pow(base, n-39);\n    var n41 = Math.pow(base, n-40);\n    var n42\
    \ = Math.pow(base, n-41);\n    var n43 = Math.pow(base, n-42); \n    var n44 =\
    \ Math.pow(base, n-43);\n    var n45 = Math.pow(base, n-44);\n    var n46 = Math.pow(base,\
    \ n-45);\n    var n47 = Math.pow(base, n-46);\n    var n48 = Math.pow(base, n-",
  "\tvar bases = {\n\t\t2 : 'bin',\n\t\t8 : 'oct',\n\t\t10 : 'dec'\n\t};\n\tvar b\
    \ = bases[base];\n\tvar d = parseInt(x, base);\n\tvar r = \"\";\n\twhile(d > 0){\n\
    \t\tr = b + r; \n\t\td = d / base;\n\t}\n\treturn r;\n}\n", "\tvar bases = [2,8,10,16,22,36,52,100];\n\
    \tvar bases_length = bases.length;\n\tvar base_length = bases_length-1;\n\tvar\
    \ base_number = bases[base_length];\n\tvar base_remainder = x % base_number;\n\
    \tvar new_base = Math.floor(x / base_number);\n\tvar new_number = bases[new_base];\n\
    \tvar new_remainder = base_remainder + new_number;\n\treturn new_remainder;\n\
    }\n", "    var r = \"\";\n    var sign = \"\";\n    if (x < 0){\n        sign\
    \ = \"-\";\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[base]\
    \ + r;\n        x -= base;\n    }\n    r = base_digits[base] + r + base_digits[x\
    \ % base];\n    if (sign === \"-\"){\n        r = r.substr(1);\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n\
    \    var d = Math.floor(m/Math.pow(base,base));\n    var r = m%Math.pow(base,base);\n\
    \    if(d > 0){\n        sign = \"-\";\n    }\n    while(d > 0){\n        r =\
    \ r*Math.pow(base,base);\n        d--;\n    }\n    r = sign+r;\n    return r;\n\
    }\n", "\tvar bases = {\n\t\t'binary' : 1,\n\t\t'octal' : 8,\n\t\t'decimal' : 10,\n\
    \t\t'hexadecimal' : 16\n\t};\n\tvar base_name = bases[base];\n\tvar digits = Math.log(x)\
    \ / Math.log(base_name);\n\tvar number = Math.pow(base_name, digits);\n\treturn\
    \ number.toFixed(digits);\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar\
    \ bases_length = bases.length;\n\tvar result = '';\n\t\n\twhile(bases_length--){\n\
    \t\tresult += bases[bases_length]*Math.pow(base,bases_length);\n\t}\n\t\n\treturn\
    \ Math.round(x*Math.pow(base,bases_length))/Math.pow(base,bases_length);\n}\n",
  "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n    var m = Math.pow(base,x);\n\
    \    var d = Math.abs(x);\n    while(d >= base){\n        r = sign + d.toFixed(base-1)\
    \ + r;\n        d /= base;\n    }\n    return r + sign + d.toFixed(base);\n}\n",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_reversed = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed =\
    \ [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_",
  "    var r = \"\";\n    var negative = false;\n    if (x < 0){\n        negative\
    \ = true;\n        x = -x;\n    }\n    var x_str = x.toString();\n    var x_len\
    \ = x_str.length;\n    var x_pos = 0;\n    var x_base = 1;\n    while (x_pos <\
    \ x_len){\n        var x_digit = x_str.charAt(x_pos);\n        var x_digit = parseInt(x_digit,\
    \ base);\n        if (x_digit < base){\n            x_digit = x_digit + x_base;\n\
    \        }\n        r = x_digit.toString(base) + r;\n        x_pos += 1;\n   \
    \     x_base = base;\n    }\n    if (negative){\n        r = \"-\" + r;\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0) sign\
    \ = -1;\n    while(Math.abs(x) > base){\n        r = parseInt(x / base) + r;\n\
    \        x = x % base;\n    }\n    r = sign * x;\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var i;\n    for(i = base; i < 10; i++){\n        if(x == i){\n\
    \            r += i;\n        }else{\n            r += x.toString(base);\n   \
    \     }\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n \
    \   var m = 1;\n    var isNegative = false;\n    var isNegativeSign = false;\n\
    \    var isNegativeSignAfter = false;\n    var isNegativeSignBefore = false;\n\
    \    var isNegativeSignBeforeAfter = false;\n    var isNegativeSignBeforeAfterOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOrZero\
    \ = false;\n    var isNegativeSignBeforeAfterZeroOrZero = false;\n    var isNegativeSignBeforeAfterZeroOr",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_length = bases.length;\n\tvar\
    \ new_base = 0;\n\tvar new_base_index = 0;\n\t\n\twhile(new_base_index < bases_length){\n\
    \t\tnew_base = bases[new_base_index];\n\t\t\n\t\tif(new_base == base){\n\t\t\t\
    break;\n\t\t}\n\t\t\n\t\tif(new_base < base){\n\t\t\tnew_base_index += 1;\n\t\t\
    }\n\t\telse{\n\t\t\tnew_base_index -= 1;\n\t\t}\n\t}\n\t\n\tif(new_base_index\
    \ == bases_length){\n\t\treturn \"0\";\n\t}\n\t\n\tvar new_x = x;\n\t\n\twhile(new_x\
    \ > 0){\n\t\tnew_x /= base;\n\t\tnew_base_index += 1;\n\t}\n\t\n\tvar new_base_index\
    \ = new_base_index - 1;\n\t\n\tvar new_base = \"\";\n\t\n\twhile(new_base_index\
    \ >= 0){\n\t\tnew_base = bases[new_base_index];\n\t\t\n\t\tif(new_base == base){\n\
    \t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(new_base < base){\n\t\t\tnew_base_index -= 1;\n\
    \t\t}\n\t\telse{\n\t\t\tnew_base_index += 1;\n\t\t}\n\t}\n\t\n\treturn new_base;\n\
    }\n", "    var r = \"\";\n    var i;\n    for(i = base; i < 10; i++){\n      \
    \  r += x.charAt(i) + i;\n    }\n    return r;\n}\n", "    var r = \"\";\n   \
    \ var i;\n    for(i = base; i < 10; i++){\n        r += x.toString(i);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n        r\
    \ = base_digits[base] + r;\n        x -= base;\n    }\n    r = base_digits[base]\
    \ + r + base_digits[x % base];\n    return sign*r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \t\n\tvar base_index = bases.indexOf(base);\n\tvar base_reversed_index = bases_reversed.indexOf(base);\n\
    \tvar base_reversed_reversed_index = bases_reversed_reversed.indexOf(base);\n\t\
    var base_reversed_reversed_reversed_index = bases_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_index = bases_reversed_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_reversed_index = bases_reversed_reversed_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_reversed_reversed_index = bases_reversed_reversed_reversed_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.indexOf(base);\n",
  "\tvar bases = {\n\t\t'binary': _binary,\n\t\t'octal': _octal,\n\t\t'decimal': _decimal,\n\
    \t\t'hexadecimal': _hexadecimal\n\t};\n\treturn bases[base](x);\n}\n", "\tvar\
    \ bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \tvar bases_reversed_reversed = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed =\
    \ [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_index = 0;\n\twhile(bases_index\
    \ < bases.length){\n\t\tif(bases[bases_index] == base){\n\t\t\tbreak;\n\t\t}\n\
    \t\tbases_index++;\n\t}\n\tbases_index--;\n\tvar bases_length = bases.length;\n\
    \tvar bases_value = bases[bases_index];\n\tvar bases_power = bases_length - bases_index;\n\
    \tvar bases_power_value = bases_value ** bases_power;\n\tvar bases_power_value_length\
    \ = bases_power_value.length;\n\tvar bases_power_value_length_power = bases_power_value_length\
    \ ** bases_power;\n\tvar bases_power_value_length_power_value = bases_power_value_length\
    \ * bases_power_value;\n\tvar bases_power_value_length_power_value_length = bases_power_value_length_power\
    \ + 1;\n\tvar bases_power_value_length_power_value_length_power = bases_power_value_length_power_value\
    \ ** bases_power;\n\tvar bases_power_value_length_power_value_length_power_value\
    \ = bases_power_value_length_power + bases_power_value_length_power_value;\n\t\
    var bases_power_value_length_power_value_length_power_value_length = bases_power_value_length_power_value\
    \ + bases_power_value_length_power_value_length;\n\tvar bases_power_value_length_power_value_length_power_value_length_power\
    \ = bases_power_value_length_power_value + bases_power_value_length_power_value_length_power;\n\
    \tvar bases_power_value_length_power_value_length_power_value_length_power_value\
    \ = bases_power_value_length_power_value + bases_power_value_length_power_value_length_power_value;\n\
    \tvar bases_power_value_length_power_value_length_power_value_length_power_value_length\
    \ = bases_power_value_length_power_value + bases_power_value_length_power_value_length_power_value_length;\n\
    \tvar bases_power_value_length_power_value_length_power_value_length_power_value_length_power\
    \ = bases_power_value_length_power_value + bases_power_value_length_power_value_length_power_value_length_power;\n\
    \tvar bases_power_value_length_power_value_length_power_value_length_power_value_length_power_value\
    \ = bases_power_value_length_power_value + bases_power_value_length_power_value_length_power_value_length_power_value;\n\
    \tvar bases_power_value_length_power_value_length_power_value_length_power_value_length_power_value_length\
    \ = bases_power_value_length_power_value + bases_power_value_length_power_value_length_power_value_length_power_value_length;\n\
    \tvar bases_power_value_length_power_value_length_power_value_length_power_value_length_power_value_length_power\
    \ = bases_power_value_length_power_value + bases_power_value_length_power_value_length_power_value_length_power_value_length_power;",
  "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x % base] + r;\n\
    \        x = Math.floor(x / base);\n    }\n    return r;\n}\n", "\tvar digits\
    \ = x.toString().split(\"\").reverse();\n\tvar digits_length = digits.length;\n\
    \tvar decimal_digits = \"\";\n\t\n\twhile(digits_length){\n\t\tvar digit = digits[digits_length-1];\n\
    \t\t\n\t\tif(digit < base){\n\t\t\tdecimal_digits += digit;\n\t\t\tdigits_length--;\n\
    \t\t}else{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tvar result = \"\";\n\t\n\tfor(var\
    \ i = 0; i < digits_length; i++){\n\t\tvar digit = digits[i];\n\t\t\n\t\tif(decimal_digits\
    \ == \"\"){\n\t\t\tresult += digit;\n\t\t}else{\n\t\t\tresult += digit + decimal_digits;\n\
    \t\t}\n\t\t\n\t\tdecimal_digits = \"\";\n\t}\n\t\n\treturn result;\n}\n", "\t\
    var digits = x.toString().split('');\n\tvar new_digits = [];\n\tfor(var i = 0;\
    \ i < digits.length; i++){\n\t\tnew_digits.push(parseInt(digits[i], base));\n\t\
    }\n\treturn new_digits.reverse().join('');\n}\n", "    var r = \"\";\n    var\
    \ i;\n    for(i = x.length - 1; i >= 0; i--){\n        r = base_convert(x[i],\
    \ base) + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = \"\
    \";\n    var isNegative = false;\n    var isPositive = false;\n    var isZero\
    \ = false;\n    var isNegativeZero = false;\n    var isPositiveZero = false;\n\
    \    var isNegativeOne = false;\n    var isPositiveOne = false;\n    var isNegativeTwo\
    \ = false;\n    var isPositiveTwo = false;\n    var isNegativeThree = false;\n\
    \    var isPositiveThree = false;\n    var isNegativeFour = false;\n    var isPositiveFour\
    \ = false;\n    var isNegativeFive = false;\n    var isPositiveFive = false;\n\
    \    var isNegativeSix = false;\n    var isPositiveSix = false;\n    var isNegativeSeven\
    \ = false;\n    var isPositiveSeven = false;\n    var isNegativeEight = false;\n\
    \    var isPositiveEight = false;\n    var isNegativeNine = false;\n    var isPositiveNine\
    \ = false;\n    var isNegativeZeroOne = false;\n    var isPositiveZeroOne = false;\n\
    \    var isNegativeZeroTwo = false;\n    var isPositiveZeroTwo = false;\n    var\
    \ isNegativeZeroThree = false;\n    var isPositiveZeroThree = false;\n    var\
    \ isNegativeZeroFour = false;\n    var isPositiveZeroFour = false;\n    var isNegativeZeroFive\
    \ = false;\n    var isPositiveZeroFive = false;\n    var isNegativeZeroSix = false;\n\
    \    var isPositiveZeroSix = false;\n    var isNegativeZeroSeven = false;\n  \
    \  var isPositiveZeroSeven = false;\n    var isNegativeZeroEight = false;\n  \
    \  var isPositiveZeroEight = false;\n    var isNegativeZeroNine = false;\n   \
    \ var isPositiveZeroNine = false;\n    var isNegativeOneZero = false;\n    var\
    \ isPositiveOneZero = false;\n    var isNegativeOneOne = false;\n    var isPositiveOneOne\
    \ = false;\n    var isNegativeOneTwo = false;\n    var isPositiveOneTwo = false;\n\
    \    var isNegativeOneThree = false;\n    var isPositiveOneThree = false;\n  \
    \  var isNegativeOneFour = false;\n    var isPositiveOneFour = false;\n    var\
    \ isNegativeOneFive = false;\n    var isPositiveOneFive = false;\n    var isNegativeOneSix\
    \ = false;\n    var isPositiveOneSix = false;\n    var isNegativeOneSeven = false;\n\
    \    var isPositiveOneSeven = false;\n    var isNegativeOneEight = false;\n  \
    \  var isPositiveOneEight = false;\n    var isNegativeOneNine = false;\n    var\
    \ isPositiveOneNine = false;\n    var isNegativeTwoZero = false;\n    var isPositiveTwoZero\
    \ = false;\n    var isNegativeTwoOne = false;\n    var isPositiveTwoOne = false;\n\
    \    var isNegativeTwoTwo = false;\n    var isPositiveTwoTwo = false;\n    var\
    \ isNegativeTwoThree = false;\n    var isPositiveTwoThree = false;\n    var isNegativeTwoFour\
    \ = false;\n    var isPositiveTwoFour = false;\n    var isNegative", "    var\
    \ r = \"\";\n    var sign = \"\";\n    var isNegative = false;\n    var isNegativeBase\
    \ = false;\n    var isNegativeBaseString = false;\n    var isNegativeBaseStringBase\
    \ = false;\n    var isNegativeBaseStringBaseString = false;\n    var isNegativeBaseStringBaseStringBase\
    \ = false;\n    var isNegativeBaseStringBaseStringBaseString = false;\n    var\
    \ isNegativeBaseStringBaseStringBaseStringBase = false;\n    var isNegativeBaseStringBaseStringBaseStringBase\
    \ = false;\n    var isNegativeBaseStringBaseStringBaseStringBaseString = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBase = false;\n   \
    \ var isNegativeBaseStringBaseStringBaseStringBaseStringBase = false;\n    var\
    \ isNegativeBaseStringBaseStringBaseStringBaseStringBaseString = false;\n    var\
    \ isNegativeBaseStringBaseStringBaseStringBaseStringBaseString = false;\n    var\
    \ isNegativeBaseStringBaseStringBaseStringBaseStringBaseString = false;\n    var\
    \ isNegativeBaseStringBaseStringBaseStringBaseStringBaseString = false;\n    var\
    \ isNegativeBaseStringBaseStringBaseStringBaseStringBaseString = false;\n    var\
    \ isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBaseStringBaseStringBaseStringBaseStringBaseStringBase = false;\n\
    \    var isNegativeBase", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar bases\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_length = bases.length;\n\tvar result\
    \ = '';\n\t\n\twhile(bases_length--){\n\t\tresult += bases[bases_length] * Math.pow(base,bases_length);\n\
    \t}\n\t\n\tresult += x;\n\t\n\treturn result;\n}\n", "\tvar bases = {\n\t\t'0':\
    \ '0',\n\t\t'1': '1',\n\t\t'2': '10',\n\t\t'3': '11',\n\t\t'4': '100',\n\t\t'5':\
    \ '101',\n\t\t'6': '110',\n\t\t'7': '111',\n\t\t'8': '1000',\n\t\t'9': '1001',\n\
    \t\t'10': '1010',\n\t\t'11': '1011',\n\t\t'12': '1100',\n\t\t'13': '1101',\n\t\
    \t'14': '1110',\n\t\t'15': '1111'\n\t};\n\t\n\tbase = bases[base] || base;\n\t\
    \n\tvar num = Math.abs(x);\n\tvar r = num.toString(base);\n\t\n\twhile(r.length\
    \ < base.length){\n\t\tr = '0' + r;\n\t}\n\t\n\treturn r;\n}\n", "\tvar bases\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar base10 = bases[base];\n\tvar base2 = bases[base-1];\n\
    \tvar base3 = bases[base-2];\n\tvar base4 = bases[base-3]\n\tvar base5 = bases[base-4]\n\
    \tvar base6 = bases[base-5]\n\tvar base7 = bases[base-6]\n\tvar base8 = bases[base-7]\n\
    \tvar base9 = bases[base-8]\n\tvar base10 = bases[base-9]\n\tvar base11 = bases[base-10]\n\
    \tvar base12 = bases[base-11]\n\tvar base13 = bases[base-12]\n\tvar base14 = bases[base-13]\n\
    \tvar base15 = bases[base-14]\n\tvar base16 = bases[base-15]\n\tvar base17 = bases[base-16]\n\
    \tvar base18 = bases[base-17]\n\tvar base19 = bases[base-18]\n\tvar base20 = bases[base-19]\n\
    \tvar base21 = bases[base-20]\n\tvar base22 = bases[base-21]\n\tvar base23 = bases[base-22]\n\
    \tvar base24 = bases[base-23]\n\tvar base25 = bases[base-24]\n\tvar base26 = bases[base-25]\n\
    \tvar base27 = bases[base-26]\n\tvar base28 = bases[base-27]\n\tvar base29 = bases[base-28]\n\
    \tvar base30 = bases[base-29]\n\tvar base31 = bases[base-30]\n\tvar base32 = bases[base-31]\n\
    \tvar base33 = bases[base-32]\n\tvar base34 = bases[base-33]\n\tvar base35 = bases[base-34]\n\
    \tvar base36 = bases[base-35]\n\tvar base37 = bases[base-36]\n\tvar base38 = bases[base-37]\n\
    \tvar base39 = bases[base-38]\n\tvar base40 = bases[base-39]\n\tvar base41 = bases[base-40]\n\
    \tvar base42 = bases[base-41]\n\tvar base43 = bases[base-42]\n\tvar base44 = bases[base-43]\n\
    \tvar base45 = bases[base-44]\n\tvar base46 = bases[base-45]\n\tvar base47 = bases[base-46]\n\
    \tvar base48 = bases[base-47]\n\tvar base49 = bases[base-48]\n\tvar base50 = bases[base-49]\n\
    \tvar base51 = bases[base-50]\n\tvar base52 = bases[base-51]", "    var r = \"\
    \";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n\
    \    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n    var\
    \ bases = [\"\",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n    var base\
    \ = 0;\n    if (base < 0 || base > 9){\n        console.log(\"Invalid base\");\n\
    \        return;\n    }\n    while (base < 10){\n        if (x_len > base.length){\n\
    \            base = bases.length - 1;\n        }\n        base = bases[base];\n\
    \        x_str = x_str.replace(new RegExp(\"^\" + base, \"i\"), \"\");\n     \
    \   x_len = x_str.length;\n    }\n    var x_int = parseInt(x_str);\n    var x_frac\
    \ = x_int % base;\n    if (x_frac > 0){\n        r = x_str + base;\n    }\n  \
    \  else{\n        r = x_str + base + 1;\n    }\n    return sign * r;\n}\n", "\t\
    var bases = {\n\t\t'10': '0123456789',\n\t\t'16': '0123456789abcdef',\n\t\t'32':\
    \ '0123456789abcdefghij',\n\t\t'64': '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\
    \t\t'base': '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \t};\n\tvar base10 = bases[base];\n\tvar base16 = bases[base.toUpperCase()];\n\
    \tvar base32 = bases[base.toUpperCase()+'0123456789'];\n\tvar base64 = bases[base.toUpperCase()+'0123456789abcdef'];\n\
    \tvar base8  = bases[base.toUpperCase()+'0123456789abcdefgh'];\n\tvar base9  =\
    \ bases[base.toUpperCase()+'0123456789abcdefghi'];\n\tvar base10 = bases[base.toUpperCase()+'0123456789abcdefghij'];\n\
    \tvar base16 = bases[base.toUpperCase()+'0123456789abcdefghijk'];\n\tvar base32\
    \ = bases[base.toUpperCase()+'0123456789abcdefghijkl'];\n\tvar base64 = bases[base.toUpperCase()+'0123456789abcdefghijklm'];\n\
    \tvar base8  = bases[base.toUpperCase()+'0123456789abcdefghijklmn'];\n\tvar base9\
    \  = bases[base.toUpperCase()+'0123456789abcdefghijklmno'];\n\tvar base10 = bases[base.toUpperCase()+'0123456789abcdefghijklmnop'];\n\
    \tvar base16 = bases[base.toUpperCase()+'0123456789abcdefghijklmnopq'];\n\tvar\
    \ base32 = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrst'];\n\tvar\
    \ base64 = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrstu'];\n\tvar\
    \ base8  = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrstuv'];\n\tvar\
    \ base9  = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrstuvw'];\n\t\
    var base10 = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrstuvwx'];\n\
    \tvar base16 = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrstuvwxy'];\n\
    \tvar base32 = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrstuvwxyz'];\n\
    \tvar base64 = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrstuvwxyza'];\n\
    \tvar base8  = bases[base.toUpperCase()+'0123456789abcdefghijklmnopqrstuvwxyz",
  "    var r = \"\";\n    var sign = 1;\n    var m = 1;\n    var isNegative = false;\n\
    \    var isNegativeSign = false;\n    var isNegativeZero = false;\n    var isPositive\
    \ = false;\n    var isPositiveSign = false;\n    var isPositiveZero = false;\n\
    \    var isZero = false;\n    var isOne = false;\n    var isTwo = false;\n   \
    \ var isThree = false;\n    var isFour = false;\n    var isFive = false;\n   \
    \ var isSix = false;\n    var isSeven = false;\n    var isEight = false;\n   \
    \ var isNine = false;\n    var isZeroSign = false;\n    var isOneSign = false;\n\
    \    var isTwoSign = false;\n    var isThreeSign = false;\n    var isFourSign\
    \ = false;\n    var isFiveSign = false;\n    var isSixSign = false;\n    var isSevenSign\
    \ = false;\n    var isEightSign = false;\n    var isNineSign = false;\n    var\
    \ isZeroZero = false;\n    var isOneZero = false;\n    var isTwoZero = false;\n\
    \    var isThreeZero = false;\n    var isFourZero = false;\n    var isFiveZero\
    \ = false;\n    var isSixZero = false;\n    var isSevenZero = false;\n    var\
    \ isEightZero = false;\n    var isNineZero = false;\n    var isZeroOne = false;\n\
    \    var isOneOne = false;\n    var isTwoOne = false;\n    var isThreeOne = false;\n\
    \    var isFourOne = false;\n    var isFiveOne = false;\n    var isSixOne = false;\n\
    \    var isSevenOne = false;\n    var isEightOne = false;\n    var isNineOne =\
    \ false;\n    var isZeroTwo = false;\n    var isOneTwo = false;\n    var isTwoTwo\
    \ = false;\n    var isThreeTwo = false;\n    var isFourTwo = false;\n    var isFiveTwo\
    \ = false;\n    var isSixTwo = false;\n    var isSevenTwo = false;\n    var isEightTwo\
    \ = false;\n    var isNineTwo = false;\n    var isZeroThree = false;\n    var\
    \ isOneThree = false;\n    var isTwoThree = false;\n    var isThreeThree = false;\n\
    \    var isFourThree = false;\n    var isFiveThree = false;\n    var isSixThree\
    \ = false;\n    var isSevenThree = false;\n    var isEightThree = false;\n   \
    \ var isNineThree = false;\n    var isZeroFour = false;\n    var isOneFour = false;\n\
    \    var isTwoFour = false;\n    var isThreeFour = false;\n    var isFourFour\
    \ = false;\n    var isFiveFour = false;\n    var isSixFour = false;\n    var isSevenFour\
    \ = false;\n    var isEightFour = false;\n    var isNineFour = false;\n    var\
    \ isZeroFive = false;\n    var isOneFive = false;\n    var isTwoFive = false;\n",
  "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    var n\
    \ = x;\n    while(n>0){\n        r = m%base+r; \n        n = Math.floor(n/base);\n\
    \        m = Math.floor(m/base);\n    }\n    if(sign<0){\n        r = Math.abs(r)\n\
    \    }\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string = '0123456789ABCDEF';\n\
    \t\n\tvar base_index = bases.indexOf(base);\n\tvar base_reversed_index = bases_reversed.indexOf(base);\n\
    \t\n\tvar base_reversed_string = bases_reversed_string.substr(base_reversed_index,\
    \ 1);\n\t\n\tvar x = x.toString();\n\tvar x_reversed = x.split(\"\").reverse().join(\"\
    \");\n\t\n\tvar x_reversed_reversed = x_reversed.split(\"\").reverse().join(\"\
    \");\n\t\n\tvar x_reversed_reversed_string = x_reversed_reversed.split(\"\").reverse().join(\"\
    \");\n\t\n\tvar x_reversed_reversed_reversed_string = x_reversed_reversed_string.split(\"\
    \").reverse().join(\"\");\n\t\n\tvar x_reversed_reversed_reversed_reversed_string\
    \ = x_reversed_reversed_reversed_string.split(\"\").reverse().join(\"\");\n\t\n\
    \tvar x_reversed_reversed_reversed_reversed_reversed_string = x_reversed_reversed_reversed_reversed_string.split(\"\
    \").reverse().join(\"\");\n\t\n\tvar x_reversed_reversed_reversed_reversed_reversed_reversed_string\
    \ = x_reversed_reversed_reversed_reversed_reversed_string.split(\"\").reverse().join(\"\
    \");\n\t\n\tvar x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string\
    \ = x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string.split(\"\
    \").reverse().join(\"\");\n\t\n\tvar x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string\
    \ = x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string.split(\"\
    \").reverse().join(\"\");\n\t\n\tvar x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string\
    \ = x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string.split(\"\
    \").reverse().join(\"\");\n\t\n\tvar x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string\
    \ = x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string.split(\"\
    \").reverse().join(\"\");\n\t\n\tvar x_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_string\
    \ = x_reversed_reversed_reversed_reversed_reversed_", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_string =\
    \ \"\";\n\t\n\tfor(var i = 0; i < bases.length; i++){\n\t\tif(bases[i] == base){\n\
    \t\t\tbases_reversed_string += bases_reversed[i];\n\t\t}\n\t}\n\t\n\tvar bases_reversed_string_length\
    \ = bases_reversed_string.length;\n\t\n\tvar x_length = x.length;\n\tvar x_remainder\
    \ = 0;\n\t\n\tfor(var i = 0; i < x_length; i++){\n\t\tx_remainder = x_remainder\
    \ + x.charAt(i) * bases_reversed_string.charAt(x_length - i - 1);\n\t}\n\t\n\t\
    var x_remainder_length = x_remainder.length;\n\t\n\tvar x_string = \"\";\n\t\n\
    \tfor(var i = 0; i < x_remainder_length; i++){\n\t\tx_string += x_remainder.charAt(i);\n\
    \t}\n\t\n\treturn x_string;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\t\
    var bases_length = bases.length;\n\tvar result = '';\n\tvar base = Math.pow(base,bases.length);\n\
    \tfor(var i = 0; i < bases.length; i++){\n\t\tresult += Math.round(x/base)*bases[i];\n\
    \t\tx = x/base;\n\t}\n\treturn result;\n}\n", "    var r = \"\";\n    var sign\
    \ = \"\";\n    var digits = \"\";\n    var i;\n    \n    if (x < 0){\n       \
    \ sign = \"-\";\n        x = Math.abs(x);\n    }\n    \n    if (base < 2 || base\
    \ > 36){\n        console.log(\"Invalid base\");\n        return \"\";\n    }\n\
    \    \n    if (base == 2){\n        digits = \"0123456789ABCDEF\";\n    }\n  \
    \  else if (base == 8){\n        digits = \"0123456789abcdef\";\n    }\n    else\
    \ if (base == 16){\n        digits = \"0123456789abcdefABCDEF\";\n    }\n    else\
    \ if (base == 10){\n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    }\n    else if (base == 16){\n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEF\"\
    ;\n    }\n    else if (base == 32){\n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    }\n    else if (base == 64){\n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n    }\n    else if (base == 128){\n        digits = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    ;\n    }\n    \n    for(i = 0; i < Math.floor(x); i++){\n        r += digits[Math.floor(x\
    \ / Math.pow(base,i))];\n    }\n    \n    return sign + r;\n}\n", "\tvar bases\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_index = 0;\n\tvar bases_length = bases.length;\n\
    \tvar base_length = bases.length;\n\tvar base_length_index = 0;\n\tvar base_length_length\
    \ = base_length;\n\tvar base_index = 0;\n\tvar base_length_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_length_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\t\
    var base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index\
    \ = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n\tvar base_index = 0;\n",
  "\tvar digits = x.toString().split('');\n\tvar new_digits = [];\n\tfor(var i = 0;\
    \ i < digits.length; i++){\n\t\tnew_digits.push(parseInt(digits[i], base));\n\t\
    }\n\treturn new_digits.reverse().join('');\n}\n", "\tvar bases = {\n\t\t'0': '0',\n\
    \t\t'1': '1',\n\t\t'2': '10',\n\t\t'3': '11',\n\t\t'4': '100',\n\t\t'5': '101',\n\
    \t\t'6': '1000',\n\t\t'7': '1001',\n\t\t'8': '10000',\n\t\t'9': '10001'\n\t};\n\
    \tvar base10 = bases[base];\n\tvar base2 = bases[base10];\n\tvar base3 = bases[base2];\n\
    \tvar base4 = bases[base3];\n\tvar base5 = bases[base4];\n\tvar base6 = bases[base5];\n\
    \tvar base7 = bases[base6];\n\tvar base8 = bases[base7];\n\tvar base9 = bases[base8];\n\
    \tvar base10 = bases[base9];\n\tvar base11 = bases[base10];\n\tvar base12 = bases[base11];\n\
    \tvar base13 = bases[base12];\n\tvar base14 = bases[base13];\n\tvar base15 = bases[base14];\n\
    \tvar base16 = bases[base15];\n\tvar base17 = bases[base16];\n\tvar base18 = bases[base17];\n\
    \tvar base19 = bases[base18];\n\tvar base20 = bases[base19];\n\tvar base21 = bases[base20];\n\
    \tvar base22 = bases[base21];\n\tvar base23 = bases[base22];\n\tvar base24 = bases[base23];\n\
    \tvar base25 = bases[base24];\n\tvar base26 = bases[base25];\n\tvar base27 = bases[base26];\n\
    \tvar base28 = bases[base27];\n\tvar base29 = bases[base28];\n\tvar base30 = bases[base29];\n\
    \tvar base31 = bases[base30];\n\tvar base32 = bases[base31];\n\tvar base33 = bases[base32];\n\
    \tvar base34 = bases[base33];\n\tvar base35 = bases[base34];\n\tvar base36 = bases[base35];\n\
    \tvar base37 = bases[base36];\n\tvar base38 = bases[base37];\n\tvar base39 = bases[base38];\n\
    \tvar base40 = bases[base39];\n\tvar base41 = bases[base40];\n\tvar base42 = bases[base41];\n\
    \tvar base43 = bases[base42];\n\tvar base44 = bases[base43];\n\tvar base45 = bases[base44];\n\
    \tvar base46 = bases[base45];\n", "    var r = \"\";\n    var sign = x < 0 ? \"\
    -\" : \"\";\n    var m = Math.pow(base,x);\n    while(m != 0){\n        r = m%base\
    \ + r;\n        m = Math.floor(m/base);\n    }\n    return sign + r;\n}\n", "\t\
    var s = x.toString(base);\n\tvar l = s.length - 1;\n\tif (l < base){\n\t\tvar\
    \ zeros = Array(base-l+1).join(\"0\");\n\t\treturn zeros + s;\n\t}\n\treturn s;\n\
    }\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed = [10,9,8,7,6,5,4,3,2,1];\n\
    \t\n\tvar base_index = bases.indexOf(base);\n\tvar base_reversed_index = bases_reversed.indexOf(base);\n\
    \t\n\tvar num_str = x.toString();\n\tvar num_str_split = num_str.split('');\n\t\
    \n\tvar num_str_split_reversed = num_str_split.reverse();\n\t\n\tvar num_str_split_reversed_index\
    \ = num_str_split_reversed.indexOf(0);\n\t\n\tvar num_str_split_reversed_index_base1\
    \ = num_str_split_reversed_index - base_index;\n\tvar num_str_split_reversed_index_base2\
    \ = num_str_split_reversed_index - base_reversed_index;\n\t\n\tvar num_str_split_reversed_index_base3\
    \ = num_str_split_reversed_index_base2 - base_index;\n\tvar num_str_split_reversed_index_base4\
    \ = num_str_split_reversed_index_base3 - base_reversed_index;\n\t\n\tvar num_str_split_reversed_index_base5\
    \ = num_str_split_reversed_index_base4 - base_index;\n\tvar num_str_split_reversed_index_base6\
    \ = num_str_split_reversed_index_base5 - base_reversed_index;\n\t\n\tvar num_str_split_reversed_index_base7\
    \ = num_str_split_reversed_index_base6 - base_index;\n\tvar num_str_split_reversed_index_base8\
    \ = num_str_split_reversed_index_base7 - base_reversed_index;\n\t\n\tvar num_str_split_reversed_index_base9\
    \ = num_str_split_reversed_index_base8 - base_index;\n\tvar num_str_split_reversed_index_base10\
    \ = num_str_split_reversed_index_base9 - base_reversed_index;\n\t\n\tvar num_str_split_reversed_index_base11\
    \ = num_str_split_reversed_index_base10 - base_index;\n\tvar num_str_split_reversed_index_base12\
    \ = num_str_split_reversed_index_base11 - base_reversed_index;\n\t\n\tvar num_str_split_reversed_index_base13\
    \ = num_str_split_reversed_index_base12 - base_index;\n\tvar num_str_split_reversed_index_base14\
    \ = num_str_split_reversed_index_base13 - base_reversed_index;\n\t\n\tvar num_str_split_reversed_index_base15\
    \ = num_str_split_reversed_index_base14 - base_index;\n\tvar num_str_split_reversed_index_base16\
    \ = num_str_split_reversed_index_base15 - base_reversed_index;\n\t\n\tvar num_str_split_reversed_index_base17\
    \ = num_str_split_reversed_index_base16 - base_index;\n\tvar num_str_split_",
  "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar base0 = bases[0];\n\tvar base1 = bases[1];\n\
    \tvar base2 = bases[2];\n\tvar base3 = bases[3];\n\tvar base4 = bases[4];\n\t\
    var base5 = bases[5];\n\tvar base6 = bases[6];\n\tvar base7 = bases[7];\n\tvar\
    \ base8 = bases[8];\n\tvar base9 = bases[9];\n\tvar base10 = bases[10];\n\tvar\
    \ base11 = bases[11];\n\tvar base12 = bases[12];\n\tvar base13 = bases[13];\n\t\
    var base14 = bases[14];\n\tvar base15 = bases[15];\n\tvar base16 = bases[16];\n\
    \tvar base17 = bases[17];\n\tvar base18 = bases[18];\n\tvar base19 = bases[19];\n\
    \tvar base20 = bases[20];\n\tvar base21 = bases[21];\n\tvar base22 = bases[22];\n\
    \tvar base23 = bases[23];\n\tvar base24 = bases[24];\n\tvar base25 = bases[25];\n\
    \tvar base26 = bases[26];\n\tvar base27 = bases[27];\n\tvar base28 = bases[28];\n\
    \tvar base29 = bases[29];\n\tvar base30 = bases[30];\n\tvar base31 = bases[31];\n\
    \tvar base32 = bases[32];\n\tvar base33 = bases[33];\n\tvar base34 = bases[34];\n\
    \tvar base35 = bases[35];\n\tvar base36 = bases[36];\n\tvar base37 = bases[37];\n\
    \tvar base38 = bases[38];\n\tvar base39 = bases[39];\n\tvar base40 = bases[40];\n\
    \tvar base41 = bases[41];\n\tvar base42 = bases[42];\n\tvar base43 = bases[43];\n\
    \tvar base44 = bases[44];\n\tvar base45 = bases[45];\n\tvar base46 = bases[46];\n\
    \tvar base47 = bases[47];\n\tvar base48 = bases[48];\n\tvar base49 = bases[49];\n\
    \tvar base50 = bases[50];\n\tvar base51 = bases[51];\n\tvar base52 = bases[52];\n\
    \tvar base53 = bases[53];\n\tvar base54 = bases[54];\n\tvar base55 = bases[55];\n\
    \tvar base56 = bases[56];\n\tvar base57", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[base] + r;\n        x -= base_digits[base];\n       \
    \ base--;\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n\
    \        r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n \
    \   }\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r\
    \ = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n    }\n   \
    \ return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed = [1,2,3,4,5,6,7,8,9,10];\n\
    \tvar bases_reversed_reversed_reversed = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [10,9,8,7,6,5,4,3,2,1];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\tvar bases_reversed_reversed_reversed_reversed_reversed_",
  "\tvar s = \"\" + x;\n\twhile (s.length < base){\n\t\ts = \"0\" + s;\n\t}\n\treturn\
    \ s;\n}\n", "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n    x =\
    \ Math.abs(x);\n    base = base || 10;\n    while(x != 0){\n        r = base_digit[base]\
    \ + r; \n        x = Math.floor(x/base);\n        base = base * 10;\n    }\n \
    \   return sign + r;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
