name: HumanEval_118_get_closest_vowel
language: js
results:
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_right = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_right = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 21;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left =\
    \ vowels_count - 22;\n    let vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_left_to_right_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_middle_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_left_to_right_to_middle_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_right_to_left_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkp0s9wsz.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    var vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 22;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowels_count - 23;\n    var vowels_count_from_left_to_right_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 25;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 26;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 27;\n    var vowels_count_from_middle_to_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsxmxf1l6.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"hello\"); // returns \"\"\nget_closest_vowel(\"\
    hEllo\"); // returns \"e\"\nget_closest_vowel(\"hElloWorld\"); // returns \"o\"\
    \nget_closest_vowel(\"hElloWorld!\"); // returns \"\"\nget_closest_vowel(\"hElloWorld!?\"\
    ); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!\"); // returns \"\"\nget_closest_vowel(\"\
    hElloWorld!?!?!\"); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!\");\
    \ // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!\"); // returns \"\
    \"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!\"); // returns \"\"\nget_closest_vowel(\"\
    hElloWorld!?!?!?!?!?!?!?!?!?!\"); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!\"\
    ); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!\");\
    \ // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!\");\
    \ // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!\");\
    \ // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!?!\"\
    ); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!?!\"\
    ); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!?!?!\"\
    ); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!?\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp819vxtfh.js:28\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!?\n\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSyntaxError: Invalid\
    \ or unexpected token\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count - 4;\n    let vowel_count_from_right_to_left\
    \ = vowel_count - 5;\n    let vowel_count_from_middle_to_left = vowel_count -\
    \ 6;\n    let vowel_count_from_left_to_middle = vowel_count - 7;\n    let vowel_count_from_right_to_middle\
    \ = vowel_count - 8;\n    let vowel_count_from_middle_to_right = vowel_count -\
    \ 9;\n    let vowel_count_from_left_to_right_to_middle = vowel_count - 10;\n \
    \   let vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n    let\
    \ vowel_count_from_middle_to_left_to_right = vowel_count - 12;\n    let vowel_count_from_left_to_middle_to_right\
    \ = vowel_count - 13;\n    let vowel_count_from_right_to_middle_to_left = vowel_count\
    \ - 14;\n    let vowel_count_from_middle_to_left_to_middle = vowel_count - 15;\n\
    \    let vowel_count_from_left_to_right_to_middle_to_left = vowel_count - 16;\n\
    \    let vowel_count_from_right_to_left_to_middle_to_right = vowel_count - 17;\n\
    \    let vowel_count_from_middle_to_left_to_right_to_middle = vowel_count - 18;\n\
    \    let vowel_count_from_left_to_middle_to_right_to_left = vowel_count - 19;\n\
    \    let vowel_count_from_right_to_middle_to_left_to_middle = vowel_count - 20;\n\
    \    let vowel_count_from_middle_to_left_to_right_to_left_to_middle = vowel_count\
    \ - 21;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left = vowel_count\
    \ - 22;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowel_count - 23;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowel_count - 24;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 25;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 26;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowel_count - 27;\n    let \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmperwurq6n.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6sxvxu3h.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i=0;i<vowelsCount;i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexCount2\
    \ = vowelsIndexCount-1;\n    let vowelsIndexCount3 = vowelsIndexCount-2\n    let\
    \ vowelsIndexCount4 = vowelsIndexCount-3\n    let vowelsIndexCount5 = vowelsIndexCount-4\n\
    \    let vowelsIndexCount6 = vowelsIndexCount-5\n    let vowelsIndexCount7 = vowelsIndexCount-6\n\
    \    let vowelsIndexCount8 = vowelsIndexCount-7\n    let vowelsIndexCount9 = vowelsIndexCount-8\n\
    \    let vowelsIndexCount10 = vowelsIndexCount-9\n    let vowelsIndexCount11 =\
    \ vowelsIndexCount-10\n    let vowelsIndexCount12 = vowelsIndexCount-11\n    let\
    \ vowelsIndexCount13 = vowelsIndexCount-12\n    let vowelsIndexCount14 = vowelsIndexCount-13\n\
    \    let vowelsIndexCount15 = vowelsIndexCount-14\n    let vowelsIndexCount16\
    \ = vowelsIndexCount-15\n    let vowelsIndexCount17 = vowelsIndexCount-16\n  \
    \  let vowelsIndexCount18 = vowelsIndexCount-17\n    let vowelsIndexCount19 =\
    \ vowelsIndexCount-18\n    let vowelsIndexCount20 = vowelsIndexCount-19\n    let\
    \ vowelsIndexCount21 = vowelsIndexCount-20\n    let vowelsIndexCount22 = vowelsIndexCount-21\n\
    \    let vowelsIndexCount23 = vowelsIndexCount-22\n    let vowelsIndexCount24\
    \ = vowelsIndexCount-23\n    let vowelsIndexCount25 = vowelsIndexCount-24\n  \
    \  let vowelsIndexCount26 = vowelsIndexCount-25\n    let vowelsIndexCount27 =\
    \ vowelsIndexCount-26\n    let vowelsIndexCount28 = vowelsIndexCount-27\n    let\
    \ vowelsIndexCount29 = vowelsIndexCount-28\n    let vowelsIndexCount30 = vowelsIndexCount-29\n\
    \    let vowelsIndexCount31 = vowelsIndexCount-30\n    let vowelsIndexCount32\
    \ = vowelsIndexCount-31\n    let vowelsIndexCount33 = vowelsIndexCount-32\n  \
    \  let vowelsIndexCount34 = vowelsIndexCount-33\n    let vowelsIndexCount35 =\
    \ vowelsIndexCount-34\n    let vowelsIndexCount36 = vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb94d7f3s.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - word.length;\n    let vowels_count_from_left_to_right = word.length\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - word.length;\n    let vowels_count_from_left_to_right_to_left = word.length\
    \ - vowels_count_from_left_to_right;\n    let vowels_count_from_right_to_left_to_right\
    \ = vowels_count_from_left_to_right - word.length;\n    let vowels_count_from_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right - word.length;\n    let vowels_count_from_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right - word.length;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right - word.length;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ - word.length;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - word.length;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - word.length;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - word.length;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - word.length;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - word.length;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjsrfngdz.js:25\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_\n     \
    \   ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"appleberry\"\
    ) // returns \"e\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"apple\") // returns \"\"\nget_closest_vowel(\"\
    apple\") // returns \"\"\nget_closest_vowel(\"\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd2moscea.js:60\nget_closest_vowel(\"\n                  ^\n\nSyntaxError:\
    \ Invalid or unexpected token\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpww4rbgzs.js:92\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_right_to_left = vowels_count\
    \ - 3;\n    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - 5;\n    let vowels_count_from_left_to_right_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_right_to_left_to_right_to_left = vowels_count\
    \ - 7;\n    let vowels_count_from_left_to_right_to_left_to_right = vowels_count\
    \ - 8;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 9;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 21;\n    let vowels_count_from_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi0_hdtt8.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_found\
    \ = false;\n    var vowel_found2 = false;\n    for(var i = word.length-1; i >=\
    \ 0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n            vowel_count++;\n\
    \            if(vowel_count == 2){\n                vowel_found = true;\n    \
    \            break;\n            }\n        }\n        if(vowels.indexOf(word[i])\
    \ > -1){\n            vowel_count++;\n            if(vowel_count == 2){\n    \
    \            vowel_found2 = true;\n                break;\n            }\n   \
    \     }\n    }\n    if(vowel_found && vowel_found2){\n        return word;\n \
    \   }\n    return \"\";\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpl39zp1xz.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl39zp1xz.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowel_count = vowels.length;\n\
    \    var vowel_count_from_right = vowel_count - 1;\n    var vowel_count_from_left\
    \ = vowel_count - 2;\n    var vowel_count_from_middle = vowel_count - 3;\n   \
    \ var vowel_count_from_middle2 = vowel_count - 4;\n    var vowel_count_from_middle3\
    \ = vowel_count - 5;\n    var vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  var vowel_count_from_middle5 = vowel_count - 7;\n    var vowel_count_from_middle6\
    \ = vowel_count - 8;\n    var vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  var vowel_count_from_middle8 = vowel_count - 10;\n    var vowel_count_from_middle9\
    \ = vowel_count - 11;\n    var vowel_count_from_middle10 = vowel_count - 12;\n\
    \    var vowel_count_from_middle11 = vowel_count - 13;\n    var vowel_count_from_middle12\
    \ = vowel_count - 14;\n    var vowel_count_from_middle13 = vowel_count - 15;\n\
    \    var vowel_count_from_middle14 = vowel_count - 16;\n    var vowel_count_from_middle15\
    \ = vowel_count - 17;\n    var vowel_count_from_middle16 = vowel_count - 18;\n\
    \    var vowel_count_from_middle17 = vowel_count - 19;\n    var vowel_count_from_middle18\
    \ = vowel_count - 20;\n    var vowel_count_from_middle19 = vowel_count - 21;\n\
    \    var vowel_count_from_middle20 = vowel_count - 22;\n    var vowel_count_from_middle21\
    \ = vowel_count - 23;\n    var vowel_count_from_middle22 = vowel_count - 24;\n\
    \    var vowel_count_from_middle23 = vowel_count - 25;\n    var vowel_count_from_middle24\
    \ = vowel_count - 26;\n    var vowel_count_from_middle25 = vowel_count - 27;\n\
    \    var vowel_count_from_middle26 = vowel_count - 28;\n    var vowel_count_from_middle27\
    \ = vowel_count - 29;\n    var vowel_count_from_middle28 = vowel_count - 30;\n\
    \    var vowel_count_from_middle29 = vowel_count - 31;\n    var vowel_count_from_middle30\
    \ = vowel_count - 32;\n    var vowel_count_from_middle31 = vowel_count - 33;\n\
    \    var vowel_count_from_middle32 = vowel_count - 34;\n    var vowel_count_from_middle33\
    \ = vowel_count - 35;\n    var vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvg3_qktk.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsCount2 = vowelsCount-1;\n    var vowelsCount3 = vowelsCount-2;\
    \ \n    var vowelsCount4 = vowelsCount-3; \n    var vowelsCount5 = vowelsCount-4;\
    \ \n    var vowelsCount6 = vowelsCount-5; \n    var vowelsCount7 = vowelsCount-6;\
    \ \n    var vowelsCount8 = vowelsCount-7; \n    var vowelsCount9 = vowelsCount-8;\
    \ \n    var vowelsCount10 = vowelsCount-9; \n    var vowelsCount11 = vowelsCount-10;\
    \ \n    var vowelsCount12 = vowelsCount-11; \n    var vowelsCount13 = vowelsCount-12;\
    \ \n    var vowelsCount14 = vowelsCount-13; \n    var vowelsCount15 = vowelsCount-14;\
    \ \n    var vowelsCount16 = vowelsCount-15; \n    var vowelsCount17 = vowelsCount-16;\
    \ \n    var vowelsCount18 = vowelsCount-17; \n    var vowelsCount19 = vowelsCount-18;\
    \ \n    var vowelsCount20 = vowelsCount-19; \n    var vowelsCount21 = vowelsCount-20;\
    \ \n    var vowelsCount22 = vowelsCount-21; \n    var vowelsCount23 = vowelsCount-22;\
    \ \n    var vowelsCount24 = vowelsCount-23; \n    var vowelsCount25 = vowelsCount-24;\
    \ \n    var vowelsCount26 = vowelsCount-25; \n    var vowelsCount27 = vowelsCount-26;\
    \ \n    var vowelsCount28 = vowelsCount-27; \n    var vowelsCount29 = vowelsCount-28;\
    \ \n    var vowelsCount30 = vowelsCount-29; \n    var vowelsCount31 = vowelsCount-30;\
    \ \n    var vowelsCount32 = vowelsCount-31; \n    var vowelsCount33 = vowelsCount-32;\
    \ \n    var vowelsCount34 = vowelsCount-33; \n    var vowelsCount35 = vowelsCount-34;\
    \ \n    var vowelsCount36 = vowelsCount-35; \n    var vowelsCount37 = vowelsCount-36;\
    \ \n    var vowelsCount38 = vowelsCount-37; \n    var vowelsCount39 = vowelsCount-38;\
    \ \n    var vowelsCount40 = vowelsCount-39; \n    var vowelsCount41 = vowelsCount-40;\
    \ \n    var vowelsCount4\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq6lqh6x_.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ var vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right =\
    \ vowels_count - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 18;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    var \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfl3lwabl.js:36\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprni6df37.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppptgwu2g.js:33\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmoq3pxn6.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left_to_right\
    \ = vowels_count_from_right_to_left - vowels_count_from_left_to_right;\n    let\
    \ vowels_count_from_left_to_right_to_left = vowels_count_from_left_to_right -\
    \ vowels_count_from_right_to_left;\n    let vowels_count_from_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right - vowels_count_from_left_to_right_to_left;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpiq8k8xj8.js:43\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    var vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 22;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzpcfap0n.js:37\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_found = 0;\n    var vowels_found2 = -1;\n    var vowels_found3\
    \ = -1;\n    var vowels_found4 = -1;\n    var vowels_found5 = -1;\n    var vowels_found6\
    \ = -1;\n    var vowels_found7 = -1;\n    var vowels_found8 = -1;\n    var vowels_found9\
    \ = -1;\n    var vowels_found10 = -1;\n    var vowels_found11 = -1;\n    var vowels_found12\
    \ = -1;\n    var vowels_found13 = -1;\n    var vowels_found14 = -1;\n    var vowels_found15\
    \ = -1;\n    var vowels_found16 = -1;\n    var vowels_found17 = -1;\n    var vowels_found18\
    \ = -1;\n    var vowels_found19 = -1;\n    var vowels_found20 = -1;\n    var vowels_found21\
    \ = -1;\n    var vowels_found22 = -1;\n    var vowels_found23 = -1;\n    var vowels_found24\
    \ = -1;\n    var vowels_found25 = -1;\n    var vowels_found26 = -1;\n    var vowels_found27\
    \ = -1;\n    var vowels_found28 = -1;\n    var vowels_found29 = -1;\n    var vowels_found30\
    \ = -1;\n    var vowels_found31 = -1;\n    var vowels_found32 = -1;\n    var vowels_found33\
    \ = -1;\n    var vowels_found34 = -1;\n    var vowels_found35 = -1;\n    var vowels_found36\
    \ = -1;\n    var vowels_found37 = -1;\n    var vowels_found38 = -1;\n    var vowels_found39\
    \ = -1;\n    var vowels_found40 = -1;\n    var vowels_found41 = -1;\n    var vowels_found42\
    \ = -1;\n    var vowels_found43 = -1;\n    var vowels_found44 = -1;\n    var vowels_found45\
    \ = -1;\n    var vowels_found46 = -1;\n    var vowels_found47 = -1;\n    var vowels_found48\
    \ = -1;\n    var vowels_found49 = -1;\n    var vowels_found50 = -1;\n    var vowels_found51\
    \ = -1;\n    var vowels_found52 = -1;\n    var vowels_found53 = -1;\n    var vowels_found54\
    \ = -1;\n    var vowels_found55 = -1;\n    var vowels_found56 = -1;\n    var vowels_found57\
    \ = -1;\n    var vowels_found58 = -1;\n    var vowels_found59 = -1;\n    var vowels_found60\
    \ = -1;\n    var vowels_found61 = -1;\n    var vowels_found62 = -1;\n    var vowels_found63\
    \ = -1;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3raqm9hh.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_found\
    \ = false;\n    for(var i = word.length-1; i >= 0; i--){\n        if(vowels.indexOf(word[i])\
    \ >= 0){\n            vowel_found = true;\n            vowel_count++;\n      \
    \  }\n        if(vowel_found && vowel_count >= 2){\n            return word[i];\n\
    \        }\n    }\n    return '';\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpz6l9p5x9.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz6l9p5x9.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - word.length;\n    let vowels_count_from_both = vowels_count_from_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_both_within_word = vowels_count_from_both\
    \ - word.length;\n    let vowels_count_from_both_within_word_within_word = vowels_count_from_both_within_word\
    \ - word.length;\n    let vowels_count_from_both_within_word_within_word_within_word\
    \ = vowels_count_from_both_within_word_within_word - word.length;\n    let vowels_count_from_both_within_word_within_word_within_word_within_word\
    \ = vowels_count_from_both_within_word_within_word_within_word_within_word - word.length;\n\
    \    let vowels_count_from_both_within_word_within_word_within_word_within_word_within_word\
    \ = vowels_count_from_both_within_word_within_word_within_word_within_word_within_word\
    \ - word.length;\n    let vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word\
    \ = vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word\
    \ - word.length;\n    let vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word_within_word\
    \ = vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word_within_word\
    \ - word.length;\n    let vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word_within_word_within_word\
    \ = vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word_within_word_within_word\
    \ - word.length;\n    let vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word_within_word_within_word_within_word\
    \ = vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word_within_word_within_word_within_word\
    \ - word.length;\n    let vowels_count_from_both_within_word_within_word_within_word_within_word_within_word_within_word_within_word_within_word_within_word_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk3gxznzk.js:43\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc1yf9k_m.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_middle2 = vowels_count - 4;\n    var vowels_count_from_middle3\
    \ = vowels_count - 5;\n    var vowels_count_from_middle4 = vowels_count - 6;\n\
    \    var vowels_count_from_middle5 = vowels_count - 7;\n    var vowels_count_from_middle6\
    \ = vowels_count - 8;\n    var vowels_count_from_middle7 = vowels_count - 9;\n\
    \    var vowels_count_from_middle8 = vowels_count - 10;\n    var vowels_count_from_middle9\
    \ = vowels_count - 11;\n    var vowels_count_from_middle10 = vowels_count - 12;\n\
    \    var vowels_count_from_middle11 = vowels_count - 13;\n    var vowels_count_from_middle12\
    \ = vowels_count - 14;\n    var vowels_count_from_middle13 = vowels_count - 15;\n\
    \    var vowels_count_from_middle14 = vowels_count - 16;\n    var vowels_count_from_middle15\
    \ = vowels_count - 17;\n    var vowels_count_from_middle16 = vowels_count - 18;\n\
    \    var vowels_count_from_middle17 = vowels_count - 19;\n    var vowels_count_from_middle18\
    \ = vowels_count - 20;\n    var vowels_count_from_middle19 = vowels_count - 21;\n\
    \    var vowels_count_from_middle20 = vowels_count - 22;\n    var vowels_count_from_middle21\
    \ = vowels_count - 23;\n    var vowels_count_from_middle22 = vowels_count - 24;\n\
    \    var vowels_count_from_middle23 = vowels_count - 25;\n    var vowels_count_from_middle24\
    \ = vowels_count - 26;\n    var vowels_count_from_middle25 = vowels_count - 27;\n\
    \    var vowels_count_from_middle26 = vowels_count - 28;\n    var vowels_count_from_middle27\
    \ = vowels_count - 29;\n    var vowels_count_from_middle28 = vowels_count - 30;\n\
    \    var vowels_count_from_middle29 = vowels_count - 31;\n    var vowels_count_from_middle30\
    \ = vowels_count - 32;\n    var vowels_count_from_middle31 = vowels_count - 33;\n\
    \    var vowels_count_from_middle32 = vowels_count - 34;\n    var vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyznbyskh.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpm1jt2hfh.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmp6fz0wyoy.js:16:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp6fz0wyoy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_found = 0;\n    var vowels_found_index = 0;\n    var vowels_found_index2\
    \ = 0;\n    var vowels_found_index3 = 0;\n    var vowels_found_index4 = 0;\n \
    \   var vowels_found_index5 = 0;\n    var vowels_found_index6 = 0;\n    var vowels_found_index7\
    \ = 0;\n    var vowels_found_index8 = 0;\n    var vowels_found_index9 = 0;\n \
    \   var vowels_found_index10 = 0;\n    var vowels_found_index11 = 0;\n    var\
    \ vowels_found_index12 = 0;\n    var vowels_found_index13 = 0;\n    var vowels_found_index14\
    \ = 0;\n    var vowels_found_index15 = 0;\n    var vowels_found_index16 = 0;\n\
    \    var vowels_found_index17 = 0;\n    var vowels_found_index18 = 0;\n    var\
    \ vowels_found_index19 = 0;\n    var vowels_found_index20 = 0;\n    var vowels_found_index21\
    \ = 0;\n    var vowels_found_index22 = 0;\n    var vowels_found_index23 = 0;\n\
    \    var vowels_found_index24 = 0;\n    var vowels_found_index25 = 0;\n    var\
    \ vowels_found_index26 = 0;\n    var vowels_found_index27 = 0;\n    var vowels_found_index28\
    \ = 0;\n    var vowels_found_index29 = 0;\n    var vowels_found_index30 = 0;\n\
    \    var vowels_found_index31 = 0;\n    var vowels_found_index32 = 0;\n    var\
    \ vowels_found_index33 = 0;\n    var vowels_found_index34 = 0;\n    var vowels_found_index35\
    \ = 0;\n    var vowels_found_index36 = 0;\n    var vowels_found_index37 = 0;\n\
    \    var vowels_found_index38 = 0;\n    var vowels_found_index39 = 0;\n    var\
    \ vowels_found_index40 = 0;\n    var vowels_found_index41 = 0;\n    var vowels_found_index42\
    \ = 0;\n    var vowels_found_index43 = 0;\n    var vowels_found_index44 = 0;\n\
    \    var vowels_found_index45 = 0;\n    var vowels_found_index46 = 0;\n    var\
    \ vowels_found_index47 = 0;\n    var vowels_found_index48 = 0;\n    var vowels_found_index49\
    \ = 0;\n    var vowels_found_index50 = 0;\n    var vowels_found_index51 = 0;\n\
    \    var vowels_found_index52 = 0;\n    var vowels_found_index53 = 0;\n    var\
    \ vowels_found_index54 = 0;\n    var vowels_found_index55 = 0;\n    var vowels_found_index56\
    \ = 0;\n    var vowels_found_index57 = 0;\n    var vowels_found_index58 = 0;\n\
    \    var vowels_found_index59 = 0;\n    var vowels_found_index60 = 0;\n    var\
    \ vowels_found_index61 = 0;\n    var vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjgfjn770.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowel_count = vowels.length;\n\
    \    var vowel_index = 0;\n    var vowel_found = false;\n    \n    for(var i =\
    \ word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n\
    \            vowel_found = true;\n            vowel_index = i;\n            break;\n\
    \        }\n    }\n    \n    if(vowel_found){\n        var vowel_start_index =\
    \ vowel_index - vowel_count + 1;\n        var vowel_end_index = vowel_index +\
    \ vowel_count - 1;\n        var vowel_found = vowels.slice(vowel_start_index,\
    \ vowel_end_index).join(\"\");\n        return vowel_found;\n    }\n    else{\n\
    \        return \"\";\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'iou'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpf1xu0r8b.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf1xu0r8b.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'iou',\n \
    \ expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a', 'e', 'i', 'o', 'u'];\n\tlet vowels_count = vowels.length;\n\
    \tlet vowels_count_from_right = vowels_count - 1;\n\tlet vowels_count_from_left\
    \ = vowels_count - 2;\n\tlet vowels_count_from_middle = vowels_count - 3;\n\t\
    let vowels_count_from_middle2 = vowels_count - 4;\n\tlet vowels_count_from_middle3\
    \ = vowels_count - 5;\n\tlet vowels_count_from_middle4 = vowels_count - 6;\n\t\
    let vowels_count_from_middle5 = vowels_count - 7;\n\tlet vowels_count_from_middle6\
    \ = vowels_count - 8;\n\tlet vowels_count_from_middle7 = vowels_count - 9;\n\t\
    let vowels_count_from_middle8 = vowels_count - 10;\n\tlet vowels_count_from_middle9\
    \ = vowels_count - 11;\n\tlet vowels_count_from_middle10 = vowels_count - 12;\n\
    \tlet vowels_count_from_middle11 = vowels_count - 13;\n\tlet vowels_count_from_middle12\
    \ = vowels_count - 14;\n\tlet vowels_count_from_middle13 = vowels_count - 15;\n\
    \tlet vowels_count_from_middle14 = vowels_count - 16;\n\tlet vowels_count_from_middle15\
    \ = vowels_count - 17;\n\tlet vowels_count_from_middle16 = vowels_count - 18;\n\
    \tlet vowels_count_from_middle17 = vowels_count - 19;\n\tlet vowels_count_from_middle18\
    \ = vowels_count - 20;\n\tlet vowels_count_from_middle19 = vowels_count - 21;\n\
    \tlet vowels_count_from_middle20 = vowels_count - 22;\n\tlet vowels_count_from_middle21\
    \ = vowels_count - 23;\n\tlet vowels_count_from_middle22 = vowels_count - 24;\n\
    \tlet vowels_count_from_middle23 = vowels_count - 25;\n\tlet vowels_count_from_middle24\
    \ = vowels_count - 26;\n\tlet vowels_count_from_middle25 = vowels_count - 27;\n\
    \tlet vowels_count_from_middle26 = vowels_count - 28;\n\tlet vowels_count_from_middle27\
    \ = vowels_count - 29;\n\tlet vowels_count_from_middle28 = vowels_count - 30;\n\
    \tlet vowels_count_from_middle29 = vowels_count - 31;\n\tlet vowels_count_from_middle30\
    \ = vowels_count - 32;\n\tlet vowels_count_from_middle31 = vowels_count - \nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8lz_euwj.js:43\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_middle2 = vowels_count - 4;\n    var vowels_count_from_middle3\
    \ = vowels_count - 5;\n    var vowels_count_from_middle4 = vowels_count - 6;\n\
    \    var vowels_count_from_middle5 = vowels_count - 7;\n    var vowels_count_from_middle6\
    \ = vowels_count - 8;\n    var vowels_count_from_middle7 = vowels_count - 9;\n\
    \    var vowels_count_from_middle8 = vowels_count - 10;\n    var vowels_count_from_middle9\
    \ = vowels_count - 11;\n    var vowels_count_from_middle10 = vowels_count - 12;\n\
    \    var vowels_count_from_middle11 = vowels_count - 13;\n    var vowels_count_from_middle12\
    \ = vowels_count - 14;\n    var vowels_count_from_middle13 = vowels_count - 15;\n\
    \    var vowels_count_from_middle14 = vowels_count - 16;\n    var vowels_count_from_middle15\
    \ = vowels_count - 17;\n    var vowels_count_from_middle16 = vowels_count - 18;\n\
    \    var vowels_count_from_middle17 = vowels_count - 19;\n    var vowels_count_from_middle18\
    \ = vowels_count - 20;\n    var vowels_count_from_middle19 = vowels_count - 21;\n\
    \    var vowels_count_from_middle20 = vowels_count - 22;\n    var vowels_count_from_middle21\
    \ = vowels_count - 23;\n    var vowels_count_from_middle22 = vowels_count - 24;\n\
    \    var vowels_count_from_middle23 = vowels_count - 25;\n    var vowels_count_from_middle24\
    \ = vowels_count - 26;\n    var vowels_count_from_middle25 = vowels_count - 27;\n\
    \    var vowels_count_from_middle26 = vowels_count - 28;\n    var vowels_count_from_middle27\
    \ = vowels_count - 29;\n    var vowels_count_from_middle28 = vowels_count - 30;\n\
    \    var vowels_count_from_middle29 = vowels_count - 31;\n    var vowels_count_from_middle30\
    \ = vowels_count - 32;\n    var vowels_count_from_middle31 = vowels_count - 33;\n\
    \    var vowels_count_from_middle32 = vowels_count - 34;\n    var vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3bu87prr.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_middle2 = vowels_count - 4;\n    var vowels_count_from_middle3\
    \ = vowels_count - 5;\n    var vowels_count_from_middle4 = vowels_count - 6;\n\
    \    var vowels_count_from_middle5 = vowels_count - 7;\n    var vowels_count_from_middle6\
    \ = vowels_count - 8;\n    var vowels_count_from_middle7 = vowels_count - 9;\n\
    \    var vowels_count_from_middle8 = vowels_count - 10;\n    var vowels_count_from_middle9\
    \ = vowels_count - 11;\n    var vowels_count_from_middle10 = vowels_count - 12;\n\
    \    var vowels_count_from_middle11 = vowels_count - 13;\n    var vowels_count_from_middle12\
    \ = vowels_count - 14;\n    var vowels_count_from_middle13 = vowels_count - 15;\n\
    \    var vowels_count_from_middle14 = vowels_count - 16;\n    var vowels_count_from_middle15\
    \ = vowels_count - 17;\n    var vowels_count_from_middle16 = vowels_count - 18;\n\
    \    var vowels_count_from_middle17 = vowels_count - 19;\n    var vowels_count_from_middle18\
    \ = vowels_count - 20;\n    var vowels_count_from_middle19 = vowels_count - 21;\n\
    \    var vowels_count_from_middle20 = vowels_count - 22;\n    var vowels_count_from_middle21\
    \ = vowels_count - 23;\n    var vowels_count_from_middle22 = vowels_count - 24;\n\
    \    var vowels_count_from_middle23 = vowels_count - 25;\n    var vowels_count_from_middle24\
    \ = vowels_count - 26;\n    var vowels_count_from_middle25 = vowels_count - 27;\n\
    \    var vowels_count_from_middle26 = vowels_count - 28;\n    var vowels_count_from_middle27\
    \ = vowels_count - 29;\n    var vowels_count_from_middle28 = vowels_count - 30;\n\
    \    var vowels_count_from_middle29 = vowels_count - 31;\n    var vowels_count_from_middle30\
    \ = vowels_count - 32;\n    var vowels_count_from_middle31 = vowels_count - 33;\n\
    \    var vowels_count_from_middle32 = vowels_count - 34;\n    var vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3jkq72tm.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsIndex = [];\n    var vowelsIndexCount = 0;\n    for(var i=0;i<word.length;i++){\n\
    \        if(vowels.indexOf(word[i]) > -1){\n            vowelsIndex[vowelsIndexCount]\
    \ = i;\n            vowelsIndexCount++;\n        }\n    }\n    var vowelsIndexCount\
    \ = vowelsIndex.length;\n    var vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    var vowelsIndexMax = Math.max(...vowelsIndex);\n    var vowelsIndexMid =\
    \ (vowelsIndexMax + vowelsIndexMin)/2;\n    var vowelsIndexMidValue = vowelsIndex[vowelsIndexMid];\n\
    \    var vowelsIndexMidValueIndex = vowelsIndex.indexOf(vowelsIndexMidValue);\n\
    \    var vowelsIndexMidValueCount = vowelsIndex.length;\n    var vowelsIndexMidValueCountMin\
    \ = Math.min(...vowelsIndexMidValueIndex);\n    var vowelsIndexMidValueCountMax\
    \ = Math.max(...vowelsIndexMidValueIndex);\n    var vowelsIndexMidValueCountMid\
    \ = (vowelsIndexMidValueCountMax + vowelsIndexMidValueCountMin)/2;\n    var vowelsIndexMidValueCountMidValue\
    \ = vowelsIndex[vowelsIndexMidValueCountMid];\n    var vowelsIndexMidValueCountMidValueIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMidValueCountMidValue);\n    var vowelsIndexMidValueCountMidValueCount\
    \ = vowelsIndex.length;\n    var vowelsIndexMidValueCountMidValueCountMin = Math.min(...vowelsIndexMidValueCountMidValueIndex);\n\
    \    var vowelsIndexMidValueCountMidValueCountMax = Math.max(...vowelsIndexMidValueCountMidValueIndex);\n\
    \    var vowelsIndexMidValueCountMidValueCountMid = (vowelsIndexMidValueCountMidValueCountMax\
    \ + vowelsIndexMidValueCountMidValueCountMin)/2;\n    var vowelsIndexMidValueCountMidValueCountMidValue\
    \ = vowelsIndex[vowelsIndexMidValueCountMidValueCountMid];\n    var vowelsIndexMidValueCountMidValueCountMidValueIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMidValueCountMidValueCountMidValue);\n    var\
    \ vowelsIndexMidValueCountMidValueCountMidValueCount = vowelsIndex.length;\n \
    \   var vowelsIndexMidValueCountMidValueCountMidValueCountMin = Math.min(...vowelsIndexMidValueCountMidValueCountMidValueIndex);\n\
    \    var vowelsIndexMidValueCountMidValueCountMidValueCountMax = Math.max(...vowelsIndexMidValueCount\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpryk3nd8_.js:38\n    var vowelsIndexMidValueCountMidValueCountMidValueCountMax\
    \ = Math.max(...vowelsIndexMidValueCount\n                                   \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^\n\nSyntaxError:\
    \ missing ) after argument list\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - word.length;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2ck9bybn.js:14\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"abracadabra\") // \"a\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\nget_closest_vowel(\"abracadabra\"\
    ) // \"\"\nget_closest_vowel(\"abracadabra\") // \"\"\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpuho1_xr5.js:55:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpuho1_xr5.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = vowels_count - 1;\n\tlet vowels_count_from_left\
    \ = vowels_count - 2;\n\tlet vowels_count_from_middle = vowels_count - 3;\n\t\
    let vowels_count_from_left_to_right = vowels_count - 4;\n\tlet vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n\tlet vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n\tlet vowels_count_from_left_to_middle = vowels_count - 7;\n\tlet vowels_count_from_right_to_middle\
    \ = vowels_count - 8;\n\tlet vowels_count_from_middle_to_left = vowels_count -\
    \ 9;\n\tlet vowels_count_from_left_to_right_to_middle = vowels_count - 10;\n\t\
    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\tlet vowels_count_from_middle_to_right_to_left\
    \ = vowels_count - 12;\n\tlet vowels_count_from_left_to_middle_to_right = vowels_count\
    \ - 13;\n\tlet vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n\
    \tlet vowels_count_from_middle_to_left_to_right = vowels_count - 15;\n\tlet vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n\tlet vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n\tlet vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count - 18;\n\tlet vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n\tlet vowels_count_from_right_to_middle_to_left_to_right\
    \ = vowels_count - 20;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n\tlet vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n\tlet vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n\tlet vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n\tlet vowels_count_from_left_to_middle_to_right_to_left_to_right\
    \ = vowels_count - 25;\n\tlet vowels_count_from_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 26;\n\tlet vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo19hh37z.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = vowels.length;\n\
    \    var vowel_count_from_right = vowel_count - 1;\n    var vowel_count_from_left\
    \ = vowel_count - 2;\n    var vowel_count_from_middle = vowel_count - 3;\n   \
    \ var vowel_count_from_left_to_right = vowel_count - 4;\n    var vowel_count_from_right_to_left\
    \ = vowel_count - 5;\n    var vowel_count_from_middle_to_left = vowel_count -\
    \ 6;\n    var vowel_count_from_left_to_middle = vowel_count - 7;\n    var vowel_count_from_right_to_middle\
    \ = vowel_count - 8;\n    var vowel_count_from_middle_to_right = vowel_count -\
    \ 9;\n    var vowel_count_from_left_to_right_to_middle = vowel_count - 10;\n \
    \   var vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n    var\
    \ vowel_count_from_middle_to_left_to_right = vowel_count - 12;\n    var vowel_count_from_left_to_middle_to_right\
    \ = vowel_count - 13;\n    var vowel_count_from_right_to_middle_to_left = vowel_count\
    \ - 14;\n    var vowel_count_from_middle_to_left_to_middle = vowel_count - 15;\n\
    \    var vowel_count_from_left_to_right_to_middle_to_left = vowel_count - 16;\n\
    \    var vowel_count_from_right_to_left_to_middle_to_right = vowel_count - 17;\n\
    \    var vowel_count_from_middle_to_left_to_right_to_middle = vowel_count - 18;\n\
    \    var vowel_count_from_left_to_middle_to_right_to_left = vowel_count - 19;\n\
    \    var vowel_count_from_right_to_middle_to_left_to_middle = vowel_count - 20;\n\
    \    var vowel_count_from_middle_to_left_to_right_to_left_to_middle = vowel_count\
    \ - 21;\n    var vowel_count_from_left_to_right_to_middle_to_left_to_right = vowel_count\
    \ - 22;\n    var vowel_count_from_right_to_left_to_middle_to_right_to_left = vowel_count\
    \ - 23;\n    var vowel_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowel_count - 24;\n    var vowel_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowel_count - 25;\n    var vowel_count_from_right_to_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowel_count - 26;\n    var vowel_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowel_count - 27;\n    var vowel_count_from_left_to_right_to_middle_to_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3xld2iee.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_found\
    \ = false;\n    var vowel_found2 = false;\n    var vowel_found3 = false;\n   \
    \ var vowel_found4 = false;\n    var vowel_found5 = false;\n    var vowel_found6\
    \ = false;\n    var vowel_found7 = false;\n    var vowel_found8 = false;\n   \
    \ var vowel_found9 = false;\n    var vowel_found10 = false;\n    var vowel_found11\
    \ = false;\n    var vowel_found12 = false;\n    var vowel_found13 = false;\n \
    \   var vowel_found14 = false;\n    var vowel_found15 = false;\n    var vowel_found16\
    \ = false;\n    var vowel_found17 = false;\n    var vowel_found18 = false;\n \
    \   var vowel_found19 = false;\n    var vowel_found20 = false;\n    var vowel_found21\
    \ = false;\n    var vowel_found22 = false;\n    var vowel_found23 = false;\n \
    \   var vowel_found24 = false;\n    var vowel_found25 = false;\n    var vowel_found26\
    \ = false;\n    var vowel_found27 = false;\n    var vowel_found28 = false;\n \
    \   var vowel_found29 = false;\n    var vowel_found30 = false;\n    var vowel_found31\
    \ = false;\n    var vowel_found32 = false;\n    var vowel_found33 = false;\n \
    \   var vowel_found34 = false;\n    var vowel_found35 = false;\n    var vowel_found36\
    \ = false;\n    var vowel_found37 = false;\n    var vowel_found38 = false;\n \
    \   var vowel_found39 = false;\n    var vowel_found40 = false;\n    var vowel_found41\
    \ = false;\n    var vowel_found42 = false;\n    var vowel_found43 = false;\n \
    \   var vowel_found44 = false;\n    var vowel_found45 = false;\n    var vowel_found46\
    \ = false;\n    var vowel_found47 = false;\n    var vowel_found48 = false;\n \
    \   var vowel_found49 = false;\n    var vowel_found50 = false;\n    var vowel_found51\
    \ = false;\n    var vowel_found52 = false;\n    var vowel_found53 = false;\n \
    \   var vowel_found54 = false;\n    var vowel_found55 = false;\n    var vowel_found56\
    \ = false;\n    var vowel_found57 = false;\n    var vowel_found58 = false;\n \
    \   var vowel_found59 = false;\n    var vowel_found60 = false;\n    var vowel_found61\
    \ = false;\n    var vowel_found62 = false;\n    var vowel_found63 = false;\n \
    \   var vowel_found64 = false;\n    var vowel_found65 = false;\n    var vowel_found66\
    \ = false;\n    var vowel_found67 = false;\n    var vowel_found68 = false;\n \
    \   var vowel_found69\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe63ywtxw.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_counter = 0;\n    let vowel_found = false;\n    let vowel_found2\
    \ = false;\n    let vowel_found3 = false;\n    let vowel_found4 = false;\n   \
    \ let vowel_found5 = false;\n    let vowel_found6 = false;\n    let vowel_found7\
    \ = false;\n    let vowel_found8 = false;\n    let vowel_found9 = false;\n   \
    \ let vowel_found10 = false;\n    let vowel_found11 = false;\n    let vowel_found12\
    \ = false;\n    let vowel_found13 = false;\n    let vowel_found14 = false;\n \
    \   let vowel_found15 = false;\n    let vowel_found16 = false;\n    let vowel_found17\
    \ = false;\n    let vowel_found18 = false;\n    let vowel_found19 = false;\n \
    \   let vowel_found20 = false;\n    let vowel_found21 = false;\n    let vowel_found22\
    \ = false;\n    let vowel_found23 = false;\n    let vowel_found24 = false;\n \
    \   let vowel_found25 = false;\n    let vowel_found26 = false;\n    let vowel_found27\
    \ = false;\n    let vowel_found28 = false;\n    let vowel_found29 = false;\n \
    \   let vowel_found30 = false;\n    let vowel_found31 = false;\n    let vowel_found32\
    \ = false;\n    let vowel_found33 = false;\n    let vowel_found34 = false;\n \
    \   let vowel_found35 = false;\n    let vowel_found36 = false;\n    let vowel_found37\
    \ = false;\n    let vowel_found38 = false;\n    let vowel_found39 = false;\n \
    \   let vowel_found40 = false;\n    let vowel_found41 = false;\n    let vowel_found42\
    \ = false;\n    let vowel_found43 = false;\n    let vowel_found44 = false;\n \
    \   let vowel_found45 = false;\n    let vowel_found46 = false;\n    let vowel_found47\
    \ = false;\n    let vowel_found48 = false;\n    let vowel_found49 = false;\n \
    \   let vowel_found50 = false;\n    let vowel_found51 = false;\n    let vowel_found52\
    \ = false;\n    let vowel_found53 = false;\n    let vowel_found54 = false;\n \
    \   let vowel_found55 = false;\n    let vowel_found56 = false;\n    let vowel_found57\
    \ = false;\n    let vowel_found58 = false;\n    let vowel_found59 = false;\n \
    \   let vowel_found60 = false;\n    let vowel_found61 = false;\n    let vowel_found62\
    \ = false;\n    let vowel_found63 = false;\n    let vowel_found64 = false;\n \
    \   let vowel_found65 = false;\n    let vowel_found66 = false;\n    let vowel_found67\
    \ = false;\n    let vowel_found\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp64xh2qka.js:78\n    let vowel_found\n        ^\n\nSyntaxError:\
    \ Identifier 'vowel_found' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ var vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    var vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpa03nx23_.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnc8dcfi9.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    for(var\
    \ i = word.length-1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) >= 0){\n\
    \            vowel_count++;\n        }\n    }\n    var vowel_pos = vowel_count\
    \ - 1;\n    var vowel_found = false;\n    for(var i = word.length-1; i >= 0; i--){\n\
    \        if(vowels.indexOf(word[i]) >= 0){\n            vowel_found = true;\n\
    \            break;\n        }\n    }\n    if(vowel_found){\n        return word[vowel_pos];\n\
    \    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpb23usdlp.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb23usdlp.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowels.length-1;\n    let vowel_count_from_left\
    \ = vowel_count_from_right-1;\n    let vowel_count_from_middle = vowel_count_from_right/2;\n\
    \    let vowel_count_from_middle2 = vowel_count_from_middle-1;\n    let vowel_count_from_middle3\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle4 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle5 = vowel_count_from_middle/2;\n    let vowel_count_from_middle6\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle7 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle8 = vowel_count_from_middle/2;\n    let vowel_count_from_middle9\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle10 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle11 = vowel_count_from_middle/2;\n    let vowel_count_from_middle12\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle13 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle14 = vowel_count_from_middle/2;\n    let vowel_count_from_middle15\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle16 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle17 = vowel_count_from_middle/2;\n    let vowel_count_from_middle18\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle19 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle20 = vowel_count_from_middle/2;\n    let vowel_count_from_middle21\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle22 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle23 = vowel_count_from_middle/2;\n    let vowel_count_from_middle24\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle25 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle26 = vowel_count_from_middle/2;\n    let vowel_count_from_middle27\
    \ = vowel_count_from_middle/2;\n    let vowel_count_from_middle28 = vowel_count_from_middle/2;\n\
    \    let vowel_count_from_middle29 = vowel_count_from_middle/2;\n    let vowel_count_from_middle30\
    \ = vowel_count_from_middle/2;\n    let \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdp7dkz3n.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_found = false;\n    for(var i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels_found == false){\n            if(vowels_count\
    \ == 0){\n                return \"\";\n            }\n            if(vowels_index\
    \ == vowels_count){\n                vowels_found = true;\n            }\n   \
    \         if(vowels_index == 0){\n                if(word[i] == 'a'){\n      \
    \              vowels_index = vowels_index + 1;\n                }\n         \
    \       if(word[i] == 'e'){\n                    vowels_index = vowels_index +\
    \ 1;\n                }\n                if(word[i] == 'i'){\n               \
    \     vowels_index = vowels_index + 1;\n                }\n                if(word[i]\
    \ == 'o'){\n                    vowels_index = vowels_index + 1;\n           \
    \     }\n                if(word[i] == 'u'){\n                    vowels_index\
    \ = vowels_index + 1;\n                }\n            }\n            if(vowels_index\
    \ == vowels_count){\n                vowels_found = true;\n            }\n   \
    \     }\n        if(vowels_found == true){\n            if(word[i] == 'a'){\n\
    \                vowels_index = vowels_index + 1;\n            }\n           \
    \ if(word[i] == 'e'){\n                vowels_index = vowels_index + 1;\n    \
    \        }\n            if(word[i] == 'i'){\n                vowels_index = vowels_index\
    \ + 1;\n            }\n            if(word[i] == 'o'){\n                vowels_index\
    \ = vowels_index + 1;\n            }\n            if(word[i] == 'u'){\n      \
    \          vowels_index = vowels_index + 1;\n            }\n        }\n    }\n\
    \    return \"\";\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpe0idrsd4.js:66:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe0idrsd4.js:81:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplrgtsg0x.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_found = 0;\n    var vowels_found_index = 0;\n    var vowels_found_index2\
    \ = 0;\n    var vowels_found_index3 = 0;\n    var vowels_found_index4 = 0;\n \
    \   var vowels_found_index5 = 0;\n    var vowels_found_index6 = 0;\n    var vowels_found_index7\
    \ = 0;\n    var vowels_found_index8 = 0;\n    var vowels_found_index9 = 0;\n \
    \   var vowels_found_index10 = 0;\n    var vowels_found_index11 = 0;\n    var\
    \ vowels_found_index12 = 0;\n    var vowels_found_index13 = 0;\n    var vowels_found_index14\
    \ = 0;\n    var vowels_found_index15 = 0;\n    var vowels_found_index16 = 0;\n\
    \    var vowels_found_index17 = 0;\n    var vowels_found_index18 = 0;\n    var\
    \ vowels_found_index19 = 0;\n    var vowels_found_index20 = 0;\n    var vowels_found_index21\
    \ = 0;\n    var vowels_found_index22 = 0;\n    var vowels_found_index23 = 0;\n\
    \    var vowels_found_index24 = 0;\n    var vowels_found_index25 = 0;\n    var\
    \ vowels_found_index26 = 0;\n    var vowels_found_index27 = 0;\n    var vowels_found_index28\
    \ = 0;\n    var vowels_found_index29 = 0;\n    var vowels_found_index30 = 0;\n\
    \    var vowels_found_index31 = 0;\n    var vowels_found_index32 = 0;\n    var\
    \ vowels_found_index33 = 0;\n    var vowels_found_index34 = 0;\n    var vowels_found_index35\
    \ = 0;\n    var vowels_found_index36 = 0;\n    var vowels_found_index37 = 0;\n\
    \    var vowels_found_index38 = 0;\n    var vowels_found_index39 = 0;\n    var\
    \ vowels_found_index40 = 0;\n    var vowels_found_index41 = 0;\n    var vowels_found_index42\
    \ = 0;\n    var vowels_found_index43 = 0;\n    var vowels_found_index44 = 0;\n\
    \    var vowels_found_index45 = 0;\n    var vowels_found_index46 = 0;\n    var\
    \ vowels_found_index47 = 0;\n    var vowels_found_index48 = 0;\n    var vowels_found_index49\
    \ = 0;\n    var vowels_found_index50 = 0;\n    var vowels_found_index51 = 0;\n\
    \    var vowels_found_index52 = 0;\n    var vowels_found_index53 = 0;\n    var\
    \ vowels_found_index54 = 0;\n    var vowels_found_index55 = 0;\n    var vowels_found_index56\
    \ = 0;\n    var vowels_found_index57 = 0;\n    var vowels_found_index58 = 0;\n\
    \    var vowels_found_index59 = 0;\n    var vowels_found_index60 = 0;\n    var\
    \ vowels_found_index61 = 0;\n    var vowels_found\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6m2y4u0f.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpv9yd80lr.js:16:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpv9yd80lr.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmkrunge6.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    var vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph4i882c9.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_right_to_left = vowels_count\
    \ - 3;\n    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - 5;\n    let vowels_count_from_left_to_right_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_right_to_left_to_right_to_left = vowels_count\
    \ - 7;\n    let vowels_count_from_left_to_right_to_left_to_right = vowels_count\
    \ - 8;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 9;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdb5ii9hu.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"apple\"); // returns \"\"\nget_closest_vowel(\"\
    aPPle\"); // returns \"P\"\nget_closest_vowel(\"aPPleP\"); // returns \"P\"\n\
    get_closest_vowel(\"aPPlePP\"); // returns \"P\"\nget_closest_vowel(\"aPPlePPP\"\
    ); // returns \"P\"\nget_closest_vowel(\"aPPlePPPP\"); // returns \"P\"\nget_closest_vowel(\"\
    aPPlePPPPP\"); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPP\"); // returns\
    \ \"P\"\nget_closest_vowel(\"aPPlePPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"\
    aPPlePPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPP\"); //\
    \ returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"\
    aPPlePPPPPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPP\"\
    ); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPP\"); // returns \"\
    P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"\
    aPPlePPPPPPPPPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPPPPP\"\
    ); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPPPPP\"); // returns\
    \ \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"\
    aPPlePPPPPPPPPPPPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPPPPPPPP\"\
    ); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPPPPPPPPP\"); // returns\
    \ \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"\
    aPPlePPPPPPPPPPPPPPPPPPPP\"); // returns \"P\"\nget_closest_vowel(\"aPPlePPPPPPPPPPPPPPPPPPPPP\"\
    ); // returns \"P\"\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmp3qulqii3.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp3qulqii3.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4ntm6mgv.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - word.length;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5yawgqur.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count_from_left + 1;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right + 1;\n    let vowel_count_from_middle_to_right = vowel_count_from_middle\
    \ + 1;\n    let vowel_count_from_left_to_middle = vowel_count_from_left + 2;\n\
    \    let vowel_count_from_right_to_middle = vowel_count_from_right + 2;\n    let\
    \ vowel_count_from_middle_to_left = vowel_count_from_middle + 2;\n    let vowel_count_from_left_to_right_to_middle\
    \ = vowel_count_from_left_to_right + 2;\n    let vowel_count_from_right_to_left_to_middle\
    \ = vowel_count_from_right_to_left + 2;\n    let vowel_count_from_middle_to_right_to_middle\
    \ = vowel_count_from_middle_to_left + 2;\n    let vowel_count_from_left_to_right_to_middle_to_right\
    \ = vowel_count_from_left_to_right_to_middle + 2;\n    let vowel_count_from_right_to_left_to_middle_to_left\
    \ = vowel_count_from_right_to_left_to_middle + 2;\n    let vowel_count_from_middle_to_right_to_left_to_middle\
    \ = vowel_count_from_middle_to_right_to_middle + 2;\n    let vowel_count_from_left_to_right_to_middle_to_right_to_left\
    \ = vowel_count_from_left_to_right_to_middle_to_left + 2;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right\
    \ = vowel_count_from_right_to_left_to_middle_to_right + 2;\n    let vowel_count_from_middle_to_right_to_left_to_middle_to_left_to_right\
    \ = vowel_count_from_middle_to_right_to_left_to_middle + 2;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_left\
    \ = vowel_count_from_left_to_right_to_middle_to_left_to_right + 2;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowel_count_from_right_to_left_to_middle_to_left_to_right_to_left + 2;\n \
    \   let vowel_count_from_middle_to_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowel_count_from_middle_to_right_to_left_to_middle_to_left_to_right_to_left\
    \ + 2;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowel_count_from_left_to_right_to_middle_to_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnu7vpy4u.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_2\
    \ = 0;\n    let vowels_index_count_3 = 0;\n    let vowels_index_count_4 = 0;\n\
    \    let vowels_index_count_5 = 0;\n    let vowels_index_count_6 = 0;\n    let\
    \ vowels_index_count_7 = 0;\n    let vowels_index_count_8 = 0;\n    let vowels_index_count_9\
    \ = 0;\n    let vowels_index_count_10 = 0;\n    let vowels_index_count_11 = 0;\n\
    \    let vowels_index_count_12 = 0;\n    let vowels_index_count_13 = 0;\n    let\
    \ vowels_index_count_14 = 0;\n    let vowels_index_count_15 = 0;\n    let vowels_index_count_16\
    \ = 0;\n    let vowels_index_count_17 = 0;\n    let vowels_index_count_18 = 0;\n\
    \    let vowels_index_count_19 = 0;\n    let vowels_index_count_20 = 0;\n    let\
    \ vowels_index_count_21 = 0;\n    let vowels_index_count_22 = 0;\n    let vowels_index_count_23\
    \ = 0;\n    let vowels_index_count_24 = 0;\n    let vowels_index_count_25 = 0;\n\
    \    let vowels_index_count_26 = 0;\n    let vowels_index_count_27 = 0;\n    let\
    \ vowels_index_count_28 = 0;\n    let vowels_index_count_29 = 0;\n    let vowels_index_count_30\
    \ = 0;\n    let vowels_index_count_31 = 0;\n    let vowels_index_count_32 = 0;\n\
    \    let vowels_index_count_33 = 0;\n    let vowels_index_count_34 = 0;\n    let\
    \ vowels_index_count_35 = 0;\n    let vowels_index_count_36 = 0;\n    let vowels_index_count_37\
    \ = 0;\n    let vowels_index_count_38 = 0;\n    let vowels_index_count_39 = 0;\n\
    \    let vowels_index_count_40 = 0;\n    let vowels_index_count_41 = 0;\n    let\
    \ vowels_index_count_42 = 0;\n    let vowels_index_count_43 = 0;\n    let vowels_index_count_44\
    \ = 0;\n    let vowels_index_count_45 = 0;\n    let vowels_index_count_46 = 0;\n\
    \    let vowels_index_count_47 = 0;\n    let vowels_index_count_48 = 0;\n    let\
    \ vowels_index_count_49 = 0;\n    let vowels_index_count_50 = 0;\n    let vowels_index_count_51\
    \ = 0;\n    let vowels_index_count_52 = 0;\n    let vowels_index_count_53 = 0;\n\
    \    let vowels_index_count_54 = 0;\n    let vowels_index_count_55 = 0;\n    let\
    \ vowels_index_count_56 = 0;\n    let vowels_index_count_57 = 0;\n    let vowels_index_count_58\
    \ = 0;\n    let vowels_index_count_59 = 0;\n    let vowels_index_count_60 = 0;\n\
    \    let vowels_index_count_61 = 0;\n    let vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt6bh7_yz.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"hello\"); // returns \"e\"\nget_closest_vowel(\"\
    helloo\"); // returns \"\"\nget_closest_vowel(\"hellooo\"); // returns \"\"\n\
    get_closest_vowel(\"helloooo\"); // returns \"\"\nget_closest_vowel(\"hellooooow\"\
    ); // returns \"o\"\nget_closest_vowel(\"hellooooowr\"); // returns \"\"\nget_closest_vowel(\"\
    hellooooowrr\"); // returns \"\"\nget_closest_vowel(\"hellooooowrrr\"); // returns\
    \ \"\"\nget_closest_vowel(\"hellooooowrrrr\"); // returns \"\"\nget_closest_vowel(\"\
    hellooooowrrrrr\"); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrr\");\
    \ // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrrr\"); // returns \"\"\n\
    get_closest_vowel(\"hellooooowrrrrrrrr\"); // returns \"\"\nget_closest_vowel(\"\
    hellooooowrrrrrrrrr\"); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrr\"\
    ); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrrr\"); // returns \"\
    \"\nget_closest_vowel(\"hellooooowrrrrrrrrrrrr\"); // returns \"\"\nget_closest_vowel(\"\
    hellooooowrrrrrrrrrrrrr\"); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrrrrrr\"\
    ); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrrrrrrr\"); // returns\
    \ \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrrrrrrr\"); // returns \"\"\nget_closest_vowel(\"\
    hellooooowrrrrrrrrrrrrrrrr\"); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrrrrrrrrr\"\
    ); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrrrrrrrrrr\"); // returns\
    \ \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrrrrrrrrrrr\"); // returns \"\"\n\
    get_closest_vowel(\"hellooooowrrrrrrrrrrrrrrrrrr\"); // returns \"\"\nget_closest_vowel(\"\
    hellooooowrrrrrrrrrrrrrrrrrrr\"); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrrrrrrrrrrrrrrrr\"\
    ); // returns \"\"\nget_closest_vowel(\"hellooooowrrrrrr\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpirvp7hrg.js:38\nget_closest_vowel(\"hellooooowrrrrrr\n        \
    \          ^^^^^^^^^^^^^^^^^\n\nSyntaxError: Invalid or unexpected token\n   \
    \ at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var consonants\
    \ = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \    var consonant_count = 0;\n    for(var i=word.length-1;i>=0;i--){\n      \
    \  if(vowels.indexOf(word[i]) > -1){\n            vowel_count++;\n        }\n\
    \        if(consonants.indexOf(word[i]) > -1){\n            consonant_count++;\n\
    \        }\n    }\n    if(vowel_count > consonant_count){\n        return word;\n\
    \    }\n    else{\n        return \"\";\n    }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5b9m7t8c.js:27\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_positions = [];\n    let vowel_positions_length = 0;\n    let vowel_positions_max\
    \ = 0;\n    let vowel_positions_min = 0;\n    let vowel_positions_sum = 0;\n \
    \   let vowel_positions_avg = 0;\n    let vowel_positions_sum2 = 0;\n    let vowel_positions_avg2\
    \ = 0;\n    let vowel_positions_sum3 = 0;\n    let vowel_positions_avg3 = 0;\n\
    \    let vowel_positions_sum4 = 0;\n    let vowel_positions_avg4 = 0;\n    let\
    \ vowel_positions_sum5 = 0;\n    let vowel_positions_avg5 = 0;\n    let vowel_positions_sum6\
    \ = 0;\n    let vowel_positions_avg6 = 0;\n    let vowel_positions_sum7 = 0;\n\
    \    let vowel_positions_avg7 = 0;\n    let vowel_positions_sum8 = 0;\n    let\
    \ vowel_positions_avg8 = 0;\n    let vowel_positions_sum9 = 0;\n    let vowel_positions_avg9\
    \ = 0;\n    let vowel_positions_sum10 = 0;\n    let vowel_positions_avg10 = 0;\n\
    \    let vowel_positions_sum11 = 0;\n    let vowel_positions_avg11 = 0;\n    let\
    \ vowel_positions_sum12 = 0;\n    let vowel_positions_avg12 = 0;\n    let vowel_positions_sum13\
    \ = 0;\n    let vowel_positions_avg13 = 0;\n    let vowel_positions_sum14 = 0;\n\
    \    let vowel_positions_avg14 = 0;\n    let vowel_positions_sum15 = 0;\n    let\
    \ vowel_positions_avg15 = 0;\n    let vowel_positions_sum16 = 0;\n    let vowel_positions_avg16\
    \ = 0;\n    let vowel_positions_sum17 = 0;\n    let vowel_positions_avg17 = 0;\n\
    \    let vowel_positions_sum18 = 0;\n    let vowel_positions_avg18 = 0;\n    let\
    \ vowel_positions_sum19 = 0;\n    let vowel_positions_avg19 = 0;\n    let vowel_positions_sum20\
    \ = 0;\n    let vowel_positions_avg20 = 0;\n    let vowel_positions_sum21 = 0;\n\
    \    let vowel_positions_avg21 = 0;\n    let vowel_positions_sum22 = 0;\n    let\
    \ vowel_positions_avg22 = 0;\n    let vowel_positions_sum23 = 0;\n    let vowel_positions_avg23\
    \ = 0;\n    let vowel_positions_sum24 = 0;\n    let vowel_positions_avg24 = 0;\n\
    \    let vowel_positions_sum25 = 0;\n    let vowel_positions_avg25 = 0;\n    let\
    \ vowel_positions_sum26 = 0;\n    let vowel_positions_avg26 = 0;\n    let vowel_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk1ymrobv.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_2\
    \ = 0;\n    var vowels_index_count_3 = 0;\n    var vowels_index_count_4 = 0;\n\
    \    var vowels_index_count_5 = 0;\n    var vowels_index_count_6 = 0;\n    var\
    \ vowels_index_count_7 = 0;\n    var vowels_index_count_8 = 0;\n    var vowels_index_count_9\
    \ = 0;\n    var vowels_index_count_10 = 0;\n    var vowels_index_count_11 = 0;\n\
    \    var vowels_index_count_12 = 0;\n    var vowels_index_count_13 = 0;\n    var\
    \ vowels_index_count_14 = 0;\n    var vowels_index_count_15 = 0;\n    var vowels_index_count_16\
    \ = 0;\n    var vowels_index_count_17 = 0;\n    var vowels_index_count_18 = 0;\n\
    \    var vowels_index_count_19 = 0;\n    var vowels_index_count_20 = 0;\n    var\
    \ vowels_index_count_21 = 0;\n    var vowels_index_count_22 = 0;\n    var vowels_index_count_23\
    \ = 0;\n    var vowels_index_count_24 = 0;\n    var vowels_index_count_25 = 0;\n\
    \    var vowels_index_count_26 = 0;\n    var vowels_index_count_27 = 0;\n    var\
    \ vowels_index_count_28 = 0;\n    var vowels_index_count_29 = 0;\n    var vowels_index_count_30\
    \ = 0;\n    var vowels_index_count_31 = 0;\n    var vowels_index_count_32 = 0;\n\
    \    var vowels_index_count_33 = 0;\n    var vowels_index_count_34 = 0;\n    var\
    \ vowels_index_count_35 = 0;\n    var vowels_index_count_36 = 0;\n    var vowels_index_count_37\
    \ = 0;\n    var vowels_index_count_38 = 0;\n    var vowels_index_count_39 = 0;\n\
    \    var vowels_index_count_40 = 0;\n    var vowels_index_count_41 = 0;\n    var\
    \ vowels_index_count_42 = 0;\n    var vowels_index_count_43 = 0;\n    var vowels_index_count_44\
    \ = 0;\n    var vowels_index_count_45 = 0;\n    var vowels_index_count_46 = 0;\n\
    \    var vowels_index_count_47 = 0;\n    var vowels_index_count_48 = 0;\n    var\
    \ vowels_index_count_49 = 0;\n    var vowels_index_count_50 = 0;\n    var vowels_index_count_51\
    \ = 0;\n    var vowels_index_count_52 = 0;\n    var vowels_index_count_53 = 0;\n\
    \    var vowels_index_count_54 = 0;\n    var vowels_index_count_55 = 0;\n    var\
    \ vowels_index_count_56 = 0;\n    var vowels_index_count_57 = 0;\n    var vowels_index_count_58\
    \ = 0;\n    var vowels_index_count_59 = 0;\n    var vowels_index_count_60 = 0;\n\
    \    var vowels_index_count_61 = 0;\n    var vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2smimu8s.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_middle2 = vowels_count - 4;\n    var vowels_count_from_middle3\
    \ = vowels_count - 5;\n    var vowels_count_from_middle4 = vowels_count - 6;\n\
    \    var vowels_count_from_middle5 = vowels_count - 7;\n    var vowels_count_from_middle6\
    \ = vowels_count - 8;\n    var vowels_count_from_middle7 = vowels_count - 9;\n\
    \    var vowels_count_from_middle8 = vowels_count - 10;\n    var vowels_count_from_middle9\
    \ = vowels_count - 11;\n    var vowels_count_from_middle10 = vowels_count - 12;\n\
    \    var vowels_count_from_middle11 = vowels_count - 13;\n    var vowels_count_from_middle12\
    \ = vowels_count - 14;\n    var vowels_count_from_middle13 = vowels_count - 15;\n\
    \    var vowels_count_from_middle14 = vowels_count - 16;\n    var vowels_count_from_middle15\
    \ = vowels_count - 17;\n    var vowels_count_from_middle16 = vowels_count - 18;\n\
    \    var vowels_count_from_middle17 = vowels_count - 19;\n    var vowels_count_from_middle18\
    \ = vowels_count - 20;\n    var vowels_count_from_middle19 = vowels_count - 21;\n\
    \    var vowels_count_from_middle20 = vowels_count - 22;\n    var vowels_count_from_middle21\
    \ = vowels_count - 23;\n    var vowels_count_from_middle22 = vowels_count - 24;\n\
    \    var vowels_count_from_middle23 = vowels_count - 25;\n    var vowels_count_from_middle24\
    \ = vowels_count - 26;\n    var vowels_count_from_middle25 = vowels_count - 27;\n\
    \    var vowels_count_from_middle26 = vowels_count - 28;\n    var vowels_count_from_middle27\
    \ = vowels_count - 29;\n    var vowels_count_from_middle28 = vowels_count - 30;\n\
    \    var vowels_count_from_middle29 = vowels_count - 31;\n    var vowels_count_from_middle30\
    \ = vowels_count - 32;\n    var vowels_count_from_middle31 = vowels_count - 33;\n\
    \    var vowels_count_from_middle32 = vowels_count - 34;\n    var vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqxv7upgi.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = vowels_count - 1;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_min\
    \ = vowels_count - 1;\n    var vowels_index_count_max = vowels_count - 1;\n  \
    \  var vowels_index_count_min = vowels_count - 1;\n    var vowels_index_count_max\
    \ = vowels_count - 1;\n    var vowels_index_count_min = vowels_count - 1;\n  \
    \  var vowels_index_count_max = vowels_count - 1;\n    var vowels_index_count_min\
    \ = vowels_count - 1;\n    var vowels_index_count_max = vowels_count - 1;\n  \
    \  var vowels_index_count_min = vowels_count - 1;\n    var vowels_index_count_max\
    \ = vowels_count - 1;\n    var vowels_index_count_min = vowels_count - 1;\n  \
    \  var vowels_index_count_max = vowels_count - 1;\n    var vowels_index_count_min\
    \ = vowels_count - 1;\n    var vowels_index_count_max = vowels_count - 1;\n  \
    \  var vowels_index_count_min = vowels_count - 1;\n    var vowels_index_count_max\
    \ = vowels_count - 1;\n    var vowels_index_count_min = vowels_count - 1;\n  \
    \  var vowels_index_count_max = vowels_count - 1;\n    var vowels_index_count_min\
    \ = vowels_count - 1;\n    var vowels_index_count_max = vowels_count - 1;\n  \
    \  var vowels_index_count_min = vowels_count - 1;\n    var vowels_index_count_max\
    \ = vowels_count - 1;\n    var vowels_index_count_min = vowels_count - 1;\n  \
    \  var vowels_index_count_max = vowels_count - 1;\n    var vowels_index_count_min\
    \ = vowels_count - 1;\n    var vowels_index_count_max = vowels_count - 1;\n  \
    \  var vowels_index_count_min = vowels_count - 1;\n    var vowels_index_count_max\
    \ = vowels_count - 1;\n    var vowels_index_count_min = vowels_count - 1;\n  \
    \  var vowels_index_count_max = vowels_count - 1;\n    var vowels_index_count_min\
    \ = vowels_count - 1;\n    var vowels_index_count_max = vowels_count - 1;\n  \
    \  var vowels_index_count_min = vowels_count - 1;\n    var vowels_index_count_max\
    \ = vowels_count - 1;\n    var vowels_index_count_min = vowels_count - 1;\n  \
    \  var vowels_index_count_max = vowels_count - 1;\n    var vowels_index_count_min\
    \ = vowels_count - 1;\n    var vowels_index_count_max = vowels_count - 1;\n  \
    \  var vowels_index_count_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_r94n12s.js:73\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpperAndLower\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapital\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthers\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthers\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthers\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 18;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvjeblkir.js:22\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 13;\n        ^\n\nSyntaxError: Identifier 'vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowel_count = 0;\n\tlet vowel_found\
    \ = false;\n\tlet vowel_position = 0;\n\tlet consonant_position = 0;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_found = false;\n\tlet consonant_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet consonant_found = false;\n\t\
    let consonant_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpggj7dyc7.js:14\n\tlet consonant_found = false;\n\t    ^\n\nSyntaxError:\
    \ Identifier 'consonant_found' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = vowels_count - 1;\n\tlet vowels_count_from_left\
    \ = vowels_count - 2;\n\tlet vowels_count_from_middle = vowels_count - 3;\n\t\
    let vowels_count_from_left_to_right = vowels_count - 4;\n\tlet vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n\tlet vowels_count_from_middle_to_left = vowels_count -\
    \ 6;\n\tlet vowels_count_from_left_to_middle = vowels_count - 7;\n\tlet vowels_count_from_right_to_middle\
    \ = vowels_count - 8;\n\tlet vowels_count_from_middle_to_right = vowels_count\
    \ - 9;\n\tlet vowels_count_from_left_to_right_to_middle = vowels_count - 10;\n\
    \tlet vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\tlet vowels_count_from_middle_to_left_to_right\
    \ = vowels_count - 12;\n\tlet vowels_count_from_left_to_middle_to_right = vowels_count\
    \ - 13;\n\tlet vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n\
    \tlet vowels_count_from_middle_to_right_to_left = vowels_count - 15;\n\tlet vowels_count_from_left_to_right_to_middle_to_middle\
    \ = vowels_count - 16;\n\tlet vowels_count_from_right_to_left_to_middle_to_middle\
    \ = vowels_count - 17;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n\tlet vowels_count_from_left_to_middle_to_right_to_middle\
    \ = vowels_count - 19;\n\tlet vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n\tlet vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n\tlet vowels_count_from_left_to_right_to_middle_to_right_to_middle\
    \ = vowels_count - 22;\n\tlet vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n\tlet vowels_count_from_middle_to_left_to_right_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 24;\n\tlet vowels_count_from_left_to_middle_to_right_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n\tlet vowels_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_right_to_middle\
    \ = vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpox37bnpi.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"hello\"); // returns \"e\"\nget_closest_vowel(\"\
    abracadabra\"); // returns \"\"\nget_closest_vowel(\"abracadabraz\"); // returns\
    \ \"a\"\nget_closest_vowel(\"abracadabrazz\"); // returns \"a\"\nget_closest_vowel(\"\
    abracadabrazzz\"); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzz\"); //\
    \ returns \"a\"\nget_closest_vowel(\"abracadabrazzzzz\"); // returns \"a\"\nget_closest_vowel(\"\
    abracadabrazzzzzz\"); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzz\"\
    ); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzz\"); // returns \"\
    a\"\nget_closest_vowel(\"abracadabrazzzzzzzzz\"); // returns \"a\"\nget_closest_vowel(\"\
    abracadabrazzzzzzzzzz\"); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzz\"\
    ); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzz\"); // returns\
    \ \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzzz\"); // returns \"a\"\nget_closest_vowel(\"\
    abracadabrazzzzzzzzzzzzzz\"); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzzzzz\"\
    ); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzzzzzz\"); // returns\
    \ \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzzzzz\"); // returns \"a\"\n\
    get_closest_vowel(\"abracadabrazzzzzzzzzzzzzzzz\"); // returns \"a\"\nget_closest_vowel(\"\
    abracadabrazzzzzzzzzzzzzzzzz\"); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzzzzzzzz\"\
    ); // returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzzzzzzzzz\"); //\
    \ returns \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzzzzzzzzzz\"); // returns\
    \ \"a\"\nget_closest_vowel(\"abracadabrazzzzzzzzzzzzzzzzzzzzz\"); // returns \"\
    a\"\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmp1heq_esq.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp1heq_esq.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3 = vowelsCount -\
    \ 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5 = vowelsCount\
    \ - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7 = vowelsCount\
    \ - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9 = vowelsCount\
    \ - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11 = vowelsCount\
    \ - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13 = vowelsCount\
    \ - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15 = vowelsCount\
    \ - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17 = vowelsCount\
    \ - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19 = vowelsCount\
    \ - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21 = vowelsCount\
    \ - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23 = vowelsCount\
    \ - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25 = vowelsCount\
    \ - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27 = vowelsCount\
    \ - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29 = vowelsCount\
    \ - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31 = vowelsCount\
    \ - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33 = vowelsCount\
    \ - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35 = vowelsCount\
    \ - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37 = vowelsCount\
    \ - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39 = vowelsCount\
    \ - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41 = vowelsCount\
    \ - 40;\n    let vowels\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcu5syosj.js:50\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount-1;\n    let vowelsCount3 = vowelsCount-2;\
    \ \n    let vowelsCount4 = vowelsCount-3; \n    let vowelsCount5 = vowelsCount-4;\
    \ \n    let vowelsCount6 = vowelsCount-5; \n    let vowelsCount7 = vowelsCount-6;\
    \ \n    let vowelsCount8 = vowelsCount-7; \n    let vowelsCount9 = vowelsCount-8;\
    \ \n    let vowelsCount10 = vowelsCount-9; \n    let vowelsCount11 = vowelsCount-10;\
    \ \n    let vowelsCount12 = vowelsCount-11; \n    let vowelsCount13 = vowelsCount-12;\
    \ \n    let vowelsCount14 = vowelsCount-13; \n    let vowelsCount15 = vowelsCount-14;\
    \ \n    let vowelsCount16 = vowelsCount-15; \n    let vowelsCount17 = vowelsCount-16;\
    \ \n    let vowelsCount18 = vowelsCount-17; \n    let vowelsCount19 = vowelsCount-18;\
    \ \n    let vowelsCount20 = vowelsCount-19; \n    let vowelsCount21 = vowelsCount-20;\
    \ \n    let vowelsCount22 = vowelsCount-21; \n    let vowelsCount23 = vowelsCount-22;\
    \ \n    let vowelsCount24 = vowelsCount-23; \n    let vowelsCount25 = vowelsCount-24;\
    \ \n    let vowelsCount26 = vowelsCount-25; \n    let vowelsCount27 = vowelsCount-26;\
    \ \n    let vowelsCount28 = vowelsCount-27; \n    let vowelsCount29 = vowelsCount-28;\
    \ \n    let vowelsCount30 = vowelsCount-29; \n    let vowelsCount31 = vowelsCount-30;\
    \ \n    let vowelsCount32 = vowelsCount-31; \n    let vowelsCount33 = vowelsCount-32;\
    \ \n    let vowelsCount34 = vowelsCount-33; \n    let vowelsCount35 = vowelsCount-34;\
    \ \n    let vowelsCount36 = vowelsCount-35; \n    let vowelsCount37 = vowelsCount-36;\
    \ \n    let vowelsCount38 = vowelsCount-37; \n    let vowelsCount39 = vowelsCount-38;\
    \ \n    let vowelsCount40 = vowelsCount-39; \n    let vowelsCount41 = vowelsCount-40;\
    \ \n    let vowelsCount4\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw9jsfz5g.js:50\n    let vowelsCount4\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsCount4' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = vowels_count - 1;\n\tlet vowels_count_from_left\
    \ = vowels_count - 2;\n\tlet vowels_count_from_middle = vowels_count - 3;\n\t\
    let vowels_count_from_left_to_right = vowels_count - 4;\n\tlet vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n\tlet vowels_count_from_middle_to_left = vowels_count -\
    \ 6;\n\tlet vowels_count_from_left_to_middle = vowels_count - 7;\n\tlet vowels_count_from_right_to_middle\
    \ = vowels_count - 8;\n\tlet vowels_count_from_middle_to_right = vowels_count\
    \ - 9;\n\tlet vowels_count_from_left_to_right_to_middle = vowels_count - 10;\n\
    \tlet vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\tlet vowels_count_from_middle_to_left_to_right\
    \ = vowels_count - 12;\n\tlet vowels_count_from_left_to_middle_to_right = vowels_count\
    \ - 13;\n\tlet vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n\
    \tlet vowels_count_from_middle_to_left_to_middle = vowels_count - 15;\n\tlet vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n\tlet vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n\tlet vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n\tlet vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n\tlet vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n\tlet vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n\tlet vowels_count_from_right_to_left_to_middle_to_left_to_middle\
    \ = vowels_count - 23;\n\tlet vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 24;\n\tlet vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n\tlet vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 26;\n\tlet vowels_count_from_right_to_left_\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp87rx2pjz.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmp_s2iqqdb.js:16:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_s2iqqdb.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"hello\"); // returns \"\"\nget_closest_vowel(\"\
    helo\"); // returns \"e\"\nget_closest_vowel(\"helol\"); // returns \"e\"\nget_closest_vowel(\"\
    helolo\"); // returns \"\"\nget_closest_vowel(\"heloooo\"); // returns \"\"\n\
    get_closest_vowel(\"helooooa\"); // returns \"\"\nget_closest_vowel(\"helooooaa\"\
    ); // returns \"\"\nget_closest_vowel(\"helooooaaa\"); // returns \"\"\nget_closest_vowel(\"\
    helooooaaaa\"); // returns \"\"\nget_closest_vowel(\"helooooaaaaa\"); // returns\
    \ \"\"\nget_closest_vowel(\"helooooaaaaaa\"); // returns \"\"\nget_closest_vowel(\"\
    helooooaaaaaaa\"); // returns \"\"\nget_closest_vowel(\"helooooaaaaaaab\"); //\
    \ returns \"\"\nget_closest_vowel(\"helooooaaaaaaabb\"); // returns \"\"\nget_closest_vowel(\"\
    helooooaaaaaaabbb\"); // returns \"\"\nget_closest_vowel(\"helooooaaaaaaabbbb\"\
    ); // returns \"\"\nget_closest_vowel(\"helooooaaaaaaabbbbb\"); // returns \"\"\
    \nget_closest_vowel(\"helooooaaaaaaabbbbba\"); // returns \"\"\nget_closest_vowel(\"\
    helooooaaaaaaabbbbbaa\"); // returns \"\"\nget_closest_vowel(\"helooooaaaaaaabbbbbaaa\"\
    ); // returns \"\"\nget_closest_vowel(\"helooooaaaaaaabbbbbaaaa\"); // returns\
    \ \"\"\nget_closest_vowel(\"helooooaaaaaaabbbbbaaaaa\"); // returns \"\"\nget_closest_vowel(\"\
    helooooaaaaaaabbbbbaaaaaa\"); // returns \"\"\nget_closest_vowel(\"helooooaaaaaaabbbbbaaaaaaa\"\
    ); // returns \"\"\nget_closest_vowel(\"helooooaaaaaaabbbbbaaaaaaaa\"); // returns\
    \ \"\"\nget_closest_vowel(\"helooooaaaaaaabbbbbaaaaaaaab\"); // returns \"\"\n\
    get_closest_vowel(\"helooooaaaaaaabbbbbaaaaaaaabb\"); // returns \"\"\nget_closest_vowel(\"\
    helooooaaaaaaabbbbbaaaaaaaabbb\"); // returns \"\"\nget_closest_vowel(\"helooooaaaaaaabbbbbaaaaaaaabbbb\"\
    ); // returns \"\"\nget_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt8_u52c0.js:39\nget_\n^\n\nReferenceError: get_ is not defined\n\
    \    at Object.<anonymous> (/tmp/tmpt8_u52c0.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowels.length-1;\n    let vowel_count_from_left\
    \ = vowel_count_from_right-1;\n    let vowel_count_from_middle = vowel_count_from_right/2;\n\
    \    let vowel_count_from_middle_2 = vowel_count_from_middle-1;\n    let vowel_count_from_middle_3\
    \ = vowel_count_from_middle_2-1;\n    let vowel_count_from_middle_4 = vowel_count_from_middle_3-1;\n\
    \    let vowel_count_from_middle_5 = vowel_count_from_middle_4-1;\n    let vowel_count_from_middle_6\
    \ = vowel_count_from_middle_5-1;\n    let vowel_count_from_middle_7 = vowel_count_from_middle_6-1;\n\
    \    let vowel_count_from_middle_8 = vowel_count_from_middle_7-1;\n    let vowel_count_from_middle_9\
    \ = vowel_count_from_middle_8-1;\n    let vowel_count_from_middle_10 = vowel_count_from_middle_9-1;\n\
    \    let vowel_count_from_middle_11 = vowel_count_from_middle_10-1;\n    let vowel_count_from_middle_12\
    \ = vowel_count_from_middle_11-1;\n    let vowel_count_from_middle_13 = vowel_count_from_middle_12-1;\n\
    \    let vowel_count_from_middle_14 = vowel_count_from_middle_13-1;\n    let vowel_count_from_middle_15\
    \ = vowel_count_from_middle_14-1;\n    let vowel_count_from_middle_16 = vowel_count_from_middle_15-1;\n\
    \    let vowel_count_from_middle_17 = vowel_count_from_middle_16-1;\n    let vowel_count_from_middle_18\
    \ = vowel_count_from_middle_17-1;\n    let vowel_count_from_middle_19 = vowel_count_from_middle_18-1;\n\
    \    let vowel_count_from_middle_20 = vowel_count_from_middle_19-1;\n    let vowel_count_from_middle_21\
    \ = vowel_count_from_middle_20-1;\n    let vowel_count_from_middle_22 = vowel_count_from_middle_21-1;\n\
    \    let vowel_count_from_middle_23 = vowel_count_from_middle_22-1;\n    let vowel_count_from_middle_24\
    \ = vowel_count_from_middle_23-1;\n    let vowel_count_from_middle_25 = vowel_count_from_middle_24-1;\n\
    \    let vowel_count_from_middle_26 = vowel_count_from_middle_25-1;\n    let vowel_count_from_middle_27\
    \ = vowel_count_from_middle_26-1;\n    let vowel_count_from_middle_28 = vowel_count_from_middle_27-1;\n\
    \    let vowel_count_from_middle_29 = vowel_count_from_middle_28-1;\n    let vowel_count_from_middle_30\
    \ = vowel_count_from_middle_29-1;\n    let \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbzn2pi8k.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4un_pogx.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowels.length - 1;\n    let vowel_count_from_left\
    \ = vowels.length - 1;\n    let vowel_count_from_middle = vowels.length - 1;\n\
    \    let vowel_count_from_middle2 = vowels.length - 1;\n    let vowel_count_from_middle3\
    \ = vowels.length - 1;\n    let vowel_count_from_middle4 = vowels.length - 1;\n\
    \    let vowel_count_from_middle5 = vowels.length - 1;\n    let vowel_count_from_middle6\
    \ = vowels.length - 1;\n    let vowel_count_from_middle7 = vowels.length - 1;\n\
    \    let vowel_count_from_middle8 = vowels.length - 1;\n    let vowel_count_from_middle9\
    \ = vowels.length - 1;\n    let vowel_count_from_middle10 = vowels.length - 1;\n\
    \    let vowel_count_from_middle11 = vowels.length - 1;\n    let vowel_count_from_middle12\
    \ = vowels.length - 1;\n    let vowel_count_from_middle13 = vowels.length - 1;\n\
    \    let vowel_count_from_middle14 = vowels.length - 1;\n    let vowel_count_from_middle15\
    \ = vowels.length - 1;\n    let vowel_count_from_middle16 = vowels.length - 1;\n\
    \    let vowel_count_from_middle17 = vowels.length - 1;\n    let vowel_count_from_middle18\
    \ = vowels.length - 1;\n    let vowel_count_from_middle19 = vowels.length - 1;\n\
    \    let vowel_count_from_middle20 = vowels.length - 1;\n    let vowel_count_from_middle21\
    \ = vowels.length - 1;\n    let vowel_count_from_middle22 = vowels.length - 1;\n\
    \    let vowel_count_from_middle23 = vowels.length - 1;\n    let vowel_count_from_middle24\
    \ = vowels.length - 1;\n    let vowel_count_from_middle25 = vowels.length - 1;\n\
    \    let vowel_count_from_middle26 = vowels.length - 1;\n    let vowel_count_from_middle27\
    \ = vowels.length - 1;\n    let vowel_count_from_middle28 = vowels.length - 1;\n\
    \    let vowel_count_from_middle29 = vowels.length - 1;\n    let vowel_count_from_middle30\
    \ = vowels.length - 1;\n    let vowel_count_from_middle31 = vowels.length - 1;\n\
    \    let vowel_count_from_middle32 = vowels.length - 1;\n    let vowel_count_from_middle33\
    \ = vowels.length - 1;\n    let vowel_count_from_middle34 = vowels.length - 1;\n\
    \    let vowel_count_from_middle35 = vowels.length - 1;\n    let vowel_count_from_middle36\
    \ = vowels.length - 1;\n    let vowel_count_from_middle37 = vowels.length - 1;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1go43rmw.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpcdzo_isa.js:15:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpcdzo_isa.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpva5pndus.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowels.filter(function(vowel){\n        return\
    \ vowel.includes(word[word.length-1]);\n    }).length;\n    let vowel_count_from_left\
    \ = vowels.filter(function(vowel){\n        return vowel.includes(word[0]);\n\
    \    }).length;\n    let vowel_count_from_middle = vowels.filter(function(vowel){\n\
    \        return vowel.includes(word[word.length/2]);\n    }).length;\n    let\
    \ vowel_count_from_left_and_right = vowels.filter(function(vowel){\n        return\
    \ vowel.includes(word[word.length-2]);\n    }).length;\n    let vowel_count_from_left_and_middle\
    \ = vowels.filter(function(vowel){\n        return vowel.includes(word[word.length/2-2]);\n\
    \    }).length;\n    let vowel_count_from_right_and_middle = vowels.filter(function(vowel){\n\
    \        return vowel.includes(word[word.length/2+2]);\n    }).length;\n    let\
    \ vowel_count_from_left_and_right_and_middle = vowels.filter(function(vowel){\n\
    \        return vowel.includes(word[word.length-3-2]);\n    }).length;\n    let\
    \ vowel_count_from_right_and_left_and_middle = vowels.filter(function(vowel){\n\
    \        return vowel.includes(word[word.length-3+2]);\n    }).length;\n    let\
    \ vowel_count_from_left_and_right_and_middle_and_vowel_count_from_right = vowels.filter(function(vowel){\n\
    \        return vowel.includes(word[word.length-3-2]) && vowel.includes(word[word.length-1]);\n\
    \    }).length;\n    let vowel_count_from_right_and_left_and_middle_and_vowel_count_from_left\
    \ = vowels.filter(function(vowel){\n        return vowel.includes(word[word.length-3-2])\
    \ && vowel.includes(word[0]);\n    }).length;\n    let vowel_count_from_left_and_right_and_middle_and_vowel_count_from_middle\
    \ = vowels.filter(function(vowel){\n        return vowel.includes(word[word.length-3-2])\
    \ && vowel.includes(word[word.length/2]);\n    }).length;\n    let vowel_count_from_right_and_left_and_middle_and_vowel_count_from_left_and_right\
    \ = vowels.filter(function(vowel){\n        return vowel.includes(word[word.length-3-2])\
    \ && vowel.includes(word[word.length-2]) && vowel.includes(word[word.length-1]);\n\
    \    }).length;\n    let vowel_count_from_right_and_left_and_middle_and_vowel_count_from_left_and_middle\
    \ = vowels.\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppq8mo975.js:47\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    \n    for(var i = word.length-1;\
    \ i >= 0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n            vowels_index\
    \ = i;\n            vowels_index_count++;\n            if(vowels_index_count >\
    \ vowels_index_count_max){\n                vowels_index_count_max = vowels_index_count;\n\
    \            }\n            if(vowels_index_count < vowels_index_count_min){\n\
    \                vowels_index_count_min = vowels_index_count;\n            }\n\
    \        }\n    }\n    \n    if(vowels_index_count > vowels_index_count_max){\n\
    \        return \"\";\n    }\n    else if(vowels_index_count < vowels_index_count_min){\n\
    \        return \"\";\n    }\n    else{\n        return word[vowels_index];\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpjopogy29.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjopogy29.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpa05zc3wy.js:16:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpa05zc3wy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    var vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    var vowels_count_from_left_to_right_to_middle_to_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpihd8_zen.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowel_count = vowels.length;\n\t\
    let vowel_index = 0;\n\tlet consonant_index = word.length - 1;\n\tlet consonant_count\
    \ = 0;\n\tlet consonant_index = 0;\n\tlet consonant_count = 0;\n\twhile(vowel_index\
    \ < vowel_count && consonant_index < consonant_count){\n\t\tif(word[vowel_index]\
    \ === word[consonant_index]){\n\t\t\tvowel_index++;\n\t\t\tconsonant_index++;\n\
    \t\t}\n\t\telse if(word[vowel_index] === word[consonant_index].toUpperCase()){\n\
    \t\t\tvowel_index++;\n\t\t\tconsonant_index++;\n\t\t}\n\t\telse if(word[vowel_index]\
    \ === word[consonant_index].toLowerCase()){\n\t\t\tvowel_index++;\n\t\t\tconsonant_index++;\n\
    \t\t}\n\t\telse{\n\t\t\tconsonant_index--;\n\t\t\tconsonant_count++;\n\t\t}\n\t\
    }\n\treturn word[vowel_index];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp05qafart.js:13\n\tlet consonant_index = 0;\n\t    ^\n\nSyntaxError:\
    \ Identifier 'consonant_index' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcwyzx6i8.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"apple\"); // returns \"\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\"); // returns \"e\"\nget_closest_vowel(\"\
    appleberry\"); // returns \"e\"\nget_closest_vowel(\"appleberry\"); // returns\
    \ \"e\"\nget_closest_vowel(\"appleberry\");\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmp_b685qld.js:52:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_b685qld.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 22;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowels_count - 23;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 27;\n    let \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpffdbrmfn.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowel_count = 0;\n    var\
    \ vowel_found = false;\n    var vowel_found2 = false;\n    var vowel_found3 =\
    \ false;\n    var vowel_found4 = false;\n    var vowel_found5 = false;\n    var\
    \ vowel_found6 = false;\n    var vowel_found7 = false;\n    var vowel_found8 =\
    \ false;\n    var vowel_found9 = false;\n    var vowel_found10 = false;\n    var\
    \ vowel_found11 = false;\n    var vowel_found12 = false;\n    var vowel_found13\
    \ = false;\n    var vowel_found14 = false;\n    var vowel_found15 = false;\n \
    \   var vowel_found16 = false;\n    var vowel_found17 = false;\n    var vowel_found18\
    \ = false;\n    var vowel_found19 = false;\n    var vowel_found20 = false;\n \
    \   var vowel_found21 = false;\n    var vowel_found22 = false;\n    var vowel_found23\
    \ = false;\n    var vowel_found24 = false;\n    var vowel_found25 = false;\n \
    \   var vowel_found26 = false;\n    var vowel_found27 = false;\n    var vowel_found28\
    \ = false;\n    var vowel_found29 = false;\n    var vowel_found30 = false;\n \
    \   var vowel_found31 = false;\n    var vowel_found32 = false;\n    var vowel_found33\
    \ = false;\n    var vowel_found34 = false;\n    var vowel_found35 = false;\n \
    \   var vowel_found36 = false;\n    var vowel_found37 = false;\n    var vowel_found38\
    \ = false;\n    var vowel_found39 = false;\n    var vowel_found40 = false;\n \
    \   var vowel_found41 = false;\n    var vowel_found42 = false;\n    var vowel_found43\
    \ = false;\n    var vowel_found44 = false;\n    var vowel_found45 = false;\n \
    \   var vowel_found46 = false;\n    var vowel_found47 = false;\n    var vowel_found48\
    \ = false;\n    var vowel_found49 = false;\n    var vowel_found50 = false;\n \
    \   var vowel_found51 = false;\n    var vowel_found52 = false;\n    var vowel_found53\
    \ = false;\n    var vowel_found54 = false;\n    var vowel_found55 = false;\n \
    \   var vowel_found56 = false;\n    var vowel_found57 = false;\n    var vowel_found58\
    \ = false;\n    var vowel_found59 = false;\n    var vowel_found60 = false;\n \
    \   var vowel_found61 = false;\n    var vowel_found62 = false;\n    var vowel_found63\
    \ = false;\n    var vowel_found64 = false;\n    var vowel_found65 = false;\n \
    \   var vowel_found66 = false;\n    var vowel_found67 = false;\n    var vowel_found68\
    \ = false;\n    var vowel_found69 = false;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq636ar3k.js:100\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowels.length - 1;\n    let vowel_count_from_left\
    \ = vowels.length - 2;\n    let vowel_count_from_middle = vowels.length - 3;\n\
    \    let vowel_count_from_middle2 = vowels.length - 4;\n    let vowel_count_from_middle3\
    \ = vowels.length - 5;\n    let vowel_count_from_middle4 = vowels.length - 6;\n\
    \    let vowel_count_from_middle5 = vowels.length - 7;\n    let vowel_count_from_middle6\
    \ = vowels.length - 8;\n    let vowel_count_from_middle7 = vowels.length - 9;\n\
    \    let vowel_count_from_middle8 = vowels.length - 10;\n    let vowel_count_from_middle9\
    \ = vowels.length - 11;\n    let vowel_count_from_middle10 = vowels.length - 12;\n\
    \    let vowel_count_from_middle11 = vowels.length - 13;\n    let vowel_count_from_middle12\
    \ = vowels.length - 14;\n    let vowel_count_from_middle13 = vowels.length - 15;\n\
    \    let vowel_count_from_middle14 = vowels.length - 16;\n    let vowel_count_from_middle15\
    \ = vowels.length - 17;\n    let vowel_count_from_middle16 = vowels.length - 18;\n\
    \    let vowel_count_from_middle17 = vowels.length - 19;\n    let vowel_count_from_middle18\
    \ = vowels.length - 20;\n    let vowel_count_from_middle19 = vowels.length - 21;\n\
    \    let vowel_count_from_middle20 = vowels.length - 22;\n    let vowel_count_from_middle21\
    \ = vowels.length - 23;\n    let vowel_count_from_middle22 = vowels.length - 24;\n\
    \    let vowel_count_from_middle23 = vowels.length - 25;\n    let vowel_count_from_middle24\
    \ = vowels.length - 26;\n    let vowel_count_from_middle25 = vowels.length - 27;\n\
    \    let vowel_count_from_middle26 = vowels.length - 28;\n    let vowel_count_from_middle27\
    \ = vowels.length - 29;\n    let vowel_count_from_middle28 = vowels.length - 30;\n\
    \    let vowel_count_from_middle29 = vowels.length - 31;\n    let vowel_count_from_middle30\
    \ = vowels.length - 32;\n    let vowel_count_from_middle31 = vowels.length - 33;\n\
    \    let vowel_count_from_middle32 = vowels.length - 34;\n    let vowel_count_from_middle33\
    \ = vowels.length - 35;\n    let vowel_count_from_middle34 = vowels.length - 36;\n\
    \    let vowel_count_from_middle35 = vowels.length - 37;\n    let vowel_count_from_middle36\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfknc7hf_.js:68\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjflusap8.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_position\
    \ = 0;\n    var consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \    var consonant_position = 0;\n    var consonant_count = 0;\n    var consonant_positions\
    \ = [];\n    var consonant_positions_length = 0;\n    var consonant_positions_array\
    \ = [];\n    var consonant_positions_array_length = 0;\n    var consonant_positions_array_max\
    \ = 0;\n    var consonant_positions_array_min = 0;\n    var consonant_positions_array_sum\
    \ = 0;\n    var consonant_positions_array_average = 0;\n    var consonant_positions_array_median\
    \ = 0;\n    var consonant_positions_array_mode = 0;\n    var consonant_positions_array_variance\
    \ = 0;\n    var consonant_positions_array_standard_deviation = 0;\n    var consonant_positions_array_sum_squares\
    \ = 0;\n    var consonant_positions_array_sum_of_squares = 0;\n    var consonant_positions_array_sum_of_squares_root\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares = 0;\n\
    \    var consonant_positions_array_sum_of_squares_root_of_squares_root = 0;\n\
    \    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares_root\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares_root_of_squares\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares_root_of_squares_root\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares_root_of_squares_root_of_squares\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares_root_of_squares_root_of_squares_root\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares_root_of_squares_root_of_squares_root_of_squares\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares_root_of_squares_root_of_squares_root_of_squares_root\
    \ = 0;\n    var consonant_positions_array_sum_of_squares_root_of_squares_root_of_squares_root_of_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoj5aufsy.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_7r08gko.js:33\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpiub8l0es.js:15:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpiub8l0es.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_middle =\
    \ vowels_count - 19;\n    var vowels_count_from_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwxh4ng48.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowel_count = 0;\n\tlet consonants\
    \ = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \tlet consonant_count = 0;\n\tlet vowel_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet vowel_found_index = 0;\n\tlet consonant_found_index = 0;\n\t\
    let vowel_found_index2 = 0;\n\tlet consonant_found_index2 = 0;\n\tlet vowel_found_index3\
    \ = 0;\n\tlet consonant_found_index3 = 0;\n\tlet vowel_found_index4 = 0;\n\tlet\
    \ consonant_found_index4 = 0;\n\tlet vowel_found_index5 = 0;\n\tlet consonant_found_index5\
    \ = 0;\n\tlet vowel_found_index6 = 0;\n\tlet consonant_found_index6 = 0;\n\tlet\
    \ vowel_found_index7 = 0;\n\tlet consonant_found_index7 = 0;\n\tlet vowel_found_index8\
    \ = 0;\n\tlet consonant_found_index8 = 0;\n\tlet vowel_found_index9 = 0;\n\tlet\
    \ consonant_found_index9 = 0;\n\tlet vowel_found_index10 = 0;\n\tlet consonant_found_index10\
    \ = 0;\n\tlet vowel_found_index11 = 0;\n\tlet consonant_found_index11 = 0;\n\t\
    let vowel_found_index12 = 0;\n\tlet consonant_found_index12 = 0;\n\tlet vowel_found_index13\
    \ = 0;\n\tlet consonant_found_index13 = 0;\n\tlet vowel_found_index14 = 0;\n\t\
    let consonant_found_index14 = 0;\n\tlet vowel_found_index15 = 0;\n\tlet consonant_found_index15\
    \ = 0;\n\tlet vowel_found_index16 = 0;\n\tlet consonant_found_index16 = 0;\n\t\
    let vowel_found_index17 = 0;\n\tlet consonant_found_index17 = 0;\n\tlet vowel_found_index18\
    \ = 0;\n\tlet consonant_found_index18 = 0;\n\tlet vowel_found_index19 = 0;\n\t\
    let consonant_found_index19 = 0;\n\tlet vowel_found_index20 = 0;\n\tlet consonant_found_index20\
    \ = 0;\n\tlet vowel_found_index21 = 0;\n\tlet consonant_found_index21 = 0;\n\t\
    let vowel_found_index22 = 0;\n\tlet consonant_found_index22 = 0;\n\tlet vowel_found_index23\
    \ = 0;\n\tlet con\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7hnplkec.js:80\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    var vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpura_jx2m.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5yfcj2lk.js:33\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwheq7r3y.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = 0;\n    let vowel_position\
    \ = 0;\n    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowel_count++;\n            if(vowel_count > 1){\n              \
    \  vowel_position = i;\n            }\n        }\n    }\n    return word.substring(vowel_position\
    \ + 1, word.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'rt'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpjxqju2sp.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjxqju2sp.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'rt',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowelsIndex.length;\n  \
    \  let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexCountMinusOne\
    \ = vowelsIndexCount - 1;\n    let vowelsIndexCountMinusTwo = vowelsIndexCount\
    \ - 2;\n    let vowelsIndexCountMinusThree = vowelsIndexCount - 3;\n    let vowelsIndexCountMinusFour\
    \ = vowelsIndexCount - 4;\n    let vowelsIndexCountMinusFive = vowelsIndexCount\
    \ - 5;\n    let vowelsIndexCountMinusSix = vowelsIndexCount - 6;\n    let vowelsIndexCountMinusSeven\
    \ = vowelsIndexCount - 7;\n    let vowelsIndexCountMinusEight = vowelsIndexCount\
    \ - 8;\n    let vowelsIndexCountMinusNine = vowelsIndexCount - 9;\n    let vowelsIndexCountMinusTen\
    \ = vowelsIndexCount - 10;\n    let vowelsIndexCountMinusEleven = vowelsIndexCount\
    \ - 11;\n    let vowelsIndexCountMinusTwelve = vowelsIndexCount - 12;\n    let\
    \ vowelsIndexCountMinusThirteen = vowelsIndexCount - 13;\n    let vowelsIndexCountMinusFourteen\
    \ = vowelsIndexCount - 14;\n    let vowelsIndexCountMinusFifteen = vowelsIndexCount\
    \ - 15;\n    let vowelsIndexCountMinusSixteen = vowelsIndexCount - 16;\n    let\
    \ vowelsIndexCountMinusSeventeen = vowelsIndexCount - 17;\n    let vowelsIndexCountMinusEighteen\
    \ = vowelsIndexCount - 18;\n    let vowelsIndexCountMinusNineteen = vowelsIndexCount\
    \ - 19;\n    let vowelsIndexCountMinusTwenty = vowelsIndexCount - 20;\n    let\
    \ vowelsIndexCountMinusTwentyOne = vowelsIndexCount - 21;\n    let vowelsIndexCountMinusTwentyTwo\
    \ = vowelsIndexCount - 22;\n    let vowelsIndexCountMinusTwentyThree = vowelsIndexCount\
    \ - 23;\n    let vowelsIndexCountMinusTwentyFour = vowelsIndexCount - 24;\n  \
    \  let vowelsIndexCountMinusTwentyFive = vowelsIndexCount - 25;\n    let vowelsIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpix5vlg0o.js:14\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count_from_right - 1;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_left - 1;\n    let vowel_count_from_middle_to_left = vowel_count_from_left\
    \ - 2;\n    let vowel_count_from_middle_to_right = vowel_count_from_right - 2;\n\
    \    let vowel_count_from_left_to_middle = vowel_count_from_middle - 1;\n    let\
    \ vowel_count_from_right_to_middle = vowel_count_from_middle - 2;\n    let vowel_count_from_middle_to_middle\
    \ = vowel_count_from_middle - 3;\n    let vowel_count_from_left_to_right_to_middle\
    \ = vowel_count_from_right_to_middle - 1;\n    let vowel_count_from_right_to_left_to_middle\
    \ = vowel_count_from_left_to_middle - 1;\n    let vowel_count_from_middle_to_left_to_middle\
    \ = vowel_count_from_left_to_middle - 2;\n    let vowel_count_from_middle_to_right_to_middle\
    \ = vowel_count_from_right_to_middle - 2;\n    let vowel_count_from_left_to_right_to_middle_to_middle\
    \ = vowel_count_from_middle_to_middle - 1;\n    let vowel_count_from_right_to_left_to_middle_to_middle\
    \ = vowel_count_from_middle_to_left_to_middle - 1;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_middle\
    \ = vowel_count_from_middle_to_right_to_middle - 2;\n    let vowel_count_from_middle_to_right_to_left_to_middle_to_middle\
    \ = vowel_count_from_middle_to_left_to_right_to_middle - 2;\n    let vowel_count_from_left_to_right_to_middle_to_right_to_middle_to_middle\
    \ = vowel_count_from_right_to_left_to_middle_to_middle - 1;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_middle\
    \ = vowel_count_from_left_to_right_to_middle_to_middle - 1;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_middle_to_middle\
    \ = vowel_count_from_left_to_right_to_middle_to_right_to_middle_to_middle;\n \
    \   let vowel_count_from_middle_to_right_to_left_to_middle_to_left_to_right_to_middle_to_right_to_middle_to_middle\
    \ = vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_middle_to_middle;\n\
    \    let vowel_count_from_middle_to_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp879uqk37.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ var vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    var vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 25;\n    var vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp88_dwyvx.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - vowels_count_from_right;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_left + vowels_count_from_left;\n    let vowels_count_from_left_to_right_to_left\
    \ = vowels_count_from_right_to_left + vowels_count_from_left_to_right;\n    let\
    \ vowels_count_from_right_to_left_to_right = vowels_count_from_left_to_right_to_left\
    \ + vowels_count_from_right_to_right;\n    let vowels_count_from_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right + vowels_count_from_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right\
    \ + vowels_count_from_right_to_left_to_right;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left + vowels_count_from_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ + vowels_count_from_right_to_left_to_right_to_left;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left + vowels_count_from_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ + vowels_count_from_right_to_left_to_right_to_left_to_right;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left + vowels_count_from_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ + vowels_count_from_right_to_left_to_right_to_left_to_right_to_left;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ + vowels_\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5mbvsqcu.js:45\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        if(word.indexOf(vowels[i]) > -1){\n        \
    \    vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n    }\n\
    \    for(let i = vowelsIndex.length - 1; i >= 0; i--){\n        if(vowelsIndexCount\
    \ > 1){\n            if(vowelsIndexCount > 2){\n                return \"\";\n\
    \            }\n            else{\n                let vowelsIndex2 = vowelsIndex.slice(i\
    \ + 1).reverse();\n                let vowelsIndex2Count = vowelsIndex2.length;\n\
    \                for(let j = 0; j < vowelsIndex2Count; j++){\n               \
    \     if(word.indexOf(vowelsIndex2[j]) > -1){\n                        return\
    \ vowelsIndex2[j];\n                    }\n                }\n            }\n\
    \        }\n        else{\n            if(word.indexOf(vowelsIndex[i]) > -1){\n\
    \                return vowelsIndex[i];\n            }\n        }\n    }\n   \
    \ return \"\";\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpen4di_k6.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpen4di_k6.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_2\
    \ = 0;\n    var vowels_index_count_3 = 0;\n    var vowels_index_count_4 = 0;\n\
    \    var vowels_index_count_5 = 0;\n    var vowels_index_count_6 = 0;\n    var\
    \ vowels_index_count_7 = 0;\n    var vowels_index_count_8 = 0;\n    var vowels_index_count_9\
    \ = 0;\n    var vowels_index_count_10 = 0;\n    var vowels_index_count_11 = 0;\n\
    \    var vowels_index_count_12 = 0;\n    var vowels_index_count_13 = 0;\n    var\
    \ vowels_index_count_14 = 0;\n    var vowels_index_count_15 = 0;\n    var vowels_index_count_16\
    \ = 0;\n    var vowels_index_count_17 = 0;\n    var vowels_index_count_18 = 0;\n\
    \    var vowels_index_count_19 = 0;\n    var vowels_index_count_20 = 0;\n    var\
    \ vowels_index_count_21 = 0;\n    var vowels_index_count_22 = 0;\n    var vowels_index_count_23\
    \ = 0;\n    var vowels_index_count_24 = 0;\n    var vowels_index_count_25 = 0;\n\
    \    var vowels_index_count_26 = 0;\n    var vowels_index_count_27 = 0;\n    var\
    \ vowels_index_count_28 = 0;\n    var vowels_index_count_29 = 0;\n    var vowels_index_count_30\
    \ = 0;\n    var vowels_index_count_31 = 0;\n    var vowels_index_count_32 = 0;\n\
    \    var vowels_index_count_33 = 0;\n    var vowels_index_count_34 = 0;\n    var\
    \ vowels_index_count_35 = 0;\n    var vowels_index_count_36 = 0;\n    var vowels_index_count_37\
    \ = 0;\n    var vowels_index_count_38 = 0;\n    var vowels_index_count_39 = 0;\n\
    \    var vowels_index_count_40 = 0;\n    var vowels_index_count_41 = 0;\n    var\
    \ vowels_index_count_42 = 0;\n    var vowels_index_count_43 = 0;\n    var vowels_index_count_44\
    \ = 0;\n    var vowels_index_count_45 = 0;\n    var vowels_index_count_46 = 0;\n\
    \    var vowels_index_count_47 = 0;\n    var vowels_index_count_48 = 0;\n    var\
    \ vowels_index_count_49 = 0;\n    var vowels_index_count_50 = 0;\n    var vowels_index_count_51\
    \ = 0;\n    var vowels_index_count_52 = 0;\n    var vowels_index_count_53 = 0;\n\
    \    var vowels_index_count_54 = 0;\n    var vowels_index_count_55 = 0;\n    var\
    \ vowels_index_count_56 = 0;\n    var vowels_index_count_57 = 0;\n    var vowels_index_count_58\
    \ = 0;\n    var vowels_index_count_59 = 0;\n    var vowels_index_count_60 = 0;\n\
    \    var vowels_index_count_61 = 0;\n    var vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7dzvl4vb.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i=0;i<word.length;i++){\n\
    \        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n   \
    \         vowelsIndexCount++;\n        }\n    }\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxVowel = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel\
    \ = vowels[vowelsIndexMin];\n    if(vowelsIndexMaxIndex === vowelsIndexMinIndex){\n\
    \        return \"\";\n    }\n    if(vowelsIndexMaxIndex < vowelsIndexMinIndex){\n\
    \        return vowelsIndexMaxVowel;\n    }\n    return vowelsIndexMinVowel;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'e'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpi_92ks6d.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi_92ks6d.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'e',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = vowels_count - 1;\n\tlet vowels_count_from_left\
    \ = vowels_count - 2;\n\tlet vowels_count_from_middle = vowels_count - 3;\n\t\
    let vowels_count_from_left_to_right = vowels_count - 4;\n\tlet vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n\tlet vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n\tlet vowels_count_from_left_to_middle_to_right = vowels_count - 7;\n\t\
    let vowels_count_from_right_to_middle_to_left = vowels_count - 8;\n\tlet vowels_count_from_middle_to_left_to_right\
    \ = vowels_count - 9;\n\tlet vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n\tlet vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \tlet vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\tlet vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 13;\n\tlet vowels_count_from_right_to_middle_to_left_to_right\
    \ = vowels_count - 14;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 15;\n\tlet vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 16;\n\tlet vowels_count_from_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 17;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 18;\n\tlet vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n\tlet vowels_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 20;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n\tlet vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n\tlet vowels_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 24;\n\tlet vowels_count_from_left_to_right_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpij714ifw.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle2 = vowels_count / 2;\n    var vowels_count_from_middle3\
    \ = vowels_count / 2;\n    var vowels_count_from_middle4 = vowels_count / 2;\n\
    \    var vowels_count_from_middle5 = vowels_count / 2;\n    var vowels_count_from_middle6\
    \ = vowels_count / 2;\n    var vowels_count_from_middle7 = vowels_count / 2;\n\
    \    var vowels_count_from_middle8 = vowels_count / 2;\n    var vowels_count_from_middle9\
    \ = vowels_count / 2;\n    var vowels_count_from_middle10 = vowels_count / 2;\n\
    \    var vowels_count_from_middle11 = vowels_count / 2;\n    var vowels_count_from_middle12\
    \ = vowels_count / 2;\n    var vowels_count_from_middle13 = vowels_count / 2;\n\
    \    var vowels_count_from_middle14 = vowels_count / 2;\n    var vowels_count_from_middle15\
    \ = vowels_count / 2;\n    var vowels_count_from_middle16 = vowels_count / 2;\n\
    \    var vowels_count_from_middle17 = vowels_count / 2;\n    var vowels_count_from_middle18\
    \ = vowels_count / 2;\n    var vowels_count_from_middle19 = vowels_count / 2;\n\
    \    var vowels_count_from_middle20 = vowels_count / 2;\n    var vowels_count_from_middle21\
    \ = vowels_count / 2;\n    var vowels_count_from_middle22 = vowels_count / 2;\n\
    \    var vowels_count_from_middle23 = vowels_count / 2;\n    var vowels_count_from_middle24\
    \ = vowels_count / 2;\n    var vowels_count_from_middle25 = vowels_count / 2;\n\
    \    var vowels_count_from_middle26 = vowels_count / 2;\n    var vowels_count_from_middle27\
    \ = vowels_count / 2;\n    var vowels_count_from_middle28 = vowels_count / 2;\n\
    \    var vowels_count_from_middle29 = vowels_count / 2;\n    var vowels_count_from_middle30\
    \ = vowels_count / 2;\n    var vowels_count_from_middle31 = vowels_count / 2;\n\
    \    var vowels_count_from_middle32 = vowels_count / 2;\n    var vowels_count_from_middle33\
    \ = vowels_count / 2;\n    var vowels_count_from_middle34 = vowels_count / 2;\n\
    \    var vowels_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9f04t4lv.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp29uauc_t.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3 = vowelsCount -\
    \ 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5 = vowelsCount\
    \ - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7 = vowelsCount\
    \ - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9 = vowelsCount\
    \ - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11 = vowelsCount\
    \ - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13 = vowelsCount\
    \ - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15 = vowelsCount\
    \ - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17 = vowelsCount\
    \ - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19 = vowelsCount\
    \ - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21 = vowelsCount\
    \ - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23 = vowelsCount\
    \ - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25 = vowelsCount\
    \ - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27 = vowelsCount\
    \ - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29 = vowelsCount\
    \ - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31 = vowelsCount\
    \ - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33 = vowelsCount\
    \ - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35 = vowelsCount\
    \ - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37 = vowelsCount\
    \ - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39 = vowelsCount\
    \ - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41 = vowelsCount\
    \ - 40;\n    let vowels\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpx2jztwbr.js:50\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpm3n1j7sf.js:92\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3 = vowelsCount -\
    \ 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5 = vowelsCount\
    \ - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7 = vowelsCount\
    \ - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9 = vowelsCount\
    \ - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11 = vowelsCount\
    \ - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13 = vowelsCount\
    \ - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15 = vowelsCount\
    \ - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17 = vowelsCount\
    \ - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19 = vowelsCount\
    \ - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21 = vowelsCount\
    \ - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23 = vowelsCount\
    \ - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25 = vowelsCount\
    \ - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27 = vowelsCount\
    \ - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29 = vowelsCount\
    \ - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31 = vowelsCount\
    \ - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33 = vowelsCount\
    \ - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35 = vowelsCount\
    \ - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37 = vowelsCount\
    \ - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39 = vowelsCount\
    \ - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41 = vowelsCount\
    \ - 40;\n    let vowels\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp55zy99tp.js:50\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpektwstl3.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax =\
    \ Math.max(...vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax - vowelsIndexMin\
    \ + 1;\n    let vowelsIndexSum2 = vowelsIndexSum * vowelsIndexSum;\n    let vowelsIndexSum3\
    \ = vowelsIndexSum2 * vowelsIndexSum;\n    let vowelsIndexSum4 = vowelsIndexSum3\
    \ * vowelsIndexSum;\n    let vowelsIndexSum5 = vowelsIndexSum4 * vowelsIndexSum;\n\
    \    let vowelsIndexSum6 = vowelsIndexSum5 * vowelsIndexSum;\n    let vowelsIndexSum7\
    \ = vowelsIndexSum6 * vowelsIndexSum;\n    let vowelsIndexSum8 = vowelsIndexSum7\
    \ * vowelsIndexSum;\n    let vowelsIndexSum9 = vowelsIndexSum8 * vowelsIndexSum;\n\
    \    let vowelsIndexSum10 = vowelsIndexSum9 * vowelsIndexSum;\n    let vowelsIndexSum11\
    \ = vowelsIndexSum10 * vowelsIndexSum;\n    let vowelsIndexSum12 = vowelsIndexSum11\
    \ * vowelsIndexSum;\n    let vowelsIndexSum13 = vowelsIndexSum12 * vowelsIndexSum;\n\
    \    let vowelsIndexSum14 = vowelsIndexSum13 * vowelsIndexSum;\n    let vowelsIndexSum15\
    \ = vowelsIndexSum14 * vowelsIndexSum;\n    let vowelsIndexSum16 = vowelsIndexSum15\
    \ * vowelsIndexSum;\n    let vowelsIndexSum17 = vowelsIndexSum16 * vowelsIndexSum;\n\
    \    let vowelsIndexSum18 = vowelsIndexSum17 * vowelsIndexSum;\n    let vowelsIndexSum19\
    \ = vowelsIndexSum18 * vowelsIndexSum;\n    let vowelsIndexSum20 = vowelsIndexSum19\
    \ * vowelsIndexSum;\n    let vowelsIndexSum21 = vowelsIndexSum20 * vowelsIndexSum;\n\
    \    let vowelsIndexSum22 = vowelsIndexSum21 * vowelsIndexSum;\n    let vowelsIndexSum23\
    \ = vowelsIndexSum22 * vowelsIndexSum;\n    let vowelsIndexSum24 = vowels\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu4_ysk6s.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowelsIndex.length;\n  \
    \  let vowelsIndexReverse = [];\n    for(let i = vowelsCount - 1; i >= 0; i--){\n\
    \        vowelsIndexReverse.push(vowelsIndex[i]);\n    }\n    let vowelsCount\
    \ = vowelsIndexReverse.length;\n    let vowelsIndexReverseCount = vowelsIndexReverse.length;\n\
    \    let vowelsIndexReverseCount2 = vowelsIndexReverseCount - 1;\n    let vowelsIndexReverseCount3\
    \ = vowelsIndexReverseCount - 2;\n    let vowelsIndexReverseCount4 = vowelsIndexReverseCount\
    \ - 3;\n    let vowelsIndexReverseCount5 = vowelsIndexReverseCount - 4;\n    let\
    \ vowelsIndexReverseCount6 = vowelsIndexReverseCount - 5;\n    let vowelsIndexReverseCount7\
    \ = vowelsIndexReverseCount - 6;\n    let vowelsIndexReverseCount8 = vowelsIndexReverseCount\
    \ - 7;\n    let vowelsIndexReverseCount9 = vowelsIndexReverseCount - 8;\n    let\
    \ vowelsIndexReverseCount10 = vowelsIndexReverseCount - 9;\n    let vowelsIndexReverseCount11\
    \ = vowelsIndexReverseCount - 10;\n    let vowelsIndexReverseCount12 = vowelsIndexReverseCount\
    \ - 11;\n    let vowelsIndexReverseCount13 = vowelsIndexReverseCount - 12;\n \
    \   let vowelsIndexReverseCount14 = vowelsIndexReverseCount - 13;\n    let vowelsIndexReverseCount15\
    \ = vowelsIndexReverseCount - 14;\n    let vowelsIndexReverseCount16 = vowelsIndexReverseCount\
    \ - 15;\n    let vowelsIndexReverseCount17 = vowelsIndexReverseCount - 16;\n \
    \   let vowelsIndexReverseCount18 = vowelsIndexReverseCount - 17;\n    let vowelsIndexReverseCount19\
    \ = vowelsIndexReverseCount - 18;\n    let vowelsIndexReverseCount20 = vowelsIndexReverseCount\
    \ - 19;\n    let vowelsIndexReverseCount21 = vowelsIndexReverseCount - 20;\n \
    \   let vowelsIndexReverseCount22 = vowelsIndexReverseCount - 21;\n    let vowelsIndexReverseCount23\
    \ = vowelsIndexReverseCount - 22;\n    let vowelsIndexReverseCount24 = vowelsIndexReverseCount\
    \ - 23;\n    let vowelsIndexReverseCount25 = vowelsIndexReverseCount - 24;\n \
    \   let vowelsIndexReverseCount26 = vowelsIndexReverseCount - 25;\n    let \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0tg7k2oe.js:14\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowel_count = vowels.length;\n\t\
    let vowel_count_from_right = vowel_count - 1;\n\tlet vowel_count_from_left = vowel_count\
    \ - 2;\n\tlet vowel_count_from_middle = vowel_count - 3;\n\tlet vowel_count_from_left_to_right\
    \ = vowel_count_from_left + 1;\n\tlet vowel_count_from_right_to_left = vowel_count_from_right\
    \ + 1;\n\tlet vowel_count_from_middle_to_right = vowel_count_from_middle + 1;\n\
    \tlet vowel_count_from_left_to_middle = vowel_count_from_left + 2;\n\tlet vowel_count_from_right_to_middle\
    \ = vowel_count_from_right + 2;\n\tlet vowel_count_from_middle_to_left = vowel_count_from_middle\
    \ + 2;\n\tlet vowel_count_from_left_to_right_to_middle = vowel_count_from_left_to_right\
    \ + 2;\n\tlet vowel_count_from_right_to_left_to_middle = vowel_count_from_right_to_left\
    \ + 2;\n\tlet vowel_count_from_middle_to_right_to_middle = vowel_count_from_middle_to_left\
    \ + 2;\n\tlet vowel_count_from_left_to_right_to_middle_to_right = vowel_count_from_left_to_right_to_middle\
    \ + 2;\n\tlet vowel_count_from_right_to_left_to_middle_to_left = vowel_count_from_right_to_left_to_middle\
    \ + 2;\n\tlet vowel_count_from_middle_to_right_to_left_to_middle = vowel_count_from_middle_to_right_to_middle\
    \ + 2;\n\tlet vowel_count_from_left_to_right_to_middle_to_right_to_left = vowel_count_from_left_to_right_to_middle_to_left\
    \ + 2;\n\tlet vowel_count_from_right_to_left_to_middle_to_left_to_right = vowel_count_from_right_to_left_to_middle_to_right\
    \ + 2;\n\tlet vowel_count_from_middle_to_right_to_left_to_left_to_middle = vowel_count_from_middle_to_right_to_left_to_middle\
    \ + 2;\n\tlet vowel_count_from_left_to_right_to_middle_to_right_to_left_to_middle\
    \ = vowel_count_from_left_to_right_to_middle_to_right_to_left + 2;\n\tlet vowel_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowel_count_from_right_to_left_to_middle_to_left_to_right + 2;\n\tlet vowel_count_from_middle_to_right_to_left_to_left_to_right_to_middle\
    \ = vowel_count_from_middle_to_right_to_left_to_left_to_middle + 2;\n\tlet vowel_count_from_left_to_right_to_middle_to_right_to_left_to_right_to_middle\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpl6hny0d9.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5woxnx0h.js:92\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_right_to_left = vowels_count\
    \ - 3;\n    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - 5;\n    let vowels_count_from_left_to_right_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_right_to_left_to_right_to_left = vowels_count\
    \ - 7;\n    let vowels_count_from_left_to_right_to_left_to_right = vowels_count\
    \ - 8;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 9;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 21;\n    let vowels_count_from_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmgz5_cam.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdnitxiwu.js:92\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_r4qikb4.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp84kap0_l.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 22;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowels_count - 23;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 27;\n    let vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq3m1q8fz.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_found\
    \ = false;\n    var consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \    var consonant_count = 0;\n    var consonant_found = false;\n    \n    for(var\
    \ i=word.length-1; i>=0; i--){\n        if(vowels.indexOf(word[i]) >= 0){\n  \
    \          vowel_count++;\n            vowel_found = true;\n        }\n      \
    \  else if(consonants.indexOf(word[i]) >= 0){\n            consonant_count++;\n\
    \            consonant_found = true;\n        }\n        \n        if(vowel_found\
    \ && consonant_found){\n            break;\n        }\n    }\n    \n    if(vowel_count\
    \ > consonant_count){\n        return \"\";\n    }\n    else if(vowel_count <\
    \ consonant_count){\n        return word[word.length-1];\n    }\n    else{\n \
    \       return \"\";\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n't'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmp0jrxo_vw.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0jrxo_vw.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 't',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_positions = [];\n    let vowel_positions_length = 0;\n    let vowel_positions_string\
    \ = \"\";\n    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowel_positions.push(i);\n            vowel_positions_length++;\n\
    \        }\n    }\n    if(vowel_positions_length < 2){\n        return \"\";\n\
    \    }\n    for(let i = vowel_positions.length - 1; i >= 0; i--){\n        if(vowel_positions[i\
    \ + 1] - vowel_positions[i] > 1){\n            vowel_positions_string = vowel_positions.toString();\n\
    \            vowel_positions_string = vowel_positions_string.substr(0, vowel_positions_string.length\
    \ - 1);\n            vowel_positions_string = vowel_positions_string + \",\" +\
    \ vowel_positions_string.substr(vowel_positions_string.length - 1);\n        \
    \    vowel_positions_string = vowel_positions_string + \",\" + vowel_positions_string.substr(0,\
    \ vowel_positions_string.length - 1);\n            vowel_positions_string = vowel_positions_string\
    \ + \",\" + vowel_positions_string.substr(vowel_positions_string.length - 1);\n\
    \            vowel_positions_string = vowel_positions_string + \",\" + vowel_positions_string.substr(0,\
    \ vowel_positions_string.length - 1);\n            vowel_positions_string = vowel_positions_string\
    \ + \",\" + vowel_positions_string.substr(vowel_positions_string.length - 1);\n\
    \            vowel_positions_string = vowel_positions_string + \",\" + vowel_positions_string.substr(0,\
    \ vowel_positions_string.length - 1);\n            vowel_positions_string = vowel_positions_string\
    \ + \",\" + vowel_positions_string.substr(vowel_positions_string.length - 1);\n\
    \            vowel_positions_string = vowel_positions_string + \",\" + vowel_positions_string.substr(0,\
    \ vowel_positions_string.length - 1);\n            vowel_positions_string = vowel_positions_string\
    \ + \",\" + vowel_positions_string.substr(vowel_positions_string.length - 1);\n\
    \            vowel_positions_string = vowel_positions_string + \",\" + vowel_positions_string.substr(0,\
    \ vowel_positions_string.length - 1);\n            vowel_positions_string = vowel_positions_string\
    \ + \",\" + vowel_positions_string.substr(vowel_positions_string.length - 1);\n\
    \            vowel_positions_string = vowel_positions_string + \",\" + vowel_positions_string.substr(0,\
    \ vowel_positions_string.length - 1);\n            vowel_positions_string = vowel_positions_string\
    \ \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp39mbu0zt.js:59\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax + vowelsIndexMin;\n\
    \    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    for(let i = 0; i < vowelsIndexCount;\
    \ i++){\n        if(vowelsIndex[i] >= vowelsIndexSum){\n            return '';\n\
    \        }\n    }\n    let vowelsIndexSumCount2 = vowelsIndexSum / 2;\n    for(let\
    \ i = 0; i < vowelsIndexCount; i++){\n        if(vowelsIndex[i] >= vowelsIndexSum2){\n\
    \            return '';\n        }\n    }\n    return vowels[vowelsIndexSumCount];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpwdy2igr0.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwdy2igr0.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountInWord = vowels.filter(v=>word===v).length;\n    let vowelsCountInWordInWord\
    \ = vowels.filter(v=>word===v).filter(v=>word===v).length;\n    let vowelsCountInWordInWordInWord\
    \ = vowels.filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).length;\n\
    \    let vowelsCountInWordInWordInWordInWord = vowels.filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWord = vowels.filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWord = vowels.filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWordInWord = vowels.filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = vowels.filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).length;\n\
    \    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = vowels.filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).filter(v=>word===v).length;\n\
    \    let vowelsCountIn\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbkdof6ud.js:40\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = [];\n    var vowels_index_count = 0;\n    var vowels_index_temp\
    \ = 0;\n    var vowels_index_temp2 = 0;\n    var vowels_index_temp3 = 0;\n   \
    \ var vowels_index_temp4 = 0;\n    var vowels_index_temp5 = 0;\n    var vowels_index_temp6\
    \ = 0;\n    var vowels_index_temp7 = 0;\n    var vowels_index_temp8 = 0;\n   \
    \ var vowels_index_temp9 = 0;\n    var vowels_index_temp10 = 0;\n    var vowels_index_temp11\
    \ = 0;\n    var vowels_index_temp12 = 0;\n    var vowels_index_temp13 = 0;\n \
    \   var vowels_index_temp14 = 0;\n    var vowels_index_temp15 = 0;\n    var vowels_index_temp16\
    \ = 0;\n    var vowels_index_temp17 = 0;\n    var vowels_index_temp18 = 0;\n \
    \   var vowels_index_temp19 = 0;\n    var vowels_index_temp20 = 0;\n    var vowels_index_temp21\
    \ = 0;\n    var vowels_index_temp22 = 0;\n    var vowels_index_temp23 = 0;\n \
    \   var vowels_index_temp24 = 0;\n    var vowels_index_temp25 = 0;\n    var vowels_index_temp26\
    \ = 0;\n    var vowels_index_temp27 = 0;\n    var vowels_index_temp28 = 0;\n \
    \   var vowels_index_temp29 = 0;\n    var vowels_index_temp30 = 0;\n    var vowels_index_temp31\
    \ = 0;\n    var vowels_index_temp32 = 0;\n    var vowels_index_temp33 = 0;\n \
    \   var vowels_index_temp34 = 0;\n    var vowels_index_temp35 = 0;\n    var vowels_index_temp36\
    \ = 0;\n    var vowels_index_temp37 = 0;\n    var vowels_index_temp38 = 0;\n \
    \   var vowels_index_temp39 = 0;\n    var vowels_index_temp40 = 0;\n    var vowels_index_temp41\
    \ = 0;\n    var vowels_index_temp42 = 0;\n    var vowels_index_temp43 = 0;\n \
    \   var vowels_index_temp44 = 0;\n    var vowels_index_temp45 = 0;\n    var vowels_index_temp46\
    \ = 0;\n    var vowels_index_temp47 = 0;\n    var vowels_index_temp48 = 0;\n \
    \   var vowels_index_temp49 = 0;\n    var vowels_index_temp50 = 0;\n    var vowels_index_temp51\
    \ = 0;\n    var vowels_index_temp52 = 0;\n    var vowels_index_temp53 = 0;\n \
    \   var vowels_index_temp54 = 0;\n    var vowels_index_temp55 = 0;\n    var vowels_index_temp56\
    \ = 0;\n    var vowels_index_temp57 = 0;\n    var vowels_index_temp58 = 0;\n \
    \   var vowels_index_temp59 = 0;\n    var vowels_index_temp60 = 0;\n    var vowels_index_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdov65rse.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_right = word.length - 1;\n    var vowels_count_left = word.length\
    \ - 2;\n    var vowels_count_left_right = word.length - 3;\n    var vowels_count_left_right_left\
    \ = word.length - 4;\n    var vowels_count_left_right_left_right = word.length\
    \ - 5;\n    var vowels_count_left_right_left_right_left = word.length - 6;\n \
    \   var vowels_count_left_right_left_right_left_right = word.length - 7;\n   \
    \ var vowels_count_left_right_left_right_left_right_left = word.length - 8;\n\
    \    var vowels_count_left_right_left_right_left_right_left_right = word.length\
    \ - 9;\n    var vowels_count_left_right_left_right_left_right_left_right_left\
    \ = word.length - 10;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right\
    \ = word.length - 11;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left\
    \ = word.length - 12;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = word.length - 13;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = word.length - 14;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = word.length - 15;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = word.length - 16;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = word.length - 17;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = word.length - 18;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = word.length - 19;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = word.length - 20;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = word.length-21;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = word.length - 22;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = word.length - 23;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = word.length - 24;\n    var vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpeemhlui5.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk_uy96fr.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max1 =\
    \ 0;\n    let vowels_index_count_min1 = 0;\n    let vowels_index_count_max2 =\
    \ 0;\n    let vowels_index_count_min2 = 0;\n    let vowels_index_count_max3 =\
    \ 0;\n    let vowels_index_count_min3 = 0;\n    let vowels_index_count_max4 =\
    \ 0;\n    let vowels_index_count_min4 = 0;\n    let vowels_index_count_max5 =\
    \ 0;\n    let vowels_index_count_min5 = 0;\n    let vowels_index_count_max6 =\
    \ 0;\n    let vowels_index_count_min6 = 0;\n    let vowels_index_count_max7 =\
    \ 0;\n    let vowels_index_count_min7 = 0;\n    let vowels_index_count_max8 =\
    \ 0;\n    let vowels_index_count_min8 = 0;\n    let vowels_index_count_max9 =\
    \ 0;\n    let vowels_index_count_min9 = 0;\n    let vowels_index_count_max10 =\
    \ 0;\n    let vowels_index_count_min10 = 0;\n    let vowels_index_count_max11\
    \ = 0;\n    let vowels_index_count_min11 = 0;\n    let vowels_index_count_max12\
    \ = 0;\n    let vowels_index_count_min12 = 0;\n    let vowels_index_count_max13\
    \ = 0;\n    let vowels_index_count_min13 = 0;\n    let vowels_index_count_max14\
    \ = 0;\n    let vowels_index_count_min14 = 0;\n    let vowels_index_count_max15\
    \ = 0;\n    let vowels_index_count_min15 = 0;\n    let vowels_index_count_max16\
    \ = 0;\n    let vowels_index_count_min16 = 0;\n    let vowels_index_count_max17\
    \ = 0;\n    let vowels_index_count_min17 = 0;\n    let vowels_index_count_max18\
    \ = 0;\n    let vowels_index_count_min18 = 0;\n    let vowels_index_count_max19\
    \ = 0;\n    let vowels_index_count_min19 = 0;\n    let vowels_index_count_max20\
    \ = 0;\n    let vowels_index_count_min20 = 0;\n    let vowels_index_count_max21\
    \ = 0;\n    let vowels_index_count_min21 = 0;\n    let vowels_index_count_max22\
    \ = 0;\n    let vowels_index_count_min22 = 0;\n    let vowels_index_count_max23\
    \ = 0;\n    let vowels_index_count_min23 = 0;\n    let vowels_index_count_max24\
    \ = 0;\n    let vowels_index_count_min24 = 0;\n    let vowels_index_count_max25\
    \ = 0;\n    let vowels_index_count_min25 = 0;\n    let vowels_index_count_max26\
    \ = 0;\n    let vowels_index_count_min26 = 0;\n    let vowels_index_count_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_sp02ucq.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max2 =\
    \ 0;\n    let vowels_index_count_min2 = 0;\n    let vowels_index_count_max3 =\
    \ 0;\n    let vowels_index_count_min3 = 0;\n    let vowels_index_count_max4 =\
    \ 0;\n    let vowels_index_count_min4 = 0;\n    let vowels_index_count_max5 =\
    \ 0;\n    let vowels_index_count_min5 = 0;\n    let vowels_index_count_max6 =\
    \ 0;\n    let vowels_index_count_min6 = 0;\n    let vowels_index_count_max7 =\
    \ 0;\n    let vowels_index_count_min7 = 0;\n    let vowels_index_count_max8 =\
    \ 0;\n    let vowels_index_count_min8 = 0;\n    let vowels_index_count_max9 =\
    \ 0;\n    let vowels_index_count_min9 = 0;\n    let vowels_index_count_max10 =\
    \ 0;\n    let vowels_index_count_min10 = 0;\n    let vowels_index_count_max11\
    \ = 0;\n    let vowels_index_count_min11 = 0;\n    let vowels_index_count_max12\
    \ = 0;\n    let vowels_index_count_min12 = 0;\n    let vowels_index_count_max13\
    \ = 0;\n    let vowels_index_count_min13 = 0;\n    let vowels_index_count_max14\
    \ = 0;\n    let vowels_index_count_min14 = 0;\n    let vowels_index_count_max15\
    \ = 0;\n    let vowels_index_count_min15 = 0;\n    let vowels_index_count_max16\
    \ = 0;\n    let vowels_index_count_min16 = 0;\n    let vowels_index_count_max17\
    \ = 0;\n    let vowels_index_count_min17 = 0;\n    let vowels_index_count_max18\
    \ = 0;\n    let vowels_index_count_min18 = 0;\n    let vowels_index_count_max19\
    \ = 0;\n    let vowels_index_count_min19 = 0;\n    let vowels_index_count_max20\
    \ = 0;\n    let vowels_index_count_min20 = 0;\n    let vowels_index_count_max21\
    \ = 0;\n    let vowels_index_count_min21 = 0;\n    let vowels_index_count_max22\
    \ = 0;\n    let vowels_index_count_min22 = 0;\n    let vowels_index_count_max23\
    \ = 0;\n    let vowels_index_count_min23 = 0;\n    let vowels_index_count_max24\
    \ = 0;\n    let vowels_index_count_min24 = 0;\n    let vowels_index_count_max25\
    \ = 0;\n    let vowels_index_count_min25 = 0;\n    let vowels_index_count_max26\
    \ = 0;\n    let vowels_index_count_min26 = 0;\n    let vowels_index_count_max27\
    \ = 0;\n    let vowels_index_count_min27 = 0;\n    let vowels_\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbjn1vlha.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  let index = word.indexOf(vowels[i]);\n        if(index > -1){\n           \
    \ vowelsIndex.push(index);\n        }\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax =\
    \ Math.max(...vowelsIndex);\n    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinVowel\
    \ = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxVowel = vowelsIndex[vowelsIndexMaxIndex];\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVow\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp35dv_y1b.js:26\n    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMinVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_middle2 = vowels_count - 4;\n    var vowels_count_from_middle3\
    \ = vowels_count - 5;\n    var vowels_count_from_middle4 = vowels_count - 6;\n\
    \    var vowels_count_from_middle5 = vowels_count - 7;\n    var vowels_count_from_middle6\
    \ = vowels_count - 8;\n    var vowels_count_from_middle7 = vowels_count - 9;\n\
    \    var vowels_count_from_middle8 = vowels_count - 10;\n    var vowels_count_from_middle9\
    \ = vowels_count - 11;\n    var vowels_count_from_middle10 = vowels_count - 12;\n\
    \    var vowels_count_from_middle11 = vowels_count - 13;\n    var vowels_count_from_middle12\
    \ = vowels_count - 14;\n    var vowels_count_from_middle13 = vowels_count - 15;\n\
    \    var vowels_count_from_middle14 = vowels_count - 16;\n    var vowels_count_from_middle15\
    \ = vowels_count - 17;\n    var vowels_count_from_middle16 = vowels_count - 18;\n\
    \    var vowels_count_from_middle17 = vowels_count - 19;\n    var vowels_count_from_middle18\
    \ = vowels_count - 20;\n    var vowels_count_from_middle19 = vowels_count - 21;\n\
    \    var vowels_count_from_middle20 = vowels_count - 22;\n    var vowels_count_from_middle21\
    \ = vowels_count - 23;\n    var vowels_count_from_middle22 = vowels_count - 24;\n\
    \    var vowels_count_from_middle23 = vowels_count - 25;\n    var vowels_count_from_middle24\
    \ = vowels_count - 26;\n    var vowels_count_from_middle25 = vowels_count - 27;\n\
    \    var vowels_count_from_middle26 = vowels_count - 28;\n    var vowels_count_from_middle27\
    \ = vowels_count - 29;\n    var vowels_count_from_middle28 = vowels_count - 30;\n\
    \    var vowels_count_from_middle29 = vowels_count - 31;\n    var vowels_count_from_middle30\
    \ = vowels_count - 32;\n    var vowels_count_from_middle31 = vowels_count - 33;\n\
    \    var vowels_count_from_middle32 = vowels_count - 34;\n    var vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplfn5zubo.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = 0;\n    let consonants\
    \ = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \    let consonant_count = 0;\n    for(let i = 0; i < word.length; i++){\n   \
    \     if(vowels.includes(word[i])){\n            vowel_count++;\n        }\n \
    \       if(consonants.includes(word[i])){\n            consonant_count++;\n  \
    \      }\n    }\n    if(vowel_count > consonant_count){\n        return word;\n\
    \    }\n    else if(vowel_count < consonant_count){\n        return '';\n    }\n\
    \    else{\n        let vowel_start = word.length - vowel_count;\n        let\
    \ vowel_end = word.length - consonant_count;\n        let vowel_mid = word.length\
    \ - vowel_count - consonant_count;\n        let vowel_mid_index = word.length\
    \ - vowel_count - consonant_count - 1;\n        let vowel_mid_index2 = word.length\
    \ - vowel_count - consonant_count - 2;\n        let vowel_mid_index3 = word.length\
    \ - vowel_count - consonant_count - 3;\n        let vowel_mid_index4 = word.length\
    \ - vowel_count - consonant_count - 4;\n        let vowel_mid_index5 = word.length\
    \ - vowel_count - consonant_count - 5;\n        let vowel_mid_index6 = word.length\
    \ - vowel_count - consonant_count - 6;\n        let vowel_mid_index7 = word.length\
    \ - vowel_count - consonant_count - 7;\n        let vowel_mid_index8 = word.length\
    \ - vowel_count - consonant_count - 8;\n        let vowel_mid_index9 = word.length\
    \ - vowel_count - consonant_count - 9;\n        let vowel_mid_index10 = word.length\
    \ - vowel_count - consonant_count - 10;\n        let vowel_mid_index11 = word.length\
    \ - vowel_count - consonant_count - 11;\n        let vowel_mid_index12 = word.length\
    \ - vowel_count - consonant_count - 12;\n        let vowel_mid_index13 = word.length\
    \ - vowel_count - consonant_count - 13;\n        let vowel_mid_index14 = word.length\
    \ - vowel_count - consonant_count - 14;\n        let vowel_mid_index15 = word.length\
    \ - vowel_count - consonant_count - 15;\n        let vowel_mid_index16 = word.length\
    \ - vowel_count - consonant_count - 16;\n        let vowel_mid_index17 = word.length\
    \ - vowel_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpeaopmnt5.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpda6la1p9.js:16:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpda6la1p9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowel_count = vowels.length;\n\t\
    let consonants = 'bcdfghjklmnpqrstvwxyz';\n\tlet consonant_count = consonants.length;\n\
    \tlet vowel_positions = [];\n\tlet consonant_positions = [];\n\tlet vowel_positions_count\
    \ = vowel_positions.length;\n\tlet consonant_positions_count = consonant_positions.length;\n\
    \tlet vowel_positions_count_temp = vowel_positions_count;\n\tlet consonant_positions_count_temp\
    \ = consonant_positions_count;\n\tlet vowel_positions_count_temp_temp = vowel_positions_count_temp;\n\
    \tlet consonant_positions_count_temp_temp = consonant_positions_count_temp;\n\t\
    let vowel_positions_count_temp_temp_temp = vowel_positions_count_temp_temp;\n\t\
    let consonant_positions_count_temp_temp_temp = consonant_positions_count_temp_temp;\n\
    \tlet vowel_positions_count_temp_temp_temp_temp = vowel_positions_count_temp_temp_temp;\n\
    \tlet consonant_positions_count_temp_temp_temp_temp = consonant_positions_count_temp_temp_temp;\n\
    \tlet vowel_positions_count_temp_temp_temp_temp_temp = vowel_positions_count_temp_temp_temp_temp;\n\
    \tlet consonant_positions_count_temp_temp_temp_temp_temp = consonant_positions_count_temp_temp_temp_temp;\n\
    \tlet vowel_positions_count_temp_temp_temp_temp_temp_temp = vowel_positions_count_temp_temp_temp_temp_temp;\n\
    \tlet consonant_positions_count_temp_temp_temp_temp_temp_temp = consonant_positions_count_temp_temp_temp_temp_temp;\n\
    \tlet vowel_positions_count_temp_temp_temp_temp_temp_temp_temp = vowel_positions_count_temp_temp_temp_temp_temp_temp_temp;\n\
    \tlet consonant_positions_count_temp_temp_temp_temp_temp_temp_temp_temp = consonant_positions_count_temp_temp_temp_temp_temp_temp_temp;\n\
    \tlet vowel_positions_count_temp_temp_temp_temp_temp_temp_temp_temp_temp = vowel_positions_count_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \tlet consonant_positions_count_temp_temp_temp_temp_temp_temp_temp_temp_temp =\
    \ consonant_positions_count_temp_temp_temp_temp_temp_temp_temp_temp;\n\tlet vowel_positions_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = vowel_positions_count_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \tlet consonant_positions_count_temp_temp_temp_temp_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4a5smnbb.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = 0;\n    for(let\
    \ i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n     \
    \       vowel_count++;\n        }\n    }\n    for(let i = word.length - 1; i >=\
    \ 0; i--){\n        if(vowels.includes(word[i])){\n            vowel_count++;\n\
    \        }\n    }\n    let vowel_count_index = vowels.indexOf(vowel_count);\n\
    \    return vowels[vowel_count_index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpttmhds0d.js:29:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpttmhds0d.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax =\
    \ Math.max(...vowelsIndex);\n    let vowelsIndexMinIndex = 0;\n    let vowelsIndexMaxIndex\
    \ = 0;\n    for(let i = 0; i < vowelsCount; i++){\n        if(vowelsIndexMin ==\
    \ vowelsIndex[i]){\n            vowelsIndexMinIndex = i;\n        }\n        if(vowelsIndexMax\
    \ == vowelsIndex[i]){\n            vowelsIndexMaxIndex = i;\n        }\n    }\n\
    \    let vowelsIndexMinIndex2 = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxIndex2\
    \ = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMin2 = vowelsIndex[vowelsIndexMinIndex2];\n\
    \    let vowelsIndexMax2 = vowelsIndex[vowelsIndexMaxIndex2];\n    let vowelsIndexMinIndex3\
    \ = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxIndex3 = vowelsIndex[vowelsIndexMaxIndex];\n\
    \    let vowelsIndexMin3 = vowelsIndex[vowelsIndexMinIndex3];\n    let vowelsIndexMax3\
    \ = vowelsIndex[vowelsIndexMaxIndex3];\n    let vowelsIndexMinIndex4 = vowelsIndex[vowelsIndexMinIndex];\n\
    \    let vowelsIndexMaxIndex4 = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMin4\
    \ = vowelsIndex[vowelsIndexMinIndex4];\n    let vowelsIndexMax4 = vowelsIndex[vowelsIndexMaxIndex4];\n\
    \    let vowelsIndexMinIndex5 = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxIndex5\
    \ = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMin5 = vowelsIndex[vowelsIndexMinIndex5];\n\
    \    let vowelsIndexMax5 = vowelsIndex[vowelsIndexMaxIndex5];\n    let vowelsIndexMinIndex6\
    \ = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxIndex6 = vowelsIndex[vowelsIndexMaxIndex];\n\
    \    let vowelsIndexMin6 = vowelsIndex[vowelsIndexMinIndex6];\n    let vowelsIndexMax6\
    \ = vowelsIndex[vowelsIndexMaxIndex6];\n    let \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8_wsfqsa.js:68\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"hello\") // returns \"e\"\nget_closest_vowel(\"\
    abracadabra\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_vowel(\"\
    abracadabraz\") // returns \"\"\nget_closest_vowel(\"abracadabraz\") // returns\
    \ \"\"\nget_closest_vowel(\"abracadabraz\") // returns \"\"\nget_closest_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9mt5w5b7.js:44\nget_closest_\n^\n\nReferenceError: get_closest_\
    \ is not defined\n    at Object.<anonymous> (/tmp/tmp9mt5w5b7.js:44:1)\n    at\
    \ Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_found\
    \ = false;\n    var vowel_found2 = false;\n    var vowel_found3 = false;\n   \
    \ var vowel_found4 = false;\n    var vowel_found5 = false;\n    var vowel_found6\
    \ = false;\n    var vowel_found7 = false;\n    var vowel_found8 = false;\n   \
    \ var vowel_found9 = false;\n    var vowel_found10 = false;\n    var vowel_found11\
    \ = false;\n    var vowel_found12 = false;\n    var vowel_found13 = false;\n \
    \   var vowel_found14 = false;\n    var vowel_found15 = false;\n    var vowel_found16\
    \ = false;\n    var vowel_found17 = false;\n    var vowel_found18 = false;\n \
    \   var vowel_found19 = false;\n    var vowel_found20 = false;\n    var vowel_found21\
    \ = false;\n    var vowel_found22 = false;\n    var vowel_found23 = false;\n \
    \   var vowel_found24 = false;\n    var vowel_found25 = false;\n    var vowel_found26\
    \ = false;\n    var vowel_found27 = false;\n    var vowel_found28 = false;\n \
    \   var vowel_found29 = false;\n    var vowel_found30 = false;\n    var vowel_found31\
    \ = false;\n    var vowel_found32 = false;\n    var vowel_found33 = false;\n \
    \   var vowel_found34 = false;\n    var vowel_found35 = false;\n    var vowel_found36\
    \ = false;\n    var vowel_found37 = false;\n    var vowel_found38 = false;\n \
    \   var vowel_found39 = false;\n    var vowel_found40 = false;\n    var vowel_found41\
    \ = false;\n    var vowel_found42 = false;\n    var vowel_found43 = false;\n \
    \   var vowel_found44 = false;\n    var vowel_found45 = false;\n    var vowel_found46\
    \ = false;\n    var vowel_found47 = false;\n    var vowel_found48 = false;\n \
    \   var vowel_found49 = false;\n    var vowel_found50 = false;\n    var vowel_found51\
    \ = false;\n    var vowel_found52 = false;\n    var vowel_found53 = false;\n \
    \   var vowel_found54 = false;\n    var vowel_found55 = false;\n    var vowel_found56\
    \ = false;\n    var vowel_found57 = false;\n    var vowel_found58 = false;\n \
    \   var vowel_found59 = false;\n    var vowel_found60 = false;\n    var vowel_found61\
    \ = false;\n    var vowel_found62 = false;\n    var vowel_found63 = false;\n \
    \   var vowel_found64 = false;\n    var vowel_found65 = false;\n    var vowel_found66\
    \ = false;\n    var vowel_found67 = false;\n    var vowel_found68 = false;\n \
    \   var vowel_found69\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4yyc40zy.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - vowels_count_from_right;\n    let vowels_count_from_middle\
    \ = Math.floor(vowels_count_from_right / 2);\n    let vowels_count_from_middle_to_right\
    \ = vowels_count_from_middle + vowels_count_from_right;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count_from_middle - vowels_count_from_right;\n    let vowels_count_from_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left + vowels_count_from_right;\n    let vowels_count_from_middle_to_left_to_left\
    \ = vowels_count_from_middle_to_left - vowels_count_from_right;\n    let vowels_count_from_middle_to_left_to_right_to_right\
    \ = vowels_count_from_middle_to_left_to_right + vowels_count_from_right;\n   \
    \ let vowels_count_from_middle_to_left_to_right_to_left = vowels_count_from_middle_to_left_to_right\
    \ - vowels_count_from_right;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_left_to_left = vowels_count_from_middle_to_left_to_right_to_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right\
    \ + vowels_count_from_right;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ + vowels_count_from_right;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb1nvpbc8.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnyt3jh2n.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = vowels.length;\n\
    \    var vowel_count_from_right = vowel_count - 1;\n    var vowel_count_from_left\
    \ = vowel_count - 2;\n    var vowel_count_from_middle = vowel_count - 3;\n   \
    \ var vowel_count_from_middle2 = vowel_count - 4;\n    var vowel_count_from_middle3\
    \ = vowel_count - 5;\n    var vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  var vowel_count_from_middle5 = vowel_count - 7;\n    var vowel_count_from_middle6\
    \ = vowel_count - 8;\n    var vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  var vowel_count_from_middle8 = vowel_count - 10;\n    var vowel_count_from_middle9\
    \ = vowel_count - 11;\n    var vowel_count_from_middle10 = vowel_count - 12;\n\
    \    var vowel_count_from_middle11 = vowel_count - 13;\n    var vowel_count_from_middle12\
    \ = vowel_count - 14;\n    var vowel_count_from_middle13 = vowel_count - 15;\n\
    \    var vowel_count_from_middle14 = vowel_count - 16;\n    var vowel_count_from_middle15\
    \ = vowel_count - 17;\n    var vowel_count_from_middle16 = vowel_count - 18;\n\
    \    var vowel_count_from_middle17 = vowel_count - 19;\n    var vowel_count_from_middle18\
    \ = vowel_count - 20;\n    var vowel_count_from_middle19 = vowel_count - 21;\n\
    \    var vowel_count_from_middle20 = vowel_count - 22;\n    var vowel_count_from_middle21\
    \ = vowel_count - 23;\n    var vowel_count_from_middle22 = vowel_count - 24;\n\
    \    var vowel_count_from_middle23 = vowel_count - 25;\n    var vowel_count_from_middle24\
    \ = vowel_count - 26;\n    var vowel_count_from_middle25 = vowel_count - 27;\n\
    \    var vowel_count_from_middle26 = vowel_count - 28;\n    var vowel_count_from_middle27\
    \ = vowel_count - 29;\n    var vowel_count_from_middle28 = vowel_count - 30;\n\
    \    var vowel_count_from_middle29 = vowel_count - 31;\n    var vowel_count_from_middle30\
    \ = vowel_count - 32;\n    var vowel_count_from_middle31 = vowel_count - 33;\n\
    \    var vowel_count_from_middle32 = vowel_count - 34;\n    var vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbmr1fbv2.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountLeft = word.length - vowelsCount;\n    let vowelsCountRight\
    \ = vowelsCount - 1;\n    let vowelsCountRightLeft = vowelsCountRight - vowelsCountLeft;\n\
    \    let vowelsCountRightLeft2 = vowelsCountRight - vowelsCountLeft - 1;\n   \
    \ let vowelsCountRightLeft3 = vowelsCountRight - vowelsCountLeft - 2;\n    let\
    \ vowelsCountRightLeft4 = vowelsCountRight - vowelsCountLeft - 3;\n    let vowelsCountRightLeft5\
    \ = vowelsCountRight - vowelsCountLeft - 4;\n    let vowelsCountRightLeft6 = vowelsCountRight\
    \ - vowelsCountLeft - 5;\n    let vowelsCountRightLeft7 = vowelsCountRight - vowelsCountLeft\
    \ - 6;\n    let vowelsCountRightLeft8 = vowelsCountRight - vowelsCountLeft - 7;\n\
    \    let vowelsCountRightLeft9 = vowelsCountRight - vowelsCountLeft - 8;\n   \
    \ let vowelsCountRightLeft10 = vowelsCountRight - vowelsCountLeft - 9;\n    let\
    \ vowelsCountRightLeft11 = vowelsCountRight - vowelsCountLeft - 10;\n    let vowelsCountRightLeft12\
    \ = vowelsCountRight - vowelsCountLeft - 11;\n    let vowelsCountRightLeft13 =\
    \ vowelsCountRight - vowelsCountLeft - 12;\n    let vowelsCountRightLeft14 = vowelsCountRight\
    \ - vowelsCountLeft - 13;\n    let vowelsCountRightLeft15 = vowelsCountRight -\
    \ vowelsCountLeft - 14;\n    let vowelsCountRightLeft16 = vowelsCountRight - vowelsCountLeft\
    \ - 15;\n    let vowelsCountRightLeft17 = vowelsCountRight - vowelsCountLeft -\
    \ 16;\n    let vowelsCountRightLeft18 = vowelsCountRight - vowelsCountLeft - 17;\n\
    \    let vowelsCountRightLeft19 = vowelsCountRight - vowelsCountLeft - 18;\n \
    \   let vowelsCountRightLeft20 = vowelsCountRight - vowelsCountLeft - 19;\n  \
    \  let vowelsCountRightLeft21 = vowelsCountRight - vowelsCountLeft - 20;\n   \
    \ let vowelsCountRightLeft22 = vowelsCountRight - vowelsCountLeft - 21;\n    let\
    \ vowelsCountRightLeft23 = vowelsCountRight - vowelsCountLeft - 22;\n    let vowelsCountRightLeft24\
    \ = vowelsCountRight - vowelsCount\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsx80nayt.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  let vowelIndex = word.indexOf(vowels[i]);\n        if(vowelIndex > -1){\n \
    \           vowelsIndex.push(vowelIndex);\n        }\n    }\n    let vowelsCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexDiff =\
    \ vowelsIndexMax - vowelsIndexMin;\n    let vowelsIndexDiffMin = Math.min(...vowelsIndexDiff);\n\
    \    let vowelsIndexDiffMax = Math.max(...vowelsIndexDiff);\n    let vowelsIndexDiffDiff\
    \ = vowelsIndexDiffMax - vowelsIndexDiffMin;\n    let vowelsIndexDiffDiffMin =\
    \ Math.min(...vowelsIndexDiffDiff);\n    let vowelsIndexDiffDiffMax = Math.max(...vowelsIndexDiffDiff);\n\
    \    let vowelsIndexDiffDiffDiff = vowelsIndexDiffDiffMax - vowelsIndexDiffDiffMin;\n\
    \    let vowelsIndexDiffDiffDiffMin = Math.min(...vowelsIndexDiffDiffDiff);\n\
    \    let vowelsIndexDiffDiffDiffMax = Math.max(...vowelsIndexDiffDiffDiff);\n\
    \    let vowelsIndexDiffDiffDiffDiff = vowelsIndexDiffDiffDiffMax - vowelsIndexDiffDiffDiffMin;\n\
    \    let vowelsIndexDiffDiffDiffDiffMin = Math.min(...vowelsIndexDiffDiffDiffDiff);\n\
    \    let vowelsIndexDiffDiffDiffDiffMax = Math.max(...vowelsIndexDiffDiffDiffDiff);\n\
    \    let vowelsIndexDiffDiffDiffDiffDiff = vowelsIndexDiffDiffDiffDiffMax - vowelsIndexDiffDiffDiffDiffMin;\n\
    \    let vowelsIndexDiffDiffDiffDiffDiffMin = Math.min(...vowelsIndexDiffDiffDiffDiffDiff);\n\
    \    let vowelsIndexDiffDiffDiffDiffDiffMax = Math.max(...vowelsIndexDiffDiffDiffDiffDiff);\n\
    \    let vowelsIndexDiffDiffDiffDiffDiffDiff = vowelsIndexDiffDiffDiffDiffDiffDiffMax\
    \ - vowelsIndexDiffDiffDiffDiffDiffDiffMin;\n    let vowelsIndexDiffDiffDiffDiffDiffDiffMin\
    \ = Math.min(...vowelsIndexDiffDiffDiffDiffDiffDiff);\n    let vowelsIndexDiffDiffDiffDiffDiffDiffMax\
    \ = Math.max(...vowelsIndexDiffDiffDiffDiffDiffDiff);\n    let vowelsIndexDiffDiffDiffDiffDiffDiffDiff\
    \ = vowelsIndexDiffDiffDiffDiffDiffDiffDiffMax - vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6__71kku.js:17\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count - 4;\n    let vowel_count_from_right_to_left\
    \ = vowel_count - 5;\n    let vowel_count_from_middle_to_right = vowel_count -\
    \ 6;\n    let vowel_count_from_left_to_middle = vowel_count - 7;\n    let vowel_count_from_right_to_middle\
    \ = vowel_count - 8;\n    let vowel_count_from_middle_to_left = vowel_count -\
    \ 9;\n    let vowel_count_from_left_to_right_to_middle = vowel_count - 10;\n \
    \   let vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n    let\
    \ vowel_count_from_middle_to_right_to_left = vowel_count - 12;\n    let vowel_count_from_left_to_right_to_middle_to_left\
    \ = vowel_count - 13;\n    let vowel_count_from_right_to_left_to_middle_to_right\
    \ = vowel_count - 14;\n    let vowel_count_from_middle_to_right_to_left_to_middle\
    \ = vowel_count - 15;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowel_count - 16;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_middle\
    \ = vowel_count - 17;\n    let vowel_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowel_count - 18;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 19;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 20;\n    let vowel_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 21;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowel_count - 22;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 23;\n    let vowel_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 24;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowel_count - 25;\n    let vowel_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxs68z1ai.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ var vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    var vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_a6815wn.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6545jwls.js:33\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i=0;i<word.length;i++){\n\
    \        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n   \
    \         vowelsIndexCount++;\n        }\n    }\n    if(vowelsIndexCount > vowelsCount){\n\
    \        return '';\n    }\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMinIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinVowel = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxVowel\
    \ = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelVowel = vowelsIndex[vowelsIndexMinVowelIndex];\n \
    \   let vowelsIndexMaxVowelVowel = vowelsIndex[vowelsIndexMaxVowelIndex];\n  \
    \  let vowelsIndexMinVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelVowel);\n\
    \    let vowelsIndexMaxVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelVowel);\n\
    \    let vowelsIndexMinVowelVowelVowel = vowelsIndex[vowelsIndexMinVowelVowelIndex];\n\
    \    let vowelsIndexMaxVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelIndex];\n\
    \    let vowelsIndexMinVowelVowelVowelVowel = vowelsIndex[vowelsIndexMinVowelVowelVowelIndex];\n\
    \    let vowelsIndexMaxVowelVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelVowelIndex];\n\
    \    let vowelsIndexMinVowelVowelVowelVowelVowel = vowelsIndex[vowelsIndexMin\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmcjs0a6f.js:38\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowel_count = 0;\n    var\
    \ vowel_found = false;\n    var vowel_position = 0;\n    \n    for(var i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n            vowel_found\
    \ = true;\n            vowel_position = i;\n            break;\n        }\n  \
    \  }\n    \n    if(vowel_found){\n        for(var i = vowel_position + 1; i <\
    \ word.length; i++){\n            if(vowels.indexOf(word[i]) > -1){\n        \
    \        vowel_count++;\n            }\n        }\n        \n        if(vowel_count\
    \ > 1){\n            return word.substr(vowel_position + 1, vowel_position + vowel_count\
    \ - 1);\n        }\n    }\n    \n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpr8xk03i_.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr8xk03i_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph98jh9gv.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowelsIndex.length;\n  \
    \  let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n  \
    \  for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n\
    \    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n    for(let i\
    \ = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowelsIndex.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowelsIndex.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowelsIndex.length;\n  \
    \  let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n  \
    \  for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n\
    \    let vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowelsIndex.length;\n    let vowelsIndex = [];\n    for(let i\
    \ = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowelsIndex.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowelsIndex.length;\n\
    \    let \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd0tnl2ht.js:14\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo_93t94w.js:33\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    var vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 22;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe046d1vn.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle2 = vowels_count / 2;\n    var vowels_count_from_middle3\
    \ = vowels_count / 3;\n    var vowels_count_from_middle4 = vowels_count / 4;\n\
    \    var vowels_count_from_middle5 = vowels_count / 5;\n    var vowels_count_from_middle6\
    \ = vowels_count / 6;\n    var vowels_count_from_middle7 = vowels_count / 7;\n\
    \    var vowels_count_from_middle8 = vowels_count / 8;\n    var vowels_count_from_middle9\
    \ = vowels_count / 9;\n    var vowels_count_from_middle10 = vowels_count / 10;\n\
    \    var vowels_count_from_middle11 = vowels_count / 11;\n    var vowels_count_from_middle12\
    \ = vowels_count / 12;\n    var vowels_count_from_middle13 = vowels_count / 13;\n\
    \    var vowels_count_from_middle14 = vowels_count / 14;\n    var vowels_count_from_middle15\
    \ = vowels_count / 15;\n    var vowels_count_from_middle16 = vowels_count / 16;\n\
    \    var vowels_count_from_middle17 = vowels_count / 17;\n    var vowels_count_from_middle18\
    \ = vowels_count / 18;\n    var vowels_count_from_middle19 = vowels_count / 19;\n\
    \    var vowels_count_from_middle20 = vowels_count / 20;\n    var vowels_count_from_middle21\
    \ = vowels_count / 21;\n    var vowels_count_from_middle22 = vowels_count / 22;\n\
    \    var vowels_count_from_middle23 = vowels_count / 23;\n    var vowels_count_from_middle24\
    \ = vowels_count / 24;\n    var vowels_count_from_middle25 = vowels_count / 25;\n\
    \    var vowels_count_from_middle26 = vowels_count / 26;\n    var vowels_count_from_middle27\
    \ = vowels_count / 27;\n    var vowels_count_from_middle28 = vowels_count / 28;\n\
    \    var vowels_count_from_middle29 = vowels_count / 29;\n    var vowels_count_from_middle30\
    \ = vowels_count / 30;\n    var vowels_count_from_middle31 = vowels_count / 31;\n\
    \    var vowels_count_from_middle32 = vowels_count / 32;\n    var vowels_count_from_middle33\
    \ = vowels_count / 33;\n    var vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz3fzrbv8.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ var vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 18;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyft68akz.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_2\
    \ = 0;\n    var vowels_index_count_3 = 0;\n    var vowels_index_count_4 = 0;\n\
    \    var vowels_index_count_5 = 0;\n    var vowels_index_count_6 = 0;\n    var\
    \ vowels_index_count_7 = 0;\n    var vowels_index_count_8 = 0;\n    var vowels_index_count_9\
    \ = 0;\n    var vowels_index_count_10 = 0;\n    var vowels_index_count_11 = 0;\n\
    \    var vowels_index_count_12 = 0;\n    var vowels_index_count_13 = 0;\n    var\
    \ vowels_index_count_14 = 0;\n    var vowels_index_count_15 = 0;\n    var vowels_index_count_16\
    \ = 0;\n    var vowels_index_count_17 = 0;\n    var vowels_index_count_18 = 0;\n\
    \    var vowels_index_count_19 = 0;\n    var vowels_index_count_20 = 0;\n    var\
    \ vowels_index_count_21 = 0;\n    var vowels_index_count_22 = 0;\n    var vowels_index_count_23\
    \ = 0;\n    var vowels_index_count_24 = 0;\n    var vowels_index_count_25 = 0;\n\
    \    var vowels_index_count_26 = 0;\n    var vowels_index_count_27 = 0;\n    var\
    \ vowels_index_count_28 = 0;\n    var vowels_index_count_29 = 0;\n    var vowels_index_count_30\
    \ = 0;\n    var vowels_index_count_31 = 0;\n    var vowels_index_count_32 = 0;\n\
    \    var vowels_index_count_33 = 0;\n    var vowels_index_count_34 = 0;\n    var\
    \ vowels_index_count_35 = 0;\n    var vowels_index_count_36 = 0;\n    var vowels_index_count_37\
    \ = 0;\n    var vowels_index_count_38 = 0;\n    var vowels_index_count_39 = 0;\n\
    \    var vowels_index_count_40 = 0;\n    var vowels_index_count_41 = 0;\n    var\
    \ vowels_index_count_42 = 0;\n    var vowels_index_count_43 = 0;\n    var vowels_index_count_44\
    \ = 0;\n    var vowels_index_count_45 = 0;\n    var vowels_index_count_46 = 0;\n\
    \    var vowels_index_count_47 = 0;\n    var vowels_index_count_48 = 0;\n    var\
    \ vowels_index_count_49 = 0;\n    var vowels_index_count_50 = 0;\n    var vowels_index_count_51\
    \ = 0;\n    var vowels_index_count_52 = 0;\n    var vowels_index_count_53 = 0;\n\
    \    var vowels_index_count_54 = 0;\n    var vowels_index_count_55 = 0;\n    var\
    \ vowels_index_count_56 = 0;\n    var vowels_index_count_57 = 0;\n    var vowels_index_count_58\
    \ = 0;\n    var vowels_index_count_59 = 0;\n    var vowels_index_count_60 = 0;\n\
    \    var vowels_index_count_61 = 0;\n    var vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2o0d0swm.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count - 4;\n    let vowel_count_from_right_to_left\
    \ = vowel_count - 5;\n    let vowel_count_from_middle_to_left = vowel_count -\
    \ 6;\n    let vowel_count_from_left_to_middle = vowel_count - 7;\n    let vowel_count_from_right_to_middle\
    \ = vowel_count - 8;\n    let vowel_count_from_middle_to_right = vowel_count -\
    \ 9;\n    let vowel_count_from_left_to_right_to_middle = vowel_count - 10;\n \
    \   let vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n    let\
    \ vowel_count_from_middle_to_left_to_right = vowel_count - 12;\n    let vowel_count_from_left_to_middle_to_right\
    \ = vowel_count - 13;\n    let vowel_count_from_right_to_middle_to_left = vowel_count\
    \ - 14;\n    let vowel_count_from_middle_to_left_to_middle = vowel_count - 15;\n\
    \    let vowel_count_from_left_to_right_to_middle_to_left = vowel_count - 16;\n\
    \    let vowel_count_from_right_to_left_to_middle_to_right = vowel_count - 17;\n\
    \    let vowel_count_from_middle_to_left_to_right_to_middle = vowel_count - 18;\n\
    \    let vowel_count_from_left_to_middle_to_right_to_left = vowel_count - 19;\n\
    \    let vowel_count_from_right_to_middle_to_left_to_middle = vowel_count - 20;\n\
    \    let vowel_count_from_middle_to_left_to_right_to_left_to_middle = vowel_count\
    \ - 21;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left = vowel_count\
    \ - 22;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowel_count - 23;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowel_count - 24;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left\
    \ = vowel_count - 25;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowel_count - 26;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpir6es24s.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count / 2;\n    let vowels_count_from_middle3\
    \ = vowels_count / 2;\n    let vowels_count_from_middle4 = vowels_count / 2;\n\
    \    let vowels_count_from_middle5 = vowels_count / 2;\n    let vowels_count_from_middle6\
    \ = vowels_count / 2;\n    let vowels_count_from_middle7 = vowels_count / 2;\n\
    \    let vowels_count_from_middle8 = vowels_count / 2;\n    let vowels_count_from_middle9\
    \ = vowels_count / 2;\n    let vowels_count_from_middle10 = vowels_count / 2;\n\
    \    let vowels_count_from_middle11 = vowels_count / 2;\n    let vowels_count_from_middle12\
    \ = vowels_count / 2;\n    let vowels_count_from_middle13 = vowels_count / 2;\n\
    \    let vowels_count_from_middle14 = vowels_count / 2;\n    let vowels_count_from_middle15\
    \ = vowels_count / 2;\n    let vowels_count_from_middle16 = vowels_count / 2;\n\
    \    let vowels_count_from_middle17 = vowels_count / 2;\n    let vowels_count_from_middle18\
    \ = vowels_count / 2;\n    let vowels_count_from_middle19 = vowels_count / 2;\n\
    \    let vowels_count_from_middle20 = vowels_count / 2;\n    let vowels_count_from_middle21\
    \ = vowels_count / 2;\n    let vowels_count_from_middle22 = vowels_count / 2;\n\
    \    let vowels_count_from_middle23 = vowels_count / 2;\n    let vowels_count_from_middle24\
    \ = vowels_count / 2;\n    let vowels_count_from_middle25 = vowels_count / 2;\n\
    \    let vowels_count_from_middle26 = vowels_count / 2;\n    let vowels_count_from_middle27\
    \ = vowels_count / 2;\n    let vowels_count_from_middle28 = vowels_count / 2;\n\
    \    let vowels_count_from_middle29 = vowels_count / 2;\n    let vowels_count_from_middle30\
    \ = vowels_count / 2;\n    let vowels_count_from_middle31 = vowels_count / 2;\n\
    \    let vowels_count_from_middle32 = vowels_count / 2;\n    let vowels_count_from_middle33\
    \ = vowels_count / 2;\n    let vowels_count_from_middle34 = vowels_count / 2;\n\
    \    let vowels_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpv68n8qr2.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowels.filter(v=>word.endsWith(v)).length;\n\
    \    let vowel_count_from_left = vowels.filter(v=>word.startsWith(v)).length;\n\
    \    let vowel_count_from_right_and_left = vowels.filter(v=>word.endsWith(v) &&\
    \ word.startsWith(v)).length;\n    let vowel_count_from_left_and_right = vowels.filter(v=>word.startsWith(v)\
    \ && word.endsWith(v)).length;\n    let vowel_count_from_right_and_left = vowels.filter(v=>word.endsWith(v)\
    \ && word.startsWith(v)).length;\n    let vowel_count_from_left_and_right = vowels.filter(v=>word.startsWith(v)\
    \ && word.endsWith(v)).length;\n    let vowel_count_from_right_and_left_and_left\
    \ = vowels.filter(v=>word.endsWith(v) && word.startsWith(v) && word.endsWith(v)).length;\n\
    \    let vowel_count_from_left_and_right_and_left = vowels.filter(v=>word.startsWith(v)\
    \ && word.endsWith(v) && word.endsWith(v)).length;\n    let vowel_count_from_right_and_left_and_right\
    \ = vowels.filter(v=>word.endsWith(v) && word.startsWith(v) && word.endsWith(v)).length;\n\
    \    let vowel_count_from_left_and_right_and_left_and_right = vowels.filter(v=>word.startsWith(v)\
    \ && word.endsWith(v) && word.endsWith(v) && word.endsWith(v)).length;\n    let\
    \ vowel_count_from_right_and_left_and_right_and_left = vowels.filter(v=>word.endsWith(v)\
    \ && word.startsWith(v) && word.endsWith(v) && word.endsWith(v) && word.endsWith(v)).length;\n\
    \    let vowel_count_from_left_and_right_and_left_and_right_and_left = vowels.filter(v=>word.startsWith(v)\
    \ && word.endsWith(v) && word.endsWith(v) && word.endsWith(v) && word.endsWith(v)\
    \ && word.endsWith(v)).length;\n    let vowel_count_from_right_and_left_and_right_and_left_and_right\
    \ = vowels.filter(v=>word.endsWith(v) && word.startsWith(v) && word.endsWith(v)\
    \ && word.endsWith(v) && word.endsWith(v) && word.endsWith(v) && word.endsWith(v)).length;\n\
    \    let vowel_count_from_left_and_right_and_left_and_right_and_left_and_right\
    \ = vowels.filter(v=>word.startsWith(v) && word.endsWith(v) && word.endsWith(v)\
    \ && word.endsWith(v) && word.endsWith(v) && word.endsWith(v) && word.endsWith(v)).length;\n\
    \    let vowel_count_from_right_and_left_and_right_and_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp379b7z8d.js:14\n    let vowel_count_from_right_and_left = vowels.filter(v=>word.endsWith(v)\
    \ && word.startsWith(v)).length;\n        ^\n\nSyntaxError: Identifier 'vowel_count_from_right_and_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_middle2 = vowels_count - 4;\n    var vowels_count_from_middle3\
    \ = vowels_count - 5;\n    var vowels_count_from_middle4 = vowels_count - 6;\n\
    \    var vowels_count_from_middle5 = vowels_count - 7;\n    var vowels_count_from_middle6\
    \ = vowels_count - 8;\n    var vowels_count_from_middle7 = vowels_count - 9;\n\
    \    var vowels_count_from_middle8 = vowels_count - 10;\n    var vowels_count_from_middle9\
    \ = vowels_count - 11;\n    var vowels_count_from_middle10 = vowels_count - 12;\n\
    \    var vowels_count_from_middle11 = vowels_count - 13;\n    var vowels_count_from_middle12\
    \ = vowels_count - 14;\n    var vowels_count_from_middle13 = vowels_count - 15;\n\
    \    var vowels_count_from_middle14 = vowels_count - 16;\n    var vowels_count_from_middle15\
    \ = vowels_count - 17;\n    var vowels_count_from_middle16 = vowels_count - 18;\n\
    \    var vowels_count_from_middle17 = vowels_count - 19;\n    var vowels_count_from_middle18\
    \ = vowels_count - 20;\n    var vowels_count_from_middle19 = vowels_count - 21;\n\
    \    var vowels_count_from_middle20 = vowels_count - 22;\n    var vowels_count_from_middle21\
    \ = vowels_count - 23;\n    var vowels_count_from_middle22 = vowels_count - 24;\n\
    \    var vowels_count_from_middle23 = vowels_count - 25;\n    var vowels_count_from_middle24\
    \ = vowels_count - 26;\n    var vowels_count_from_middle25 = vowels_count - 27;\n\
    \    var vowels_count_from_middle26 = vowels_count - 28;\n    var vowels_count_from_middle27\
    \ = vowels_count - 29;\n    var vowels_count_from_middle28 = vowels_count - 30;\n\
    \    var vowels_count_from_middle29 = vowels_count - 31;\n    var vowels_count_from_middle30\
    \ = vowels_count - 32;\n    var vowels_count_from_middle31 = vowels_count - 33;\n\
    \    var vowels_count_from_middle32 = vowels_count - 34;\n    var vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyqgx5zud.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowel_count = 0;\n    var\
    \ vowel_found = false;\n    for(var i = word.length - 1; i >= 0; i--){\n     \
    \   if(vowels.indexOf(word[i]) !== -1){\n            vowel_count++;\n        \
    \    if(vowel_count === 2){\n                vowel_found = true;\n           \
    \     break;\n            }\n        }\n    }\n    if(vowel_found){\n        return\
    \ word;\n    }\n    return '';\n}\nget_closest_vowel('hello'); // returns 'o'\n\
    get_closest_vowel('helo'); // returns ''\nget_closest_vowel('heloworld'); // returns\
    \ ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel('heloworld'); // returns ''\nget_closest_vowel('heloworld');\
    \ // returns ''\nget_closest_vowel\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'yogurt'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpigtl7kzh.js:66:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpigtl7kzh.js:81:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'yogurt',\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_2\
    \ = 0;\n    let vowels_index_count_3 = 0;\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowels.includes(word[i])){\n            vowels_index = i;\n\
    \            vowels_index_count++;\n        }\n        if(vowels.includes(word[word.length\
    \ - 1 - i])){\n            vowels_index_count_2 = word.length - 1 - i;\n     \
    \       vowels_index_count_2++;\n        }\n        if(vowels.includes(word[word.length\
    \ - 1 - i - 2])){\n            vowels_index_count_3 = word.length - 1 - i - 2;\n\
    \            vowels_index_count_3++;\n        }\n    }\n    if(vowels_index_count\
    \ > vowels_index_count_2 && vowels_index_count > vowels_index_count_3){\n    \
    \    return word[vowels_index];\n    }else if(vowels_index_count_2 > vowels_index_count_3){\n\
    \        return word[vowels_index];\n    }else{\n        return word[vowels_index];\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmp_czxdmld.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_czxdmld.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_index\
    \ = 0;\n    var vowel_found = false;\n    var consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'];\n\
    \    var consonant_count = 0;\n    var consonant_index = 0;\n    var consonant_found\
    \ = false;\n    \n    for(var i = 0; i < word.length; i++){\n        if(vowels.indexOf(word[i])\
    \ > -1){\n            vowel_found = true;\n            vowel_index = i;\n    \
    \        vowel_count++;\n        }\n        else if(consonants.indexOf(word[i])\
    \ > -1){\n            consonant_found = true;\n            consonant_index = i;\n\
    \            consonant_count++;\n        }\n    }\n    \n    if(vowel_found &&\
    \ consonant_found){\n        if(vowel_count > consonant_count){\n            return\
    \ word.substring(vowel_index + 1, word.length);\n        }\n        else{\n  \
    \          return word.substring(consonant_index + 1, word.length);\n        }\n\
    \    }\n    else{\n        return \"\";\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpqigw8rz9.js:48:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqigw8rz9.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count - 4;\n    let vowel_count_from_right_to_left\
    \ = vowel_count - 5;\n    let vowel_count_from_middle_to_right = vowel_count -\
    \ 6;\n    let vowel_count_from_left_to_middle = vowel_count - 7;\n    let vowel_count_from_right_to_middle\
    \ = vowel_count - 8;\n    let vowel_count_from_middle_to_left = vowel_count -\
    \ 9;\n    let vowel_count_from_left_to_right_to_middle = vowel_count - 10;\n \
    \   let vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n    let\
    \ vowel_count_from_middle_to_right_to_left = vowel_count - 12;\n    let vowel_count_from_left_to_right_to_middle_to_left\
    \ = vowel_count - 13;\n    let vowel_count_from_right_to_left_to_middle_to_right\
    \ = vowel_count - 14;\n    let vowel_count_from_middle_to_right_to_left_to_middle\
    \ = vowel_count - 15;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowel_count - 16;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_middle\
    \ = vowel_count - 17;\n    let vowel_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowel_count - 18;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 19;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 20;\n    let vowel_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 21;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowel_count - 22;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 23;\n    let vowel_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowel_count - 24;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowel_count - 25;\n    let vowel_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz2evfyug.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 22;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowels_count - 23;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 27;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqe_3exuc.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowelsIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptuxdjr8k.js:72\n    let vowelsIndex\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndex' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_2\
    \ = 0;\n    var vowels_index_count_3 = 0;\n    var vowels_index_count_4 = 0;\n\
    \    var vowels_index_count_5 = 0;\n    var vowels_index_count_6 = 0;\n    var\
    \ vowels_index_count_7 = 0;\n    var vowels_index_count_8 = 0;\n    var vowels_index_count_9\
    \ = 0;\n    var vowels_index_count_10 = 0;\n    var vowels_index_count_11 = 0;\n\
    \    var vowels_index_count_12 = 0;\n    var vowels_index_count_13 = 0;\n    var\
    \ vowels_index_count_14 = 0;\n    var vowels_index_count_15 = 0;\n    var vowels_index_count_16\
    \ = 0;\n    var vowels_index_count_17 = 0;\n    var vowels_index_count_18 = 0;\n\
    \    var vowels_index_count_19 = 0;\n    var vowels_index_count_20 = 0;\n    var\
    \ vowels_index_count_21 = 0;\n    var vowels_index_count_22 = 0;\n    var vowels_index_count_23\
    \ = 0;\n    var vowels_index_count_24 = 0;\n    var vowels_index_count_25 = 0;\n\
    \    var vowels_index_count_26 = 0;\n    var vowels_index_count_27 = 0;\n    var\
    \ vowels_index_count_28 = 0;\n    var vowels_index_count_29 = 0;\n    var vowels_index_count_30\
    \ = 0;\n    var vowels_index_count_31 = 0;\n    var vowels_index_count_32 = 0;\n\
    \    var vowels_index_count_33 = 0;\n    var vowels_index_count_34 = 0;\n    var\
    \ vowels_index_count_35 = 0;\n    var vowels_index_count_36 = 0;\n    var vowels_index_count_37\
    \ = 0;\n    var vowels_index_count_38 = 0;\n    var vowels_index_count_39 = 0;\n\
    \    var vowels_index_count_40 = 0;\n    var vowels_index_count_41 = 0;\n    var\
    \ vowels_index_count_42 = 0;\n    var vowels_index_count_43 = 0;\n    var vowels_index_count_44\
    \ = 0;\n    var vowels_index_count_45 = 0;\n    var vowels_index_count_46 = 0;\n\
    \    var vowels_index_count_47 = 0;\n    var vowels_index_count_48 = 0;\n    var\
    \ vowels_index_count_49 = 0;\n    var vowels_index_count_50 = 0;\n    var vowels_index_count_51\
    \ = 0;\n    var vowels_index_count_52 = 0;\n    var vowels_index_count_53 = 0;\n\
    \    var vowels_index_count_54 = 0;\n    var vowels_index_count_55 = 0;\n    var\
    \ vowels_index_count_56 = 0;\n    var vowels_index_count_57 = 0;\n    var vowels_index_count_58\
    \ = 0;\n    var vowels_index_count_59 = 0;\n    var vowels_index_count_60 = 0;\n\
    \    var vowels_index_count_61 = 0;\n    var vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8zblc76i.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppn3u9xhu.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuwahdo0x.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpso3x5j7h.js:33\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index2\
    \ = 0;\n    var vowels_index_count_max_index2 = 0;\n    var vowels_index_count_min_index3\
    \ = 0;\n    var vowels_index_count_max_index3 = 0;\n    var vowels_index_count_min_index4\
    \ = 0;\n    var vowels_index_count_max_index4 = 0;\n    var vowels_index_count_min_index5\
    \ = 0;\n    var vowels_index_count_max_index5 = 0;\n    var vowels_index_count_min_index6\
    \ = 0;\n    var vowels_index_count_max_index6 = 0;\n    var vowels_index_count_min_index7\
    \ = 0;\n    var vowels_index_count_max_index7 = 0;\n    var vowels_index_count_min_index8\
    \ = 0;\n    var vowels_index_count_max_index8 = 0;\n    var vowels_index_count_min_index9\
    \ = 0;\n    var vowels_index_count_max_index9 = 0;\n    var vowels_index_count_min_index10\
    \ = 0;\n    var vowels_index_count_max_index10 = 0;\n    var vowels_index_count_min_index11\
    \ = 0;\n    var vowels_index_count_max_index11 = 0;\n    var vowels_index_count_min_index12\
    \ = 0;\n    var vowels_index_count_max_index12 = 0;\n    var vowels_index_count_min_index13\
    \ = 0;\n    var vowels_index_count_max_index13 = 0;\n    var vowels_index_count_min_index14\
    \ = 0;\n    var vowels_index_count_max_index14 = 0;\n    var vowels_index_count_min_index15\
    \ = 0;\n    var vowels_index_count_max_index15 = 0;\n    var vowels_index_count_min_index16\
    \ = 0;\n    var vowels_index_count_max_index16 = 0;\n    var vowels_index_count_min_index17\
    \ = 0;\n    var vowels_index_count_max_index17 = 0;\n    var vowels_index_count_min_index18\
    \ = 0;\n    var vowels_index_count_max_index18 = 0;\n    var vowels_index_count_min_index19\
    \ = 0;\n    var vowels_index_count_max_index19 = 0;\n    var vowels_index_count_min_index20\
    \ = 0;\n    var vowels_index_count_max_index20 = 0;\n    var vowels_index_count_min_index21\
    \ = 0;\n    var vowels_index_count_max_index21 = 0;\n    var vowels_index_count_min_index22\
    \ = 0;\n    var vowels_index_count_max_index22 = 0;\n    var vowels_index_count_min_index23\
    \ = 0;\n    var vowels_index_count_max_index23 = 0;\n    var vowels_index_count_min_index24\
    \ = 0;\n    var vowels_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd5jwzbv7.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var consonants\
    \ = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \    var consonant_count = 0;\n    var vowel_found = false;\n    var consonant_found\
    \ = false;\n    var vowel_found_index = 0;\n    var consonant_found_index = 0;\n\
    \    for(var i = word.length-1; i >= 0; i--){\n        if(vowels.indexOf(word[i])\
    \ >= 0){\n            vowel_found = true;\n            vowel_found_index = i;\n\
    \        }\n        if(consonants.indexOf(word[i]) >= 0){\n            consonant_found\
    \ = true;\n            consonant_found_index = i;\n        }\n        if(vowel_found\
    \ && consonant_found){\n            break;\n        }\n    }\n    if(vowel_found){\n\
    \        var vowel_distance = consonant_found_index - vowel_found_index;\n   \
    \     if(vowel_distance > 0){\n            return word.substr(vowel_found_index,vowel_distance);\n\
    \        }\n        else if(vowel_distance < 0){\n            return word.substr(vowel_found_index,Math.abs(vowel_distance));\n\
    \        }\n    }\n    return \"\";\n}\nget_closest_vowel(\"hello\");\nget_closest_vowel(\"\
    hey\");\nget_closest_vowel(\"heyhey\");\nget_closest_vowel(\"heyheyhey\");\nget_closest_vowel(\"\
    heyheyheyhey\");\nget_closest_vowel(\"heyheyheyheyhey\");\nget_closest_vowel(\"\
    heyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyhe\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6a_7lyua.js:46\nget_closest_vowel(\"heyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyhe\n\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp16pdh4b3.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_middle2 = vowels_count - 4;\n    var vowels_count_from_middle3\
    \ = vowels_count - 5;\n    var vowels_count_from_middle4 = vowels_count - 6;\n\
    \    var vowels_count_from_middle5 = vowels_count - 7;\n    var vowels_count_from_middle6\
    \ = vowels_count - 8;\n    var vowels_count_from_middle7 = vowels_count - 9;\n\
    \    var vowels_count_from_middle8 = vowels_count - 10;\n    var vowels_count_from_middle9\
    \ = vowels_count - 11;\n    var vowels_count_from_middle10 = vowels_count - 12;\n\
    \    var vowels_count_from_middle11 = vowels_count - 13;\n    var vowels_count_from_middle12\
    \ = vowels_count - 14;\n    var vowels_count_from_middle13 = vowels_count - 15;\n\
    \    var vowels_count_from_middle14 = vowels_count - 16;\n    var vowels_count_from_middle15\
    \ = vowels_count - 17;\n    var vowels_count_from_middle16 = vowels_count - 18;\n\
    \    var vowels_count_from_middle17 = vowels_count - 19;\n    var vowels_count_from_middle18\
    \ = vowels_count - 20;\n    var vowels_count_from_middle19 = vowels_count - 21;\n\
    \    var vowels_count_from_middle20 = vowels_count - 22;\n    var vowels_count_from_middle21\
    \ = vowels_count - 23;\n    var vowels_count_from_middle22 = vowels_count - 24;\n\
    \    var vowels_count_from_middle23 = vowels_count - 25;\n    var vowels_count_from_middle24\
    \ = vowels_count - 26;\n    var vowels_count_from_middle25 = vowels_count - 27;\n\
    \    var vowels_count_from_middle26 = vowels_count - 28;\n    var vowels_count_from_middle27\
    \ = vowels_count - 29;\n    var vowels_count_from_middle28 = vowels_count - 30;\n\
    \    var vowels_count_from_middle29 = vowels_count - 31;\n    var vowels_count_from_middle30\
    \ = vowels_count - 32;\n    var vowels_count_from_middle31 = vowels_count - 33;\n\
    \    var vowels_count_from_middle32 = vowels_count - 34;\n    var vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq0pjhlb4.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcxzbfeg3.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count - 4;\n    let vowel_count_from_right_to_left\
    \ = vowel_count - 5;\n    let vowel_count_from_middle_to_left = vowel_count -\
    \ 6;\n    let vowel_count_from_left_to_middle = vowel_count - 7;\n    let vowel_count_from_right_to_middle\
    \ = vowel_count - 8;\n    let vowel_count_from_middle_to_right = vowel_count -\
    \ 9;\n    let vowel_count_from_left_to_right_to_middle = vowel_count - 10;\n \
    \   let vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n    let\
    \ vowel_count_from_middle_to_left_to_right = vowel_count - 12;\n    let vowel_count_from_left_to_middle_to_right\
    \ = vowel_count - 13;\n    let vowel_count_from_right_to_middle_to_left = vowel_count\
    \ - 14;\n    let vowel_count_from_middle_to_left_to_middle = vowel_count - 15;\n\
    \    let vowel_count_from_left_to_right_to_middle_to_left = vowel_count - 16;\n\
    \    let vowel_count_from_right_to_left_to_middle_to_right = vowel_count - 17;\n\
    \    let vowel_count_from_middle_to_left_to_right_to_middle = vowel_count - 18;\n\
    \    let vowel_count_from_left_to_middle_to_right_to_left = vowel_count - 19;\n\
    \    let vowel_count_from_right_to_middle_to_left_to_middle = vowel_count - 20;\n\
    \    let vowel_count_from_middle_to_left_to_right_to_left_to_middle = vowel_count\
    \ - 21;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left = vowel_count\
    \ - 22;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowel_count - 23;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_middle\
    \ = vowel_count - 24;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left\
    \ = vowel_count - 25;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowel_count - 26;\n    let vowel_count_from_middle_to_left_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnu07yrru.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc5edjq31.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfpw181yu.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_found\
    \ = false;\n    var vowel_found2 = false;\n    var vowel_found3 = false;\n   \
    \ var vowel_found4 = false;\n    var vowel_found5 = false;\n    var vowel_found6\
    \ = false;\n    var vowel_found7 = false;\n    var vowel_found8 = false;\n   \
    \ var vowel_found9 = false;\n    var vowel_found10 = false;\n    var vowel_found11\
    \ = false;\n    var vowel_found12 = false;\n    var vowel_found13 = false;\n \
    \   var vowel_found14 = false;\n    var vowel_found15 = false;\n    var vowel_found16\
    \ = false;\n    var vowel_found17 = false;\n    var vowel_found18 = false;\n \
    \   var vowel_found19 = false;\n    var vowel_found20 = false;\n    var vowel_found21\
    \ = false;\n    var vowel_found22 = false;\n    var vowel_found23 = false;\n \
    \   var vowel_found24 = false;\n    var vowel_found25 = false;\n    var vowel_found26\
    \ = false;\n    var vowel_found27 = false;\n    var vowel_found28 = false;\n \
    \   var vowel_found29 = false;\n    var vowel_found30 = false;\n    var vowel_found31\
    \ = false;\n    var vowel_found32 = false;\n    var vowel_found33 = false;\n \
    \   var vowel_found34 = false;\n    var vowel_found35 = false;\n    var vowel_found36\
    \ = false;\n    var vowel_found37 = false;\n    var vowel_found38 = false;\n \
    \   var vowel_found39 = false;\n    var vowel_found40 = false;\n    var vowel_found41\
    \ = false;\n    var vowel_found42 = false;\n    var vowel_found43 = false;\n \
    \   var vowel_found44 = false;\n    var vowel_found45 = false;\n    var vowel_found46\
    \ = false;\n    var vowel_found47 = false;\n    var vowel_found48 = false;\n \
    \   var vowel_found49 = false;\n    var vowel_found50 = false;\n    var vowel_found51\
    \ = false;\n    var vowel_found52 = false;\n    var vowel_found53 = false;\n \
    \   var vowel_found54 = false;\n    var vowel_found55 = false;\n    var vowel_found56\
    \ = false;\n    var vowel_found57 = false;\n    var vowel_found58 = false;\n \
    \   var vowel_found59 = false;\n    var vowel_found60 = false;\n    var vowel_found61\
    \ = false;\n    var vowel_found62 = false;\n    var vowel_found63 = false;\n \
    \   var vowel_found64 = false;\n    var vowel_found65 = false;\n    var vowel_found66\
    \ = false;\n    var vowel_found67 = false;\n    var vowel_found68 = false;\n \
    \   var vowel_found69\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgi_55hfi.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_left_to_right = vowel_count - 4;\n    let vowel_count_from_right_to_left\
    \ = vowel_count - 5;\n    let vowel_count_from_middle_to_left = vowel_count -\
    \ 6;\n    let vowel_count_from_left_to_middle = vowel_count - 7;\n    let vowel_count_from_right_to_middle\
    \ = vowel_count - 8;\n    let vowel_count_from_middle_to_right = vowel_count -\
    \ 9;\n    let vowel_count_from_left_to_right_to_middle = vowel_count - 10;\n \
    \   let vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n    let\
    \ vowel_count_from_middle_to_left_to_right = vowel_count - 12;\n    let vowel_count_from_left_to_right_to_middle_to_left\
    \ = vowel_count - 13;\n    let vowel_count_from_right_to_left_to_middle_to_right\
    \ = vowel_count - 14;\n    let vowel_count_from_middle_to_left_to_right_to_middle\
    \ = vowel_count - 15;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowel_count - 16;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right\
    \ = vowel_count - 17;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowel_count - 18;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 19;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 20;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 21;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowel_count - 22;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 23;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 24;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 25;\n    let \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj_1s4zz6.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_found = 0;\n    var vowels_found_index = 0;\n    var vowels_found_index2\
    \ = 0;\n    var vowels_found_index3 = 0;\n    var vowels_found_index4 = 0;\n \
    \   var vowels_found_index5 = 0;\n    var vowels_found_index6 = 0;\n    var vowels_found_index7\
    \ = 0;\n    var vowels_found_index8 = 0;\n    var vowels_found_index9 = 0;\n \
    \   var vowels_found_index10 = 0;\n    var vowels_found_index11 = 0;\n    var\
    \ vowels_found_index12 = 0;\n    var vowels_found_index13 = 0;\n    var vowels_found_index14\
    \ = 0;\n    var vowels_found_index15 = 0;\n    var vowels_found_index16 = 0;\n\
    \    var vowels_found_index17 = 0;\n    var vowels_found_index18 = 0;\n    var\
    \ vowels_found_index19 = 0;\n    var vowels_found_index20 = 0;\n    var vowels_found_index21\
    \ = 0;\n    var vowels_found_index22 = 0;\n    var vowels_found_index23 = 0;\n\
    \    var vowels_found_index24 = 0;\n    var vowels_found_index25 = 0;\n    var\
    \ vowels_found_index26 = 0;\n    var vowels_found_index27 = 0;\n    var vowels_found_index28\
    \ = 0;\n    var vowels_found_index29 = 0;\n    var vowels_found_index30 = 0;\n\
    \    var vowels_found_index31 = 0;\n    var vowels_found_index32 = 0;\n    var\
    \ vowels_found_index33 = 0;\n    var vowels_found_index34 = 0;\n    var vowels_found_index35\
    \ = 0;\n    var vowels_found_index36 = 0;\n    var vowels_found_index37 = 0;\n\
    \    var vowels_found_index38 = 0;\n    var vowels_found_index39 = 0;\n    var\
    \ vowels_found_index40 = 0;\n    var vowels_found_index41 = 0;\n    var vowels_found_index42\
    \ = 0;\n    var vowels_found_index43 = 0;\n    var vowels_found_index44 = 0;\n\
    \    var vowels_found_index45 = 0;\n    var vowels_found_index46 = 0;\n    var\
    \ vowels_found_index47 = 0;\n    var vowels_found_index48 = 0;\n    var vowels_found_index49\
    \ = 0;\n    var vowels_found_index50 = 0;\n    var vowels_found_index51 = 0;\n\
    \    var vowels_found_index52 = 0;\n    var vowels_found_index53 = 0;\n    var\
    \ vowels_found_index54 = 0;\n    var vowels_found_index55 = 0;\n    var vowels_found_index56\
    \ = 0;\n    var vowels_found_index57 = 0;\n    var vowels_found_index58 = 0;\n\
    \    var vowels_found_index59 = 0;\n    var vowels_found_index60 = 0;\n    var\
    \ vowels_found_index61 = 0;\n    var vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphiloxl1a.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = vowels_count - 1;\n\tlet vowels_count_from_left\
    \ = vowels_count - 2;\n\tlet vowels_count_from_middle = vowels_count - 3;\n\t\
    let vowels_count_from_middle2 = vowels_count - 4;\n\tlet vowels_count_from_middle3\
    \ = vowels_count - 5;\n\tlet vowels_count_from_middle4 = vowels_count - 6;\n\t\
    let vowels_count_from_middle5 = vowels_count - 7;\n\tlet vowels_count_from_middle6\
    \ = vowels_count - 8;\n\tlet vowels_count_from_middle7 = vowels_count - 9;\n\t\
    let vowels_count_from_middle8 = vowels_count - 10;\n\tlet vowels_count_from_middle9\
    \ = vowels_count - 11;\n\tlet vowels_count_from_middle10 = vowels_count - 12;\n\
    \tlet vowels_count_from_middle11 = vowels_count - 13;\n\tlet vowels_count_from_middle12\
    \ = vowels_count - 14;\n\tlet vowels_count_from_middle13 = vowels_count - 15;\n\
    \tlet vowels_count_from_middle14 = vowels_count - 16;\n\tlet vowels_count_from_middle15\
    \ = vowels_count - 17;\n\tlet vowels_count_from_middle16 = vowels_count - 18;\n\
    \tlet vowels_count_from_middle17 = vowels_count - 19;\n\tlet vowels_count_from_middle18\
    \ = vowels_count - 20;\n\tlet vowels_count_from_middle19 = vowels_count - 21;\n\
    \tlet vowels_count_from_middle20 = vowels_count - 22;\n\tlet vowels_count_from_middle21\
    \ = vowels_count - 23;\n\tlet vowels_count_from_middle22 = vowels_count - 24;\n\
    \tlet vowels_count_from_middle23 = vowels_count - 25;\n\tlet vowels_count_from_middle24\
    \ = vowels_count - 26;\n\tlet vowels_count_from_middle25 = vowels_count - 27;\n\
    \tlet vowels_count_from_middle26 = vowels_count - 28;\n\tlet vowels_count_from_middle27\
    \ = vowels_count - 29;\n\tlet vowels_count_from_middle28 = vowels_count - 30;\n\
    \tlet vowels_count_from_middle29 = vowels_count - 31;\n\tlet vowels_count_from_middle30\
    \ = vowels_count - 32;\n\tlet vowels_count_from_middle31 = vowels_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpglhatn_e.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUp\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndUp = vowelsCount -\
    \ 6;\n    let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n   \
    \ let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDown\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDown\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 19;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 20\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwcbjs2e8.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_2\
    \ = 0;\n    let vowels_index_count_3 = 0;\n    let vowels_index_count_4 = 0;\n\
    \    let vowels_index_count_5 = 0;\n    let vowels_index_count_6 = 0;\n    let\
    \ vowels_index_count_7 = 0;\n    let vowels_index_count_8 = 0;\n    let vowels_index_count_9\
    \ = 0;\n    let vowels_index_count_10 = 0;\n    let vowels_index_count_11 = 0;\n\
    \    let vowels_index_count_12 = 0;\n    let vowels_index_count_13 = 0;\n    let\
    \ vowels_index_count_14 = 0;\n    let vowels_index_count_15 = 0;\n    let vowels_index_count_16\
    \ = 0;\n    let vowels_index_count_17 = 0;\n    let vowels_index_count_18 = 0;\n\
    \    let vowels_index_count_19 = 0;\n    let vowels_index_count_20 = 0;\n    let\
    \ vowels_index_count_21 = 0;\n    let vowels_index_count_22 = 0;\n    let vowels_index_count_23\
    \ = 0;\n    let vowels_index_count_24 = 0;\n    let vowels_index_count_25 = 0;\n\
    \    let vowels_index_count_26 = 0;\n    let vowels_index_count_27 = 0;\n    let\
    \ vowels_index_count_28 = 0;\n    let vowels_index_count_29 = 0;\n    let vowels_index_count_30\
    \ = 0;\n    let vowels_index_count_31 = 0;\n    let vowels_index_count_32 = 0;\n\
    \    let vowels_index_count_33 = 0;\n    let vowels_index_count_34 = 0;\n    let\
    \ vowels_index_count_35 = 0;\n    let vowels_index_count_36 = 0;\n    let vowels_index_count_37\
    \ = 0;\n    let vowels_index_count_38 = 0;\n    let vowels_index_count_39 = 0;\n\
    \    let vowels_index_count_40 = 0;\n    let vowels_index_count_41 = 0;\n    let\
    \ vowels_index_count_42 = 0;\n    let vowels_index_count_43 = 0;\n    let vowels_index_count_44\
    \ = 0;\n    let vowels_index_count_45 = 0;\n    let vowels_index_count_46 = 0;\n\
    \    let vowels_index_count_47 = 0;\n    let vowels_index_count_48 = 0;\n    let\
    \ vowels_index_count_49 = 0;\n    let vowels_index_count_50 = 0;\n    let vowels_index_count_51\
    \ = 0;\n    let vowels_index_count_52 = 0;\n    let vowels_index_count_53 = 0;\n\
    \    let vowels_index_count_54 = 0;\n    let vowels_index_count_55 = 0;\n    let\
    \ vowels_index_count_56 = 0;\n    let vowels_index_count_57 = 0;\n    let vowels_index_count_58\
    \ = 0;\n    let vowels_index_count_59 = 0;\n    let vowels_index_count_60 = 0;\n\
    \    let vowels_index_count_61 = 0;\n    let vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnoocmfw6.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowels.filter(v=>word.endsWith(v));\n    let\
    \ vowel_count_from_left = vowels.filter(v=>word.startsWith(v));\n    let vowel_count_from_both\
    \ = vowels.filter(v=>word.includes(v));\n    let vowel_count_from_both_unique\
    \ = vowels.filter(v=>word.includes(v)).filter((v,i,arr)=>arr.indexOf(v)===i);\n\
    \    let vowel_count_from_both_unique_sorted = vowels.filter(v=>word.includes(v)).sort((v,i,arr)=>arr.indexOf(v)===i).filter((v,i,arr)=>arr.indexOf(v)===i);\n\
    \    let vowel_count_from_both_unique_sorted_reverse = vowels.filter(v=>word.includes(v)).sort((v,i,arr)=>arr.indexOf(v)===i).filter((v,i,arr)=>arr.indexOf(v)===i).reverse();\n\
    \    let vowel_count_from_both_unique_sorted_reverse2 = vowels.filter(v=>word.includes(v)).sort((v,i,arr)=>arr.indexOf(v)===i).filter((v,i,arr)=>arr.indexOf(v)===i).reverse().reverse();\n\
    \    let vowel_count_from_both_unique_sorted_reverse3 = vowels.filter(v=>word.includes(v)).sort((v,i,arr)=>arr.indexOf(v)===i).filter((v,i,arr)=>arr.indexOf(v)===i).reverse().reverse().reverse();\n\
    \    let vowel_count_from_both_unique_sorted_reverse4 = vowels.filter(v=>word.includes(v)).sort((v,i,arr)=>arr.indexOf(v)===i).filter((v,i,arr)=>arr.indexOf(v)===i).reverse().reverse().reverse().reverse();\n\
    \    let vowel_count_from_both_unique_sorted_reverse5 = vowels.filter(v=>word.includes(v)).sort((v,i,arr)=>arr.indexOf(v)===i).filter((v,i,arr)=>arr.indexOf(v)===i).reverse().reverse().reverse().reverse().reverse();\n\
    \    let vowel_count_from_both_unique_sorted_reverse6 = vowels.filter(v=>word.includes(v)).sort((v,i,arr)=>arr.indexOf(v)===i).filter((v,i,arr)=>arr.indexOf(v)===i).reverse().reverse().reverse().reverse().reverse().reverse();\n\
    \    let vowel_count_from_both_unique_sorted_reverse7 = vowels.filter(v=>word.includes(v)).sort((v,i,arr)=>arr.indexOf(v)===i).filter((v,i,arr)=>arr.indexOf(v)===i).reverse\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi0dznm6l.js:42\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_found = 0;\n    var vowels_found_count = 0;\n    var vowels_found_index\
    \ = 0;\n    var vowels_found_index2 = 0;\n    var vowels_found_index3 = 0;\n \
    \   var vowels_found_index4 = 0;\n    var vowels_found_index5 = 0;\n    var vowels_found_index6\
    \ = 0;\n    var vowels_found_index7 = 0;\n    var vowels_found_index8 = 0;\n \
    \   var vowels_found_index9 = 0;\n    var vowels_found_index10 = 0;\n    var vowels_found_index11\
    \ = 0;\n    var vowels_found_index12 = 0;\n    var vowels_found_index13 = 0;\n\
    \    var vowels_found_index14 = 0;\n    var vowels_found_index15 = 0;\n    var\
    \ vowels_found_index16 = 0;\n    var vowels_found_index17 = 0;\n    var vowels_found_index18\
    \ = 0;\n    var vowels_found_index19 = 0;\n    var vowels_found_index20 = 0;\n\
    \    var vowels_found_index21 = 0;\n    var vowels_found_index22 = 0;\n    var\
    \ vowels_found_index23 = 0;\n    var vowels_found_index24 = 0;\n    var vowels_found_index25\
    \ = 0;\n    var vowels_found_index26 = 0;\n    var vowels_found_index27 = 0;\n\
    \    var vowels_found_index28 = 0;\n    var vowels_found_index29 = 0;\n    var\
    \ vowels_found_index30 = 0;\n    var vowels_found_index31 = 0;\n    var vowels_found_index32\
    \ = 0;\n    var vowels_found_index33 = 0;\n    var vowels_found_index34 = 0;\n\
    \    var vowels_found_index35 = 0;\n    var vowels_found_index36 = 0;\n    var\
    \ vowels_found_index37 = 0;\n    var vowels_found_index38 = 0;\n    var vowels_found_index39\
    \ = 0;\n    var vowels_found_index40 = 0;\n    var vowels_found_index41 = 0;\n\
    \    var vowels_found_index42 = 0;\n    var vowels_found_index43 = 0;\n    var\
    \ vowels_found_index44 = 0;\n    var vowels_found_index45 = 0;\n    var vowels_found_index46\
    \ = 0;\n    var vowels_found_index47 = 0;\n    var vowels_found_index48 = 0;\n\
    \    var vowels_found_index49 = 0;\n    var vowels_found_index50 = 0;\n    var\
    \ vowels_found_index51 = 0;\n    var vowels_found_index52 = 0;\n    var vowels_found_index53\
    \ = 0;\n    var vowels_found_index54 = 0;\n    var vowels_found_index55 = 0;\n\
    \    var vowels_found_index56 = 0;\n    var vowels_found_index57 = 0;\n    var\
    \ vowels_found_index58 = 0;\n    var vowels_found_index59 = 0;\n    var vowels_found_index60\
    \ = 0;\n    var vowels_found_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdn_gauqr.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = vowels.length;\n\
    \    var vowel_count_from_right = vowel_count - 1;\n    var vowel_count_from_left\
    \ = vowel_count - 2;\n    var vowel_count_from_middle = vowel_count - 3;\n   \
    \ var vowel_count_from_middle2 = vowel_count - 4;\n    var vowel_count_from_middle3\
    \ = vowel_count - 5;\n    var vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  var vowel_count_from_middle5 = vowel_count - 7;\n    var vowel_count_from_middle6\
    \ = vowel_count - 8;\n    var vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  var vowel_count_from_middle8 = vowel_count - 10;\n    var vowel_count_from_middle9\
    \ = vowel_count - 11;\n    var vowel_count_from_middle10 = vowel_count - 12;\n\
    \    var vowel_count_from_middle11 = vowel_count - 13;\n    var vowel_count_from_middle12\
    \ = vowel_count - 14;\n    var vowel_count_from_middle13 = vowel_count - 15;\n\
    \    var vowel_count_from_middle14 = vowel_count - 16;\n    var vowel_count_from_middle15\
    \ = vowel_count - 17;\n    var vowel_count_from_middle16 = vowel_count - 18;\n\
    \    var vowel_count_from_middle17 = vowel_count - 19;\n    var vowel_count_from_middle18\
    \ = vowel_count - 20;\n    var vowel_count_from_middle19 = vowel_count - 21;\n\
    \    var vowel_count_from_middle20 = vowel_count - 22;\n    var vowel_count_from_middle21\
    \ = vowel_count - 23;\n    var vowel_count_from_middle22 = vowel_count - 24;\n\
    \    var vowel_count_from_middle23 = vowel_count - 25;\n    var vowel_count_from_middle24\
    \ = vowel_count - 26;\n    var vowel_count_from_middle25 = vowel_count - 27;\n\
    \    var vowel_count_from_middle26 = vowel_count - 28;\n    var vowel_count_from_middle27\
    \ = vowel_count - 29;\n    var vowel_count_from_middle28 = vowel_count - 30;\n\
    \    var vowel_count_from_middle29 = vowel_count - 31;\n    var vowel_count_from_middle30\
    \ = vowel_count - 32;\n    var vowel_count_from_middle31 = vowel_count - 33;\n\
    \    var vowel_count_from_middle32 = vowel_count - 34;\n    var vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbp50kkjc.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpo13tqkkc.js:16:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpo13tqkkc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk7y4lltn.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle_to_right = vowels_count - 7;\n\
    \    let vowels_count_from_right_to_middle_to_left = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_middle_to_left_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb0kqwpzg.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_left_to_right = vowels_count - 4;\n    var vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    var vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    var vowels_count_from_left_to_middle = vowels_count - 7;\n    var\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    var vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    var vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n    var\
    \ vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n   \
    \ var vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    var vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpemw2y25u.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpod2fj8ft.js:16:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpod2fj8ft.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a', 'e', 'i', 'o', 'u'];\n\tlet vowelsCount = vowels.length;\n\
    \tlet vowelsIndex = [];\n\tlet vowelsIndexCount = vowelsIndex.length;\n\tlet vowelsIndexCountMax\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMin = vowelsIndexCount.length;\n\
    \tlet vowelsIndexCountMinMax = vowelsIndexCount.length;\n\tlet vowelsIndexCountMaxMin\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMin = vowelsIndexCount.length;\n\
    \tlet vowelsIndexCountMinMaxMinMax = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMin\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMax = vowelsIndexCount.length;\n\
    \tlet vowelsIndexCountMinMaxMinMaxMinMax = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMin\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMax =\
    \ vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsIndexCount.length;\n\tlet vowelsIndexCountMinMaxMinMaxMinMaxMin\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi44j2xnn.js:20\n\tlet vowelsIndexCountMinMaxMinMaxMinMax = vowelsIndexCount.length;\n\
    \t    ^\n\nSyntaxError: Identifier 'vowelsIndexCountMinMaxMinMaxMinMax' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_2\
    \ = 0;\n    var vowels_index_count_3 = 0;\n    var vowels_index_count_4 = 0;\n\
    \    var vowels_index_count_5 = 0;\n    var vowels_index_count_6 = 0;\n    var\
    \ vowels_index_count_7 = 0;\n    var vowels_index_count_8 = 0;\n    var vowels_index_count_9\
    \ = 0;\n    var vowels_index_count_10 = 0;\n    var vowels_index_count_11 = 0;\n\
    \    var vowels_index_count_12 = 0;\n    var vowels_index_count_13 = 0;\n    var\
    \ vowels_index_count_14 = 0;\n    var vowels_index_count_15 = 0;\n    var vowels_index_count_16\
    \ = 0;\n    var vowels_index_count_17 = 0;\n    var vowels_index_count_18 = 0;\n\
    \    var vowels_index_count_19 = 0;\n    var vowels_index_count_20 = 0;\n    var\
    \ vowels_index_count_21 = 0;\n    var vowels_index_count_22 = 0;\n    var vowels_index_count_23\
    \ = 0;\n    var vowels_index_count_24 = 0;\n    var vowels_index_count_25 = 0;\n\
    \    var vowels_index_count_26 = 0;\n    var vowels_index_count_27 = 0;\n    var\
    \ vowels_index_count_28 = 0;\n    var vowels_index_count_29 = 0;\n    var vowels_index_count_30\
    \ = 0;\n    var vowels_index_count_31 = 0;\n    var vowels_index_count_32 = 0;\n\
    \    var vowels_index_count_33 = 0;\n    var vowels_index_count_34 = 0;\n    var\
    \ vowels_index_count_35 = 0;\n    var vowels_index_count_36 = 0;\n    var vowels_index_count_37\
    \ = 0;\n    var vowels_index_count_38 = 0;\n    var vowels_index_count_39 = 0;\n\
    \    var vowels_index_count_40 = 0;\n    var vowels_index_count_41 = 0;\n    var\
    \ vowels_index_count_42 = 0;\n    var vowels_index_count_43 = 0;\n    var vowels_index_count_44\
    \ = 0;\n    var vowels_index_count_45 = 0;\n    var vowels_index_count_46 = 0;\n\
    \    var vowels_index_count_47 = 0;\n    var vowels_index_count_48 = 0;\n    var\
    \ vowels_index_count_49 = 0;\n    var vowels_index_count_50 = 0;\n    var vowels_index_count_51\
    \ = 0;\n    var vowels_index_count_52 = 0;\n    var vowels_index_count_53 = 0;\n\
    \    var vowels_index_count_54 = 0;\n    var vowels_index_count_55 = 0;\n    var\
    \ vowels_index_count_56 = 0;\n    var vowels_index_count_57 = 0;\n    var vowels_index_count_58\
    \ = 0;\n    var vowels_index_count_59 = 0;\n    var vowels_index_count_60 = 0;\n\
    \    var vowels_index_count_61 = 0;\n    var vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph_csdkf8.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf9t8riuf.js:33\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowel_count = vowels.length;\n\t\
    let vowel_count_from_right = vowel_count - 1;\n\tlet vowel_count_from_left = vowel_count\
    \ - 2;\n\tlet vowel_count_from_middle = vowel_count - 3;\n\tlet vowel_count_from_left_to_right\
    \ = vowel_count_from_left - 1;\n\tlet vowel_count_from_right_to_left = vowel_count_from_right\
    \ - 1;\n\tlet vowel_count_from_middle_to_right = vowel_count_from_middle - 1;\n\
    \tlet vowel_count_from_left_to_middle_to_right = vowel_count_from_left_to_right\
    \ - 1;\n\tlet vowel_count_from_right_to_middle_to_left = vowel_count_from_right_to_left\
    \ - 1;\n\tlet vowel_count_from_middle_to_left_to_right = vowel_count_from_middle_to_right\
    \ - 1;\n\tlet vowel_count_from_left_to_right_to_middle = vowel_count_from_left_to_middle_to_right\
    \ - 1;\n\tlet vowel_count_from_right_to_middle_to_left = vowel_count_from_right_to_middle_to_left\
    \ - 1;\n\tlet vowel_count_from_middle_to_right_to_left = vowel_count_from_middle_to_left_to_right\
    \ - 1;\n\tlet vowel_count_from_left_to_middle_to_right_to_middle = vowel_count_from_left_to_right_to_middle\
    \ - 1;\n\tlet vowel_count_from_right_to_middle_to_left_to_middle = vowel_count_from_right_to_middle_to_left_to_middle\
    \ - 1;\n\tlet vowel_count_from_middle_to_right_to_left_to_middle = vowel_count_from_middle_to_right_to_left_to_middle\
    \ - 1;\n\tlet vowel_count_from_left_to_right_to_middle_to_right_to_left_to_middle\
    \ = vowel_count_from_left_to_middle_to_right_to_left_to_middle - 1;\n\tlet vowel_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowel_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ - 1;\n\tlet vowel_count_from_middle_to_right_to_left_to_right_to_middle_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowel_count_from_middle_to_right_to_left_to_right_to_middle_to_left_to_middle_to_right_to_left_to_middle\
    \ - 1;\n\tlet vowel_count_from_right_to_left_to_middle_to_right_to_middle_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoko11m9y.js:20\n\tlet vowel_count_from_right_to_middle_to_left\
    \ = vowel_count_from_right_to_middle_to_left - 1;\n\t    ^\n\nSyntaxError: Identifier\
    \ 'vowel_count_from_right_to_middle_to_left' has already been declared\n    at\
    \ Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgd7fy8et.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 2;\n    var vowels_count_from_middle = vowels_count - 3;\n\
    \    var vowels_count_from_middle2 = vowels_count - 4;\n    var vowels_count_from_middle3\
    \ = vowels_count - 5;\n    var vowels_count_from_middle4 = vowels_count - 6;\n\
    \    var vowels_count_from_middle5 = vowels_count - 7;\n    var vowels_count_from_middle6\
    \ = vowels_count - 8;\n    var vowels_count_from_middle7 = vowels_count - 9;\n\
    \    var vowels_count_from_middle8 = vowels_count - 10;\n    var vowels_count_from_middle9\
    \ = vowels_count - 11;\n    var vowels_count_from_middle10 = vowels_count - 12;\n\
    \    var vowels_count_from_middle11 = vowels_count - 13;\n    var vowels_count_from_middle12\
    \ = vowels_count - 14;\n    var vowels_count_from_middle13 = vowels_count - 15;\n\
    \    var vowels_count_from_middle14 = vowels_count - 16;\n    var vowels_count_from_middle15\
    \ = vowels_count - 17;\n    var vowels_count_from_middle16 = vowels_count - 18;\n\
    \    var vowels_count_from_middle17 = vowels_count - 19;\n    var vowels_count_from_middle18\
    \ = vowels_count - 20;\n    var vowels_count_from_middle19 = vowels_count - 21;\n\
    \    var vowels_count_from_middle20 = vowels_count - 22;\n    var vowels_count_from_middle21\
    \ = vowels_count - 23;\n    var vowels_count_from_middle22 = vowels_count - 24;\n\
    \    var vowels_count_from_middle23 = vowels_count - 25;\n    var vowels_count_from_middle24\
    \ = vowels_count - 26;\n    var vowels_count_from_middle25 = vowels_count - 27;\n\
    \    var vowels_count_from_middle26 = vowels_count - 28;\n    var vowels_count_from_middle27\
    \ = vowels_count - 29;\n    var vowels_count_from_middle28 = vowels_count - 30;\n\
    \    var vowels_count_from_middle29 = vowels_count - 31;\n    var vowels_count_from_middle30\
    \ = vowels_count - 32;\n    var vowels_count_from_middle31 = vowels_count - 33;\n\
    \    var vowels_count_from_middle32 = vowels_count - 34;\n    var vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2lzdnbb1.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpajqhv5lw.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowels.filter(function(v){\n        return word.slice(-1)\
    \ == v;\n    }).length;\n    let vowel_count_from_left = vowels.filter(function(v){\n\
    \        return word.slice(-2) == v;\n    }).length;\n    let vowel_count_from_middle\
    \ = vowels.filter(function(v){\n        return word.slice(-3) == v;\n    }).length;\n\
    \    let vowel_count_from_middle2 = vowels.filter(function(v){\n        return\
    \ word.slice(-4) == v;\n    }).length;\n    let vowel_count_from_middle3 = vowels.filter(function(v){\n\
    \        return word.slice(-5) == v;\n    }).length;\n    let vowel_count_from_middle4\
    \ = vowels.filter(function(v){\n        return word.slice(-6) == v;\n    }).length;\n\
    \    let vowel_count_from_middle5 = vowels.filter(function(v){\n        return\
    \ word.slice(-7) == v;\n    }).length;\n    let vowel_count_from_middle6 = vowels.filter(function(v){\n\
    \        return word.slice(-8) == v;\n    }).length;\n    let vowel_count_from_middle7\
    \ = vowels.filter(function(v){\n        return word.slice(-9) == v;\n    }).length;\n\
    \    let vowel_count_from_middle8 = vowels.filter(function(v){\n        return\
    \ word.slice(-10) == v;\n    }).length;\n    let vowel_count_from_middle9 = vowels.filter(function(v){\n\
    \        return word.slice(-11) == v;\n    }).length;\n    let vowel_count_from_middle10\
    \ = vowels.filter(function(v){\n        return word.slice(-12) == v;\n    }).length;\n\
    \    let vowel_count_from_middle11 = vowels.filter(function(v){\n        return\
    \ word.slice(-13) == v;\n    }).length;\n    let vowel_count_from_middle12 = vowels.filter(function(v){\n\
    \        return word.slice(-14) == v;\n    }).length;\n    let vowel_count_from_middle13\
    \ = vowels.filter(function(v){\n        return word.slice(-15) == v;\n    }).length;\n\
    \    let vowel_count_from_middle14 = vowels.filter(function(v){\n        return\
    \ word.slice(-16) == v;\n    }).length;\n    let vowel_count_from_middle15 = vowels.filter(function(v){\n\
    \        return word.slice(-17) == v;\n    }).length;\n    let vowel_count_from_middle16\
    \ = vowels.filter(function(v){\n        return word.slice(-18) == v;\n    }).length;\n\
    \    let vowel_count_from_middle17 = vowels.filter(function(v){\n        return\
    \ word.slice(-19) == v;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsv9e0wkr.js:86\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = [];\n    let vowelsIndexCountSum\
    \ = 0;\n    let vowelsIndexSum = 0;\n    let vowelsIndexSumCount = 0;\n    let\
    \ vowelsIndexSumCountSum = 0;\n    let vowelsIndexSumCountSumCount = 0;\n    let\
    \ vowelsIndexSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSum = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSum = 0;\n\
    \    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n  \
    \  let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n \
    \   let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount =\
    \ 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    let \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbqedjcwn.js:29\n    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk8o3oeid.js:33\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    \n}\nget_closest_vowel(\"hello\"); // returns \"o\"\nget_closest_vowel(\"\
    hEllo\"); // returns \"\"\nget_closest_vowel(\"hElloWorld\"); // returns \"\"\n\
    get_closest_vowel(\"hElloWorld!\"); // returns \"\"\nget_closest_vowel(\"hElloWorld!?\"\
    ); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!\"); // returns \"\"\nget_closest_vowel(\"\
    hElloWorld!?!?\"); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!\"); //\
    \ returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!\"); // returns \"\"\nget_closest_vowel(\"\
    hElloWorld!?!?!?!?!\"); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!\"\
    ); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!\"); // returns\
    \ \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!\"); // returns \"\"\nget_closest_vowel(\"\
    hElloWorld!?!?!?!?!?!?!?!?!\"); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!\"\
    ); // returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!\"); //\
    \ returns \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!\"); // returns\
    \ \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!\"); // returns\
    \ \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!?!\"); // returns\
    \ \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!?!?!?!?!?!?!?!?!?!\"); // returns\
    \ \"\"\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmporjdekix.js:30\nget_closest_vowel(\"hElloWorld!?!?!?!?!?!\n   \
    \               ^^^^^^^^^^^^^^^^^^^^^^\n\nSyntaxError: Invalid or unexpected token\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_found\
    \ = false;\n    var vowel_position = 0;\n    for(var i = word.length-1; i >= 0;\
    \ i--){\n        if(vowels.indexOf(word[i]) >= 0){\n            vowel_count++;\n\
    \            if(vowel_count > 1){\n                vowel_found = true;\n     \
    \           vowel_position = i;\n            }\n        }\n    }\n    if(!vowel_found){\n\
    \        return \"\";\n    }\n    var vowel_found = false;\n    for(var i = word.length-1;\
    \ i >= 0; i--){\n        if(vowels.indexOf(word[i]) >= 0){\n            vowel_count--;\n\
    \            if(vowel_count < 1){\n                vowel_found = true;\n     \
    \           vowel_position = i;\n            }\n        }\n    }\n    if(!vowel_found){\n\
    \        return \"\";\n    }\n    return word.substring(vowel_position+1, word.length-1);\n\
    }\nvar word = \"apple\";\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'gur'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpegzruusg.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpegzruusg.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'gur',\n \
    \ expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
