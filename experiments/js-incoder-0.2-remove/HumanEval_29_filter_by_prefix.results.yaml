name: HumanEval_29_filter_by_prefix
language: js
results:
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered = [];\n\
    \  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n   \
    \   filtered.push(string);\n    }\n  });\n  return filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered_strings.push(string);\n        }\n    });\n    return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered = [];\n\
    \  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(prefix) ===\
    \ 0){\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered_strings.push(string);\n        }\n    });\n    return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered_strings.push(string);\n        }\n    });\n    return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix) ===\
    \ 0){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered_strings.push(string);\n        }\n    });\n    return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.indexOf(prefix) ===\
    \ 0){\n            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered_strings.push(string);\n        }\n    });\n    return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n  var filtered_strings\
    \ = [];\n  strings.forEach(function(string){\n    if(string.startsWith(prefix)){\n\
    \      filtered_strings.push(string);\n    }\n  });\n  return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered_strings.push(string);\n        }\n    });\n    return filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered_strings\
    \ = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
