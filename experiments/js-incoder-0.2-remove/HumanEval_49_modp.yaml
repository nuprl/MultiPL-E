name: HumanEval_49_modp
language: js
prompt: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n, p){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n\
    }\n", "  var i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n    if(k <= 0)\
    \ return 0;\n    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n  }\n  return r;\n\
    }\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? p.c.slice(k,\
    \ p.s.length).mod(p.c) : new BigInteger();\n  var t = new BigInteger();\n  if(p.isEven()){\n\
    \    t.c = k;\n    t.s = -p.s;\n  }\n  else{\n    t.c = p.c;\n    t.s = p.s;\n\
    \  }\n  return t.mod(r);\n}\n", "  var i = p.bitLength(), k, r = n%p[0], m = 1;\n\
    \  for(k=1;k<i;k++) m = (m*r+p[k])%p;\n  return m>0 ? m : n<0 ? 0 : p;\n}\n",
  "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32;\
    \ ++i){\n    if((k = r*256 + r2&0xff)>255){\n      k = (k-256) & 0xFF;\n    }\n\
    \    r = (r << 8) | (k & 0xff);\n    r2 = (r2 << 8) | (k>>8 & 0xff);\n  }\n  return\
    \ r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)*k+p)\
    \ % p;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n\
    \  for(; i < 32; ++i){\n    if((k = r*p[i] + r2) > 0){\n      r += ((k+p[i])%p[i])*p[i];\n\
    \      r2 = (p[i]*p[i] + k)%p[i];\n    }\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(;\
    \ i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n /= p;\n \
    \ }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return\
    \ ((n*p+0.5))%(k+1);\n}\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s\
    \ < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var front = p.c;\n\
    \  var back = p.c;\n  var len = k.length;\n  while(len--){\n    front[len] = k[len];\n\
    \  }\n  front[len] = 0x80000000;\n  p.c = front;\n  while(len--){\n    back[len]\
    \ = k[len];\n  }\n  back[len] = 0x80000000;\n  p.c = back;\n  while(--zeros >\
    \ 0){\n    p.c[0]++;\n    p.c[0]--;\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)*k+p) % p;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2\
    \ = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n    if((k = r*256 + r2&0xff)>255){\n\
    \      k = (k-256) & 0xFF;\n    }\n    r = (r << 8) | (k & 0xff);\n    r2 = (r2\
    \ << 8) | (k >>> 8);\n  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r =\
    \ n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n    if((k = r*256 + r2^(p[i]>>(32-i)))>n)\n\
    \      return n;\n    r = (r*256 + p[i])%n;\n  }\n  return r;\n}\n", "  var i\
    \ = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n\
    \    if((k = r*256 + r2^(p[i]>>(32-i))) & 0xffffffff) r += ((k&0xffffffff)>>(32-i))*p[i];\n\
    \    else if(r) r += p[i];\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)*k+p) % p;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(;\
    \ i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n\
    \  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return\
    \ ((n*p+k)%p)|0;\n}\n", "  var i = p.bitLength(), k, r = nbv(1), z;\n  for(; i--;){\n\
    \    k = p.shiftRight(i);\n    if((k & 1) != 0) z = !z;\n    if(z) r = r.multiply(get2(n));\n\
    \    if(k >= p.bitLength()) break;\n  }\n  return r;\n}\n", "  var k = n.bitLength();\n\
    \  if (k <= p)\n    return n;\n  else\n    return p.modPowInt(n - k, p);\n}\n",
  "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%(k+1);\n}\n",
  "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? n.c : p.c;\n  var zeros\
    \ = n.c.length - p.c.length;\n  var front = p.p.slice(0, p.c.length);\n  var back\
    \ = p.p.slice(p.c.length);\n  var i = n.i;\n  var p = n.c;\n  var p = p.c;\n \
    \ var odd = n.s ? (n.i < p.i ? n : p).i & 1 : 1;\n  var rr = 0, ri = p.i;\n  for(;\
    \ i !== 0; i = (i-r)&1){\n    rr += ri;\n    ri += p.i;\n  }\n  for(; i !== 0;\
    \ i = (i-r)>>1){\n    rr += ((p.i + (p.s[p.s.length-1]>>1)) > i ? p : n).i;\n\
    \    ri += p.i;\n  }\n  if(rr !== 0){\n    var rrbits = bits2int(rr, p.prec);\n\
    \    var kk = kk.slice();\n    var kkbits = bits2int(kk, p.prec);\n    var off\
    \ = p.len - k.length;\n    while(kkbits > 0){\n      kk.unshift(0);\n      kkbits\
    \ -= 1;\n    }\n    if((off & 0x1) === 0){\n      kk.unshift(0);\n      off++;\n\
    \    }\n    kk.reverse();\n    kk = kk.concat(p.p.subarray(p.off, off));\n   \
    \ p.off = off;\n    p.len = off;\n    p.c = kk;\n    p.m = 1 << p.prec;\n    if((p.len\
    \ & 0x1fff) === 0){\n      p.m <<= 8 - (p.len + 1);\n      p.s |= q;\n    }\n\
    \    p.len += 1;\n    p.i -= 1;\n  }\n  if(p.len > 0){\n    p.len -= 1;\n    p.i\
    \ -= 1;\n    p.c[0] = p.c[0];\n    p.c[1] = p.c[1];\n    p.c[2] = p.c[2];\n  \
    \  p.c[3] = p.c[3];\n    p.c[4] = p.c[4];\n    p.c[5] = p.c[5];\n    p.c[6] =\
    \ p.c[6];\n    p.c[7] = p.c[7];\n  }\n  p.m = (p.m << p.prec) & p.m;\n  p.s =\
    \ p.s & p.m;\n  p.prec = p.prec + 1;\n  if((p.len & 0x1fff) === 0){\n    p.m <<=\
    \ 8 - (p.len + 1);\n    p.s |= q;\n  }\n  if(p.len > 0){\n    p.len -= 1;\n  \
    \  p.i -= 1;\n    p.c", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n\
    \  for(; i < 32; ++i){\n    if((k = r*256 + r2^(p[0]&((r<<3)|p[1])))>255){\n \
    \     r = k;\n    }else{\n      r2 = (r&((1<<i)|p[1]))<<1;\n      r += (r&((1<<32)|p[0]))<<(32-i);\n\
    \    }\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)**k) % (p*k+n);\n}\n", "  var i = p.bitLength(), k, r = n%p;\n\
    \  for(; i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n =\
    \ Math.floor(n/p);\n  }\n  return r;\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var\
    \ wnd = 0;\n  for(var i = p.s.length - 1; i >= 0; --i){\n    var a = p.s[i] -\
    \ k;\n    if(a){\n      for(var j = 1; (j < zeros) && a > BigInteger.Integer.ZERO[j];\
    \ ++j){\n        a = a % BigInteger.Integer.TWO_POW[j];\n      }\n      if(a >\
    \ BigInteger.Integer.ZERO[j]){\n        a = a + (BigInteger.Integer.TWO_POW[j]\
    \ % BigInteger.Integer.TWO_POW[j]);\n      }\n      r = r.slice(i);\n      r[i\
    \ + p.s.length] = a < 0 ? 0 : a;\n      ++i;\n      wnd = wnd + a | 0;\n    }\n\
    \  }\n  return new BigInteger(r, wnd);\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = (k.length < p.c.length);\n  while\
    \ (k.cmpn(0) !== 0){\n    k = k.redSqr();\n  }\n  r = r.redIAdd(r);\n  while (k.cmpn(0)\
    \ !== 0){\n    k = k.redSqr();\n  }\n  var r = n;\n  while (r.cmp(p.md) === 0){\n\
    \    r = r.redSqr();\n  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r =\
    \ n%p[0], d = p.subtract(BigInteger.ONE);\n  for(; i; i--){\n    if(p.testBit(i-1)){\n\
    \      dMultiply(d);\n      dAddOffset(BigInteger.ONE, i);\n    }\n  }\n  if(d.compareTo(n)\
    \ >= 0){\n    dMultiply(d);\n    dAddOffset(BigInteger.ONE, i);\n  }\n  return\
    \ r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+2*k-1)\
    \ % p)|0;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n  \
    \  if(k <= 0) return 0;\n    r = r*p + (n%p<p ? p : n%p);\n  }\n  return r;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%p;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(2,\
    \ k);\n}\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? n.c :\
    \ p.c;\n  var zeros = n.c.length - p.c.length;\n  var wnd = 0;\n  for(var i =\
    \ p.s.length - 1; i >= 0; --i){\n    var a = p.s[i] - k;\n    if(a){\n      if(++wnd\
    \ == 4){\n        r[i + 3] = r[i + 4] % p.s[i + 1];\n        wnd = 1;\n      }\n\
    \      r[i] = r[i] % p.s[i];\n    }\n    else{\n      r[i - zeros + 3] = r[i -\
    \ zeros + 4] % p.s[i + 1];\n      wnd = 1;\n    }\n  }\n  return r;\n}\n", " \
    \ var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k) % (p*k);\n\
    }\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(;\
    \ i < 32; ++i){\n    if((k = r*256 + r2^(p[i]>>(32-i)))>n)\n      return n;\n\
    \    r = (r*256 + p[i])%n;\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+2*k-1) % p)|0;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)**k) % (p*k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var i = p.bitLength(), k, r =\
    \ n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n    if((k = r*256 + r2^(p[0]&((r<<3)|p[1]))))\
    \ r = k;\n    else return r;\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var i = p.bitLength(), k, r =\
    \ n%p[0], d = p.subtract(BigInteger.ONE);\n  for(; i; i--){\n    if(p.testBit(i-1)){\n\
    \      dMultiply(d);\n      dAddOffset(BigInteger.ONE, i);\n    }\n  }\n  if(d.compareTo(n)\
    \ >= 0){\n    dMultiply(d);\n    dAddOffset(BigInteger.ONE, i);\n  }\n  return\
    \ r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(2,\
    \ k);\n}\n", "  var i = p.bitLength(), k, r = nbv(1), z;\n  for(; i; r += p){\n\
    \    for(k = i - 1; k; k--){ r = (r % p) + p; }\n    z = (r + p.bitLength()) %\
    \ p;\n    z = z >= p ? z - p : z;\n    r.s = z < 0 ? r.s : r; // Avoid \"-0\"\
    \ propagation.\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(p,k);\n}\n", "  var i = p.bitLength(), k, r = n%p;\n\
    \  for(; i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n =\
    \ Math.floor(n/p);\n  }\n  return r;\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var\
    \ wnd = new Array(p.c.length);\n  for(var i = 0; i < wnd.length; i++) wnd[i] =\
    \ 0;\n  while(r != 0){\n    if(r.compareTo(p) == -1) ++r;\n    else if(r.compareTo(p)\
    \ == 0) return zeros;\n    ++r;\n  }\n  if(compareAbs(k, p.s) < 0 || compareAbs(k,\
    \ p.c) < 0)\n    k = n.subn(1);\n  else if(!n.isEven()) k = p.subn(1);\n  return\
    \ k.fromRed().subn(1 - s);\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(;\
    \ i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n\
    \  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n\
    \  for(; i < 32; ++i){\n    if((k = r*256 + r2&0xff)>255){\n      k = (k-256)\
    \ & 0xFF;\n    }\n    r2 = (r2*256 + k)&0xff;\n  }\n  return r;\n}\n", "  var\
    \ k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n}\n", "  var\
    \ k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(;\
    \ i < 32; ++i){\n    if((k = r*256 + r2^(p[i]>>(32-i))) & 0xffffffff) r += ((k&0xffffffff)^p[i])&k;\n\
    \    else if(r) r += p[i];\n  }\n  return r;\n}\n", "  var i = p.bitLength(),\
    \ k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n    if((k = r*256\
    \ + r2^(p[0]&((r<<3)|p[1])))>255){\n      r = k;\n    }else{\n      r += p[0]&((r<<3)|p[1]);\n\
    \    }\n    r2 = (r>>8)%256;\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(p,k);\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var\
    \ wnd = new Array(p.c.length);\n  for(var i = 0; i < p.c.length; i++){\n    wnd[i]\
    \ = p.c[i] | 0;\n  }\n  for(;i < zeros; i++){\n    wnd[i] = 0;\n  }\n  r.copy(wnd,\
    \ 0, zeros);\n  while(!wnd[len]){\n    wnd[len] = 0;\n  }\n  return wnd;\n}\n",
  "  var i = p.bitLength(), k, r = n%p[0], d = p.subtract(BigInteger.ONE);\n  for(;\
    \ i; i--){\n    if(p.testBit(i-1)){\n      dMultiply(d);\n      dAddOffset(k,\
    \ i-3);\n    }\n    k = rdMultiply(k, p);\n  }\n  return r;\n}\n", "  var k =\
    \ Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)*k+p) % p;\n}\n", "  var\
    \ k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/(p*Math.pow(2,k));\
    \ \n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(;\
    \ i < 32; ++i){\n    if((k = r*256 + r2^(p[0]&((r<<3)|p[1])))>255){\n      r =\
    \ k;\n    }else{\n      r2 = (r&((1<<i)|p[1]))<<1;\n    }\n  }\n  return r;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k) %\
    \ (p*k+n);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%(k+1);\n\
    }\n", "  var i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n    if(k <= 0)\
    \ return 0;\n    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n  }\n  return r;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k)\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var i = p.bitLength(), k, r = n%p[0], m = 1;\n  for(k=1;k<i;k++) m =\
    \ (m*r+p[k])%p[0];\n  return m>0 ? m : n<0 ? 0 : p;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/(p*Math.pow(2,k)); \n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var\
    \ wnd = new Array(p.c.length);\n  for(var i = 0; i < p.c.length; i++) wnd[i] =\
    \ p.c[i] | 0;\n  while(r.cmpn(0) !== 0){\n    r.i--;\n    var t = r;\n    r =\
    \ r.u;\n    if(t.cmpn(0) !== 0){\n      if(zeros && t.u % 2){\n        r.rShiftTo(zeros,\
    \ k);\n      }else if(t.compareTo(r) !== 0){\n        t.subTo(w, r);\n      }\n\
    \      for(var j = 0; j <= i; j++){\n        wnd[j] = t.c[j] ^ r.c[j];\n     \
    \ }\n      r.iAdd(w);\n    }\n  }\n  return k;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(p,k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)*k+p) % p;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)**k) % (p*k);\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var\
    \ wnd = new Array(p.c.length);\n  for(var i = 0; i < p.c.length; i++) wnd[i] =\
    \ p.c[i] | 0;\n  while(r.cmpn(0) !== 0){\n    r.iadd(p);\n    r.ineg();\n  }\n\
    \  var res = r.iadd(new BigBigInt(ONE));\n  if(p.subtract(res).c.length > BigInteger.ONE.bitLength()){\n\
    \    res = res.add(p);\n  }\n  return res._forceRed(zeros);\n}\n", "  var k =\
    \ n.bitLength();\n  var r = n; // remainder\n  if(k <= p) return r;\n  var p1\
    \ = BigInteger.ONE;\n  var i = 0;\n  for(;;){\n    if(p.bitLength() > i){\n  \
    \    r = r.multiply(p1);\n    }\n    if(!r.isEven()){\n      p1 = p1.multiply(p1);\n\
    \    }\n    if(++i >= k){\n      break;\n    }\n    r = r.shiftLeft(1);\n  }\n\
    \  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)*k+p) %\
    \ p;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], d = p.subtract(BigInteger.ONE);\n\
    \  for(; i; i--){\n    if(p.testBit(i-1)){\n      dMultiply(d);\n      dAddOffset(k,\
    \ i-4);\n    }\n    k = rdMultiply(k, p);\n  }\n  return r;\n}\n", "  var i =\
    \ p.bitLength(), k, r = n%p[0], d = p.subtract(BigInteger.ONE);\n  for(; i; i--){\n\
    \    if(p.testBit(i)){\n      dMultiply(d);\n      dAddOffset(k, i);\n    }\n\
    \  }\n  if(d.compareTo(n) < 0){\n    dMultiply(BigInteger.ONE);\n    dAddOffset(k,\
    \ p.bitLength());\n  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n\
    \  for(; i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n =\
    \ Math.floor(n/p);\n  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r = nbv(1),\
    \ z;\n  for(; i--;){\n    k = p.shiftRight(i);\n    if((k & 1) != 0) z = !z;\n\
    \    if(z) r = r.multiply(get2(n));\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)**k) % (p*k+n);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))%(k+1);\n}\n", "  var k = n.c.slice(0, p.c.length);\n  var\
    \ r = n.s < p.s ? n.c : p.c;\n  var zeros = (k.length < p.c.length);\n  while\
    \ (zeros && k.length < p.c.length) k = '0' + k;\n  return {\n    ctor: 'Mod',\n\
    \    modulus: n,\n    k: k,\n    rem: r,\n    s: n.s - n.c % p.s\n  };\n}\n",
  "  var i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n    if(k <= 0) return\
    \ r;\n    r = (r*r) % p;\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var i = p.bitLength(), k, r =\
    \ n%p;\n  for(; i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n\
    \    n = Math.floor(n/p);\n  }\n  return r;\n}\n", "  var i = p.bitLength(), k,\
    \ r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n    if((k = r*256\
    \ + r2^(p[0]&((r<<3)|p[1])))>255){\n      r = k;\n    }else{\n      r2 = (r&((1<<i)|p[1]))<<1;\n\
    \      r += ((i&1)?1:0)<<(k>>7);\n      r2 = (r2&((1<<i)|p[1]))<<1;\n      r +=\
    \ ((i&1)?1:0)<<(k>>7);\n      r2 = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n\
    \      r2 = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n      r2\
    \ = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n      r2 = (r2&((1<<i)|p[1]))<<1;\n\
    \      r += ((i&1)?1:0)<<(k>>7);\n      r2 = (r2&((1<<i)|p[1]))<<1;\n      r +=\
    \ ((i&1)?1:0)<<(k>>7);\n      r2 = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n\
    \      r2 = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n      r2\
    \ = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n      r2 = (r2&((1<<i)|p[1]))<<1;\n\
    \      r += ((i&1)?1:0)<<(k>>7);\n      r2 = (r2&((1<<i)|p[1]))<<1;\n      r +=\
    \ ((i&1)?1:0)<<(k>>7);\n      r2 = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n\
    \      r2 = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n      r2\
    \ = (r2&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>7);\n      r", "  var\
    \ i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n    if(k <= 0) return 0;\n\
    \    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n  }\n  return r;\n}\n", " \
    \ var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%p;\n}\n",
  "  var i = p.bitLength(), k, r = nbv(1), z;\n  for(; i; r += p){\n    for(k = i\
    \ - 1; k; k--){ r = (r % p) + p; }\n    z = (r + p.bitLength()) % p;\n    z =\
    \ z >= p ? z - p : z;\n    r.rShiftTo(i, z);\n  }\n  return r;\n}\n", "  var k\
    \ = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)*k+p) % p;\n}\n", " \
    \ var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n}\n",
  "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? n.c : p.c;\n  var zeros\
    \ = n.c.length - p.c.length;\n  var wnd = new Array(p.c.length);\n  for(var i\
    \ = 0; i < p.c.length; i++){\n    var a = r[i] % p.c[i];\n    var wndIndex = i\
    \ + a.length - 1;\n    if(wndIndex >= 0){\n      if(zeros[wndIndex])\n       \
    \ wnd[wndIndex] = 0;\n      else\n        wnd[wndIndex] = a.length + wnd[wndIndex\
    \ - a.length];\n    }\n    else\n      wnd[wndIndex] = a.length;\n  }\n  return\
    \ wnd;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], d = p.subtract(BigInteger.ONE);\n\
    \  for(; i; i--){\n    if(p.testBit(i-1)){\n      dMultiply(d);\n      dAddOffset(k,\
    \ i-4);\n    }\n    k = rdMultiply(k, p);\n  }\n  return r;\n}\n", "  var k =\
    \ Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+2*k-1) % p)|0;\n}\n", " \
    \ var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32;\
    \ ++i){\n    if((k = r*p[i] + r2) > 0){\n      r += ((k+p[i])%p)[i];\n      r2\
    \ = (p[i]>>(32-(i+1)))%32;\n    }\n  }\n  return r;\n}\n", "  var k = n.c.slice(0,\
    \ p.c.length);\n  var r = n.s < p.s ? n.c : p.c;\n  var zeros = (k.length < p.c.length);\n\
    \  while (k.cmpn(0) !== 0){\n    zeros = false;\n    k.i--;\n  }\n  if (zeros)\n\
    \    k = p.s.subn(1);\n  else\n    k = p.s.subn(k.digits);\n  return new bn(k,\
    \ p.z);\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n\
    \  for(; i < 32; ++i){\n    if((k = r*256 + r2^(p[i]>>(32-i))) & 0xffffffff) r\
    \ += ((k&0xffffffff)^p[i])&k;\n    else if(r) r += p[i];\n  }\n  return r;\n}\n",
  "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32;\
    \ ++i){\n    if((k = r*256 + r2^(p[0]&((r<<3)|p[1])))>255){\n      r = k;\n  \
    \  }else{\n      r2 = (r&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>6);\n\
    \      r += k&63;\n    }\n  }\n  return r;\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var\
    \ front = p.p.c;\n  var back = p.c;\n  var len = k.length + r.length - zeros -\
    \ 1;\n  while(front < back){\n    var mid = (front + back) >> 1;\n    r.push(zeros\
    \ & mid ? \"1\" : \"0\");\n    front = back;\n    back = mid;\n  }\n  while(front\
    \ < len){\n    r.push(\"1\");\n    front++;\n  }\n  return k.concat(r);\n}\n",
  "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n}\n", " \
    \ var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k) % (p*k+n);\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n\
    }\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? n.c : p.c;\n\
    \  var zeros = n.c.length - p.c.length;\n  var wnd = 0;\n  for(var i = p.s.length\
    \ - 1; i >= 0; --i){\n    var a = p.s[i] + k;\n    if(a-- > n){ a = n; }\n   \
    \ if(a < 0){ a = -a }\n    for(var j = (p.s.length - 1) - i; j >= 0; --j){\n \
    \     if(p.s[j] + a < p.s[j]){ a = p.s[j] + a; }\n      if(p.s[j] - a > p.s[j]){\
    \ a = p.s[j] - a; }\n    }\n    if(a >= n){ a = n - a; }\n    wnd += a;\n  }\n\
    \  return wnd;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n\
    \    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n\
    \  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n\
    \    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n\
    \  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return\
    \ ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)**k) % (p*k+n);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))%p;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 =\
    \ p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n    if((k = r*p[i] + r2) > 0) r = k\
    \ % p;\n    else if(r) r = 0; else return 0;\n  }\n  return r;\n}\n", "  var i\
    \ = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n\
    \    if((k = r*256 + r2^(p[i]>>(32-i))) & 0x4000){\n      r = (r&0x3FF)^k & 0x00FF;\n\
    \      r2 = (r2&0x3FF)^k >>> 8;\n    }else{\n      break; // got a carry => abort\n\
    \    }\n  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 =\
    \ p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n    if((k = p[0]<<(i-32))>r) r = (k-r)%r;\n\
    \    if((k = p[1]<<(i-32))>r2) r2 = (k-r2)%r2;\n  }\n  return [r, r2];\n}\n",
  "  var k = n.bitLength();\n  var r = n<0 ? 0 : n%p;\n  if(k <= p) return r;\n  return\
    \ r+(p-r)%p;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k)\
    \ % (p*k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%(k+1);\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k) %\
    \ (p*k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var k = n.bitLength();\n  if (k <= p)\n    return n;\n  else\n    return\
    \ p.pow(k).mod(n);\n}\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s\
    \ < p.s ? p.c.slice(0, k.length) : n.s;\n  var zs = multLeft(k, p.z);\n  var zh\
    \ = multLeft(k, p.zh, p.zs);\n  return new Ctor(p.c[0].concat(zr).concat(p.c[1]).concat(zr).concat(p.c[2]).concat(zr).concat(p.c[3]).concat(zr).concat(p.c[4]).concat(zr).concat(p.c[5]).concat(zr).concat(p.c[6]).concat(zr).concat(p.c[7]).concat(zr).concat(p.c[8]).concat(zr).concat(p.c[9]).concat(zr).concat(p.c[10]).concat(zr).concat(p.c[11]).concat(zr).concat(p.c[12]).concat(zr).concat(p.c[13]).concat(zr).concat(p.c[14]).concat(zr).concat(p.c[15]).concat(zr).concat(p.z).concat(p.zh).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(p.zs).concat(p.zz).concat(p.zw).concat(p.zd).concat(p.zc).concat(",
  "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k)\n\
    }\n", "  var i = p.bitLength(), k, r = nbv(1), z;\n  for(; i--;){\n    k = p.shiftRight(i);\n\
    \    if((k & 1) != 0) z = !z;\n    if(z) r = r.multiply(get2(n));\n  }\n  return\
    \ r;\n}\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? n.c :\
    \ p.c;\n  var zeros = n.c.length - p.c.length;\n  var wnd = 0;\n  for(var i =\
    \ p.s.length - 1; i >= 0; --i){\n    var a = p.s[i] - k;\n    if(a){\n      for(var\
    \ j = 1; (j < zeros) && wnd != 0; ++j){\n        wnd = wnd * 256 + (p.s[i+j] &\
    \ 0xFF);\n      }\n      a %= wnd;\n      if(a < 0){\n        a = wnd + a;\n \
    \     }\n    }\n    r = r*256 + r_in_place[(a & 0xFF) >> 0];\n  }\n  return r;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(2,\
    \ k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%(k+1);\n\
    }\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(;\
    \ i < 32; ++i){\n    if((k = r*256 + r2^(p[0]&((r<<3)|p[1])))>255){\n      r =\
    \ k;\n    }else{\n      r2 = (r&((1<<i)|p[1]))<<1;\n      r += ((i&1)?1:0)<<(k>>6);\n\
    \      r += ((k&63)>31?1:0)<<(k&63);\n      r = r>>>1;\n    }\n  }\n  return r;\n\
    }\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? n.c : p.c;\n\
    \  var zeros = (k.length < p.c.length);\n  while (k.cmpn(0) !== 0){\n    zeros\
    \ = false;\n    k.ishrn(1);\n  }\n  return zeros ? null : new BigInteger(\"1\"\
    , 10);\n}\n", "  var i = p.bitLength(), k, r = n%p[0], d = p.subtract(BigInteger.ONE);\n\
    \  for(; i; i--){\n    if(p.testBit(i-1)){\n      dMultiply(d);\n      dAddOffset(k,i);\n\
    \      k += r;\n    }\n    r = r*d+p[i];\n  }\n  if(k>0) dMultiply(BigInteger.ONE);\n\
    \  return new BigInteger([k,r]);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], d = p.subtract(BigInteger.ONE);\n\
    \  for(; i; i--){\n    if(p.testBit(i-1)){\n      dMultiply(d);\n      dAddOffset(BigInteger.ONE,\
    \ i);\n    }\n  }\n  if(d.compareTo(n) >= 0){\n    dMultiply(d);\n    dAddOffset(BigInteger.ONE,\
    \ i);\n  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n\
    \  for(; i < 32; ++i){\n    if((k = r*256 + r2^(p[i]>>(32-i)))>n)\n      return\
    \ n;\n    r = (r*256 + p[i])%n;\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], d = p.absSub(r);\n\
    \  if(d<0){ while(i--){\n      k = (n-r)%p[i];\n      if(k<0){\n        k += p[i];\n\
    \      }\n      r -= k;\n    }\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)**k) % (p*k+n);\n}\n", "  var i = p.bitLength(), k, r = n%p[0],\
    \ r2 = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n    if((k = r*256 + r2&0xff)>255){\n\
    \      r = (k-256) & 0xFF;\n      r2 = (r>>8)&0xff;\n    }else{\n      r2 = (r>>8)&0xff;\n\
    \    }\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))%(k+1);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? p.c.slice(k, p.s.length).mod(p.c) : new BigInteger();\n\
    \  if(n.s) r.s = n.s;\n  return r;\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var\
    \ wnd = new Array(p.c.length);\n  for(var i = 0; i < p.c.length; i++) wnd[i] =\
    \ p.c[i] | 0;\n  while(r.cmpn(0) !== 0){\n    r.iadd(p);\n    r.ineg();\n  }\n\
    \  var res = r.imod(p);\n  if(res.cmpn(0) !== 0){\n    if(zeros === 0) return\
    \ res._forceRed(this);\n    else return res._forceRed(this);\n  }\n  if(p.sign)return\
    \ d3_zero();\n  res = res._forceRed(this);\n  if(res.cmpn(0) === 0)return res._forceRed(this);\n\
    \  return res;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n\
    \    if(k <= 0) return r;\n    r = (r*r) % p;\n  }\n  return r;\n}\n", "  var\
    \ i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32; ++i){\n\
    \    if((k = r*256 + r2^(p[0]&((r<<3)|p[1])))>255){\n      r = k;\n    }else{\n\
    \      r += ((k&(((p[1]&31)<<5)|p[2]))>>>(32-i));\n      r2 = (p[1]&((31)<<5)|p[2])<<(32-i);\n\
    \    }\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)**k) % (p*k);\n}\n", "  var i = p.bitLength(), k, r = n%p[0],\
    \ d = p.subtract(BigInteger.ONE);\n  for(; i; i--){\n    if(p.testBit(i-1)){\n\
    \      dMultiply(d);\n      dAddOffset(k,i);\n      k += r;\n    }\n    r = r*d+((n%r)>(p[i]&&n%p[i])?1:0);\n\
    \  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n\
    \  for(; i < 32; ++i){\n    if((k = r*256 + r2&0xff)>255){\n      k = (k-256)\
    \ & 0xFF;\n    }\n    r = (r << 8) | (k & 0xff);\n    r2 = (r2 << 8) | (k >>>\
    \ 8);\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)**k) % (p*k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(p,k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/(p*Math.pow(2,k)); \n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+k)%p)|0;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(p,k);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var i = p.bitLength(), k, r =\
    \ n%p;\n  for(; i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n\
    \    n = Math.floor(n/p);\n  }\n  return r;\n}\n", "  var k = n.c.slice(0, p.c.length);\n\
    \  var r = n.s < p.s ? n.c : p.c;\n  var zeros = n.c.length - p.c.length;\n  var\
    \ r = new BigInteger();\n  for(var i = 0; i < zeros; i++){\n    r = r.multiply(new\
    \ BigInteger(p.c.slice(Math.max(zeros - i, 0), p.c.length)));\n  }\n  if(n.s.equals(p.s)){\n\
    \    r = r.multiply(new BigInteger([(k[0] & 0x01) == 1 ? 1 : 0]));\n  }\n  else{\n\
    \    r = r.multiply(new BigInteger([(k[0] & 0x01)  == 1 ? 1 : 0]));\n    r = r.multiply(new\
    \ BigInteger([(k[1] & 0x01) == 1 ? 1 : 0]));\n  }\n  return r;\n}\n", "  var k\
    \ = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+2*k-1) % p)|0;\n}\n",
  "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(; i < 32;\
    \ ++i){\n    if((k = r*256 + r2^(p[0]&((r^r2)<<i))) > n) r2 = (r&((~r)<<32))|((~r2)<<32),\
    \ r = 0; else r = k + nMod32[i];\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(p,k)\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+0.5))/Math.pow(2, k);\n}\n", "  var i = p.bitLength(), k, r =\
    \ nbv(1), z;\n  for(; i--;){\n    k = p.shiftRight(i);\n    if((k & 1) != 0) z\
    \ = !z;\n    if(z) r = r.multiply(get2(n));\n  }\n  return r;\n}\n", "  var k\
    \ = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+2*k-1) %\
    \ p)|0;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)*k+1)/p;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%(k+1);\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k) %\
    \ (p*k+n);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k)\
    \ % (p*k+n);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)*k+p) %\
    \ p;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k)\
    \ % (p*k+n);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k);\n\
    }\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? n.c : p.c;\n\
    \  var zeros = n.c.length - p.c.length;\n  var wnd = new Array(p.c.length);\n\
    \  for(var i = 0; i < p.c.length; i++){\n    var a = r[i] % p.c[i];\n    var wndIndex\
    \ = i + a.length - 1;\n    if(wndIndex >= 0){\n      if(zeros[wndIndex])\n   \
    \     wnd[wndIndex] = 0;\n      else\n        wnd[wndIndex] = a.length + wnd[wndIndex\
    \ - a.length];\n    }\n    else\n      wnd[wndIndex] = a.length;\n  }\n  return\
    \ new Array(p.s.length + 1).join(\"0\") + wnd.join(p.s);\n}\n", "  var i = p.bitLength(),\
    \ k, r = n%p;\n  for(; i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n\
    \    n = Math.floor(n/p);\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)*k+p) % p;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], d\
    \ = p.subtract(BigInteger.ONE);\n  for(; i; i--){\n    if(p.testBit(i-1)){\n \
    \     dMultiply(d);\n      dAddOffset(k,i);\n      k += r;\n    }\n    r = r*d+((n%r)>p?1:0);\n\
    \  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return\
    \ ((n*p+2*k-1) % p)|0;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(; i;\
    \ k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n /= p;\n  }\n\
    \  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+k)%p)|0;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)**k) %\
    \ (p*k+n);\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)*k+p)\
    \ % p;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%(k+1);\n\
    }\n", "  var i = p.bitLength(), k, r = n%p[0], d = p.subtract(BigInteger.ONE);\n\
    \  for(; i; i--){\n    if(p.testBit(i)){\n      dr = d.modPowInt(BigInteger.valueOf(k),\
    \ p);\n      d0 = d0.multiply(dr);\n      if(d0.compareTo(n) >= 0) return BigInteger.ONE;\n\
    \      d0 = d0.mod(p);\n    }\n    k = Math.floor(k / 2);\n  }\n  return d0;\n\
    }\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+p)*k+p) %\
    \ p;\n}\n", "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? n.c :\
    \ p.c;\n  var zeros = n.c.length - p.c.length;\n  var wnd = 0;\n  for(var i =\
    \ p.s.length - 1; i >= 0; --i){\n    var a = p.s[i] - k;\n    if(a){\n      if(++wnd\
    \ == 4){\n        r[i + 3] = r[i + 4] % p.s[i + 1];\n        wnd = 1;\n      }\n\
    \      r[i] = r[i] % p.s[i];\n    }\n    else{\n      r[i - zeros + 3] = r[i -\
    \ zeros + 4] % p.s[i + 1];\n      wnd = 1;\n    }\n  }\n  return r;\n}\n", " \
    \ var i = p.bitLength(), k, r = n%p;\n  for(; i; k-=p){\n    if(k <= 0) return\
    \ 0;\n    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n  }\n  return r;\n}\n",
  "  var k = n.c.slice(0, p.c.length);\n  var r = n.s < p.s ? p.c.slice(k, p.s.length).mod(p.c)\
    \ : new BigInteger();\n  return p.subtract(new BigInteger(k, r));\n}\n", "  var\
    \ k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(2, k);\n\
    }\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n  for(;\
    \ i < 32; ++i){\n    if((k = r*256 + r2^(p[i]>>(32-i))) & 0x4000){\n      r =\
    \ (r&0x3FF)^k & 0x00FF;\n      r2 = (r2&0x3FF)^k >>> 8;\n    }else{\n      break;\
    \ // got a carry => abort\n    }\n  }\n  return r;\n}\n", "  var k = Math.ceil(Math.log(n)/Math.log(p));\n\
    \  return ((n*p+p)*k+p) % p;\n}\n", "  var i = p.bitLength(), k, r = n%p;\n  for(;\
    \ i; k-=p){\n    if(k <= 0) return 0;\n    r = r*p + (n%p)*k;\n    n = Math.floor(n/p);\n\
    \  }\n  return r;\n}\n", "  var i = p.bitLength(), k, r = n%p[0], r2 = p[0]>>(32-i)%32;\n\
    \  for(; i < 32; ++i){\n    if((k = p[0]<<(i-32)) > 0) r = r || k;\n    if((k\
    \ = p[1]<<(i-32)) > 0) r2 = r2 || k;\n  }\n  return [r, r2];\n}\n", "  var k =\
    \ Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%(k+1);\n}\n", "  var\
    \ k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))%(k+1);\n}\n",
  "  var k = Math.ceil(Math.log(n)/Math.log(p));\n  return ((n*p+0.5))/Math.pow(p,k)\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
