name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = null;\n    var strongest_extension_strength_counter = 0;\n    var strongest_extension_strength_counters\
    \ = [];\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        var extension_strength_counter\
    \ = extension_strength_counters[extension_strength];\n        if(extension_strength_counter\
    \ == null){\n            extension_strength_counter = extension_strength_counters[extension_strength]\
    \ = 1;\n        }else{\n            extension_strength_counter++;\n        }\n\
    \        if(extension_strength_counter > strongest_extension_strength_counter){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var extension_strength = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.split(\".\")[0];\n        var extension_name\
    \ = extension.split(\".\")[1];\n        var class_strength = extension_strength[class_name];\n\
    \        if(!class_strength){\n            class_strength = extension_name.length;\n\
    \        }\n        extension_strength[class_name] = class_strength;\n    });\n\
    \    var max_strength = 0;\n    var max_extension = \"\";\n    for(var class_name\
    \ in extension_strength){\n        if(extension_strength[class_name] > max_strength){\n\
    \            max_strength = extension_strength[class_name];\n            max_extension\
    \ = class_name;\n        }\n    }\n    return max_extension;\n}\n", "    let extension_strength\
    \ = {};\n    for (let i = 0; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let extension_class = class_name + extension;\n  \
    \      let extension_class_name = extension_class.slice(0, class_name.lastIndexOf('.'));\n\
    \        let extension_class_strength = extension_class.slice(class_name.lastIndexOf('.')\
    \ + 1);\n        extension_strength[extension_class_name] = extension_class_strength;\n\
    \    }\n    let max_strength = -1;\n    let max_extension = '';\n    for (let\
    \ extension in extension_strength){\n        if (extension_strength[extension]\
    \ > max_strength){\n            max_strength = extension_strength[extension];\n\
    \            max_extension = extension;\n        }\n    }\n    return max_extension;\n\
    }\n", "    var strongest = null;\n    var strongest_strength = 0;\n    for(var\
    \ i = 0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > strongest_strength){\n\
    \            strongest = extension_class;\n            strongest_strength = extension_strength;\n\
    \        }\n    }\n    return strongest;\n}\n", "    let strongest_extension =\
    \ null;\n    let strongest_extension_strength = null;\n    let extension_counter\
    \ = 0;\n    let extension_counter_strength = 0;\n    for(let extension of extensions){\n\
    \        extension_counter++;\n        extension_counter_strength += extension.charAt(0)\
    \ - extension.charAt(extension.length-1);\n    }\n    for(let extension of extensions){\n\
    \        extension_counter_strength -= extension.charAt(extension.length-1);\n\
    \    }\n    extension_counter_strength = extension_counter_strength / (extension_counter-1);\n\
    \    for(let extension of extensions){\n        extension_counter_strength +=\
    \ extension.charAt(0) - extension.charAt(extension.length-1);\n    }\n    extension_counter_strength\
    \ = extension_counter_strength / (extension_counter-1);\n    for(let extension\
    \ of extensions){\n        extension_counter_strength -= extension.charAt(extension.length-1);\n\
    \    }\n    extension_counter_strength = extension_counter_strength / (extension_counter-1);\n\
    \    for(let extension of extensions){\n        extension_counter_strength +=\
    \ extension.charAt(0) - extension.charAt(extension.length-1);\n    }\n    extension_counter_strength\
    \ = extension_counter_strength / (extension_counter-1);\n    for(let extension\
    \ of extensions){\n        extension_counter_strength -= extension.charAt(extension.length-1);\n\
    \    }\n    extension_counter_strength = extension_counter_strength / (extension_counter-1);\n\
    \    for(let extension of extensions){\n        extension_counter_strength +=\
    \ extension.charAt(0) - extension.charAt(extension.length-1);\n    }\n    extension_counter_strength\
    \ = extension_counter_strength / (extension_counter-1);\n    for(let extension\
    \ of extensions){\n        extension_counter_strength -= extension.charAt(extension.length-1);\n\
    \    }\n    extension_counter_strength = extension_counter_strength / (extension_counter-1);\n\
    \    for(let extension of extensions){\n        extension_counter_strength +=\
    \ extension.charAt(0) - extension.charAt(extension.length-1);\n    }\n    extension_counter_strength\
    \ = extension_counter_strength / (extension_counter-1);\n    for(let extension\
    \ of extensions){\n        extension_counter_strength -= extension.charAt(extension.length-1);\n\
    \    }\n    extension_counter_strength = extension_counter_strength / (extension_counter-1);\n\
    \    for(let extension of extensions){\n        extension_counter_strength +=\
    \ extension.charAt(0) - extension.charAt(extension.length-1);\n    }\n    extension_counter_strength\
    \ = extension_counter_strength / (extension_counter-1);\n    for(let extension\
    \ of extensions){\n        extension_counter_strength -= extension.charAt(extension.length-1);\n\
    \    }\n    ", "    var extensions_count = extensions.length;\n    var extensions_strongest\
    \ = [];\n    var extensions_strength = [];\n    for(var i=0; i<extensions_count;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class_name\
    \ = class_name + extension;\n        var extension_extensions_count = extensions.length;\n\
    \        var extension_extensions_strongest = [];\n        var extension_extensions_strength\
    \ = [];\n        for(var j=0; j<extension_extensions_count; j++){\n          \
    \  var extension_extension = extensions[j];\n            var extension_extension_class_name\
    \ = extension_class_name + extension_extension;\n            var extension_extension_extensions_count\
    \ = extensions.length;\n            var extension_extension_extensions_strongest\
    \ = [];\n            var extension_extension_extensions_strength = [];\n     \
    \       for(var k=0; k<extension_extension_extensions_count; k++){\n         \
    \       var extension_extension_extension = extensions[k];\n                var\
    \ extension_extension_extension_class_name = extension_extension_class_name +\
    \ extension_extension_extension;\n                var extension_extension_extension_extensions_count\
    \ = extensions.length;\n                var extension_extension_extension_extensions_strongest\
    \ = [];\n                var extension_extension_extension_extensions_strength\
    \ = [];\n                for(var l=0; l<extension_extension_extension_extensions_count;\
    \ l++){\n                    var extension_extension_extension_extension = extensions[l];\n\
    \                    var extension_extension_extension_extension_class_name =\
    \ extension_extension_extension_class_name + extension_extension_extension_extension;\n\
    \                    var extension_extension_extension_extension_extensions_count\
    \ = extensions.length;\n                    var extension_extension_extension_extension_extensions_strongest\
    \ = [];\n                    var extension_extension_extension_extension_extensions_strength\
    \ = [];\n                    for(var m=0; m<extension_extension_extension_extension_extensions_count;\
    \ m++){\n                        var extension_extension_extension_extension_extension\
    \ = extensions[m];\n                        var extension_extension_extension_extension_extension_class_name\
    \ = extension_extension_extension_extension_class_name + extension_extension_extension_extension_extension;\n\
    \                        var extension_extension_extension_extension_extension_extensions_count\
    \ = extensions.length;\n                        var extension_extension_extension_extension_extension_extensions_strongest\
    \ = [];\n                        var extension_extension_extension_extension_extension_extensions_strength\
    \ = [];\n                        for(var n=0; n<extension_extension_extension_extension_extension_extensions_count;\
    \ n++){\n                            var extension_extension_extension_extension_extension_extension\
    \ = extensions[n];\n                            var extension_extension_extension",
  "    // Your code here\n}\n", "    var strongest = null;\n    var strongest_strength\
    \ = null;\n    var strongest_extension = null;\n    var class_extensions = class_name.split('.');\n\
    \    var class_name = class_extensions[0];\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;\n    var extensions_length = extensions.length;\n\
    \    var extensions_length = extensions.length;", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extension_counter\
    \ = 0;\n    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_counter = extension_counter + 1;\n \
    \       var extension_class_name = class_name + extension;\n        var extension_class_name_counter\
    \ = extension_class_name.split(\" \").length;\n        var extension_class_name_strength\
    \ = extension_class_name_counter - extension_counter;\n        \n        if(extension_class_name_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_class_name_strength;\n \
    \       }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var extension_strength = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.split(\".\")[0];\n        var extension_name\
    \ = extension.split(\".\")[1];\n        var extension_strength_class = extension_strength[class_name];\n\
    \        if(!extension_strength_class){\n            extension_strength_class\
    \ = extension_strength[class_name] = {};\n        }\n        extension_strength_class[extension_name]\
    \ = -1;\n    });\n    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    for(var class_name in extension_strength){\n        var extension_strength_class\
    \ = extension_strength[class_name];\n        for(var extension_name in extension_strength_class){\n\
    \            var extension_strength = extension_strength_class[extension_name];\n\
    \            if(extension_strength > strongest_extension_strength){\n        \
    \        strongest_extension = extension_name;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].length - extensions[i].toLowerCase().length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for (let i\
    \ = 1; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension = extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var extension_strengths = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.substr(0, extension.length - 1);\n       \
    \ var class_strength = extension_strengths[class_name];\n        if(class_strength\
    \ == undefined){\n            class_strength = extension_strengths[class_name]\
    \ = -1;\n        }\n        class_strength += 1;\n    });\n    var max_strength\
    \ = Math.max.apply(null, Object.keys(extension_strengths).map(function(key){\n\
    \        return extension_strengths[key];\n    }));\n    return class_name + extensions[max_strength];\n\
    }\n", "    var strongest = -1;\n    var strongest_extension = null;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n        var\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        var strength\
    \ = cap - sm;\n        if(strength > strongest){\n            strongest = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    var extension_strength = {};\n  \
    \  extensions.forEach(function(extension){\n        var class_name = extension.split(\"\
    .\")[0];\n        var extension_name = extension.split(\".\")[1];\n        var\
    \ extension_strength_class = extension_strength[class_name];\n        if(extension_strength_class\
    \ === undefined){\n            extension_strength[class_name] = extension_name;\n\
    \        }else{\n            var extension_strength_extension = extension_strength[class_name];\n\
    \            if(extension_strength_extension < extension_name){\n            \
    \    extension_strength[class_name] = extension_name;\n            }\n       \
    \ }\n    });\n    var strongest_extension = extension_strength[class_name];\n\
    \    return strongest_extension;\n}\n", "    var extensions_count = extensions.length;\n\
    \    var extensions_strength = [];\n    for(var i=0; i<extensions_count; i++){\n\
    \        var extension = extensions[i];\n        var extension_class = class_name.substring(class_name.lastIndexOf('.')+1);\n\
    \        var extension_class_name = extension_class.substring(0,1).toUpperCase()\
    \ + extension_class.substring(1);\n        var extension_class_strength = extension_class_name.split('').map(function(letter){\n\
    \            return letter.charCodeAt(0) - letter.charCodeAt(0).toUpperCase().charCodeAt(0);\n\
    \        }).reduce(function(a,b){\n            return a + b;\n        });\n  \
    \      extensions_strength.push(extension_class_strength);\n    }\n    var extensions_strength_sorted\
    \ = extensions_strength.sort(function(a,b){\n        return b - a;\n    });\n\
    \    var extensions_strength_sorted = extensions_strength_sorted.filter(function(value,\
    \ index, arr){\n        return arr.indexOf(value) === index;\n    });\n    var\
    \ extensions_strength_sorted = extensions_strength_sorted.map(function(value,\
    \ index, arr){\n        return arr[index];\n    });\n    var extensions_strength_sorted\
    \ = extensions_strength_sorted.map(function(value, index, arr){\n        return\
    \ arr[index];\n    });\n    var extensions_strength_sorted = extensions_strength_sorted.map(function(value,\
    \ index, arr){\n        return arr[index];\n    });\n    var extensions_strength_sorted\
    \ = extensions_strength_sorted.map(function(value, index, arr){\n        return\
    \ arr[index];\n    });\n    var extensions_strength_sorted = extensions_strength_sorted.map(function(value,\
    \ index, arr){\n        return arr[index];\n    });\n    var extensions_strength_sorted\
    \ = extensions_strength_sorted.map(function(value, index, arr){\n        return\
    \ arr[index];\n    });\n    var extensions_strength_sorted = extensions_strength_sorted.map(function(value,\
    \ index, arr){\n        return arr[index];\n    });\n    var extensions_strength_sorted\
    \ = extensions_strength_sorted.map(function(value, index, arr){\n        return\
    \ arr[index];\n    });\n    var extensions_strength_sorted = extensions_strength_sorted.map(function(value,\
    \ index, arr){\n        return arr[index];\n    });\n    var extensions_strength_sorted\
    \ = extensions_strength_sorted.map(function(value, index, arr){\n        return\
    \ arr[index];\n    });\n    var extensions_strength_sorted = extensions_strength_sorted.map(function(value,\
    \ index, arr){\n        return arr[index];\n    });\n    var extensions_strength_sorted\
    \ = extensions_strength_sorted.map(function(value, index, arr){\n        return\
    \ arr[index];\n    });\n    var extensions_strength_sorted = extensions_strength_sorted.",
  "\t\n\t// Your code here\n\t\n}\n", "    var strongest_extension = '';\n    var\
    \ extension_strengths = [];\n    var class_name_length = class_name.length;\n\
    \    var extensions_length = extensions.length;\n    \n    for(var i = 0; i <\
    \ extensions_length; i++){\n        var extension = extensions[i];\n        var\
    \ extension_length = extension.length;\n        var extension_strength = extension_length\
    \ - class_name_length;\n        extension_strengths.push(extension_strength);\n\
    \    }\n    \n    extension_strengths.sort(function(a, b){\n        return b -\
    \ a;\n    });\n    \n    for(var i = 0; i < extension_strengths.length; i++){\n\
    \        if(extension_strengths[i] == 0){\n            continue;\n        }\n\
    \        \n        if(extension_strengths[i] == 1){\n            strongest_extension\
    \ += class_name.charAt(i);\n        }\n        else if(extension_strengths[i]\
    \ == class_name_length){\n            strongest_extension += extensions[i].charAt(class_name_length);\n\
    \        }\n        else{\n            strongest_extension += class_name.charAt(i)\
    \ + extensions[i].charAt(class_name_length);\n        }\n    }\n    \n    return\
    \ strongest_extension;\n}\n", "    var strongest_extension = null;\n    var max_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest_extension\
    \ = extension_class;\n        }\n    }\n    return strongest_extension;\n}\n",
  "    var strongest_extension = null;\n    var strongest_extension_strength = -1;\n\
    \    \n    for(var i = 0; i<extensions.length; i++){\n        var extension =\
    \ extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    \n    return class_name + \".\" + strongest_extension;\n}\n", "  \
    \  // Write your code here\n}\n", "    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for(let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let cap_extensions = extensions.filter(extension => extension.match(/[A-Z]/)).length;\n\
    \    let sml_extensions = extensions.filter(extension => extension.match(/[a-z]/)).length;\n\
    \    let strength = cap_extensions - sml_extensions;\n    return class_name +\
    \ extensions.find(extension => extension.match(/[A-Z]/)).charAt(0) + extensions.find(extension\
    \ => extension.match(/[a-z]/)).charAt(0) + strength;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_class =\
    \ extension.charAt(0).toUpperCase() + extension.slice(1);\n        let extension_class_name\
    \ = class_name + extension_class;\n        let extension_strength = extension.length\
    \ - extension_class.length;\n        if (extension_strength > strongest_extension.length){\n\
    \            strongest_extension = extension;\n        }\n    }\n    return strongest_extension;\n\
    }\n", "    var extensions_count = extensions.length;\n    var extensions_strength\
    \ = [];\n    for(var i=0; i<extensions_count; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + extension;\n        var extension_strength\
    \ = extension_class.match(/[A-Z][a-z]+/g).length - extension_class.match(/[a-z][A-Z]+/g).length;\n\
    \        extensions_strength[i] = extension_strength;\n    }\n    extensions_strength.sort(function(a,\
    \ b){\n        return b - a;\n    });\n    return class_name + extensions_strength[0];\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for(let i = 1; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var extension_strength = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.split(\".\")[0];\n        var extension_name\
    \ = extension.split(\".\")[1];\n        var extension_strength = extension_strength[class_name];\n\
    \        if(!extension_strength){\n            extension_strength[class_name]\
    \ = extension_name;\n        }else{\n            var extension_strength_array\
    \ = extension_strength[class_name];\n            extension_strength_array.push(extension_name);\n\
    \            extension_strength[class_name] = extension_strength_array;\n    \
    \    }\n    });\n    var strongest_extension = null;\n    var max_strength = 0;\n\
    \    for(var class_name in extension_strength){\n        var extension_strength_array\
    \ = extension_strength[class_name];\n        var extension_strength = extension_strength_array.length;\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            strongest_extension = class_name;\n        }\n    }\n    return strongest_extension;\n\
    }\n", "\tlet strongest_extension = null;\n\tlet strongest_extension_strength =\
    \ null;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for(let i\
    \ = 1; i < extensions.length; i++){\n        let extension_strength = extensions[i].length\
    \ - extensions[i].toLowerCase().length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var max_strength = 0;\n    var\
    \ max_strength_extension = null;\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_class = class_name\
    \ + extension;\n        var extension_strength = Extension_Strength(extension_class);\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            max_strength_extension = extension;\n        }\n    }\n    return\
    \ max_strength_extension;\n}\n", "    var strongest_extension = null;\n    var\
    \ strongest_extension_strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = null;\n    var strongest_extension_strength = null;\n\
    \    var extension_counter = 0;\n    for(var extension in extensions){\n     \
    \   var extension_counter = 0;\n        for(var extension_counter = 0; extension_counter\
    \ < extensions[extension].length; extension_counter++){\n            var extension_strength\
    \ = extensions[extension][extension_counter].toUpperCase().charCodeAt(0) - extensions[extension][extension_counter].toLowerCase().charCodeAt(0);\n\
    \            if(extension_strength > strongest_extension_strength){\n        \
    \        strongest_extension_strength = extension_strength;\n                strongest_extension\
    \ = extensions[extension][extension_counter];\n            }\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n\
    <| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a tags=javascript,algorithm,string\
    \ |>\n<code>", "    let extension_strength = {};\n    extensions.forEach(extension\
    \ => {\n        let extension_class_name = extension.slice(0,1).toUpperCase()\
    \ + extension.slice(1).toLowerCase();\n        let extension_strength_class =\
    \ extension_strength[extension_class_name];\n        if(!extension_strength_class){\n\
    \            extension_strength_class = -1;\n        }\n        extension_strength[extension_class_name]\
    \ = extension_strength_class + 1;\n    });\n    let max_strength_extension = Object.keys(extension_strength).sort((a,\
    \ b) => extension_strength[b] - extension_strength[a]).pop();\n    return class_name\
    \ + max_strength_extension;\n}\n", "    var strongest_extension = null;\n    var\
    \ strongest_extension_strength = null;\n    var extension_length = extensions.length;\n\
    \    var class_length = class_name.length;\n    for(var i=0; i<extension_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class_name\
    \ = extension.substring(class_length+1);\n        var extension_class_name_length\
    \ = extension_class_name.length;\n        var extension_class_name_strength =\
    \ extension_class_name_length - class_length;\n        if(extension_class_name_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_class_name_strength;\n \
    \       }\n    }\n    return strongest_extension;\n}\n", "    var extension_strength\
    \ = {};\n    extensions.forEach(function(extension){\n        var class_name =\
    \ extension.split(\".\")[0];\n        var extension_name = extension.split(\"\
    .\")[1];\n        var class_strength = extension_strength[class_name];\n     \
    \   if(class_strength === undefined){\n            class_strength = -1;\n    \
    \    }\n        var extension_strength = extension_strength[extension_name];\n\
    \        if(extension_strength === undefined){\n            extension_strength\
    \ = -1;\n        }\n        class_strength = Math.max(class_strength, extension_strength);\n\
    \        extension_strength[extension_name] = class_strength;\n    });\n    var\
    \ strongest = Object.keys(extension_strength).reduce(function(previous, current){\n\
    \        return previous.split(\".\")[0] + \".\" + previous.split(\".\")[1] +\
    \ \".\" + previous.split(\".\")[2] + \".\" + previous.split(\".\")[3];\n    },\
    \ class_name);\n    return strongest;\n}\n", "    let extensions_count = extensions.length;\n\
    \    let extensions_count_cap = extensions_count.toUpperCase().length;\n    let\
    \ extensions_count_sm = extensions_count.toLowerCase().length;\n    let extensions_count_cap_sm\
    \ = extensions_count_cap - extensions_count_sm;\n    let extensions_count_cap_sm_max\
    \ = extensions_count_cap_sm > 0 ? extensions_count_cap_sm : 1;\n    let extensions_count_cap_sm_min\
    \ = extensions_count_cap_sm > 0 ? extensions_count_cap_sm - 1 : -1;\n    let extensions_count_cap_sm_max_min\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min && extensions_count_cap_sm_min\
    \ > extensions_count_cap_sm ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
    \    let extensions_count_cap_sm_max_min_max_max = extensions_count_cap_sm_max\
    \ > extensions_count_cap_sm_min && extensions_count_cap_sm_min > extensions_count_cap_sm\
    \ && extensions_count_cap_sm > extensions_count_cap_sm_max ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min && extensions_count_cap_sm_min\
    \ > extensions_count_cap_sm && extensions_count_cap_sm > extensions_count_cap_sm_max\
    \ && extensions_count_cap_sm_max > extensions_count_cap_sm ? extensions_count_cap_sm_max\
    \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max_max\
    \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min && extensions_count_cap_sm_min\
    \ > extensions_count_cap_sm && extensions_count_cap_sm > extensions_count_cap_sm_max\
    \ && extensions_count_cap_sm_max > extensions_count_cap_sm && extensions_count_cap_sm\
    \ > extensions_count_cap_sm_max ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
    \    let extensions_count_cap_sm_max_min_max_max_max_max_max = extensions_count_cap_sm_max\
    \ > extensions_count_cap_sm_min && extensions_count_cap_sm_min > extensions_",
  "    var extension_strength = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \        var class_strength = extension_strength[class_name];\n        if(class_strength\
    \ == undefined){\n            class_strength = extension_strength[class_name]\
    \ = -1;\n        }\n        class_strength++;\n    });\n    var max_strength =\
    \ -1;\n    var max_extension;\n    for(var key in extension_strength){\n     \
    \   if(extension_strength[key] == max_strength){\n            max_extension =\
    \ key;\n        }\n    }\n    return class_name + \".\" + max_extension;\n}\n",
  "    var extension_strength = {};\n    extensions.forEach(function(extension){\n\
    \        var extension_name = extension.split('')\n        var extension_strength_sum\
    \ = 0;\n        extension_name.forEach(function(letter){\n            extension_strength_sum\
    \ += letter.charCodeAt(0) - 64;\n        });\n        extension_strength[extension]\
    \ = extension_strength_sum;\n    });\n    var max_strength = 0;\n    var max_extension\
    \ = '';\n    Object.keys(extension_strength).forEach(function(extension){\n  \
    \      if(extension_strength[extension] > max_strength){\n            max_strength\
    \ = extension_strength[extension];\n            max_extension = extension;\n \
    \       }\n    });\n    return class_name + '.' + max_extension;\n}\n", "    var\
    \ strongest = null;\n    var strongest_strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name = class_name\
    \ + extension;\n        var class_object = eval(class_name);\n        var class_strength\
    \ = class_object.strength;\n        if(class_strength > strongest_strength){\n\
    \            strongest = class_name;\n            strongest_strength = class_strength;\n\
    \        }\n    }\n    return strongest;\n}\n", "    let strongest_extension =\
    \ null;\n    let strongest_extension_strength = null;\n    for (let i = 0; i <\
    \ extensions.length; i++){\n        let extension = extensions[i];\n        let\
    \ extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let strongest_extension = null;\n    let strongest_extension_strength\
    \ = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength = 0;\n\
    \tlet extension_counter = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\
    \t\textension_counter = 0;\n\t\tfor (let j = 0; j < class_name.length; j++){\n\
    \t\t\tif (class_name[j] == extensions[i].charAt(j)){\n\t\t\t\textension_counter++;\n\
    \t\t\t}\n\t\t}\n\t\tif (extension_counter > strongest_extension_strength){\n\t\
    \t\tstrongest_extension_strength = extension_counter;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn strongest_extension;\n}\n", "    let\
    \ extension_strengths = {};\n    extensions.forEach((extension)=>{\n        let\
    \ class_name = extension.slice(0,1).toUpperCase() + extension.slice(1).toLowerCase();\n\
    \        let class_strength = extension_strengths[class_name];\n        if(class_strength\
    \ === undefined){\n            class_strength = extension_strengths[class_name]\
    \ = -1;\n        }\n        class_strength++;\n    });\n    let strongest_extension\
    \ = extension_strengths[Object.keys(extension_strengths)[0]];\n    if(strongest_extension\
    \ === undefined){\n        return class_name;\n    }\n    let strongest_extension_strength\
    \ = extension_strengths[Object.keys(extension_strengths)[0]];\n    for(let i =\
    \ 1; i < Object.keys(extension_strengths).length; i++){\n        let extension_strength\
    \ = extension_strengths[Object.keys(extension_strengths)[i]];\n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = Object.keys(extension_strengths)[i];\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + '.' + strongest_extension;\n}\n", "    let extension_strengths\
    \ = {};\n    extensions.forEach(extension => {\n        let extension_name = extension.slice(0,1).toUpperCase()\
    \ + extension.slice(1).toLowerCase();\n        let extension_strength = extension_name.split(\"\
    \").reduce((sum, letter) => {\n            return sum + letter.charCodeAt(0);\n\
    \        }, 0);\n        extension_strengths[extension_strength] = extension_name;\n\
    \    });\n    let max_strength = Object.keys(extension_strengths).reduce((max,\
    \ key) => {\n        return Math.max(max, key);\n    }, 0);\n    let strongest_extension\
    \ = extension_strengths[max_strength];\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let extension_strengths = {};\n    extensions.forEach((extension) =>\
    \ {\n        let extension_class = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
    \        let extension_strength = extension_strengths[extension_class] || 0;\n\
    \        extension_strengths[extension_class] = extension_strength + 1;\n    });\n\
    \    let max_strength = -1;\n    let max_extension = '';\n    for (let key in\
    \ extension_strengths) {\n        if (extension_strengths[key] > max_strength)\
    \ {\n            max_strength = extension_strengths[key];\n            max_extension\
    \ = key;\n        }\n    }\n    return class_name + '.' + max_extension;\n}\n",
  "    let cap_extensions = extensions.filter(extension => extension.match(/[A-Z]/));\n\
    \    let sm_extensions = extensions.filter(extension => extension.match(/[a-z]/));\n\
    \    let cap_extensions_count = cap_extensions.length;\n    let sm_extensions_count\
    \ = sm_extensions.length;\n    let cap_extension_strength = cap_extensions_count\
    \ - sm_extensions_count;\n    let sm_extension_strength = sm_extensions_count\
    \ - cap_extensions_count;\n    let strongest_extension = extensions[0];\n    if\
    \ (cap_extension_strength > sm_extension_strength){\n        strongest_extension\
    \ = extensions[cap_extension_strength];\n    }\n    return class_name + '.' +\
    \ strongest_extension;\n}\n", "    var strongest_extension = '';\n    var extensions_count\
    \ = extensions.length;\n    var extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \    var extensions_count_sm = extensions_count.toLowerCase().length;\n    var\
    \ extensions_count_diff = extensions_count_cap - extensions_count_sm;\n    var\
    \ extensions_count_cap_diff = extensions_count_cap - extensions_count_sm;\n  \
    \  var extensions_count_sm_diff = extensions_count_sm - extensions_count_cap;\n\
    \    var extensions_count_diff_diff = extensions_count_diff - extensions_count_cap_diff;\n\
    \    var extensions_count_diff_diff_diff = extensions_count_diff_diff - extensions_count_sm_diff;\n\
    \    var extensions_count_diff_diff_diff_diff = extensions_count_diff_diff_diff\
    \ - extensions_count_cap_diff_diff;\n    var extensions_count_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff - extensions_count_sm_diff_diff;\n  \
    \  var extensions_count_diff_diff_diff_diff_diff_diff = extensions_count_diff_diff_diff_diff_diff\
    \ - extensions_count_cap_diff_diff_diff;\n    var extensions_count_diff_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff_diff_diff - extensions_count_sm_diff_diff_diff;\n\
    \    var extensions_count_diff_diff_diff_diff_diff_diff_diff_diff = extensions_count_diff_diff_diff_diff_diff_diff_diff\
    \ - extensions_count_cap_diff_diff_diff_diff_diff;\n    var extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff - extensions_count_sm_diff_diff_diff_diff;\n\
    \    var extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff\
    \ - extensions_count_cap_diff_diff_diff_diff_diff_diff_diff;\n    var extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - extensions_count_sm_diff_diff_diff_diff_diff_diff_diff;\n\
    \    var extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff -\
    \ extensions_count_cap_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff;\n  \
    \  var extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff -\
    \ extensions_count_sm_diff_diff_diff_diff_diff_diff_diff_diff_diff;\n    var extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff ",
  "\tlet capitals = class_name.split('').map(x => x.toUpperCase()).join('');\n\tlet\
    \ lowercases = class_name.split('').map(x => x.toLowerCase()).join('');\n\tlet\
    \ capitals_length = capitals.length;\n\tlet lowercases_length = lowercases.length;\n\
    \tlet strength = capitals_length - lowercases_length;\n\tlet max_strength = -1;\n\
    \tlet max_extension = '';\n\textensions.forEach(extension => {\n\t\tlet extension_capitals\
    \ = extension.split('').map(x => x.toUpperCase()).join('');\n\t\tlet extension_lowercases\
    \ = extension.split('').map(x => x.toLowerCase()).join('');\n\t\tlet extension_capitals_length\
    \ = extension_capitals.length;\n\t\tlet extension_lowercases_length = extension_lowercases.length;\n\
    \t\tlet extension_strength = extension_capitals_length - extension_lowercases_length;\n\
    \t\tlet extension_max_strength = -1;\n\t\tif (extension_strength > max_strength)\
    \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
    \t\t}\n\t\tif (extension_strength == max_strength && extension_strength > 0) {\n\
    \t\t\tif (extension_strength < max_strength) {\n\t\t\t\tmax_strength = extension_strength;\n\
    \t\t\t\tmax_extension = extension;\n\t\t\t}\n\t\t}\n\t});\n\treturn class_name\
    \ + '.' + max_extension;\n}\n", "    var strongest_extension = '';\n    var extension_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name.substring(0,class_name.lastIndexOf('.'));\n\
    \        var class_name_length = class_name.length;\n        var extension_length\
    \ = extension.length;\n        var extension_strength_numerator = extension_length\
    \ - class_name_length;\n        var extension_strength_denominator = class_name_length;\n\
    \        var extension_strength = extension_strength_numerator / extension_strength_denominator;\n\
    \        if(extension_strength > extension_strength_numerator){\n            strongest_extension\
    \ = extension;\n            extension_strength = extension_strength_numerator;\n\
    \        }\n    }\n    return strongest_extension;\n}\n", "    var extensions_count\
    \ = extensions.length;\n    var extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \    var extensions_count_sm = extensions_count.toLowerCase().length;\n    var\
    \ extensions_count_cap_sm = extensions_count_cap - extensions_count_sm;\n    var\
    \ extensions_count_cap_sm_inv = extensions_count_cap_sm - extensions_count_cap;\n\
    \    var extensions_count_cap_sm_inv_div = extensions_count_cap_sm_inv / extensions_count;\n\
    \    var extensions_count_cap_sm_inv_mod = extensions_count_cap_sm_inv % extensions_count;\n\
    \    var extensions_count_cap_sm_inv_mod_div = extensions_count_cap_sm_inv_mod\
    \ / extensions_count;\n    var extensions_count_cap_sm_inv_mod_div_inv = extensions_count_cap_sm_inv_mod\
    \ % extensions_count;\n    var extensions_count_cap_sm_inv_mod_div_inv_div = extensions_count_cap_sm_inv_mod_div\
    \ / extensions_count;\n    var extensions_count_cap_sm_inv_mod_div_inv_div_inv\
    \ = extensions_count_cap_sm_inv_mod_div % extensions_count;\n    var extensions_count_cap_sm_inv_mod_div_inv_div_inv_div\
    \ = extensions_count_cap_sm_inv_mod_div_inv_div / extensions_count;\n    var extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv\
    \ = extensions_count_cap_sm_inv_mod_div_inv_div % extensions_count;\n    var extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv_div\
    \ = extensions_count_cap_sm_inv_mod_div_inv_div_inv_div / extensions_count;\n\
    \    var extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv_div_inv = extensions_count_cap_sm_inv_mod_div_inv_div_inv_div\
    \ % extensions_count;\n    var extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv_div_inv_div\
    \ = extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv_div / extensions_count;\n\
    \    var extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv_div_inv_div_inv\
    \ = extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv_div % extensions_count;\n\
    \    var extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv_div_inv_div_inv_div\
    \ = extensions_count_cap_sm_inv_mod_div_inv_div_inv_div_inv_div_inv_div / extensions_",
  "    var strongest = null;\n    var strongest_strength = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_strength){\n            strongest = extension;\n\
    \            strongest_strength = extension_strength;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n", "\tlet strongest_extension = null;\n\t\
    let strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var extension_strength = null;\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name = class_name\
    \ + extension;\n        var class_object = eval(class_name);\n        var class_extensions\
    \ = class_object.extensions;\n        \n        for(var j=0; j<class_extensions.length;\
    \ j++){\n            var extension_strength = class_extensions[j];\n         \
    \   if(extension_strength == -1){\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n    }\n    \n\
    \    return strongest_extension;\n}\n", "    var strongest_extension = null;\n\
    \    var strongest_extension_strength = 0;\n    var extension_counter = 0;\n \
    \   \n    for(var extension_name in extensions){\n        extension_counter++;\n\
    \        var extension = extensions[extension_name];\n        var extension_strength\
    \ = extension.substr(extension_name.length,1);\n        \n        if(extension_strength\
    \ == strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \       else if(extension_strength > strongest_extension_strength){\n        \
    \    strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;\n}\n", "    var extension_strength = {};\n    for(var\
    \ i=0; i<extensions.length; i++){\n        var extension = extensions[i].toLowerCase();\n\
    \        var class_name = extension.substr(0, extension.lastIndexOf('.'));\n \
    \       var extension_strength_class = extension_strength[class_name];\n     \
    \   if(extension_strength_class === undefined){\n            extension_strength_class\
    \ = extension_strength[class_name] = -1;\n        }\n        var extension_strength_extension\
    \ = extension_strength[class_name + extension.substr(extension.lastIndexOf('.')\
    \ + 1)];\n        if(extension_strength_extension === undefined){\n          \
    \  extension_strength_extension = extension_strength[class_name + extension.substr(extension.lastIndexOf('.')\
    \ + 1)] = -1;\n        }\n        extension_strength[class_name + extension.substr(extension.lastIndexOf('.')\
    \ + 1)] = Math.max(extension_strength_class, extension_strength_extension);\n\
    \    }\n    var strongest_extension = extensions[0];\n    for(var class_name in\
    \ extension_strength){\n        if(extension_strength[class_name] === strongest_extension.strength){\n\
    \            strongest_extension = class_name + '.' + strongest_extension.extension;\n\
    \        }\n    }\n    return strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = null;\n\tlet strongest_extension_strength = null;\n\tlet extension_counter\
    \ = 0;\n\tfor (let extension of extensions){\n\t\textension_counter++;\n\t\tlet\
    \ extension_class_name = class_name + extension;\n\t\tlet extension_class_name_lower\
    \ = extension_class_name.toLowerCase();\n\t\tlet extension_class_name_upper =\
    \ extension_class_name.toUpperCase();\n\t\tlet extension_class_name_length = extension_class_name_upper.length\
    \ - extension_class_name_lower.length;\n\t\tlet extension_class_name_strength\
    \ = extension_class_name_length - extension_counter;\n\t\tif (extension_class_name_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extension;\n\t\
    \t\tstrongest_extension_strength = extension_class_name_strength;\n\t\t}\n\t}\n\
    \treturn class_name + strongest_extension;\n}\n", "    var extension_strengths\
    \ = {};\n    extensions.forEach(function(extension){\n        var class_name =\
    \ extension.substr(0, 1).toUpperCase() + extension.substr(1);\n        var class_strength\
    \ = extension_strengths[class_name];\n        if(class_strength == undefined){\n\
    \            class_strength = extension_strengths[class_name] = -1;\n        }\n\
    \        class_strength++;\n    });\n    var max_strength = -1;\n    var max_extension;\n\
    \    for(var key in extension_strengths){\n        if(extension_strengths[key]\
    \ > max_strength){\n            max_strength = extension_strengths[key];\n   \
    \         max_extension = key;\n        }\n    }\n    return class_name + '.'\
    \ + max_extension;\n}\n", "    let strongest_extension = null;\n    let strongest_extension_strength\
    \ = 0;\n    for(let extension of extensions){\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ let strongest_extension = '';\n    let strongest_extension_strength = 0;\n \
    \   for (let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var extension_strength = null;\n\
    \    var extension_counter = 0;\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_counter = extension_counter\
    \ + 1;\n        var extension_strength = extension_counter - extension.match(/[A-Z]/g).length;\n\
    \        if(extension_strength > strongest_extension){\n            strongest_extension\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet extension_strengths = [];\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name.split('');\n\
    \t\tlet class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = -1;\n\t\tfor (let j = 0; j < class_name_length; j++){\n\
    \t\t\tlet class_char = class_name[j];\n\t\t\tlet extension_char = extension[j];\n\
    \t\t\tif (class_char === extension_char){\n\t\t\t\textension_strength++;\n\t\t\
    \t}\n\t\t}\n\t\textension_strengths.push(extension_strength);\n\t}\n\tlet max_strength\
    \ = extension_strengths.reduce((a, b) => Math.max(a, b));\n\tlet max_index = extension_strengths.indexOf(max_strength);\n\
    \treturn class_name.slice(0, max_index+1) + extensions[max_index];\n}\n", "  \
    \  // Your code here\n}\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    var extension_counter = 0;\n    \n    for(var extension in extensions){\n\
    \        var extension_counter = extension_counter + 1;\n        var extension_strength\
    \ = extensions[extension].length - extension_counter;\n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    \n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = '';\n\tlet strongest_extension_strength = 0;\n\tfor(let\
    \ i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\t\
    let class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - class_name_length;\n\t\tlet extension_class_name\
    \ = extension.substr(0, extension_length);\n\t\tlet extension_class_name_length\
    \ = extension_class_name.length;\n\t\tlet extension_class_name_strength = extension_class_name_length\
    \ - class_name_length;\n\t\tlet extension_class_name_strength_fraction =\n\t\t\
    \textension_class_name_strength / extension_class_name_length;\n\t\tlet extension_strength_fraction\
    \ =\n\t\t\textension_strength / extension_length;\n\t\tlet extension_strength_fraction_abs\
    \ = Math.abs(extension_strength_fraction);\n\t\tif(extension_strength_fraction_abs\
    \ < strongest_extension_strength){\n\t\t\tstrongest_extension = extension;\n\t\
    \t\tstrongest_extension_strength = extension_strength_fraction;\n\t\t}\n\t}\n\t\
    return strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_name\
    \ = \"\";\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_name = extension.substring(class_name.lastIndexOf(\"\
    .\")+1);\n        var extension_strength = extension.substring(class_name.lastIndexOf(\"\
    .\")+1).match(/[A-Z]/g).length -\n            extension.substring(class_name.lastIndexOf(\"\
    .\")+1).match(/[a-z]/g).length;\n        if(extension_strength > strongest){\n\
    \            strongest = extension_strength;\n            strongest_name = extension_name;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_name;\n}\n", "\t\
    let extension_strengths = {};\n\tlet extension_strongest = null;\n\tfor(let extension\
    \ of extensions){\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\textension_strengths[extension_strength]\
    \ = extension;\n\t}\n\tlet max_strength = -1;\n\tlet max_extension = null;\n\t\
    for(let strength in extension_strengths){\n\t\tif(max_strength < strength){\n\t\
    \t\tmax_strength = strength;\n\t\t\tmax_extension = extension_strengths[strength];\n\
    \t\t}\n\t}\n\treturn max_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var\
    \ strongest = -1;\n    var strongest_name = \"\";\n    var extensions_count =\
    \ extensions.length;\n    for(var i = 0; i < extensions_count; i++){\n       \
    \ var extension = extensions[i];\n        var extension_name = extension.split(\"\
    .\").pop();\n        var extension_strength = extension_name.length;\n       \
    \ var extension_class_name = class_name.split(\".\").pop();\n        var extension_class_strength\
    \ = extension_class_name.substr(0, extension_class_name.length-1);\n        var\
    \ extension_class_strength_percentage = extension_class_strength / extension_class_strength_total;\n\
    \        if(extension_strength > strongest){\n            strongest = extension_strength;\n\
    \            strongest_name = extension_name;\n        }\n        if(extension_strength\
    \ > strongest && extension_strength > extension_class_strength){\n           \
    \ strongest = extension_strength;\n            strongest_name = extension_name;\n\
    \        }\n        if(extension_strength > strongest && extension_strength >\
    \ extension_class_strength_percentage){\n            strongest = extension_strength;\n\
    \            strongest_name = extension_name;\n        }\n    }\n    return strongest_name;\n\
    }\n", "    let extension_strength = {};\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let class_name = class_name.split(\"\
    \").map(x => x.toUpperCase()).join(\"\");\n        let extension_name = extension.split(\"\
    \").map(x => x.toLowerCase()).join(\"\");\n        let extension_strength_class\
    \ = class_name.split(\"\").map(x => x.toUpperCase()).join(\"\").length - extension_name.split(\"\
    \").map(x => x.toLowerCase()).join(\"\").length;\n        extension_strength[extension]\
    \ = extension_strength_class;\n    }\n    let max_strength = 0;\n    let max_extension\
    \ = \"\";\n    for (let key in extension_strength){\n        if (extension_strength[key]\
    \ > max_strength){\n            max_strength = extension_strength[key];\n    \
    \        max_extension = key;\n        }\n    }\n    return class_name + \".\"\
    \ + max_extension;\n}\n", "    var strongest = -1;\n    var strongest_name = \"\
    \";\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_name = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \        var extension_strength = extension.substring(1).toLowerCase();\n    \
    \    var extension_number = extension_strength.length - extension_name.length;\n\
    \        var extension_strength_fraction =  extension_number / extension_strength.length;\n\
    \        if(extension_strength_fraction > strongest){\n            strongest =\
    \ extension_strength_fraction;\n            strongest_name = extension_name;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_name;\n}\n", "  \
    \  var extensions_count = extensions.length;\n    var extensions_strongest = [];\n\
    \    var extensions_strength = [];\n    \n    for(var i = 0; i < extensions_count;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class =\
    \ class_name + extension;\n        var extension_class_name = extension_class.replace(/[^A-Z]/g,'');\n\
    \        var extension_class_strength = extension_class_name.match(/[A-Z]/g).length;\n\
    \        extensions_strongest.push(extension_class_name);\n        extensions_strength.push(extension_class_strength);\n\
    \    }\n    \n    var extensions_strength_sorted = extensions_strength.sort(function(a,\
    \ b){\n        return b - a;\n    });\n    var extensions_strongest_sorted = extensions_strongest.sort(function(a,\
    \ b){\n        return b - a;\n    });\n    \n    var strongest_extension = extensions_strongest_sorted[0];\n\
    \    var strongest_extension_strength = extensions_strength_sorted[0];\n    \n\
    \    for(var i = 0; i < extensions_count; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + extension;\n        var extension_class_name\
    \ = extension_class.replace(/[^A-Z]/g,'');\n        var extension_class_strength\
    \ = extension_class_name.match(/[A-Z]/g).length;\n        \n        if(extensions_strength_sorted[i]\
    \ == strongest_extension_strength){\n            strongest_extension = extension_class_name;\n\
    \        }\n    }\n    \n    return strongest_extension;\n}\n", "    var strongest\
    \ = null;\n    var extension_strengths = {};\n    var class_name_length = class_name.length;\n\
    \    var extensions_length = extensions.length;\n    for(var i = 0; i < extensions_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_length\
    \ = extension.length;\n        var extension_strength = -1;\n        var extension_class_name\
    \ = extension.substr(0, extension_length - 1);\n        var extension_class_name_length\
    \ = extension_class_name.length;\n        for(var j = 0; j < class_name_length;\
    \ j++){\n            var class_char = class_name.charAt(j);\n            var extension_char\
    \ = extension_class_name.charAt(j);\n            if(class_char === extension_char){\n\
    \                extension_strength += 1;\n            }\n        }\n        extension_strengths[extension]\
    \ = extension_strength;\n    }\n    for(var extension in extension_strengths){\n\
    \        if(extension_strengths[extension] > strongest){\n            strongest\
    \ = extension;\n        }\n    }\n    return strongest;\n}\n", "    var strongest_extension\
    \ = null;\n    var extensions_length = extensions.length;\n    var class_name_length\
    \ = class_name.length;\n    \n    // Loop through all the extensions and find\
    \ the strongest one\n    for(var i=0; i<extensions_length; i++){\n        var\
    \ extension = extensions[i];\n        var extension_length = extension.length;\n\
    \        var extension_strength = extension_length - class_name_length;\n    \
    \    \n        // If the extension strength is greater than the strongest extension\
    \ strength\n        // so far, update the strongest extension strength\n     \
    \   if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    \n    // Return the strongest extension\n\
    \    return strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_extension\
    \ = null;\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_class = class_name + extension;\n  \
    \      var extension_strength = Extension_Strength(extension_class);\n       \
    \ if(extension_strength > strongest){\n            strongest = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return strongest_extension;\n\
    }\n", "    let strongest_extension = null;\n    let max_strength = 0;\n    for(let\
    \ extension of extensions){\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(strength > max_strength){\n\
    \            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n", " \
    \   let strongest_extension = null;\n    let strongest_extension_strength = 0;\n\
    \    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = null;\n    var max_strength = 0;\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for(let i = 1; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension.match(/[A-Z]/g).length -\
    \ strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var extensions_count = extensions.length;\n    var extensions_strongest\
    \ = [];\n    var extensions_strength = [];\n    \n    for(var i = 0; i < extensions_count;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class =\
    \ class_name + extension;\n        var extension_class_name = extension_class.substr(0,\
    \ extension_class.length - extension.length);\n        var extension_class_strength\
    \ = extension_class.substr(extension_class.length - extension.length).match(/[A-Z]/g).length;\n\
    \        extensions_strongest.push(extension_class_name);\n        extensions_strength.push(extension_class_strength);\n\
    \    }\n    \n    var extensions_strength_sorted = extensions_strength.sort(function(a,\
    \ b){return b - a});\n    var extensions_strongest_sorted = extensions_strongest.sort(function(a,\
    \ b){return b - a});\n    \n    var extensions_strongest_strength = extensions_strongest_sorted[0];\n\
    \    var extensions_strength_strength = extensions_strength_sorted[0];\n    \n\
    \    if(extensions_strength_strength > extensions_strongest_strength){\n     \
    \   return class_name + extensions_strongest_strength;\n    }\n    else{\n   \
    \     for(var i = 0; i < extensions_strongest_strength; i++){\n            if(extensions_strength_strength\
    \ > extensions_strongest_strength - i){\n                extensions_strongest_strength\
    \ = extensions_strongest_strength - i;\n                extensions_strength_strength\
    \ = extensions_strength_sorted[i];\n            }\n        }\n        return class_name\
    \ + extensions_strongest_strength;\n    }\n}\n", "    var extension_strengths\
    \ = {};\n    extensions.forEach(function(extension){\n        var name = extension.substr(0,\
    \ 1).toUpperCase() + extension.substr(1);\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        extension_strengths[name] = strength;\n\
    \    });\n    var max_strength = extension_strengths[Object.keys(extension_strengths)[0]];\n\
    \    var max_extension = Object.keys(extension_strengths).filter(function(name){\n\
    \        return extension_strengths[name] === max_strength;\n    })[0];\n    return\
    \ class_name + \".\" + max_extension;\n}\n", "    let strongest = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let cap = extension[0].toUpperCase().charCodeAt(0) - extension[0].toLowerCase().charCodeAt(0);\n\
    \        let sm = extension[0].toLowerCase().charCodeAt(0) - extension[0].toUpperCase().charCodeAt(0);\n\
    \        let strength = cap - sm;\n        if (strength > strongest.strength){\n\
    \            strongest = extension;\n        }\n    }\n    return class_name +\
    \ '.' + strongest.extension;\n}\n", "    let cap = class_name.split('').map(x\
    \ => x.toUpperCase()).join('');\n    let sm = class_name.split('').map(x => x.toLowerCase()).join('');\n\
    \    let strength = cap.length - sm.length;\n    let extension_strength = extensions.map(x\
    \ => x.split('').map(x => x.toUpperCase()).join(''))\n        .map(x => x.length).reduce((a,\
    \ b) => a + b);\n    return class_name + extensions.find(x => x.split('').map(x\
    \ => x.toUpperCase()).join('') === cap)\n        .replace(/[^A-Z]/g, '').substr(0,\
    \ strength) + extension_strength;\n}\n", "    let cap_extensions = extensions.filter(extension\
    \ => extension.match(/[A-Z]/)).length;\n    let sml_extensions = extensions.filter(extension\
    \ => extension.match(/[a-z]/)).length;\n    let strength = cap_extensions - sml_extensions;\n\
    \    return class_name + extensions.filter(extension => extension.match(/[A-Z]/))[cap_extensions\
    \ - 1] + extensions.filter(extension => extension.match(/[a-z]/))[sml_extensions\
    \ - 1] + extensions[extensions.length - 1];\n}\n", "\tlet strongest_extension\
    \ = null;\n\tlet strongest_extension_strength = null;\n\tlet strongest_extension_strength_counter\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_class = class_name + extension;\n\t\tlet extension_class_class_name\
    \ = extension_class.slice(0, extension_class.length - 1);\n\t\tlet extension_class_class_name_length\
    \ = extension_class_class_name.length;\n\t\tlet extension_class_class_name_counter\
    \ = 0;\n\t\tfor (let j = 0; j < extension_class_class_name_length; j++){\n\t\t\
    \tlet char = extension_class_class_name.charAt(j);\n\t\t\tif (char === char.toUpperCase()){\n\
    \t\t\t\textension_class_class_name_counter++;\n\t\t\t}\n\t\t}\n\t\tlet extension_class_class_name_counter_ratio\
    \ = extension_class_class_name_counter / extension_class_class_name_length;\n\t\
    \tif (extension_class_class_name_counter_ratio > strongest_extension_strength_counter){\n\
    \t\t\tstrongest_extension_strength_counter = extension_class_class_name_counter_ratio;\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn strongest_extension;\n\
    }\n", "    var extension_strengths = {};\n    var extension_classes = {};\n  \
    \  var extension_class_name = \"\";\n    var extension_class_name_with_strength\
    \ = \"\";\n    \n    for(var i = 0; i < extensions.length; i++){\n        var\
    \ extension = extensions[i];\n        var class_name = class_name + \".\" + extension;\n\
    \        var class_name_with_strength = class_name + \".\" + extension_strengths[extension];\n\
    \        extension_strengths[extension] = -1;\n        extension_classes[extension]\
    \ = class_name;\n        extension_class_name = class_name;\n        extension_class_name_with_strength\
    \ = class_name_with_strength;\n    }\n    \n    var max_strength = -1;\n    var\
    \ max_extension = \"\";\n    \n    for(var extension in extension_strengths){\n\
    \        if(extension_strengths[extension] > max_strength){\n            max_strength\
    \ = extension_strengths[extension];\n            max_extension = extension;\n\
    \        }\n    }\n    \n    return extension_class_name_with_strength;\n}\n",
  "\tlet strongest = -1;\n\tlet strongest_extension = \"\";\n\tfor(let i = 0; i <\
    \ extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap =\
    \ extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap - sm;\n\t\tif((strongest < 0) && (strength > 0)){\n\t\t\
    \tstrongest = strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t\telse\
    \ if((strongest > 0) && (strength < 0)){\n\t\t\tstrongest = strength;\n\t\t\t\
    strongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var extension_strength = null;\n\
    \    var extension_counter = 0;\n    \n    for(var i=0; i<extensions.length; i++){\n\
    \        extension_counter = 0;\n        extension_strength = extensions[i].match(/[A-Z]/g).length;\n\
    \        for(var j=0; j<extensions[i].length; j++){\n            if(extensions[i].charAt(j)\
    \ == extensions[i].charAt(j).toUpperCase()){\n                extension_counter++;\n\
    \            }\n        }\n        if(extension_strength > extension_counter){\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = -1;\n    \n    for(var i = 0;\
    \ i < extensions.length; i++){\n        var extension = extensions[i];\n     \
    \   var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        \n        if(extension_strength > strongest_extension_strength){\n  \
    \          strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;\n}\n", "    var strongest_extension = null;\n    var\
    \ strongest_extension_strength = -1;\n    for(var i = 0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm,string |>\n<| c |>\nI like your solution, but\
    \ I think it would be more efficient to just sort the extensions by their strength\
    \ and then just pick the first one.\n<|/ c |>\n<| c |>\nYes, that's a good idea.\
    \ I was thinking about that but didn't think about it because I didn't think about\
    \ it when I wrote the code.\n<|/ c |>\n<| c |>\nI like your solution, but I think\
    \ it would be more efficient to just sort the extensions by their strength and\
    \ then just pick the first one.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I think it would be more efficient to just sort the extensions by their strength\
    \ and then just pick the first one. \u2013  user2581456 just now   edit\n<|/ c\
    \ |>\n<| c |>\nI like your solution, but I think it would be more efficient to\
    \ just sort the extensions by their strength and then just pick the first one.\
    \ \u2013  user2581456 just now   edit\n<|/ c |>\n<| a tags=javascript,algorithm,string\
    \ |>\nHere's a solution using regular expressions:\n<code>", "    var extension_strength\
    \ = {};\n    extensions.forEach(function(extension){\n        var extension_class\
    \ = extension.charAt(0).toUpperCase() + extension.slice(1);\n        var extension_strength_class\
    \ = extension_strength[extension_class] || 0;\n        extension_strength[extension_class]\
    \ = extension_strength_class + 1;\n    });\n    var max_extension_strength = -1;\n\
    \    var max_extension_class = null;\n    for(var extension in extension_strength){\n\
    \        if(extension_strength[extension] > max_extension_strength){\n       \
    \     max_extension_strength = extension_strength[extension];\n            max_extension_class\
    \ = extension;\n        }\n    }\n    return class_name + '.' + max_extension_class;\n\
    }\n", "    var extension_strength = {};\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i].toLowerCase();\n        var class_name\
    \ = extension.substring(0,1).toUpperCase() + extension.substring(1);\n       \
    \ var extension_strength_class = extension_strength[class_name];\n        if(extension_strength_class\
    \ === undefined){\n            extension_strength[class_name] = extension_strength_class\
    \ = -1;\n        }\n        extension_strength_class += 1;\n    }\n    var max_strength\
    \ = 0;\n    var max_extension = \"\";\n    for(var class_name in extension_strength){\n\
    \        if(extension_strength[class_name] > max_strength){\n            max_strength\
    \ = extension_strength[class_name];\n            max_extension = class_name;\n\
    \        }\n    }\n    return max_extension;\n}\n", "    let extension_strengths\
    \ = {};\n    extensions.forEach(extension => {\n        let extension_class =\
    \ class_name + extension;\n        let extension_strength = extension_strengths[extension_class]\
    \ || 0;\n        extension_strengths[extension_class] = extension_strength;\n\
    \    });\n    let max_strength = Math.max(...Object.values(extension_strengths));\n\
    \    let max_extension = Object.keys(extension_strengths).find(extension => extension_strengths[extension]\
    \ === max_strength);\n    return max_extension;\n}\n", "    let extension_strengths\
    \ = [];\n    for (let extension of extensions){\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     extension_strengths.push(extension_strength);\n    }\n    extension_strengths.sort((a,\
    \ b) => b - a);\n    return class_name + extension_strengths[0];\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n",
  "    var strongest_extension = null;\n    var strongest_extension_strength = null;\n\
    \    var extension_length = extensions.length;\n    var class_length = class_name.length;\n\
    \    \n    for(var i = 0; i < extension_length; i++){\n        var extension =\
    \ extensions[i];\n        var extension_class_name = extension.substring(class_length\
    \ - extension.length);\n        var extension_class_name_length = extension_class_name.length;\n\
    \        \n        var extension_strength = extension_class_name_length - class_length;\n\
    \        \n        if(extension_strength > strongest_extension_strength){\n  \
    \          strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    \n    return strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = null;\n    var strongest_extension_strength_counter = 0;\n    var strongest_extension_strength_counter_max\
    \ = 0;\n    var strongest_extension_strength_counter_max_index = 0;\n    \n  \
    \  for(var i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n        else if(extension_strength == strongest_extension_strength){\n \
    \           strongest_extension_strength_counter++;\n            if(strongest_extension_strength_counter\
    \ > strongest_extension_strength_counter_max){\n                strongest_extension_strength_counter_max\
    \ = strongest_extension_strength_counter;\n                strongest_extension_strength_counter_max_index\
    \ = i;\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var max_strength = 0;\n    for(var\
    \ i = 0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    var strongest = null;\n    var strongest_strength\
    \ = null;\n    var strongest_extension = null;\n    var extension_length = extensions.length;\n\
    \    var class_length = class_name.length;\n    \n    for(var i=0; i<extension_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class_name\
    \ = extension.substring(class_length+1);\n        var extension_class_name_length\
    \ = extension_class_name.length;\n        \n        for(var j=0; j<class_length;\
    \ j++){\n            var class_char = class_name.charAt(j);\n            var class_char_upper\
    \ = class_char.toUpperCase();\n            var class_char_lower = class_char.toLowerCase();\n\
    \            \n            if(class_char_upper == extension_class_name_char){\n\
    \                if((j+extension_class_name_length) == class_length){\n      \
    \              if(extension_strength == null){\n                        strongest\
    \ = extension;\n                        strongest_strength = -1;\n           \
    \         }\n                    else{\n                        if(extension_strength\
    \ > strongest_strength){\n                            strongest = extension;\n\
    \                            strongest_strength = extension_strength;\n      \
    \                  }\n                    }\n                }\n            }\n\
    \            else if(class_char_lower == extension_class_name_char){\n       \
    \         if((j+extension_class_name_length) == class_length){\n             \
    \       if(extension_strength == null){\n                        strongest = extension;\n\
    \                        strongest_strength = -1;\n                    }\n   \
    \                 else{\n                        if(extension_strength > strongest_strength){\n\
    \                            strongest = extension;\n                        \
    \    strongest_strength = extension_strength;\n                        }\n   \
    \                 }\n                }\n            }\n        }\n    }\n    \n\
    \    return strongest;\n}\n", "    var strongest_extension = '';\n    var strongest_extension_strength\
    \ = 0;\n    for(var i = 0; i<extensions.length; i++){\n        var extension =\
    \ extensions[i];\n        var class_name_extension = class_name + extension;\n\
    \        var class_name_extension_strength = Extension_Strength(class_name_extension);\n\
    \        if(class_name_extension_strength > strongest_extension_strength){\n \
    \           strongest_extension = class_name_extension;\n            strongest_extension_strength\
    \ = class_name_extension_strength;\n        }\n    }\n    return strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = null;\n    \n    for(var i = 0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var class_name = class_name + extension;\n       \
    \ var class_extensions = GetExtensions(class_name);\n        \n        if(class_extensions.length\
    \ == 0){\n            continue;\n        }\n        \n        var class_extensions_strength\
    \ = 0;\n        for(var j = 0; j<class_extensions.length; j++){\n            var\
    \ extension = class_extensions[j];\n            var class_name = class_name +\
    \ extension;\n            var class_extensions = GetExtensions(class_name);\n\
    \            \n            if(class_extensions.length == 0){\n               \
    \ continue;\n            }\n            \n            var class_extensions_strength\
    \ = 0;\n            for(var k = 0; k<class_extensions.length; k++){\n        \
    \        var extension = class_extensions[k];\n                var class_name\
    \ = class_name + extension;\n                var class_extensions = GetExtensions(class_name);\n\
    \                \n                if(class_extensions.length == 0){\n       \
    \             continue;\n                }\n                \n               \
    \ var class_extensions_strength = 0;\n                for(var l = 0; l<class_extensions.length;\
    \ l++){\n                    var extension = class_extensions[l];\n          \
    \          var class_name = class_name + extension;\n                    var class_extensions\
    \ = GetExtensions(class_name);\n                    \n                    if(class_extensions.length\
    \ == 0){\n                        continue;\n                    }\n         \
    \           \n                    var class_extensions_strength = 0;\n       \
    \             for(var m = 0; m<class_extensions.length; m++){\n              \
    \          var extension = class_extensions[m];\n                        var class_name\
    \ = class_name + extension;\n                        var class_extensions = GetExtensions(class_name);\n\
    \                        \n                        if(class_extensions.length\
    \ == 0){\n                            continue;\n                        }\n \
    \                       \n                        var class_extensions_strength\
    \ = 0;\n                        for(var n = 0; n<class_extensions.length; n++){\n\
    \                            var extension = class_extensions[n];\n          \
    \                  var class_name = class_name + extension;\n                \
    \            var class_extensions = GetExtensions(class_name);\n             \
    \               \n                            if(class_extensions.length == 0){\n\
    \                                continue;\n                            }\n  \
    \                          \n                            var class_extensions_strength\
    \ = 0;\n                            for(var o = 0; o<class_extensions.length;\
    \ o++){\n                                var extension = class_extensions[o];\n\
    \                                var class_name = class_name + extension;\n  \
    \                              var class_extensions = GetExtensions(class_name);\n\
    \                                \n                                if(class_extensions.length\
    \ == 0){\n                                    continue;\n                    \
    \            }\n                                \n                           \
    \     var class_extensions_strength = 0;\n                                for(var\
    \ p = 0; p<class_extensions.length; p++){\n                                  \
    \  var extension = class_extensions[p];\n                                    var\
    \ class_name = class_name + extension;\n                                    var\
    \ class_extensions = Get", "    var extensions_count = extensions.length;\n  \
    \  var extensions_count_cap = extensions_count.toUpperCase().length;\n    var\
    \ extensions_count_sm = extensions_count.toLowerCase().length;\n    var extensions_count_diff\
    \ = extensions_count_cap - extensions_count_sm;\n    var extensions_count_max\
    \ = extensions_count - 1;\n    var extensions_count_min = extensions_count + 1;\n\
    \    var extensions_count_index = extensions_count_max - extensions_count_min\
    \ + 1;\n    var extensions_count_cap_max = extensions_count_cap - 1;\n    var\
    \ extensions_count_cap_min = extensions_count_cap + 1;\n    var extensions_count_sm_max\
    \ = extensions_count_sm - 1;\n    var extensions_count_sm_min = extensions_count_sm\
    \ + 1;\n    var extensions_count_diff_max = extensions_count_diff - 1;\n    var\
    \ extensions_count_diff_min = extensions_count_diff + 1;\n    var extensions_count_max_max\
    \ = extensions_count_max - 1;\n    var extensions_count_max_min = extensions_count_max\
    \ + 1;\n    var extensions_count_min_max = extensions_count_min - 1;\n    var\
    \ extensions_count_min_min = extensions_count_min + 1;\n    var extensions_count_index_max\
    \ = extensions_count_index - 1;\n    var extensions_count_index_min = extensions_count_index\
    \ + 1;\n    var extensions_count_cap_max_max = extensions_count_cap_max - 1;\n\
    \    var extensions_count_cap_max_min = extensions_count_cap_max + 1;\n    var\
    \ extensions_count_cap_min_max = extensions_count_cap_min - 1;\n    var extensions_count_cap_min_min\
    \ = extensions_count_cap_min + 1;\n    var extensions_count_sm_max_max = extensions_count_sm_max\
    \ - 1;\n    var extensions_count_sm_max_min = extensions_count_sm_max + 1;\n \
    \   var extensions_count_sm_min_max = extensions_count_sm_min - 1;\n    var extensions_count_sm_min_min\
    \ = extensions_count_sm_min + 1;\n    var extensions_count_diff_max_max = extensions_count_diff_max\
    \ - 1;\n    var extensions_count_diff_max_min = extensions_count_diff_max + 1;\n\
    \    var extensions_count_diff_min_max = extensions_count_diff_min - 1;\n    var\
    \ extensions_count_diff_min_min = extensions_count_diff_min + 1;\n    var extensions_count_max_max_max\
    \ = extensions_count_max_max - 1;\n    var extensions_count_max_max_min = extensions_count_max_max\
    \ + 1;\n    var extensions_count_max_min_max = extensions_count_max_min - 1;\n\
    \    var extensions_count_max_min_min = extensions_count_max_min + 1;\n    var\
    \ extensions_count_min_max_max = extensions_count_min_max - 1;\n    var extensions_count_min_max_min\
    \ = extensions_", "\tlet cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n\
    \tlet sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n\tlet cap_extensions_length\
    \ = cap_extensions.length;\n\tlet sm_extensions_length = sm_extensions.length;\n\
    \tlet strongest_extension = null;\n\tlet strongest_extension_strength = 0;\n\t\
    \n\tif(cap_extensions_length >= sm_extensions_length){\n\t\tfor(let i = 0; i <\
    \ cap_extensions_length; i++){\n\t\t\tlet cap_extension = cap_extensions[i];\n\
    \t\t\tlet sm_extension = sm_extensions[i];\n\t\t\tlet cap_extension_strength =\
    \ cap_extension.match(/[A-Z]/).length - sm_extension.match(/[a-z]/).length;\n\t\
    \t\tif(cap_extension_strength > strongest_extension_strength){\n\t\t\t\tstrongest_extension\
    \ = cap_extension;\n\t\t\t\tstrongest_extension_strength = cap_extension_strength;\n\
    \t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tfor(let i = 0; i < sm_extensions_length; i++){\n\
    \t\t\tlet sm_extension = sm_extensions[i];\n\t\t\tlet cap_extension = cap_extensions[i];\n\
    \t\t\tlet sm_extension_strength = sm_extension.match(/[a-z]/).length - cap_extension.match(/[A-Z]/).length;\n\
    \t\t\tif(sm_extension_strength > strongest_extension_strength){\n\t\t\t\tstrongest_extension\
    \ = sm_extension;\n\t\t\t\tstrongest_extension_strength = sm_extension_strength;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = null;\n    var strongest_extension_strength = 0;\n\
    \    for(var i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = null;\n    var strongest_extension_strength = 0;\n\
    \    var extension_counter = 0;\n    \n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_counter\
    \ = extension_counter + 1;\n        var extension_strength = extension_counter;\n\
    \        \n        var class_name_length = class_name.length;\n        var extension_length\
    \ = extension.length;\n        \n        for(var j = 0; j < extension_length;\
    \ j++){\n            var char = extension[j];\n            var char_counter =\
    \ char_counter + 1;\n            var char_strength = char_counter;\n         \
    \   \n            var char_class_name_length = class_name_length;\n          \
    \  \n            for(var k = 0; k < char_class_name_length; k++){\n          \
    \      var char_class_char = class_name.charAt(k);\n                var char_class_counter\
    \ = char_class_counter + 1;\n                var char_class_strength = char_class_counter;\n\
    \                \n                var char_strength_difference = char_class_strength\
    \ - char_strength;\n                \n                if(char_strength_difference\
    \ > strongest_extension_strength){\n                    strongest_extension_strength\
    \ = char_strength_difference;\n                    strongest_extension = extension;\n\
    \                }\n            }\n        }\n    }\n    \n    return strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ let extension_strength = {};\n    extensions.forEach((extension)=>{\n      \
    \  let class_name = extension.substr(0, extension.length - 1);\n        let class_strength\
    \ = extension_strength[class_name];\n        if(class_strength === undefined){\n\
    \            class_strength = -1;\n        }\n        class_strength = class_strength\
    \ + extension.substr(extension.length - 1);\n        extension_strength[class_name]\
    \ = class_strength;\n    });\n    let max_strength = -1;\n    let max_extension\
    \ = '';\n    for(let class_name in extension_strength){\n        if(extension_strength[class_name]\
    \ > max_strength){\n            max_strength = extension_strength[class_name];\n\
    \            max_extension = class_name;\n        }\n    }\n    return max_extension;\n\
    }\n", "    let extension_strength = {};\n    extensions.forEach((extension)=>{\n\
    \        let extension_name = extension.split('')\n            .map(letter=>letter.toUpperCase())\n\
    \            .join('');\n        let extension_strength_letter = extension_name.split('')\n\
    \            .map(letter=>letter.toLowerCase())\n            .join('');\n    \
    \    let extension_strength_number = extension_strength_letter.length - extension_strength_letter.length;\n\
    \        extension_strength[extension_strength_number] = extension;\n    });\n\
    \    let max_strength = Object.keys(extension_strength)\n        .map(key=>extension_strength[key])\n\
    \        .reduce((a, b) => a.length - b.length);\n    let strongest_extension\
    \ = extension_strength[max_strength];\n    return `${class_name}.${strongest_extension}`;\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    var extension_counter = 0;\n    var extension_counter_strength = 0;\n\
    \    var extension_counter_array = [];\n    \n    for(var i = 0; i < extensions.length;\
    \ i++){\n        extension_counter_array[i] = 0;\n    }\n    \n    for(var i =\
    \ 0; i < extensions.length; i++){\n        extension_counter = extensions[i].charAt(0).toUpperCase()\
    \ + extensions[i].slice(1);\n        extension_counter_strength = extension_counter.charCodeAt(0)\
    \ - 65;\n        extension_counter_array[extension_counter.charCodeAt(0)]++;\n\
    \    }\n    \n    for(var i = 0; i < extensions.length; i++){\n        extension_counter\
    \ = extensions[i].charAt(0).toLowerCase() + extensions[i].slice(1);\n        extension_counter_strength\
    \ = extension_counter.charCodeAt(0) - 97;\n        extension_counter_array[extension_counter.charCodeAt(0)]++;\n\
    \    }\n    \n    for(var i = 0; i < extensions.length; i++){\n        if(extension_counter_array[i]\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_counter_array[i];\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var extensions_count = extensions.length;\n    var extensions_strength\
    \ = [];\n    var extensions_name = [];\n    for(var i = 0; i < extensions_count;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class =\
    \ class_name + extension;\n        var extension_strength = extension_class.match(/[A-Z][a-z]+/g).length\
    \ - extension_class.match(/[a-z][A-Z]+/g).length;\n        extensions_strength.push(extension_strength);\n\
    \        extensions_name.push(extension);\n    }\n    var extensions_strength_sorted\
    \ = extensions_strength.sort(function(a, b){return b - a});\n    var extensions_name_sorted\
    \ = extensions_name.sort(function(a, b){return b - a});\n    var extensions_strength_length\
    \ = extensions_strength_sorted.length;\n    var extensions_name_length = extensions_name_sorted.length;\n\
    \    var extensions_strength_average = extensions_strength_length / extensions_count;\n\
    \    var extensions_name_average = extensions_name_length / extensions_count;\n\
    \    var extensions_strength_max = extensions_strength_sorted[0];\n    var extensions_name_max\
    \ = extensions_name_sorted[0];\n    for(var i = 0; i < extensions_strength_length;\
    \ i++){\n        if(extensions_strength_sorted[i] === extensions_strength_max){\n\
    \            return class_name + extensions_name_max;\n        }\n    }\n    for(var\
    \ i = 0; i < extensions_name_length; i++){\n        if(extensions_name_sorted[i]\
    \ === extensions_name_max){\n            return class_name + extensions_name_max;\n\
    \        }\n    }\n    var extensions_strength_min = extensions_strength_sorted[0];\n\
    \    var extensions_name_min = extensions_name_sorted[0];\n    for(var i = 0;\
    \ i < extensions_strength_length; i++){\n        if(extensions_strength_sorted[i]\
    \ === extensions_strength_min){\n            return class_name + extensions_name_min;\n\
    \        }\n    }\n    for(var i = 0; i < extensions_name_length; i++){\n    \
    \    if(extensions_name_sorted[i] === extensions_name_min){\n            return\
    \ class_name + extensions_name_min;\n        }\n    }\n    var extensions_strength_median\
    \ = extensions_strength_sorted[extensions_strength_length / 2];\n    var extensions_name_median\
    \ = extensions_name_sorted[extensions_name_length / 2];\n    for(var i = 0; i\
    \ < extensions_strength_length; i++){\n        if(extensions_strength_sorted[i]\
    \ === extensions_strength_median){\n            return class_name + extensions_name_median;\n\
    \        }\n    }\n    for(var i = 0; i < extensions_name_length; i++){\n    \
    \    if(extensions_name_sorted[i] === extensions_name_median){\n            return\
    \ class_name + extensions_name_median;\n        }\n    }\n    return class_name\
    \ + extensions_name_sorted[0];\n}\n", "    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for(let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ let strongest_extension = '';\n    let strongest_extension_strength = 0;\n \
    \   for (let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    // Write your code here\n    var strongest = -1;\n    var extension_length\
    \ = extensions.length;\n    var class_length = class_name.length;\n    for(var\
    \ i = 0; i < extension_length; i++){\n        var extension = extensions[i];\n\
    \        var class_char = class_name.charAt(i);\n        var extension_char =\
    \ extension.charAt(0);\n        var class_char_number = class_char.charCodeAt(0);\n\
    \        var extension_char_number = extension_char.charCodeAt(0);\n        var\
    \ strength = class_char_number - extension_char_number;\n        if(strength >\
    \ strongest){\n            strongest = strength;\n        }\n    }\n    return\
    \ class_name + extensions[strongest];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript\
    \ |>\n<code>", "    let cap_extensions = extensions.filter(extension => extension.match(/[A-Z]/)).length;\n\
    \    let sm_extensions = extensions.filter(extension => extension.match(/[a-z]/)).length;\n\
    \    let strength = cap_extensions - sm_extensions;\n    return class_name + extensions.filter(extension\
    \ => extension.match(/[A-Z]/))[strength].toLowerCase();\n}\n", "\tlet strongest\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet strength\
    \ = cap - sm;\n\t\tif (strength > strongest.strength){\n\t\t\tstrongest = extension;\n\
    \t\t}\n\t}\n\treturn class_name + '.' + strongest;\n}\n", "    var extension_strength\
    \ = {};\n    for(var i=0; i<extensions.length; i++){\n        var extension =\
    \ extensions[i].toLowerCase();\n        var cap = extension.charAt(0).toUpperCase();\n\
    \        var sm = extension.charAt(0).toLowerCase();\n        var strength = cap\
    \ - sm;\n        if(extension_strength[strength] === undefined){\n           \
    \ extension_strength[strength] = extension;\n        }else{\n            var index\
    \ = extension_strength[strength].indexOf(extension);\n            if(index ===\
    \ -1){\n                extension_strength[strength].push(extension);\n      \
    \      }else{\n                extension_strength[strength].splice(index, 1);\n\
    \            }\n        }\n    }\n    var strongest = Object.keys(extension_strength).sort().reverse()[0];\n\
    \    return class_name + '.' + strongest + '.';\n}\n", "    var extension_strength\
    \ = {};\n    for(var i=0;i<extensions.length;i++){\n        var extension = extensions[i];\n\
    \        var extension_name = extension.substr(0, 1).toUpperCase() + extension.substr(1);\n\
    \        var extension_strength_letter = extension_name.substr(0, 1).toLowerCase();\n\
    \        var extension_strength_number = extension_name.substr(1).toLowerCase();\n\
    \        var extension_strength_fraction =  extension_strength_letter - extension_strength_number;\n\
    \        extension_strength[extension] = extension_strength_fraction;\n    }\n\
    \    var max_strength = 0;\n    var max_extension = '';\n    for(var key in extension_strength){\n\
    \        if(extension_strength[key] > max_strength){\n            max_strength\
    \ = extension_strength[key];\n            max_extension = key;\n        }\n  \
    \  }\n    return class_name + '.' + max_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++){\n       \
    \ let extension = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let strongest_extension = '';\n    let strongest_extension_strength\
    \ = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet current_extension = extensions[i];\n\t\tlet current_extension_strength\
    \ = current_extension.match(/[A-Z]/g).length - current_extension.match(/[a-z]/g).length;\n\
    \t\tlet current_extension_strength_percentage = current_extension_strength / extensions.length;\n\
    \t\tif (current_extension_strength_percentage > strongest_extension_strength_percentage){\n\
    \t\t\tstrongest_extension = current_extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + '.' + strongest_extension;\n}\n", "\tlet strongest_extension = null;\n\tlet\
    \ strongest_extension_strength = 0;\n\tlet extension_length = extensions.length;\n\
    \tfor(let i = 0; i < extension_length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_class_name = class_name + extension;\n\t\tlet extension_class_name_length\
    \ = extension_class_name.length;\n\t\tlet extension_class_name_strength = extension_class_name.match(/[A-Z]/g).length\
    \ - extension_class_name.match(/[a-z]/g).length;\n\t\tlet extension_strength =\
    \ extension_class_name_strength - strongest_extension_strength;\n\t\tif(extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + strongest_extension;\n\
    }\n", "    var extension_strength = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.split(\".\")[0];\n        var extension_name\
    \ = extension.split(\".\")[1];\n        var extension_strength_class = extension_strength[class_name];\n\
    \        if(extension_strength_class === undefined){\n            extension_strength[class_name]\
    \ = extension_name;\n        }else{\n            var extension_strength_class_name\
    \ = extension_strength[class_name];\n            if(extension_strength_class_name\
    \ > extension_name){\n                extension_strength[class_name] = extension_name;\n\
    \            }\n        }\n    });\n    var strongest_extension = \"\";\n    for(var\
    \ class_name in extension_strength){\n        var extension_strength_class_name\
    \ = extension_strength[class_name];\n        var extension_strength_class_name_split\
    \ = extension_strength_class_name.split(\".\");\n        var extension_strength_class_name_length\
    \ = extension_strength_class_name_split.length;\n        var extension_strength_class_name_strength\
    \ = extension_strength_class_name_split[extension_strength_class_name_length-1];\n\
    \        if(extension_strength_class_name_strength > strongest_extension){\n \
    \           strongest_extension = class_name + \".\" + extension_strength_class_name;\n\
    \        }\n    }\n    return strongest_extension;\n}\n", "    var extension_strength\
    \ = {};\n    for(var i in extensions){\n        var extension = extensions[i];\n\
    \        var class_name = class_name.split(\"\").map(function(letter){\n     \
    \       return letter.toUpperCase();\n        }).join(\"\");\n        var extension_name\
    \ = extension.split(\"\").map(function(letter){\n            return letter.toLowerCase();\n\
    \        }).join(\"\");\n        var extension_strength_letter = extension_name.split(\"\
    \").map(function(letter){\n            return letter.toUpperCase().charCodeAt(0)\
    \ - letter.charCodeAt(0);\n        }).reduce(function(a, b){\n            return\
    \ a + b;\n        });\n        extension_strength[extension] = extension_strength_letter;\n\
    \    }\n    var strongest_extension = extension_strength[extensions[0]];\n   \
    \ for(var i in extensions){\n        var extension = extensions[i];\n        var\
    \ class_name = class_name.split(\"\").map(function(letter){\n            return\
    \ letter.toUpperCase();\n        }).join(\"\");\n        var extension_name =\
    \ extension.split(\"\").map(function(letter){\n            return letter.toLowerCase();\n\
    \        }).join(\"\");\n        var extension_strength_letter = extension_name.split(\"\
    \").map(function(letter){\n            return letter.toUpperCase().charCodeAt(0)\
    \ - letter.charCodeAt(0);\n        }).reduce(function(a, b){\n            return\
    \ a + b;\n        });\n        if(extension_strength[extension] > strongest_extension){\n\
    \            strongest_extension = extension_strength[extension];\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}\n", "    let extension_strengths\
    \ = {};\n    extensions.forEach((extension) => {\n        let extension_class\
    \ = extension.charAt(0).toUpperCase() + extension.slice(1);\n        extension_strengths[extension_class]\
    \ = extension_strengths[extension_class] || 0;\n        extension_strengths[extension_class]++;\n\
    \    });\n    let max_strength = -1;\n    let max_extension = '';\n    for (let\
    \ extension in extension_strengths) {\n        if (extension_strengths[extension]\
    \ > max_strength) {\n            max_strength = extension_strengths[extension];\n\
    \            max_extension = extension;\n        }\n    }\n    return `${class_name}.${max_extension}`;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = null;\n    var strongest_extension_strength_counter = 0;\n    var strongest_extension_strength_counter2\
    \ = 0;\n    var strongest_extension_strength_counter3 = 0;\n    var strongest_extension_strength_counter4\
    \ = 0;\n    var strongest_extension_strength_counter5 = 0;\n    var strongest_extension_strength_counter6\
    \ = 0;\n    var strongest_extension_strength_counter7 = 0;\n    var strongest_extension_strength_counter8\
    \ = 0;\n    var strongest_extension_strength_counter9 = 0;\n    var strongest_extension_strength_counter10\
    \ = 0;\n    var strongest_extension_strength_counter11 = 0;\n    var strongest_extension_strength_counter12\
    \ = 0;\n    var strongest_extension_strength_counter13 = 0;\n    var strongest_extension_strength_counter14\
    \ = 0;\n    var strongest_extension_strength_counter15 = 0;\n    var strongest_extension_strength_counter16\
    \ = 0;\n    var strongest_extension_strength_counter17 = 0;\n    var strongest_extension_strength_counter18\
    \ = 0;\n    var strongest_extension_strength_counter19 = 0;\n    var strongest_extension_strength_counter20\
    \ = 0;\n    var strongest_extension_strength_counter21 = 0;\n    var strongest_extension_strength_counter22\
    \ = 0;\n    var strongest_extension_strength_counter23 = 0;\n    var strongest_extension_strength_counter24\
    \ = 0;\n    var strongest_extension_strength_counter25 = 0;\n    var strongest_extension_strength_counter26\
    \ = 0;\n    var strongest_extension_strength_counter27 = 0;\n    var strongest_extension_strength_counter28\
    \ = 0;\n    var strongest_extension_strength_counter29 = 0;\n    var strongest_extension_strength_counter30\
    \ = 0;\n    var strongest_extension_strength_counter31 = 0;\n    var strongest_extension_strength_counter32\
    \ = 0;\n    var strongest_extension_strength_counter33 = 0;\n    var strongest_extension_strength_counter34\
    \ = 0;\n    var strongest_extension_strength_counter35 = 0;\n    var strongest_extension_strength_counter36\
    \ = 0;\n    var strongest_extension_strength_counter37 = 0;\n    var strongest_extension_strength_counter38\
    \ = 0;\n    var strongest_extension_strength_counter39 = 0;\n    var strongest_extension_strength_counter40\
    \ = 0;\n    var strongest_extension_strength_counter41 = 0;\n    var strongest_extension_strength_counter",
  "    var strongest_extension = null;\n    var strongest_extension_strength = 0;\n\
    \    var extensions_length = extensions.length;\n    for(var i = 0; i < extensions_length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name_length\
    \ = class_name.length;\n        var extension_length = extension.length;\n   \
    \     var extension_strength = extension_length - class_name_length;\n       \
    \ if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extension_length\
    \ = extensions.length;\n    for(var i=0; i<extension_length; i++){\n        var\
    \ extension = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length;\n\
    \        var extension_strength_lower = extension.match(/[a-z]/g).length;\n  \
    \      var extension_strength_upper = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        var extension_strength_total = extension_strength + extension_strength_lower\
    \ + extension_strength_upper;\n        if(extension_strength_total > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength_total;\n        }\n    }\n    return class_name + \".\"\
    \ + strongest_extension;\n}\n", "    let extension_strength = {};\n    for (let\
    \ i = 0; i < extensions.length; i++){\n        let extension = extensions[i].toLowerCase();\n\
    \        let class_name_length = class_name.length;\n        let extension_length\
    \ = extension.length;\n        let strength = class_name_length - extension_length;\n\
    \        if (extension_strength[extension] == undefined){\n            extension_strength[extension]\
    \ = strength;\n        }\n        else{\n            if (extension_strength[extension]\
    \ > strength){\n                extension_strength[extension] = strength;\n  \
    \          }\n        }\n    }\n    let strongest_extension = Object.keys(extension_strength).sort((a,b)\
    \ => extension_strength[b] - extension_strength[a]).pop();\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let extension_strengths = {};\n \
    \   extensions.forEach((extension) => {\n        let class_name = extension.split(\"\
    .\")[0];\n        let extension_name = extension.split(\".\")[1];\n        let\
    \ extension_strength = extension_name.match(/[A-Z]/g).length - extension_name.match(/[a-z]/g).length;\n\
    \        extension_strengths[extension_strength] = extension_name;\n    });\n\
    \    let max_strength = Object.keys(extension_strengths).reduce((a, b) => Math.max(a,\
    \ b));\n    let strongest_extension = extension_strengths[max_strength];\n   \
    \ return class_name + \".\" + strongest_extension;\n}\n", "\tlet cap_extensions\
    \ = extensions.filter(e => e.match(/[A-Z]/));\n\tlet sm_extensions = extensions.filter(e\
    \ => e.match(/[a-z]/));\n\tlet cap_extensions_count = cap_extensions.length;\n\
    \tlet sm_extensions_count = sm_extensions.length;\n\tlet cap_extensions_sm = cap_extensions_count\
    \ - sm_extensions_count;\n\tlet sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n\
    \tlet strength = cap_extensions_sm/sm_extensions_sm;\n\tlet strongest_extension\
    \ = class_name + extensions.find(e => e.match(/[A-Z]/))\n\t\t.replace(/[A-Z]/g,\
    \ () => cap_extensions_sm)\n\t\t.replace(/[a-z]/g, () => sm_extensions_sm);\n\t\
    \n\treturn strongest_extension;\n}\n", "    var extension_strength = {};\n   \
    \ var extension_classes = {};\n    extensions.forEach(function(extension){\n \
    \       var class_name = extension.substr(0, 1).toUpperCase() + extension.substr(1);\n\
    \        var class_index = extension_classes[class_name];\n        if(class_index\
    \ === undefined){\n            class_index = extension_classes[class_name] = extensions.length;\n\
    \        }\n        extension_strength[extension] = class_index;\n    });\n  \
    \  var max_strength = -1;\n    var max_extension;\n    for(var extension in extension_strength){\n\
    \        if(extension_strength[extension] > max_strength){\n            max_strength\
    \ = extension_strength[extension];\n            max_extension = extension;\n \
    \       }\n    }\n    return class_name + '.' + max_extension;\n}\n", "\tlet extension_strengths\
    \ = {};\n\tfor (let extension of extensions){\n\t\tlet class_name = extension.substr(0,\
    \ extension.indexOf(\".\"));\n\t\tlet extension_name = extension.substr(extension.indexOf(\"\
    .\") + 1);\n\t\tlet class_strength = extension_strengths[class_name];\n\t\tif\
    \ (class_strength === undefined){\n\t\t\tclass_strength = -1;\n\t\t}\n\t\tlet\
    \ extension_strength = extension_strengths[extension_name];\n\t\tif (extension_strength\
    \ === undefined){\n\t\t\textension_strength = -1;\n\t\t}\n\t\tlet strength = class_strength\
    \ - extension_strength;\n\t\tif (strength > 0){\n\t\t\textension_strengths[extension_name]\
    \ = strength;\n\t\t}\n\t\telse{\n\t\t\textension_strengths[extension_name] = class_strength;\n\
    \t\t}\n\t}\n\tlet strongest = extension_strengths[Object.keys(extension_strengths)[0]];\n\
    \tlet strongest_name = Object.keys(extension_strengths)[0];\n\tfor (let extension\
    \ of extensions){\n\t\tlet class_name = extension.substr(0, extension.indexOf(\"\
    .\"));\n\t\tlet extension_name = extension.substr(extension.indexOf(\".\") + 1);\n\
    \t\tlet class_strength = extension_strengths[class_name];\n\t\tif (class_strength\
    \ === undefined){\n\t\t\tclass_strength = -1;\n\t\t}\n\t\tlet extension_strength\
    \ = extension_strengths[extension_name];\n\t\tif (extension_strength === undefined){\n\
    \t\t\textension_strength = -1;\n\t\t}\n\t\tlet strength = class_strength - extension_strength;\n\
    \t\tif (strength > strongest){\n\t\t\tstrongest = strength;\n\t\t\tstrongest_name\
    \ = extension_name;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_name;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = null;\n    var extension_length = extensions.length;\n    var class_length\
    \ = class_name.length;\n    \n    for(var i=0; i<extension_length; i++){\n   \
    \     var extension = extensions[i];\n        var extension_class_name = extension.substr(0,\
    \ class_length);\n        var extension_class_name_length = extension_class_name.length;\n\
    \        \n        if(extension_class_name_length < class_length){\n         \
    \   continue;\n        }\n        \n        var extension_class_name_lowercase\
    \ = extension_class_name_lowercase(extension_class_name);\n        var extension_class_name_uppercase\
    \ = extension_class_name_uppercase(extension_class_name);\n        \n        var\
    \ extension_strength = extension_class_name_length - class_length;\n        \n\
    \        if(extension_strength < 0){\n            continue;\n        }\n     \
    \   \n        if(strongest_extension_strength == null || extension_strength >\
    \ strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    \n    return strongest_extension;\n}\n", "    // Write your code here\n\
    \    var strongest_extension = '';\n    var strongest_extension_strength = 0;\n\
    \    for(var i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "\t\
    let strongest_extension = '';\n\tlet strongest_extension_strength = 0;\n\tfor(let\
    \ i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\t\
    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name_extension\
    \ = class_name + extension;\n        var class_name_extension_strength = Extension_Strength(class_name_extension);\n\
    \        \n        if(strongest_extension_strength < class_name_extension_strength){\n\
    \            strongest_extension_strength = class_name_extension_strength;\n \
    \           strongest_extension = class_name_extension;\n        }\n    }\n  \
    \  \n    return strongest_extension;\n}\n", "\tlet strongest_extension = '';\n\
    \tlet strongest_extension_strength = 0;\n\tlet class_name_length = class_name.length;\n\
    \tlet extensions_length = extensions.length;\n\tfor(let i = 0; i < extensions_length;\
    \ i++){\n\t\tlet extension_length = extensions[i].length;\n\t\tlet extension_strength\
    \ = extensions[i].charCodeAt(0) - class_name.charCodeAt(0);\n\t\tlet extension_class_name\
    \ = extensions[i].substr(0, extension_length);\n\t\tlet extension_class_name_length\
    \ = extension_class_name.length;\n\t\tlet extension_class_name_strength = extension_class_name.charCodeAt(0)\
    \ - class_name.charCodeAt(0);\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength - extension_class_name_strength_difference;\n\
    \t\tlet extension_class_name_strength_difference = extension_class_name_strength_difference\
    \ / extension_class_name_length;\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength_difference * extension_length;\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength_difference / extension_class_name_length;\n\t\
    \tlet extension_class_name_strength_difference = extension_class_name_strength_difference\
    \ / extension_class_name_length;\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength_difference / extension_class_name_length;\n\t\
    \tlet extension_class_name_strength_difference = extension_class_name_strength_difference\
    \ / extension_class_name_length;\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength_difference / extension_class_name_length;\n\t\
    \tlet extension_class_name_strength_difference = extension_class_name_strength_difference\
    \ / extension_class_name_length;\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength_difference / extension_class_name_length;\n\t\
    \tlet extension_class_name_strength_difference = extension_class_name_strength_difference\
    \ / extension_class_name_length;\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength_difference / extension_class_name_length;\n\t\
    \tlet extension_class_name_strength_difference = extension_class_name_strength_difference\
    \ / extension_class_name_length;\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength_difference / extension_class_name_length;\n\t\
    \tlet extension_class_name_strength_difference = extension_class_name_strength_difference\
    \ / extension_class_name_length;\n\t\tlet extension_class_name_strength_difference\
    \ = extension_class_name_strength_difference / extension_class_name_length;\n\t\
    \tlet extension_class_name_strength_difference = extension_class_name_", "   \
    \ // Write your code here\n}\n", "    var strongest = -1;\n    var strongest_name\
    \ = \"\";\n    var strongest_extension = \"\";\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name = class_name\
    \ + extension;\n        var class_extension = class_name.substring(class_name.lastIndexOf('.')+1);\n\
    \        var class_extension_length = class_extension.length;\n        var class_extension_strength\
    \ = class_extension.length - class_extension_length;\n        \n        if(strongest\
    \ == -1 || class_extension_strength > strongest){\n            strongest = class_extension_strength;\n\
    \            strongest_name = class_name;\n            strongest_extension = extension;\n\
    \        }\n    }\n    \n    return strongest_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    var extensions_length = extensions.length;\n    for(var i=0; i<extensions_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    var extension_strength = {};\n    for(var i=0;i<extensions.length;i++){\n \
    \       var extension = extensions[i];\n        var class_name = class_name.split(extension)[0];\n\
    \        var extension_name = extension.split(class_name)[1];\n        var extension_strength_class\
    \ = extension_strength[extension_name];\n        if(extension_strength_class ===\
    \ undefined){\n            extension_strength[extension_name] = extension_strength_class\
    \ = -1;\n        }\n        var extension_strength_extension = extension_strength[extension_name+class_name];\n\
    \        if(extension_strength_extension === undefined){\n            extension_strength[extension_name+class_name]\
    \ = extension_strength_extension = -1;\n        }\n        extension_strength_class\
    \ *= -1;\n        extension_strength_extension *= -1;\n        if(extension_strength_class\
    \ > extension_strength_extension){\n            extension_strength[extension_name]\
    \ = extension_strength_class;\n        }\n        else if(extension_strength_class\
    \ < extension_strength_extension){\n            extension_strength[extension_name+class_name]\
    \ = extension_strength_extension;\n        }\n    }\n    var strongest_extension\
    \ = extensions[0];\n    for(var i=1;i<extensions.length;i++){\n        var extension\
    \ = extensions[i];\n        var extension_name = extension.split(strongest_extension)[0];\n\
    \        var extension_strength_class = extension_strength[extension_name];\n\
    \        var extension_strength_extension = extension_strength[extension_name+strongest_extension];\n\
    \        if(extension_strength_class === undefined){\n            extension_strength[extension_name]\
    \ = extension_strength_class = -1;\n        }\n        if(extension_strength_extension\
    \ === undefined){\n            extension_strength[extension_name+strongest_extension]\
    \ = extension_strength_extension = -1;\n        }\n        extension_strength_class\
    \ *= -1;\n        extension_strength_extension *= -1;\n        if(extension_strength_class\
    \ > extension_strength_extension){\n            extension_strength[extension_name]\
    \ = extension_strength_class;\n        }\n        else if(extension_strength_class\
    \ < extension_strength_extension){\n            extension_strength[extension_name+strongest_extension]\
    \ = extension_strength_extension;\n        }\n    }\n    return strongest_extension;\n\
    }\n", "    var extension_strength = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.split(\".\")[0];\n        var extension_name\
    \ = extension.split(\".\")[1];\n        var class_strength = extension_strength[class_name];\n\
    \        if(!class_strength){\n            class_strength = extension_name.length;\n\
    \        }\n        extension_strength[class_name] = class_strength;\n    });\n\
    \    var max_strength = -1;\n    var max_extension = \"\";\n    for(var class_name\
    \ in extension_strength){\n        if(extension_strength[class_name] > max_strength){\n\
    \            max_strength = extension_strength[class_name];\n            max_extension\
    \ = class_name;\n        }\n    }\n    return max_extension;\n}\n", "\tlet strongest\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet strength\
    \ = Math.floor((cap - sm)/26);\n\t\tif (strength > strongest.strength){\n\t\t\t\
    strongest = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest;\n}\n",
  "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].length - extensions[i].toLowerCase().length;\n        if (extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + '.' + strongest_extension;\n}\n", "    var strongest\
    \ = -1;\n    var strongest_name = \"\";\n    var extensions_count = extensions.length;\n\
    \    for(var i=0; i<extensions_count; i++){\n        var extension = extensions[i];\n\
    \        var extension_name = extension.split(\".\").pop();\n        var extension_class\
    \ = class_name + extension_name;\n        var extension_strength = extension_name.length;\n\
    \        if(extension_strength > strongest){\n            strongest = extension_strength;\n\
    \            strongest_name = extension_name;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_name;\n}\n", "\tlet extension_strength = -1;\n\tlet strongest_extension\
    \ = \"\";\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet extension_class = class_name + extension;\n\t\tlet extension_class_name\
    \ = extension_class.substr(0, extension_class.length - extension.length);\n\t\t\
    let extension_class_name_length = extension_class_name.length;\n\t\tlet extension_class_name_upper\
    \ = extension_class_name.substr(0, extension_class_name_length - 1);\n\t\tlet\
    \ extension_class_name_lower = extension_class_name.substr(0, extension_class_name_length\
    \ - 2);\n\t\tlet extension_class_name_strength = extension_class_name_upper.length\
    \ - extension_class_name_lower.length;\n\t\tlet extension_class_name_strength_percentage\
    \ = extension_class_name_strength / extension_class_name_length;\n\t\textension_strength\
    \ = extension_strength + extension_class_name_strength_percentage;\n\t\tif(extension_strength\
    \ > strongest_extension.length){\n\t\t\tstrongest_extension = extension;\n\t\t\
    }\n\t}\n\treturn strongest_extension;\n}\n", "    var extension_strengths = {};\n\
    \    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name.substring(0, class_name.lastIndexOf('.'));\n\
    \        var class_name_split = class_name.split('.');\n        var class_name_length\
    \ = class_name_split.length;\n        var extension_length = extension.length;\n\
    \        var extension_strength = -1;\n        for(var j=0; j<class_name_length;\
    \ j++){\n            var class_name_char = class_name_split[j];\n            var\
    \ extension_char = extension.charAt(j);\n            var class_name_char_upper\
    \ = class_name_char.toUpperCase();\n            var extension_char_upper = extension_char.toUpperCase();\n\
    \            var class_name_char_lower = class_name_char.toLowerCase();\n    \
    \        var extension_char_lower = extension_char.toLowerCase();\n          \
    \  var class_name_char_upper_index = class_name_char_upper.indexOf(extension_char_upper);\n\
    \            var extension_char_upper_index = extension_char_upper.indexOf(extension_char_upper);\n\
    \            var class_name_char_lower_index = class_name_char_lower.indexOf(extension_char_lower);\n\
    \            var extension_char_lower_index = extension_char_lower.indexOf(extension_char_lower);\n\
    \            if(class_name_char_upper_index > -1 && extension_char_upper_index\
    \ > -1){\n                extension_strength = extension_strength + 1;\n     \
    \       }\n            if(class_name_char_lower_index > -1 && extension_char_lower_index\
    \ > -1){\n                extension_strength = extension_strength + 1;\n     \
    \       }\n        }\n        if(extension_strength > extension_strengths[extension]){\n\
    \            extension_strengths[extension] = extension_strength;\n        }\n\
    \    }\n    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    for(var key in extension_strengths){\n        if(extension_strengths[key]\
    \ > strongest_extension_strength){\n            strongest_extension = key;\n \
    \           strongest_extension_strength = extension_strengths[key];\n       \
    \ }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "    let\
    \ extension_strength = {};\n    for (let i = 0; i < extensions.length; i++){\n\
    \        let extension = extensions[i];\n        let class_name = class_name.split(\"\
    \").map(x => x.toUpperCase()).join(\"\");\n        let extension_name = extension.split(\"\
    \").map(x => x.toLowerCase()).join(\"\");\n        let strength = class_name.split(\"\
    \").reduce((acc, x) => acc + x.charCodeAt(0) - extension_name.charCodeAt(0), 0);\n\
    \        extension_strength[extension] = strength;\n    }\n    let max_strength\
    \ = extension_strength[Object.keys(extension_strength).sort((a, b) => extension_strength[b]\
    \ - extension_strength[a])[0]];\n    return class_name + Object.keys(extension_strength).filter(x\
    \ => extension_strength[x] == max_strength).sort((a, b) => extension_strength[b]\
    \ - extension_strength[a])[0];\n}\n", "    var extension_strength = {};\n    for(var\
    \ i=0; i<extensions.length; i++){\n        var extension = extensions[i].toLowerCase();\n\
    \        var class_name = extension.substr(0, 1).toUpperCase() + extension.substr(1);\n\
    \        var strength = extension_strength[class_name];\n        if(strength ==\
    \ undefined){\n            strength = extension_strength[class_name] = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        }\n        extension_strength[class_name]\
    \ = strength;\n    }\n    var strongest = extension_strength[class_name];\n  \
    \  for(var key in extension_strength){\n        if(extension_strength[key] ==\
    \ strongest){\n            return class_name + '.' + key;\n        }\n    }\n\
    \    return class_name;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work.\
    \ `Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])` returns\
    \ `'Slices.SErviNGSliCes'` instead of `'Slices.SErviNGSliCes.Cheese'`.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I added an example to the answer.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added an example to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added an example to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added an example to the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    var strongest = null;\n    var strongest_strength\
    \ = 0;\n    var strongest_extension = null;\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class =\
    \ class_name + extension;\n        var extension_strength = extension_class.match(/[A-Z]/g).length\
    \ - extension_class.match(/[a-z]/g).length;\n        if(extension_strength > strongest_strength){\n\
    \            strongest = extension;\n            strongest_strength = extension_strength;\n\
    \        }\n    }\n    \n    return class_name + strongest + strongest_strength;\n\
    }\n", "    let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n  \
    \  let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n    let cap_extensions_count\
    \ = cap_extensions.length;\n    let sm_extensions_count = sm_extensions.length;\n\
    \    let cap_extensions_sm = cap_extensions_count - sm_extensions_count;\n   \
    \ let sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n    let\
    \ cap_extensions_strength = cap_extensions_sm/cap_extensions_count;\n    let sm_extensions_strength\
    \ = sm_extensions_sm/sm_extensions_count;\n    let strength = cap_extensions_strength\
    \ > sm_extensions_strength ? cap_extensions_strength : sm_extensions_strength;\n\
    \    return class_name + '.' + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
    \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length-1].charAt(0)\
    \ + extensions[extensions.length-1].charAt(0) + extensions[extensions.length",
  "\t\n}\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension;\n}\n", "    var extension_strength\
    \ = {};\n    for(var i=0;i<extensions.length;i++){\n        var ext = extensions[i];\n\
    \        var cap = ext.charAt(0).toUpperCase();\n        var sm = ext.charAt(0).toLowerCase();\n\
    \        var strength = cap - sm;\n        if(extension_strength[strength] ===\
    \ undefined){\n            extension_strength[strength] = ext;\n        }else{\n\
    \            var index = extension_strength[strength].indexOf(ext);\n        \
    \    if(index === -1){\n                extension_strength[strength].push(ext);\n\
    \            }else{\n                extension_strength[strength][index] = ext;\n\
    \            }\n        }\n    }\n    var max_strength = -1;\n    var max_extension\
    \ = \"\";\n    for(var i=0;i<extension_strength.length;i++){\n        if(extension_strength[i]\
    \ > max_strength){\n            max_strength = extension_strength[i];\n      \
    \      max_extension = extension_strength[i];\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "    var strongest_extension = null;\n    var\
    \ strongest_extension_strength = null;\n    var extension_counter = 0;\n    var\
    \ class_counter = 0;\n    \n    for(var extension in extensions){\n        extension_counter++;\n\
    \        if(extension_counter == 1){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extensions[extension];\n        }\n\
    \        else if(extension_counter > 1){\n            var extension_strength =\
    \ extensions[extension];\n            if(extension_strength > strongest_extension_strength){\n\
    \                strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n        }\n    }\n    \n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    var extensions_count = extensions.length;\n\
    \    var extensions_count_cap = extensions_count.toUpperCase().length;\n    var\
    \ extensions_count_sm = extensions_count.toLowerCase().length;\n    var extensions_count_diff\
    \ = extensions_count_cap - extensions_count_sm;\n    var extensions_count_max\
    \ = Math.max(extensions_count_cap, extensions_count_sm);\n    var extensions_count_min\
    \ = Math.min(extensions_count_cap, extensions_count_sm);\n    var extensions_count_average\
    \ = Math.round(extensions_count_cap / extensions_count_sm);\n    var extensions_count_strength\
    \ = extensions_count_max - extensions_count_min;\n    var extensions_count_average\
    \ = Math.round(extensions_count_average * 100) / 100;\n    var extensions_count_strength_percentage\
    \ = extensions_count_strength / extensions_count_max;\n    var extensions_count_strength_percentage_rounded\
    \ = Math.round(extensions_count_strength_percentage * 100) / 100;\n    var extensions_count_strength_percentage_rounded_rounded\
    \ = Math.round(extensions_count_strength_percentage_rounded * 100) / 100;\n  \
    \  var extensions_count_strength_percentage_rounded_rounded_rounded = Math.round(extensions_count_strength_percentage_rounded_rounded\
    \ * 100) / 100;\n    var extensions_count_strength_percentage_rounded_rounded_rounded_rounded\
    \ = Math.round(extensions_count_strength_percentage_rounded_rounded_rounded *\
    \ 100) / 100;\n    var extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(extensions_count_strength_percentage_rounded_rounded_rounded_rounded\
    \ * 100) / 100;\n    var extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded\
    \ * 100) / 100;\n    var extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded\
    \ * 100) / 100;\n    var extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded\
    \ * 100) / 100;\n    var extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded\
    \ * 100) / 100;\n    var extensions_count_strength_percentage_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_",
  "    let cap_extensions = extensions.filter(x => x.match(/[A-Z]/));\n    let sm_extensions\
    \ = extensions.filter(x => x.match(/[a-z]/));\n    let cap_extensions_count =\
    \ cap_extensions.length;\n    let sm_extensions_count = sm_extensions.length;\n\
    \    let cap_extensions_strength = cap_extensions_count - sm_extensions_count;\n\
    \    let sm_extensions_strength = cap_extensions_count - cap_extensions_strength;\n\
    \    let strongest_extension = null;\n    if (cap_extensions_strength > sm_extensions_strength){\n\
    \        strongest_extension = class_name + cap_extensions[0];\n    }\n    else\
    \ if (cap_extensions_strength < sm_extensions_strength){\n        strongest_extension\
    \ = class_name + sm_extensions[0];\n    }\n    else{\n        strongest_extension\
    \ = class_name + cap_extensions[0];\n    }\n    return strongest_extension;\n\
    }\n", "    var strongest_extension = '';\n    var extension_strength = 0;\n  \
    \  for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name + extension;\n        var class_name_lower\
    \ = class_name.toLowerCase();\n        var class_name_upper = class_name.toUpperCase();\n\
    \        var class_name_length = class_name.length;\n        var extension_length\
    \ = extension.length;\n        var extension_strength_upper = extension_length\
    \ - class_name_length;\n        var extension_strength_lower = extension_length\
    \ - class_name_lower.length;\n        var extension_strength_upper_small = extension_strength_upper\
    \ - class_name_upper.length;\n        var extension_strength_lower_small = extension_strength_lower\
    \ - class_name_lower.length;\n        var extension_strength_upper_small_small\
    \ = extension_strength_upper_small - class_name_upper.length;\n        var extension_strength_lower_small_small\
    \ = extension_strength_lower_small - class_name_lower.length;\n        if(extension_strength_upper_small_small\
    \ == 0){\n            if(extension_strength_lower_small_small == 0){\n       \
    \         if(extension_strength_upper_small == 0){\n                    if(extension_strength_lower\
    \ == 0){\n                        strongest_extension = class_name + extension;\n\
    \                        extension_strength = -1;\n                    }\n   \
    \                 else{\n                        strongest_extension = class_name\
    \ + extension;\n                        extension_strength = extension_strength_lower;\n\
    \                    }\n                }\n                else{\n           \
    \         strongest_extension = class_name + extension;\n                    extension_strength\
    \ = extension_strength_upper;\n                }\n            }\n            else{\n\
    \                strongest_extension = class_name + extension;\n             \
    \   extension_strength = extension_strength_upper_small;\n            }\n    \
    \    }\n        else{\n            strongest_extension = class_name + extension;\n\
    \            extension_strength = extension_strength_upper_small_small;\n    \
    \    }\n    }\n    return strongest_extension;\n}\n", "    // Write your code\
    \ here\n}\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i\
    \ < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.'\
    \ + strongest_extension;\n}\n", "    var strongest_extension = null;\n    var\
    \ strongest_extension_strength = null;\n    var extension_counter = 0;\n    \n\
    \    for(var i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_counter = extension_counter + 1;\n        var extension_strength\
    \ = extension_counter;\n        var extension_class_name = class_name + extension;\n\
    \        var extension_class_name_length = extension_class_name.length;\n    \
    \    var extension_class_name_counter = 0;\n        \n        for(var j = 0; j\
    \ < extension_class_name_length; j++){\n            var letter = extension_class_name.charAt(j);\n\
    \            extension_class_name_counter = extension_class_name_counter + 1;\n\
    \            \n            if(letter == letter.toUpperCase()){\n             \
    \   extension_strength = extension_strength - 1;\n            }\n        }\n \
    \       \n        if(extension_strength > strongest_extension_strength){\n   \
    \         strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    \n    return strongest_extension;\n\
    }\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength = 0;\n\
    \tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension;\n}\n", "    let strongest_extension\
    \ = null;\n    let strongest_extension_strength = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   var extension_strengths = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.split(\".\")[0];\n        var extension_name\
    \ = extension.split(\".\")[1];\n        var extension_strength = extension_name.match(/[A-Z]/g).length\
    \ - extension_name.match(/[a-z]/g).length;\n        extension_strengths[extension_strength]\
    \ = extension_name;\n    });\n    var max_strength = extension_strengths.reduce(function(a,\
    \ b){\n        return Math.max(a, b);\n    });\n    var strongest_extension =\
    \ extension_strengths[max_strength];\n    return class_name + \".\" + strongest_extension;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any libraries. I appreciate your effort though.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\nThanks\
    \ again for your answer. I appreciate your effort but I am not allowed to use\
    \ any libraries. I appreciate your effort though.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\nThanks again\
    \ for your answer. I appreciate your effort but I am not allowed to use any libraries.\
    \ I appreciate your effort though.\n<|/ c |>\n<| a tags=javascript,string,algorithm\
    \ |>\n<code>", "    var extension_strength = {};\n    extensions.forEach(function(extension){\n\
    \        var extension_class = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
    \        extension_strength[extension_class] = -1;\n    });\n    var max_strength\
    \ = 0;\n    var max_extension = '';\n    for(var extension in extension_strength){\n\
    \        if(extension_strength[extension] > max_strength){\n            max_strength\
    \ = extension_strength[extension];\n            max_extension = extension;\n \
    \       }\n    }\n    return class_name + '.' + max_extension;\n}\n", "    var\
    \ strongest_extension = null;\n    var max_strength = 0;\n    for(var i = 0; i\
    \ < extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var class_name_length = class_name.length;\n        var extension_length = extension.length;\n\
    \        var extension_strength = extension_length - class_name_length;\n    \
    \    var extension_upper_case_letters = extension.toUpperCase().split('');\n \
    \       var extension_lower_case_letters = extension.toLowerCase().split('');\n\
    \        var extension_upper_case_letters_count = extension_upper_case_letters.length;\n\
    \        var extension_lower_case_letters_count = extension_lower_case_letters.length;\n\
    \        var extension_strength_percentage = (extension_strength / extension_length)\
    \ * 100;\n        var extension_strength_percentage_rounded = Math.round(extension_strength_percentage);\n\
    \        var extension_strength_percentage_rounded_integer = Math.round(extension_strength_percentage_rounded);\n\
    \        var extension_strength_percentage_rounded_integer_rounded = Math.round(extension_strength_percentage_rounded_integer);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer = Math.round(extension_strength_percentage_rounded_integer_rounded);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer_rounded\
    \ = Math.round(extension_strength_percentage_rounded_integer_rounded_integer);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer\
    \ = Math.round(extension_strength_percentage_rounded_integer_rounded_integer_rounded);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded\
    \ = Math.round(extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded_integer\
    \ = Math.round(extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded_integer_rounded\
    \ = Math.round(extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded_integer);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded_integer_rounded_integer\
    \ = Math.round(extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded_integer);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded_integer_rounded_integer\
    \ = Math.round(extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded_integer_rounded_integer);\n\
    \        var extension_strength_percentage_rounded_integer_rounded_integer_rounded_integer_rounded_integer_rounded_integer_roun",
  "    var extension_strengths = {};\n    extensions.forEach(function(extension){\n\
    \        var class_name = extension.split(\".\")[0];\n        var extension_name\
    \ = extension.split(\".\")[1];\n        var extension_strength = extension_strengths[extension_name];\n\
    \        if(extension_strength === undefined){\n            extension_strengths[extension_name]\
    \ = extension_strength = -1;\n        }\n        extension_strength = extension_strength\
    \ * class_name.charCodeAt(0) - extension_name.charCodeAt(0);\n        if(extension_strength\
    \ > 0){\n            extension_strengths[extension_name] = extension_strength;\n\
    \        }\n    });\n    var strongest_extension = extension_strengths[Object.keys(extension_strengths)[0]];\n\
    \    if(strongest_extension === undefined){\n        return \"\";\n    }\n   \
    \ var strongest_extension_name = Object.keys(extension_strengths)[extension_strengths[Object.keys(extension_strengths)[0]].indexOf(strongest_extension)];\n\
    \    return class_name + \".\" + strongest_extension_name;\n}\n", "    let cap_extensions\
    \ = extensions.filter(e => e.match(/[A-Z]/));\n    let sm_extensions = extensions.filter(e\
    \ => e.match(/[a-z]/));\n    let cap_extensions_count = cap_extensions.length;\n\
    \    let sm_extensions_count = sm_extensions.length;\n    let cap_extensions_sm\
    \ = cap_extensions_count - sm_extensions_count;\n    let sm_extensions_sm = sm_extensions_count\
    \ - cap_extensions_count;\n    let cap_extensions_strength = cap_extensions_sm/cap_extensions_count;\n\
    \    let sm_extensions_strength = sm_extensions_sm/sm_extensions_count;\n    let\
    \ strongest_extension = class_name;\n    for(let i = 0; i < cap_extensions_count;\
    \ i++){\n        if(sm_extensions_strength > cap_extensions_strength){\n     \
    \       strongest_extension += cap_extensions[i];\n        }\n    }\n    return\
    \ strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_name\
    \ = \"\";\n    for(var i=0;i<extensions.length;i++){\n        var extension =\
    \ extensions[i];\n        var class_name_length = class_name.length;\n       \
    \ var extension_length = extension.length;\n        var extension_strength = extension_length\
    \ - class_name_length;\n        if(extension_strength > strongest){\n        \
    \    strongest = extension_strength;\n            strongest_name = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_name;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI appreciate your efforts, but I already know how\
    \ to use `strongest_extension` function. I just want to know how to use `strongest_extension`\
    \ function with my `strongest_extension` function.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution for your `strongest_extension` function\n<|/\
    \ c |>\n<| c |>\nI appreciate your efforts, but I already know how to use `strongest_extension`\
    \ function. I just want to know how to use `strongest_extension` function with\
    \ my `strongest_extension` function.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution for your `strongest_extension` function\n<|/ c |>\n<| a tags=string,javascript,algorithm\
    \ |>\n<code>", "\t\n\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength\
    \ = 0;\n\tlet strongest_extension_class_name = \"\";\n\t\n\tfor(let i = 0; i <\
    \ extensions.length; i++){\n\t\t\n\t\tlet extension = extensions[i];\n\t\tlet\
    \ class_name_extension = class_name + extension;\n\t\tlet class_name_extension_strength\
    \ = Extension_Strength(class_name_extension);\n\t\t\n\t\tif(class_name_extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension_strength = class_name_extension_strength;\n\
    \t\t\tstrongest_extension = class_name_extension;\n\t\t\tstrongest_extension_class_name\
    \ = class_name;\n\t\t}\n\t\t\n\t\tif(class_name_extension_strength == strongest_extension_strength){\n\
    \t\t\tstrongest_extension_class_name += \".\" + extension;\n\t\t}\n\t\t\n\t}\n\
    \t\n\treturn strongest_extension_class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = null;\n    var strongest_extension_strength = 0;\n\
    \    var extension_counter = 0;\n    \n    for(var extension of extensions){\n\
    \        var extension_counter = extension_counter + 1;\n        var extension_strength\
    \ = extension_counter;\n        var extension_name = extension.substring(class_name.lastIndexOf('.')+1);\n\
    \        var extension_class_name = extension_name.substring(0, extension_name.length-1);\n\
    \        \n        for(var class_character of class_name){\n            if(class_character\
    \ == extension_character){\n                extension_strength = extension_strength\
    \ - 1;\n            }\n        }\n        \n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension_name;\n        }\n    }\n    \n    return strongest_extension;\n\
    }\n", "    // Write your code here\n    var strongest = -1;\n    var extension_length\
    \ = extensions.length;\n    for(var i = 0; i<extension_length; i++){\n       \
    \ var extension = extensions[i];\n        var class_name = class_name + extension;\n\
    \        var class_name_length = class_name.length;\n        var class_name_upper\
    \ = class_name.split(\"\").map(function(letter){return letter.toUpperCase();});\n\
    \        var class_name_lower = class_name.split(\"\").map(function(letter){return\
    \ letter.toLowerCase();});\n        var class_name_upper_count = class_name_upper.filter(function(letter){return\
    \ letter===\"S\"||letter===\"C\"||letter===\"L\"||letter===\"I\"||letter===\"\
    G\"||letter===\"E\"||letter===\"R\"||letter===\"V\"||letter===\"E\"||letter===\"\
    D\"||letter===\"I\"||letter===\"G\"||letter===\"S\"||letter===\"I\"||letter===\"\
    N\"||letter===\"G\"||letter===\"E\"||letter===\"R\"||letter===\"V\"||letter===\"\
    E\"||letter===\"D\"||letter===\"I\"||letter===\"G\"||letter===\"S\"||letter===\"\
    I\"||letter===\"N\"||letter===\"G\"||letter===\"E\"||letter===\"R\"||letter===\"\
    V\"||letter===\"E\"||letter===\"D\"||letter===\"I\"||letter===\"G\"||letter===\"\
    S\"||letter===\"I\"||letter===\"N\"||letter===\"G\"||letter===\"E\"||letter===\"\
    R\"||letter===\"V\"||letter===\"E\"||letter===\"D\"||letter===\"I\"||letter===\"\
    G\"||letter===\"S\"||letter===\"I\"||letter===\"N\"||letter===\"G\"||letter===\"\
    E\"||letter===\"R\"||letter===\"V\"||letter===\"E\"||letter===\"D\"||letter===\"\
    I\"||letter===\"G\"||letter===\"S\"||letter===\"I\"||letter===\"N\"||letter===\"\
    G\"||letter===\"E\"||letter===\"R\"||letter===\"V\"||letter===\"E\"||letter===\"\
    D\"||letter===\"I\"||letter===\"G\"||letter===\"S\"", "\tlet strongest_extension\
    \ = null;\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var extension_strength = {};\n    for(var i in extensions){\n     \
    \   var extension = extensions[i];\n        var class_name = class_name.split('.');\n\
    \        var class_name = class_name[class_name.length-1];\n        var class_name\
    \ = class_name.charAt(0).toUpperCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var ",
  "    var extension_strength = {};\n    var extension_counter = {};\n    var extension_counter2\
    \ = {};\n    var extension_counter3 = {};\n    var extension_counter4 = {};\n\
    \    var extension_counter5 = {};\n    var extension_counter6 = {};\n    var extension_counter7\
    \ = {};\n    var extension_counter8 = {};\n    var extension_counter9 = {};\n\
    \    var extension_counter10 = {};\n    var extension_counter11 = {};\n    var\
    \ extension_counter12 = {};\n    var extension_counter13 = {};\n    var extension_counter14\
    \ = {};\n    var extension_counter15 = {};\n    var extension_counter16 = {};\n\
    \    var extension_counter17 = {};\n    var extension_counter18 = {};\n    var\
    \ extension_counter19 = {};\n    var extension_counter20 = {};\n    var extension_counter21\
    \ = {};\n    var extension_counter22 = {};\n    var extension_counter23 = {};\n\
    \    var extension_counter24 = {};\n    var extension_counter25 = {};\n    var\
    \ extension_counter26 = {};\n    var extension_counter27 = {};\n    var extension_counter28\
    \ = {};\n    var extension_counter29 = {};\n    var extension_counter30 = {};\n\
    \    var extension_counter31 = {};\n    var extension_counter32 = {};\n    var\
    \ extension_counter33 = {};\n    var extension_counter34 = {};\n    var extension_counter35\
    \ = {};\n    var extension_counter36 = {};\n    var extension_counter37 = {};\n\
    \    var extension_counter38 = {};\n    var extension_counter39 = {};\n    var\
    \ extension_counter40 = {};\n    var extension_counter41 = {};\n    var extension_counter42\
    \ = {};\n    var extension_counter43 = {};\n    var extension_counter44 = {};\n\
    \    var extension_counter45 = {};\n    var extension_counter46 = {};\n    var\
    \ extension_counter47 = {};\n    var extension_counter48 = {};\n    var extension_counter49\
    \ = {};\n    var extension_counter50 = {};\n    var extension_counter51 = {};\n\
    \    var extension_counter52 = {};\n    var extension_counter53 = {};\n    var\
    \ extension_counter54 = {};\n    var extension_counter55 = {};\n    var extension_counter56\
    \ = {};\n    var extension_counter57 = {};\n    var extension_counter58 = {};\n\
    \    var extension_counter59 = {};\n    var extension_counter60 = {};\n    var\
    \ extension_counter61 = {};\n    var extension_counter62 = {};\n    var extension_counter63\
    \ = {};\n    var extension_counter64 = {};\n    var extension_counter65 = {};\n\
    \    var extension_counter66 = {};\n    var extension_counter67 = {};\n    var\
    \ extension_counter68 = {};\n    var extension_counter69 = {};\n    var extension_counter70\
    \ = {};\n    var extension_counter", "    var strongest_extension = null;\n  \
    \  var extensions_count = extensions.length;\n    var extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \    var extensions_count_sm = extensions_count.toLowerCase().length;\n    var\
    \ extensions_count_diff = extensions_count_cap - extensions_count_sm;\n    var\
    \ extensions_count_max = extensions_count_cap - extensions_count_diff;\n    var\
    \ extensions_count_min = extensions_count_sm - extensions_count_diff;\n    var\
    \ extensions_count_average = extensions_count_cap / extensions_count;\n    var\
    \ extensions_count_sum = extensions_count_cap + extensions_count_sm;\n    var\
    \ extensions_count_average_sm = extensions_count_sum / extensions_count;\n   \
    \ \n    for(var i = 0; i < extensions_count; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = extension.substr(0, extension.length - extensions_count_diff);\n\
    \        var extension_class_cap = extension_class.toUpperCase().length;\n   \
    \     var extension_class_sm = extension_class.toLowerCase().length;\n       \
    \ var extension_class_diff = extension_class_cap - extension_class_sm;\n     \
    \   var extension_class_max = extension_class_cap - extension_class_diff;\n  \
    \      var extension_class_min = extension_class_sm - extension_class_diff;\n\
    \        var extension_class_average = extension_class_cap / extension_class;\n\
    \        var extension_class_sum = extension_class_cap + extension_class_sm;\n\
    \        var extension_class_average_sm = extension_class_sum / extension_class;\n\
    \        \n        if(extension_class_average > extensions_count_average){\n \
    \           strongest_extension = extension;\n        }\n        else if(extension_class_average\
    \ < extensions_count_average){\n            if(extension_class_min < extensions_count_min){\n\
    \                strongest_extension = extension;\n            }\n           \
    \ else if(extension_class_max < extensions_count_max){\n                strongest_extension\
    \ = extension;\n            }\n            else if(extension_class_diff < extensions_count_diff){\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        else if(extension_class_average == extensions_count_average){\n     \
    \       if(extension_class_min < extensions_count_min){\n                strongest_extension\
    \ = extension;\n            }\n            else if(extension_class_max < extensions_count_max){\n\
    \                strongest_extension = extension;\n            }\n           \
    \ else if(extension_class_diff < extensions_count_diff){\n                strongest_extension\
    \ = extension;\n            }\n        }\n        else if(extension_class_average\
    \ == extensions_count_average_sm){\n            if(extension_class_min < extensions_count_",
  "    var strongest = null;\n    var strongest_strength = -1;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_strength){\n            strongest = extension;\n\
    \            strongest_strength = extension_strength;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n", "    let strongest_extension = '';\n\
    \    let max_strength = 0;\n    for(let i = 0; i < extensions.length; i++){\n\
    \        let extension = extensions[i];\n        let class_name = class_name +\
    \ extension;\n        let class_extensions = class_name.split('.');\n        let\
    \ class_extension = class_extensions[class_extensions.length - 1];\n        let\
    \ class_extension_strength = class_extension.match(/[A-Z]/g).length;\n       \
    \ let class_extension_strength_lower = class_extension.match(/[a-z]/g).length;\n\
    \        let class_extension_strength_upper = class_extension.match(/[A-Z]/g).length\
    \ - class_extension.match(/[a-z]/g).length;\n        let class_extension_strength_total\
    \ = class_extension_strength_lower + class_extension_strength_upper;\n       \
    \ let class_extension_strength_average = (class_extension_strength_lower + class_extension_strength_upper)\
    \ / class_extension_strength_total;\n        if(class_extension_strength_total\
    \ > max_strength){\n            max_strength = class_extension_strength_total;\n\
    \            strongest_extension = class_name + '.' + extension;\n        }\n\
    \    }\n    return strongest_extension;\n}\n", "\tlet cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/));\n\tlet sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n\
    \tlet cap_extensions_length = cap_extensions.length;\n\tlet sm_extensions_length\
    \ = sm_extensions.length;\n\tlet cap_extensions_strength = cap_extensions_length\
    \ / extensions.length;\n\tlet sm_extensions_strength = sm_extensions_length /\
    \ extensions.length;\n\tlet strength = cap_extensions_strength - sm_extensions_strength;\n\
    \tlet strongest_extension = class_name + extensions[0];\n\tfor (let i = 1; i <\
    \ extensions.length; i++){\n\t\tif (extensions[i].match(/[A-Z]/) && extensions[i].match(/[a-z]/)){\n\
    \t\t\tlet cap_extensions_length = cap_extensions.length;\n\t\t\tlet sm_extensions_length\
    \ = sm_extensions.length;\n\t\t\tlet cap_extensions_strength = cap_extensions_length\
    \ / extensions.length;\n\t\t\tlet sm_extensions_strength = sm_extensions_length\
    \ / extensions.length;\n\t\t\tlet strength = cap_extensions_strength - sm_extensions_strength;\n\
    \t\t\tif (strength > strongest_extension.match(/[A-Z]/).length - strongest_extension.match(/[a-z]/).length){\n\
    \t\t\t\tstrongest_extension = class_name + extensions[i];\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn strongest_extension;\n}\n", "    var strongest_extension = null;\n\
    \    var extensions_length = extensions.length;\n    var class_name_length = class_name.length;\n\
    \    var extension_length = class_name_length - strongest_extension.length;\n\
    \    var strength_length = extension_length - strongest_extension.length;\n  \
    \  var max_strength = -1;\n    var max_extension = null;\n    \n    for(var i\
    \ = 0; i < extensions_length; i++){\n        var extension = extensions[i];\n\
    \        var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - strongest_extension.length;\n        var extension_class_name\
    \ = extension.substring(strongest_extension.length, extension_length);\n     \
    \   var extension_class_name_length = extension_class_name.length;\n        var\
    \ extension_class_name_strength = extension_class_name_length - strongest_extension.length;\n\
    \        var extension_class_name_max_strength = extension_class_name_strength\
    \ - strongest_extension.length;\n        \n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_extension = extension;\n\
    \        }\n        else if(extension_strength == max_strength){\n           \
    \ if(extension_class_name_strength > max_class_name_strength){\n             \
    \   max_class_name_strength = extension_class_name_strength;\n               \
    \ max_extension = extension;\n            }\n        }\n    }\n    \n    return\
    \ max_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\tfor (let\
    \ i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = null;\n    var extension_counter = 0;\n    \n    for(var extension_name in\
    \ extensions){\n        var extension = extensions[extension_name];\n        var\
    \ extension_strength = extension.strength;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \       \n        extension_counter++;\n    }\n    \n    if(extension_counter\
    \ > 1){\n        var extension_counter = 0;\n        \n        for(var extension_name\
    \ in extensions){\n            var extension = extensions[extension_name];\n \
    \           var extension_strength = extension.strength;\n            \n     \
    \       if(extension_strength > strongest_extension_strength){\n             \
    \   strongest_extension = extension;\n                strongest_extension_strength\
    \ = extension_strength;\n            }\n            \n            extension_counter++;\n\
    \        }\n    }\n    \n    return class_name + \".\" + strongest_extension.name;\n\
    }\n", "\t\n\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\t\n\tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\t\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\t\n\treturn class_name + \".\" + strongest_extension;\n}\n", "  \
    \  var strongest = -1;\n    var strongest_extension = null;\n    \n    for(var\
    \ i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n  \
    \      var class_name_length = class_name.length;\n        var extension_length\
    \ = extension.length;\n        var extension_strength = extension_length - class_name_length;\n\
    \        \n        if(extension_strength > strongest){\n            strongest\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    \n    return strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extension_counter\
    \ = 0;\n    var extension_counter_strength = 0;\n    \n    for(var i = 0; i <\
    \ extensions.length; i++){\n        var extension = extensions[i];\n        var\
    \ extension_counter = extension_counter + 1;\n        var extension_counter_strength\
    \ = extension_counter_strength + extension.charAt(0) - extension.charAt(extension.length\
    \ - 1);\n        \n        if(extension_counter_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_counter_strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    \n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet strength\
    \ = cap - sm;\n\t\tif (strength > strongest_extension.strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "\tlet cap_extensions = extensions.map(e => e.match(/[A-Z]/).length);\n\t\
    let sm_extensions = extensions.map(e => e.match(/[a-z]/).length);\n\tlet strength\
    \ = cap_extensions[0] - sm_extensions[0];\n\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet cap_extension = extensions[i].match(/[A-Z]/).length;\n\
    \t\tlet sm_extension = extensions[i].match(/[a-z]/).length;\n\t\tlet diff = cap_extension\
    \ - sm_extension;\n\t\tif (diff > strength){\n\t\t\tstrength = diff;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    let strongest_extension = null;\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    var extensions_length = extensions.length;\n    for(var i=0; i<extensions_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let extensions_count = extensions.length;\n    let extensions_count_cap = extensions_count.toUpperCase().length;\n\
    \    let extensions_count_sm = extensions_count.toLowerCase().length;\n    let\
    \ extensions_count_diff = extensions_count_cap - extensions_count_sm;\n    let\
    \ extensions_count_min = Math.min(extensions_count_cap, extensions_count_sm);\n\
    \    let extensions_count_max = Math.max(extensions_count_cap, extensions_count_sm);\n\
    \    let extensions_count_average = extensions_count_cap + extensions_count_sm;\n\
    \    let extensions_count_sum = extensions_count.toUpperCase().split('').map(Number).reduce((a,\
    \ b) => a + b);\n    let extensions_count_count_sum = extensions_count.split('').map(Number).reduce((a,\
    \ b) => a + b);\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_min = Math.min(extensions_count_count_sum,\
    \ extensions_count_count_average);\n    let extensions_count_count_max = Math.max(extensions_count_count_sum,\
    \ extensions_count_count_average);\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extensions_count_count_average = extensions_count_sum\
    \ / extensions_count_count_sum;\n    let extension", "\tlet strongest_extension\
    \ = null;\n\tlet strongest_extension_strength = -1;\n\tfor(let extension of extensions){\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "    var extension_strength\
    \ = {};\n    var extension_counter = {};\n    for(var i in extensions){\n    \
    \    var extension = extensions[i];\n        var class_name = class_name.split('.');\n\
    \        var class_name = class_name[class_name.length-1];\n        var class_name\
    \ = class_name.charAt(0).toUpperCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase() + class_name.slice(1);\n        var class_name\
    \ = class_name.charAt(0).toLowerCase", "    var extension_strength = {};\n   \
    \ for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name.split(\"\").map(function(x){return x.toUpperCase();}).join(\"\
    \");\n        var extension_name = extension.split(\"\").map(function(x){return\
    \ x.toLowerCase();}).join(\"\");\n        var extension_strength_class = class_name.split(\"\
    \").map(function(x){return x.toUpperCase().charCodeAt(0) - x.toLowerCase().charCodeAt(0);}).reduce(function(a,\
    \ b){return a + b});\n        var extension_strength_extension = extension_name.split(\"\
    \").map(function(x){return x.toLowerCase().charCodeAt(0) - x.toUpperCase().charCodeAt(0);}).reduce(function(a,\
    \ b){return a + b});\n        extension_strength[class] = extension_strength_class\
    \ - extension_strength_extension;\n    }\n    var strongest_extension = extension_strength[Object.keys(extension_strength)[0]];\n\
    \    return class_name + \".\" + Object.keys(extension_strength).map(function(x){return\
    \ extension_strength[x];}).sort(function(a, b){return b - a}).reduce(function(a,\
    \ b){return a + \".\" + b;}) + strongest_extension;\n}\n", "    // Write your\
    \ code here.\n}\n", "    let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n\
    \    let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n    let cap_extensions_count\
    \ = cap_extensions.length;\n    let sm_extensions_count = sm_extensions.length;\n\
    \    let cap_extensions_sm = cap_extensions_count - sm_extensions_count;\n   \
    \ let sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n    let\
    \ cap_extensions_strength = cap_extensions_sm/cap_extensions_count;\n    let sm_extensions_strength\
    \ = sm_extensions_sm/sm_extensions_count;\n    let strongest_extension = null;\n\
    \    if (cap_extensions_strength > sm_extensions_strength){\n        strongest_extension\
    \ = class_name + cap_extensions[0];\n    }\n    else if (sm_extensions_strength\
    \ > cap_extensions_strength){\n        strongest_extension = class_name + sm_extensions[0];\n\
    \    }\n    return strongest_extension;\n}\n", "    var strongest_extension =\
    \ null;\n    var strongest_extension_strength = -1;\n    var extension_counter\
    \ = 0;\n    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_counter = 0;\n        \n        for(var\
    \ j = 0; j < class_name.length; j++){\n            if(class_name[j] == extension){\n\
    \                extension_counter++;\n            }\n        }\n        \n  \
    \      if(extension_counter > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_counter;\n\
    \        }\n    }\n    \n    return strongest_extension;\n}\n", "    var extensions_count\
    \ = extensions.length;\n    var extensions_strongest = [];\n    var extensions_strength\
    \ = [];\n    \n    for(var i=0; i<extensions_count; i++){\n        var extension\
    \ = extensions[i];\n        var extension_class_name = class_name + extension;\n\
    \        var extension_class_name_lower = extension_class_name.toLowerCase();\n\
    \        var extension_class_name_upper = extension_class_name.toUpperCase();\n\
    \        var extension_class_name_length = extension_class_name_lower.length;\n\
    \        var extension_class_name_length_upper = extension_class_name_upper.length;\n\
    \        var extension_class_name_length_diff = extension_class_name_length -\
    \ extension_class_name_length_upper;\n        var extension_class_name_length_diff_upper\
    \ = extension_class_name_length_upper - extension_class_name_length_diff;\n  \
    \      var extension_class_name_length_diff_lower = extension_class_name_length_diff\
    \ - extension_class_name_length_upper;\n        var extension_class_name_length_diff_diff_upper\
    \ = extension_class_name_length_diff_upper - extension_class_name_length_diff_lower;\n\
    \        var extension_class_name_length_diff_diff_lower = extension_class_name_length_diff_lower\
    \ - extension_class_name_length_upper;\n        var extension_class_name_length_diff_diff_lower\
    \ = extension_class_name_length_diff_diff_lower - extension_class_name_length_lower;\n\
    \        var extension_class_name_length_diff_diff_diff_upper = extension_class_name_length_diff_diff_upper\
    \ - extension_class_name_length_diff_diff_lower;\n        var extension_class_name_length_diff_diff_diff_lower\
    \ = extension_class_name_length_diff_diff_lower - extension_class_name_length_diff_upper;\n\
    \        var extension_class_name_length_diff_diff_diff_lower = extension_class_name_length_diff_diff_diff_lower\
    \ - extension_class_name_length_diff_diff_upper;\n        var extension_class_name_length_diff_diff_diff_diff_upper\
    \ = extension_class_name_length_diff_diff_diff_upper - extension_class_name_length_diff_diff_diff_lower;\n\
    \        var extension_class_name_length_diff_diff_diff_diff_lower = extension_class_name_length_diff_diff_diff_lower\
    \ - extension_class_name_length_diff_diff_diff_upper;\n        var extension_class_name_length_diff_diff_diff_diff_diff_upper\
    \ = extension_class_name_length_diff_diff_diff_diff_upper - extension_class_name_length_diff_diff_diff_diff_lower;\n\
    \        var extension_class_name_length_diff_diff_diff_diff_diff_lower = extension_class_name_length_diff_diff_diff_diff_lower\
    \ - extension_class_name_length_diff_diff_diff_diff_upper;\n        var extension_class_name_length_diff_diff_diff_diff_diff_diff_upper\
    \ = extension_class_name_length_diff_diff_diff_diff_diff_upper - extension_class_name_length_diff_diff_diff_diff_",
  "    var extension_strength = {};\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var class_name = class_name.substring(0,\
    \ class_name.lastIndexOf('.'));\n        var class_name_split = class_name.split('.');\n\
    \        var class_name_length = class_name_split.length;\n        var extension_length\
    \ = extension.length;\n        var extension_strength_sum = 0;\n        for(var\
    \ j=0; j<class_name_length; j++){\n            var class_name_char = class_name_split[j];\n\
    \            var extension_char = extension.charAt(j);\n            var class_name_char_upper\
    \ = class_name_char.toUpperCase();\n            var extension_char_upper = extension_char.toUpperCase();\n\
    \            var class_name_char_lower = class_name_char.toLowerCase();\n    \
    \        var extension_char_lower = extension_char.toLowerCase();\n          \
    \  var class_name_char_strength = class_name_char_upper.length - class_name_char_lower.length;\n\
    \            var extension_char_strength = extension_char_upper.length - extension_char_lower.length;\n\
    \            extension_strength_sum += class_name_char_strength - extension_char_strength;\n\
    \        }\n        extension_strength[extension] = extension_strength_sum;\n\
    \    }\n    var sorted_extensions = Object.keys(extension_strength).sort(function(a,\
    \ b){\n        return extension_strength[b] - extension_strength[a];\n    });\n\
    \    var strongest_extension = sorted_extensions[0];\n    return class_name +\
    \ '.' + strongest_extension;\n}\n", "\tlet strongest_extension = null;\n\tlet\
    \ strongest_extension_strength = null;\n\tlet strongest_extension_strength_counter\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_class = class_name + extension;\n\t\tlet extension_class_class_name\
    \ = extension_class.slice(0, extension_class.length - 1);\n\t\tlet extension_class_class_name_upper\
    \ = extension_class_class_name.slice(0, extension_class_class_name.length - 1);\n\
    \t\tlet extension_class_class_name_lower = extension_class_class_name.slice(0,\
    \ extension_class_class_name.length - 1);\n\t\tlet extension_class_class_name_length\
    \ = extension_class_class_name.length;\n\t\tlet extension_class_class_name_counter\
    \ = 0;\n\t\tfor (let j = 0; j < extension_class_class_name_length; j++){\n\t\t\
    \tlet char = extension_class_class_name_upper[j];\n\t\t\tif (char === char.toUpperCase()){\n\
    \t\t\t\textension_class_class_name_counter++;\n\t\t\t}\n\t\t}\n\t\tlet extension_class_class_name_counter_ratio\
    \ = extension_class_class_name_counter / extension_class_class_name_length;\n\t\
    \tlet extension_class_class_name_strength = extension_class_class_name_counter_ratio\
    \ * -1;\n\t\tif (extension_class_class_name_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_class_class_name_strength;\n\t\t\
    \tstrongest_extension = extension_class_class_name;\n\t\t}\n\t\textension_class_class_name_counter\
    \ = 0;\n\t\tfor (let j = 0; j < extension_class_class_name_length; j++){\n\t\t\
    \tlet char = extension_class_class_name_lower[j];\n\t\t\tif (char === char.toLowerCase()){\n\
    \t\t\t\textension_class_class_name_counter++;\n\t\t\t}\n\t\t}\n\t\textension_class_class_name_counter_ratio\
    \ = extension_class_class_name_counter / extension_class_class_name_length;\n\t\
    \textension_class_class_name_strength = extension_class_class_name_counter_ratio\
    \ * -1;\n\t\tif (extension_class_class_name_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_class_class_name_strength;\n\t\t\
    \tstrongest_extension = extension_class_class_name;\n\t\t}\n\t}\n\treturn strongest_extension;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
