name: HumanEval_103_rounded_avg
language: js
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\nfunction rounded_avg(n, m){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
  \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
  \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
  \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
  );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
  \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
  );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
  \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["    if (n > m) return -1;\n    var avg = Math.floor((n+m)/2);\n   \
    \ var binary = \"\";\n    while(avg > 0){\n        binary = binary + avg.toString(2);\n\
    \        avg = Math.floor(avg/2);\n    }\n    return binary;\n}\nrounded_avg(10,5);\
    \ // returns \"1010\"\nrounded_avg(10,10); // returns \"-1\"\nrounded_avg(10,15);\
    \ // returns \"1111\"\nrounded_avg(10,20); // returns \"-1\"\nrounded_avg(10,25);\
    \ // returns \"1111\"\nrounded_avg(10,30); // returns \"1111\"\nrounded_avg(10,35);\
    \ // returns \"1111\"\nrounded_avg(10,40); // returns \"1111\"\nrounded_avg(10,45);\
    \ // returns \"1111\"\nrounded_avg(10,50); // returns \"1111\"\nrounded_avg(10,55);\
    \ // returns \"1111\"\nrounded_avg(10,60); // returns \"1111\"\nrounded_avg(10,65);\
    \ // returns \"1111\"\nrounded_avg(10,70); // returns \"1111\"\nrounded_avg(10,75);\
    \ // returns \"1111\"\nrounded_avg(10,80); // returns \"1111\"\nrounded_avg(10,85);\
    \ // returns \"1111\"\nrounded_avg(10,90); // returns \"1111\"\nrounded_avg(10,95);\
    \ // returns \"1111\"\nrounded_avg(10,100); // returns \"1111\"\nrounded_avg(10,105);\
    \ // returns \"1111\"\nrounded_avg(10,110); // returns \"1111\"\nrounded_avg(10,115);\
    \ // returns \"1111\"\nrounded_avg(10,120); // returns \"1111\"\nrounded_avg(10,125);\
    \ // returns \"1111\"\nrounded_avg(10,130); // returns \"1111\"\nrounded_avg(10,135);\
    \ // returns \"1111\"\nrounded_avg(10,140); // returns \"1111\"\nrounded_avg(10,145);\
    \ // returns \"1111\"\nrounded_avg(10,150); // returns \"1111\"\nrounded_avg(10,155);\
    \ // returns \"1111\"\nrounded_avg(10,160); // returns \"1111\"\nrounded_avg(10,165);\
    \ // returns \"1111\"\nrounded_avg(10,170); // returns \"1111\"\nrounded_avg(10,175);\
    \ // returns \"1111\"\nrounded_avg(10,180); // returns \"1111\"\nrounded_avg(10,185);\
    \ // returns \"1111\"\nrounded_avg(10,190); // returns \"1111\"\nroun", "  if(n\
    \ > m){\n    return -1;\n  }\n  \n  var sum = 0;\n  var count = 0;\n  \n  for(var\
    \ i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  \n  return sum / count;\n\
    }\n\nrounded_avg(3,5); // 4\nrounded_avg(3,6); // -1\nrounded_avg(3,7); // -1\n\
    rounded_avg(3,8); // -1\nrounded_avg(3,9); // -1\nrounded_avg(3,10); // -1\nrounded_avg(3,11);\
    \ // -1\nrounded_avg(3,12); // -1\nrounded_avg(3,13); // -1\nrounded_avg(3,14);\
    \ // -1\nrounded_avg(3,15); // -1\nrounded_avg(3,16); // -1\nrounded_avg(3,17);\
    \ // -1\nrounded_avg(3,18); // -1\nrounded_avg(3,19); // -1\nrounded_avg(3,20);\
    \ // -1\nrounded_avg(3,21); // -1\nrounded_avg(3,22); // -1\nrounded_avg(3,23);\
    \ // -1\nrounded_avg(3,24); // -1\nrounded_avg(3,25); // -1\nrounded_avg(3,26);\
    \ // -1\nrounded_avg(3,27); // -1\nrounded_avg(3,28); // -1\nrounded_avg(3,29);\
    \ // -1\nrounded_avg(3,30); // -1\nrounded_avg(3,31); // -1\nrounded_avg(3,32);\
    \ // -1\nrounded_avg(3,33); // -1\nrounded_avg(3,34); // -1\nrounded_avg(3,35);\
    \ // -1\nrounded_avg(3,36); // -1\nrounded_avg(3,37); // -1\nrounded_avg(3,38);\
    \ // -1\nrounded_avg(3,39); // -1\nrounded_avg(3,40); // -1\nrounded_avg(3,41);\
    \ // -1\nrounded_avg(3,42); // -1\nrounded_avg(3,43); // -1\nrounded_avg(3,44);\
    \ // -1\nrounded_avg(3,45); // -1\nrounded_avg(3,46); // -1\nrounded_avg(3,47);\
    \ // -1\nrounded_avg(3,48); // -1\nrounded_avg(3,49); // -1\nrounded_avg(3,50);\
    \ // -1\nrounded_avg(3,51); // -1\nrounded_avg(3,52); // -1\nrounded_avg(3,53);\
    \ // -1\nrounded_avg(3,54); // -1\nrounded_avg(3,55); // -1\nrounded_avg", " \
    \   if (n >= m) return -1;\n    var avg = Math.floor((n+m)/2);\n    var bin =\
    \ binary(avg);\n    return bin;\n}", "  if(n > m) return -1;\n  let sum = 0;\n\
    \  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n-m)).toString(2);\n\
    }\n", "  if(n>m) return -1;\n  var sum = 0;\n  for(var i=n; i<=m; i++){\n    sum\
    \ += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\nrounded_avg(5,10); // => 5\nrounded_avg(5,5); // => -1\nrounded_avg(5,10);\
    \ // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5);\
    \ // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10);\
    \ // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5);\
    \ // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10);\
    \ // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5);\
    \ // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10);\
    \ // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5);\
    \ // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10);\
    \ // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5);\
    \ // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10);\
    \ // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5);\
    \ // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10);\
    \ // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5);\
    \ // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,10);\
    \ // => -1\nrounded_avg(5,5); // => -1\nroun", "  let sum = 0;\n  for(let i =\
    \ n; i <= m; i++){\n    sum += i;\n  }\n  \n  if(sum > m){\n    return -1;\n \
    \ }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,32)).toString(2);\n}\n", " \
    \ if(n > m) return -1;\n  var avg = Math.floor((n+m)/2);\n  var bin = binary_to_decimal(avg);\n\
    \  return bin;\n}", "    let avg = Math.floor((n+m)/2);\n    let binary = \"\"\
    ;\n    for(let i = avg; i >= n; i--){\n        binary += \"1\";\n    }\n    for(let\
    \ i = avg; i <= m; i++){\n        binary += \"0\";\n    }\n    return binary;\n\
    }", "    let avg = Math.floor((n+m)/2);\n    let binary = \"\";\n    for(let i\
    \ = avg; i >= n; i--){\n        binary += \"1\";\n    }\n    for(let i = avg;\
    \ i <= m; i++){\n        binary += \"0\";\n    }\n    return binary;\n}", "  \
    \  if(n > m) return -1;\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n", "  var sum = 0;\n  var count = 0;\n  for(var i = n; i <= m; i++){\n    sum\
    \ += i;\n    count++;\n  }\n  return sum / count;\n}\n\nrounded_avg(3,5); // 3\n\
    rounded_avg(3,6); // -1\nrounded_avg(3,7); // -1\nrounded_avg(3,8); // -1\nrounded_avg(3,9);\
    \ // -1\nrounded_avg(3,10); // -1\nrounded_avg(3,11); // -1\nrounded_avg(3,12);\
    \ // -1\nrounded_avg(3,13); // -1\nrounded_avg(3,14); // -1\nrounded_avg(3,15);\
    \ // -1\nrounded_avg(3,16); // -1\nrounded_avg(3,17); // -1\nrounded_avg(3,18);\
    \ // -1\nrounded_avg(3,19); // -1\nrounded_avg(3,20); // -1\nrounded_avg(3,21);\
    \ // -1\nrounded_avg(3,22); // -1\nrounded_avg(3,23); // -1\nrounded_avg(3,24);\
    \ // -1\nrounded_avg(3,25); // -1\nrounded_avg(3,26); // -1\nrounded_avg(3,27);\
    \ // -1\nrounded_avg(3,28); // -1\nrounded_avg(3,29); // -1\nrounded_avg(3,30);\
    \ // -1\nrounded_avg(3,31); // -1\nrounded_avg(3,32); // -1\nrounded_avg(3,33);\
    \ // -1\nrounded_avg(3,34); // -1\nrounded_avg(3,35); // -1\nrounded_avg(3,36);\
    \ // -1\nrounded_avg(3,37); // -1\nrounded_avg(3,38); // -1\nrounded_avg(3,39);\
    \ // -1\nrounded_avg(3,40); // -1\nrounded_avg(3,41); // -1\nrounded_avg(3,42);\
    \ // -1\nrounded_avg(3,43); // -1\nrounded_avg(3,44); // -1\nrounded_avg(3,45);\
    \ // -1\nrounded_avg(3,46); // -1\nrounded_avg(3,47); // -1\nrounded_avg(3,48);\
    \ // -1\nrounded_avg(3,49); // -1\nrounded_avg(3,50); // -1\nrounded_avg(3,51);\
    \ // -1\nrounded_avg(3,52); // -1\nrounded_avg(3,53); // -1\nrounded_avg(3,54);\
    \ // -1\nrounded_avg(3,55); // -1\nrounded_avg(3,56); // -1\nrounded_avg(3,57);\
    \ // -1\nrounded_", "    var avg = Math.floor((n+m)/2);\n    return avg;\n}\n",
  "  if(n > m) return -1;\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n  \
    \  sum += i;\n  }\n  \n  return Math.round(sum / n);\n}\n", "  if(n > m) return\
    \ -1;\n  var avg = Math.floor((n+m)/2);\n  var binary = \"\";\n  for(var i = n;\
    \ i <= m; i++){\n    binary += i.toString(2);\n  }\n  return binary;\n}\nrounded_avg(5,6);",
  "  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum\
    \ += i;\n  }\n  return sum / n;\n}\nrounded_avg(3,5); // 4\nrounded_avg(5,3);\
    \ // -1\nrounded_avg(3,3); // -1\nrounded_avg(3,1); // -1\nrounded_avg(1,3); //\
    \ -1\nrounded_avg(3,-1); // -1\nrounded_avg(3,-2); // -1\nrounded_avg(3,-3); //\
    \ -1\nrounded_avg(3,-4); // -1\nrounded_avg(3,-5); // -1\nrounded_avg(3,-6); //\
    \ -1\nrounded_avg(3,-7); // -1\nrounded_avg(3,-8); // -1\nrounded_avg(3,-9); //\
    \ -1\nrounded_avg(3,-10); // -1\nrounded_avg(3,-11); // -1\nrounded_avg(3,-12);\
    \ // -1\nrounded_avg(3,-13); // -1\nrounded_avg(3,-14); // -1\nrounded_avg(3,-15);\
    \ // -1\nrounded_avg(3,-16); // -1\nrounded_avg(3,-17); // -1\nrounded_avg(3,-18);\
    \ // -1\nrounded_avg(3,-19); // -1\nrounded_avg(3,-20); // -1\nrounded_avg(3,-21);\
    \ // -1\nrounded_avg(3,-22); // -1\nrounded_avg(3,-23); // -1\nrounded_avg(3,-24);\
    \ // -1\nrounded_avg(3,-25); // -1\nrounded_avg(3,-26); // -1\nrounded_avg(3,-27);\
    \ // -1\nrounded_avg(3,-28); // -1\nrounded_avg(3,-29); // -1\nrounded_avg(3,-30);\
    \ // -1\nrounded_avg(3,-31); // -1\nrounded_avg(3,-32); // -1\nrounded_avg(3,-33);\
    \ // -1\nrounded_avg(3,-34); // -1\nrounded_avg(3,-35); // -1\nrounded_avg(3,-36);\
    \ // -1\nrounded_avg(3,-37); // -1\nrounded_avg(3,-38); // -1\nrounded_avg(3,-39);\
    \ // -1\nrounded_avg(3,-40); // -1\nrounded_avg(3,-41); // -1\nrounded_avg(3,-42);\
    \ // -1\nrounded_avg(3,-43); // -1\nrounded_avg(3,-44); // -1\nrounded_avg(3,-45);\
    \ // -1\nrounded_avg(3,", "    var avg = ((n+m)/2);\n    var rounded_avg = Math.round(avg);\n\
    \    var binary_avg = binary_to_decimal(rounded_avg);\n    return binary_avg;\n\
    }\n", "  if(n>m) return -1;\n  let sum = 0;\n  for(let i=n; i<=m; i++){\n    sum\
    \ += i;\n  }\n  return Math.round(sum/(n+m))*Math.pow(2,Math.ceil(Math.log2(n+m)));\n\
    }\n", "    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(10,m))/Math.pow(10,n);\n\
    }\n\nrounded_avg(5,10)", "  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n\
    \  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n", "    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n\
    \    }\n    return sum / n;\n}\n\nrounded_avg(5,10)", "  if(n>m){\n    return\
    \ -1;\n  }\n  let sum = 0;\n  for(let i=n;i<=m;i++){\n    sum += i;\n  }\n  return\
    \ Math.round(sum/(n+m))*Math.pow(2,Math.ceil(Math.log2(n+m)));\n}\n", "  if(n>m)\
    \ return -1;\n  let sum = 0;\n  for(let i=n; i<=m; i++){\n    sum += i;\n  }\n\
    \  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n}\n",
  "    if (n < m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }", "  if(n > m) return -1;\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  \n  return sum / 2;\n}\n\nrounded_avg(5,10); // => 5\n\
    rounded_avg(5,9); // => -1\nrounded_avg(5,8); // => -1\nrounded_avg(5,7); // =>\
    \ -1\nrounded_avg(5,6); // => -1\nrounded_avg(5,5); // => -1\nrounded_avg(5,4);\
    \ // => -1\nrounded_avg(5,3); // => -1\nrounded_avg(5,2); // => -1\nrounded_avg(5,1);\
    \ // => -1\nrounded_avg(5,0); // => -1\nrounded_avg(4,9); // => -1\nrounded_avg(4,8);\
    \ // => -1\nrounded_avg(4,7); // => -1\nrounded_avg(4,6); // => -1\nrounded_avg(4,5);\
    \ // => -1\nrounded_avg(4,4); // => -1\nrounded_avg(4,3); // => -1\nrounded_avg(4,2);\
    \ // => -1\nrounded_avg(4,1); // => -1\nrounded_avg(4,0); // => -1\nrounded_avg(3,9);\
    \ // => -1\nrounded_avg(3,8); // => -1\nrounded_avg(3,7); // => -1\nrounded_avg(3,6);\
    \ // => -1\nrounded_avg(3,5); // => -1\nrounded_avg(3,4); // => -1\nrounded_avg(3,3);\
    \ // => -1\nrounded_avg(3,2); // => -1\nrounded_avg(3,1); // => -1\nrounded_avg(3,0);\
    \ // => -1\nrounded_avg(2,9); // => -1\nrounded_avg(2,8); // => -1\nrounded_avg(2,7);\
    \ // => -1\nrounded_avg(2,6); // => -1\nrounded_avg(2,5); // => -1\nrounded_avg(2,4);\
    \ // => -1\nrounded_avg(2,3); // => -1\nrounded_avg(2,2); // => -1\nrounded_avg(2,1);\
    \ // => -1\nrounded_avg(2,0); // => -1\nrounded_avg(1,9); // => -1\nrounded_avg(1,8);\
    \ // => -1\nrounded_avg(1,7); // => -1\nrounded_avg(1,6); // => -1\nrounded_avg(1,5);\
    \ // => -1\nrounded_avg(1,4); // => -1\nrounded_avg(1,3); // => -1\nrounded_avg(1,2);\
    \ // => -1\nrounded_", "    let avg = n/m\n    let rounded_avg = Math.round(avg*Math.pow(10,Math.ceil(Math.log10(avg))));\n\
    \    let binary = bin(rounded_avg);\n    return binary;\n}", "    let sum = 0;\n\
    \    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return sum /\
    \ Math.pow(2,Math.ceil(Math.log2(m) - Math.log2(n)));\n}", "  if(n>m) return -1;\n\
    \  let sum = 0;\n  for(let i=n; i<=m; i++){\n    sum += i;\n  }\n  return sum/(n+m);\n\
    }", "    if (n < m){\n        return -1;\n    }\n    var sum = 0;\n    for (var\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum /\
    \ 2);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't round the average\
    \ to the nearest integer. It just rounds the sum to the nearest integer.\n<|/\
    \ c |>\n<| c |>\nThe question asks for the average of the integers from n through\
    \ m, not just the sum.\n<|/ c |>\n<| c |>\nYes, I know. My point is that your\
    \ solution doesn't round the average.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've updated my answer to include a solution that rounds the average.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "  if(n > m){\n    return -1;\n  }\n  \n  if(n\
    \ === m){\n    return n;\n  }\n  \n  var sum = 0;\n  var i = n;\n  \n  while(i\
    \ <= m){\n    sum += i;\n    i++;\n  }\n  \n  return Math.round(sum/(i-n)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n\nrounded_avg(5,10);", "    var sum = 0;\n    var count = 0;\n    for(var i\
    \ = n; i <= m; i++){\n        sum += i;\n        count++;\n    }\n    var avg\
    \ = sum / count;\n    return Math.round(avg * Math.pow(10, Math.ceil(Math.log10(avg))))\
    \ / Math.pow(10, Math.ceil(Math.log10(avg)));\n}\n\nrounded_avg(5,10) // 7.5\n\
    rounded_avg(5,9) // -1\nrounded_avg(5,8) // -1\nrounded_avg(5,7) // -1\nrounded_avg(5,6)\
    \ // -1\nrounded_avg(5,5) // -1\nrounded_avg(5,4) // -1\nrounded_avg(5,3) // -1\n\
    rounded_avg(5,2) // -1\nrounded_avg(5,1) // -1\nrounded_avg(5,0) // -1\nrounded_avg(4,9)\
    \ // -1\nrounded_avg(4,8) // -1\nrounded_avg(4,7) // -1\nrounded_avg(4,6) // -1\n\
    rounded_avg(4,5) // -1\nrounded_avg(4,4) // -1\nrounded_avg(4,3) // -1\nrounded_avg(4,2)\
    \ // -1\nrounded_avg(4,1) // -1\nrounded_avg(4,0) // -1\nrounded_avg(3,9) // -1\n\
    rounded_avg(3,8) // -1\nrounded_avg(3,7) // -1\nrounded_avg(3,6) // -1\nrounded_avg(3,5)\
    \ // -1\nrounded_avg(3,4) // -1\nrounded_avg(3,3) // -1\nrounded_avg(3,2) // -1\n\
    rounded_avg(3,1) // -1\nrounded_avg(3,0) // -1\nrounded_avg(2,9) // -1\nrounded_avg(2,8)\
    \ // -1\nrounded_avg(2,7) // -1\nrounded_avg(2,6) // -1\nrounded_avg(2,5) // -1\n\
    rounded_avg(2,4) // -1\nrounded_avg(2,3) // -1\nrounded_avg(2,2) // -1\nrounded_avg(2,1)\
    \ // -1\nrounded_avg(2,0) // -1\nrounded_avg(1,9) // -1\nrounded_avg(1,8) // -1\n\
    rounded_avg(1,7) // -1\nrounded_avg(1,6) // -1\nrounded_avg(1,5) // -1\nrounded_avg(1,4)\
    \ // -1\nrounded_avg(1,3) // -1\nrounded_avg(1,2) // -1\nrounded_avg(1,1) // -1\n\
    rounded_avg(1,0) // -1\nrounded_avg(0,9) // -1\nrounded_avg(0,", "    var sum\
    \ = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    return\
    \ sum / n;\n}", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum\
    \ += i;\n    }\n    return sum / n;\n}\n", "  if(n>m) return -1;\n  let sum =\
    \ 0;\n  for(let i=n; i<=m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n+m))*Math.pow(2,Math.ceil(Math.log2(n+m)));\n\
    }\n", "    var avg = Math.floor((n+m)/2);\n    var binary = \"\";\n    while(avg\
    \ > 0){\n        binary = binary + avg.toString(2);\n        avg = Math.floor(avg/2);\n\
    \    }\n    return binary;\n}", "    let sum = 0;\n    let count = 0;\n    for(let\
    \ i = n; i <= m; i++){\n        sum += i;\n        count++;\n    }\n    if(count\
    \ === 0){\n        return -1;\n    }\n    return sum / count;\n}\n", "    if (n\
    \ < m){\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <=\
    \ m; i++){\n        sum += i;\n    }\n    return Math.round(sum / 2);\n}\n", " \
    \   var sum = 0;\n    var count = 0;\n    for(var i = n; i <= m; i++){\n     \
    \   sum += i;\n        count++;\n    }\n    if(count > 0){\n        return Math.round(sum/count);\n\
    \    }\n    return -1;\n}\n</code></pre>\n        </section>\n        <section>\n\
    \            <h2>Exercise</h2>\n            <p>Write a function that takes in\
    \ two positive integers n and m and returns the average of the integers from n\
    \ through m (including n and m).</p>\n            <pre><code class=\"javascript\"\
    >", "    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n \
    \   }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n\nrounded_avg(5,10);", "  if(n > m){\n    return -1;\n  }\n  \n  let sum =\
    \ 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return sum/(n+m);\n\
    }\n", "  if(n > m){\n    return -1;\n  }\n  \n  var sum = 0;\n  var count = 0;\n\
    \  \n  for(var i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  \n  return\
    \ Math.round(sum / count).toString(2);\n}\n\nrounded_avg(5,10); // 5\nrounded_avg(5,5);\
    \ // -1\nrounded_avg(5,6); // -1\nrounded_avg(5,7); // -1\nrounded_avg(5,8); //\
    \ -1\nrounded_avg(5,9); // -1\nrounded_avg(5,10); // -1\nrounded_avg(5,11); //\
    \ -1\nrounded_avg(5,12); // -1\nrounded_avg(5,13); // -1\nrounded_avg(5,14); //\
    \ -1\nrounded_avg(5,15); // -1\nrounded_avg(5,16); // -1\nrounded_avg(5,17); //\
    \ -1\nrounded_avg(5,18); // -1\nrounded_avg(5,19); // -1\nrounded_avg(5,20); //\
    \ -1\nrounded_avg(5,21); // -1\nrounded_avg(5,22); // -1\nrounded_avg(5,23); //\
    \ -1\nrounded_avg(5,24); // -1\nrounded_avg(5,25); // -1\nrounded_avg(5,26); //\
    \ -1\nrounded_avg(5,27); // -1\nrounded_avg(5,28); // -1\nrounded_avg(5,29); //\
    \ -1\nrounded_avg(5,30); // -1\nrounded_avg(5,31); // -1\nrounded_avg(5,32); //\
    \ -1\nrounded_avg(5,33); // -1\nrounded_avg(5,34); // -1\nrounded_avg(5,35); //\
    \ -1\nrounded_avg(5,36); // -1\nrounded_avg(5,37); // -1\nrounded_avg(5,38); //\
    \ -1\nrounded_avg(5,39); // -1\nrounded_avg(5,40); // -1\nrounded_avg(5,41); //\
    \ -1\nrounded_avg(5,42); // -1\nrounded_avg(5,43); // -1\nrounded_avg(5,44); //\
    \ -1\nrounded_avg(5,45); // -1\nrounded_avg(5,46); // -1\nrounded_avg(5,47); //\
    \ -1\nrounded_avg(5,48); // -1\nrounded_avg(5,49); // -1\nrounded_avg(5,50); //\
    \ -1\nrounded_avg(5,51); // -1\nrounded_avg(5,52); // -1\nrounded_avg(5,53); //\
    \ -1\nrounded_avg(5,54); // -1", "    if (n < m){\n        return -1;\n    }\n\
    \    let sum = 0;\n    for (let i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n}\n", "    if\
    \ (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n  \
    \      sum += i;\n    }\n    return Math.round(sum/(n-m))*Math.pow(2, n);\n}",
  "    let avg = Math.floor((n+m)/2);\n    let binary = \"\";\n    for(let i = avg;\
    \ i >= n; i--){\n        binary += \"1\";\n    }\n    for(let i = avg; i <= m;\
    \ i++){\n        binary += \"0\";\n    }\n    return parseInt(binary);\n}", " \
    \   if (n < m){\n        return -1;\n    }\n    let sum = 0;\n    for (let i =\
    \ n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum / 2);\n\
    }\nrounded_avg(5,10); // 5\nrounded_avg(10,5); // 5\nrounded_avg(5,5); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\nrounded_avg(10,10); // -1\n\
    rounded_avg(10,10); // -1\nrounded_avg(10,10); // ", "    let sum = 0;\n    for(let\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(10,n))/Math.pow(10,n);\n\
    }", "    if (n < m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }", "    var avg = ((n + m) / 2);\n    var bin = parseInt(avg.toString(2), 2);\n\
    \    if (bin > Math.pow(2, 31)) {\n        return -1;\n    }\n    return bin;\n\
    }\n</code></pre>\n        </article>\n    </section>\n\n\n\n\n</div>\n\n<nav>\n\
    \    <h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"\
    BigInteger.html\">BigInteger</a></li><li><a href=\"BigIntegerRNG.html\">BigIntegerRNG</a></li><li><a\
    \ href=\"Config.html\">Config</a></li><li><a href=\"Helpers.html\">Helpers</a></li></ul><h3>Global</h3><ul><li><a\
    \ href=\"global.html#bignumber\">bignumber</a></li><li><a href=\"global.html#bignumberRNG\"\
    >bignumberRNG</a></li><li><a href=\"global.html#config\">config</a></li><li><a\
    \ href=\"global.html#helpers\">helpers</a></li></ul>\n</nav>\n\n<br class=\"clear\"\
    >\n\n<footer>\n    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\"\
    >JSDoc 3.5.5</a> on Tue Jan 30 2018 22:39:24 GMT-0500 (EST)\n</footer>\n\n<script>\
    \ prettyPrint(); </script>\n<script src=\"scripts/linenumber.js\"> </script>\n\
    </body>\n</html>\n\n<|/ file dstars=1 |>\n<| c |>\nPlease see my updated answer.\
    \ Your code was almost correct, but I missed the fact that `Math.pow(2, 31)` was\
    \ a power of two. Thanks for catching that.\n<|/ c |>\n<| c |>\nThanks so much\
    \ for the help! I really appreciate it!\n<|/ c |>\n<| a dscore=1 |>\nThe problem\
    \ is that the Math.pow(2, 31) is a power of two, which is why it works. But you\
    \ also need to check if m is greater than n. \n<code>", "  if(n>m){\n    return\
    \ -1;\n  }\n  let sum = 0;\n  for(let i=n; i<=m; i++){\n    sum += i;\n  }\n \
    \ return sum/(n+m);\n}\nrounded_avg(3,5)", "  if(n > m){\n    return -1;\n  }\n\
    \  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  \n\
    \  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n}\n", "    var\
    \ sum = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    return\
    \ sum / n;\n}\n", "  let sum = 0;\n  let count = 0;\n  for(let i = n; i <= m;\
    \ i++){\n    sum += i;\n    count++;\n  }\n  if(count > 0){\n    return sum /\
    \ count;\n  }\n  return -1;\n}", "  if(n > m){\n    return -1;\n  }\n  \n  let\
    \ sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return sum\
    \ / n;\n}\n", "  if(n > m){\n    return -1;\n  }\n  \n  let sum = 0;\n  for(let\
    \ i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n", "    var avg = Math.floor((n+m)/2);\n    return avg;\n}", "    if(n > m){\n\
    \        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return Math.round(sum/(n-m))*Math.pow(2, n);\n}",
  "    if (n < m){\n        return -1;\n    }\n    let sum = 0;\n    for (let i =\
    \ n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }", "  if(n > m){\n    return -1;\n  }\n  \n  var sum = 0;\n  for(var i = n; i\
    \ <= m; i++){\n    sum += i;\n  }\n  \n  return sum / 2;\n}\n", "    var sum =\
    \ 0;\n    var count = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n\
    \        count++;\n    }\n    var avg = sum / count;\n    var rounded_avg = Math.round(avg\
    \ * Math.pow(10, Math.ceil(Math.log10(avg)))) / Math.pow(10, Math.ceil(Math.log10(avg)));\n\
    \    return rounded_avg;\n}\n\nrounded_avg(5,10); // 5\nrounded_avg(10,5); //\
    \ 5\nrounded_avg(10,10); // 10\nrounded_avg(5,5); // -1\nrounded_avg(5,10); //\
    \ -1\nrounded_avg(10,5); // -1\nrounded_avg(10,10); // -1\nrounded_avg(5,5); //\
    \ -1\nrounded_avg(5,10); // -1\nrounded_avg(10,5); // -1\nrounded_avg(10,10);\
    \ // -1\nrounded_avg(5,5); // -1\nrounded_avg(5,10); // -1\nrounded_avg(10,5);\
    \ // -1\nrounded_avg(10,10); // -1\nrounded_avg(5,5); // -1\nrounded_avg(5,10);\
    \ // -1\nrounded_avg(10,5); // -1\nrounded_avg(10,10); // -1\nrounded_avg(5,5);\
    \ // -1\nrounded_avg(5,10); // -1\nrounded_avg(10,5); // -1\nrounded_avg(10,10);\
    \ // -1\nrounded_avg(5,5); // -1\nrounded_avg(5,10); // -1\nrounded_avg(10,5);\
    \ // -1\nrounded_avg(10,10); // -1\nrounded_avg(5,5); // -1\nrounded_avg(5,10);\
    \ // -1\nrounded_avg(10,5); // -1\nrounded_avg(10,10); // -1\nrounded_avg(5,5);\
    \ // -1\nrounded_avg(5,10); // -1\nrounded_avg(10,5); // -1\nrounded_avg(10,10);\
    \ // -1\nrounded_avg(5,5); // -1\nrounded_avg(5,10); // -1\nrounded_avg(10,5);\
    \ // -1\nrounded_avg(10,10); // -1\nrounded_avg(5,5); // -1\nrounded_avg(5,10);\
    \ // -1\nrounded_avg(10,5); // -1\nrounded_avg(10,10); // -1\nrounded_avg(5,5);\
    \ // -1\nrounded_avg(5,10); // -1\nrounded_avg(10,5); // -1\nrounded_avg(10,10);\
    \ // -1\nrounded_avg(5,5); // -1\nrounded_avg(5,10); // -1\nroun", "    let sum\
    \ = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return\
    \ sum / 2;\n}", "    var avg = ((n+m)/2);\n    var bin = parseInt(avg.toString(2));\n\
    \    if(bin.length == 1){\n        return -1;\n    }\n    return bin;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work. Try `rounded_avg(3,4)`\
    \ which should return `11`, but returns `-1`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I've updated the answer to fix the issue.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum\
    \ += i;\n    }\n    return sum / 2;\n}\n</code></pre>\n<h2 id=\"the-average-function-with-an-array\"\
    >The average function with an array</h2>\n<p>The average function takes in an\
    \ array of numbers and returns the average of the numbers in the array. \nThe\
    \ average is calculated by dividing the sum of all the numbers in the array by\
    \ the number of numbers in the array.</p>\n<pre><code class=\"lang-javascript\"\
    >function average(arr){\n    var sum = 0;\n    for(var i = 0; i &lt; arr.length;\
    \ i++){\n        sum += arr[i];\n    }\n    return sum / arr.length;\n}\n</code></pre>\n\
    <h2 id=\"the-average-function-with-a-string\">The average function with a string</h2>\n\
    <p>The average function takes in a string and returns the average of the characters\
    \ in the string. \nThe average is calculated by dividing the sum of all the characters\
    \ in the string by the number of characters in the string.</p>\n<pre><code class=\"\
    lang-javascript\">function average(str){\n    var sum = 0;\n    for(var i = 0;\
    \ i &lt; str.length; i++){\n        sum += str.charAt(i);\n    }\n    return sum\
    \ / str.length;\n}\n</code></pre>\n<h2 id=\"the-average-function-with-a-number\"\
    >The average function with a number</h2>\n<p>The average function takes in a number\
    \ and returns the average of the numbers in the number. \nThe average is calculated\
    \ by dividing the sum of all the numbers in the number by the number of numbers\
    \ in the number.</p>\n<pre><code class=\"lang-javascript\">function average(num){\n\
    \    var sum = 0;\n    for(var i = 0; i &lt; num; i++){\n        sum += num;\n\
    \    }\n    return sum / num;\n}\n</code></pre>\n<h2 id=\"the-average-function-with-a-boolean\"\
    >The average function with a boolean</h2>\n<p>The average function takes in a\
    \ boolean and returns the average of the numbers in the boolean. \nThe average\
    \ is calculated by dividing the sum of all the numbers in the boolean by the number\
    \ of numbers in the boolean.</p>\n<pre><code class=\"lang-javascript\">function\
    \ average(bool){\n    var sum = 0;\n    for(var i = 0; i &lt; bool; i++){\n  \
    \      sum += bool;\n    }\n    return sum / bool;\n}\n</code></pre>\n<h2 id=\"\
    the-average-function-with-a-date\">The average function with a date</h2>\n<p>The\
    \ average function takes in a date and returns the average of the numbers in the\
    \ date. \nThe average is calculated by dividing the sum of all the numbers in\
    \ the date by the number of numbers in the date.</p>\n<pre><code class=\"lang-javascript\"\
    >function average(date){\n    var sum = 0;\n    for(var i = 0; i &lt; date.length;\
    \ i++){\n", "    var avg = n/m;\n    var rounded_avg = Math.round(avg*Math.pow(10,Math.ceil(Math.log2(m))));\n\
    \    return rounded_avg;\n}\nrounded_avg(5,10);", "  if(n > m){\n    return -1;\n\
    \  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  return\
    \ Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n}", "  if(n >\
    \ m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n\
    \  }\n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n}\n", " \
    \ if(n > m) return -1;\n  \n  var sum = 0;\n  for(var i = n; i <= m; i++){\n \
    \   sum += i;\n  }\n  \n  var avg = sum / 2;\n  \n  return Math.round(avg);\n\
    }\n\nrounded_avg(5,10);", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return sum / n;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to round the average to the\
    \ nearest integer, not just round the sum.\n<|/ c |>\n<| c |>\nThe question was\
    \ about rounding the average, not the sum.\n<|/ c |>\n<| c |>\nThe question was\
    \ about rounding the average, not the sum.\n<|/ c |>\n<| c |>\nThe question was\
    \ about rounding the average, not the sum.\n<|/ c |>\n<| c |>\nThe question was\
    \ about rounding the average, not the sum.\n<|/ c |>\n<| a tags=javascript |>\n\
    <code>", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n\
    \    }\n    return sum / 2;\n}\n</code></pre>\n        </section>\n        <section>\n\
    \            <h2>Exercise</h2>\n            <ul>\n                <li>Write a\
    \ function that takes in two numbers and returns the average of the numbers between\
    \ them.</li>\n                <li>Write a function that takes in two numbers and\
    \ returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                <li>Write\
    \ a function that takes in two numbers and returns the average of the numbers\
    \ between them.</li>\n                <li>Write a function that takes in two numbers\
    \ and returns the average of the numbers between them.</li>\n                ",
  "    if (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return sum / n;\n}\nrounded_avg(5,6)", "  if(n\
    \ > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum +=\
    \ i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,32)).toString(2);\n}\nrounded_avg(3,5);\
    \ // returns \"11\"\nrounded_avg(3,6); // returns -1\nrounded_avg(3,7); // returns\
    \ -1\nrounded_avg(3,8); // returns -1\nrounded_avg(3,9); // returns -1\nrounded_avg(3,10);\
    \ // returns -1\nrounded_avg(3,11); // returns -1\nrounded_avg(3,12); // returns\
    \ -1\nrounded_avg(3,13); // returns -1\nrounded_avg(3,14); // returns -1\nrounded_avg(3,15);\
    \ // returns -1\nrounded_avg(3,16); // returns -1\nrounded_avg(3,17); // returns\
    \ -1\nrounded_avg(3,18); // returns -1\nrounded_avg(3,19); // returns -1\nrounded_avg(3,20);\
    \ // returns -1\nrounded_avg(3,21); // returns -1\nrounded_avg(3,22); // returns\
    \ -1\nrounded_avg(3,23); // returns -1\nrounded_avg(3,24); // returns -1\nrounded_avg(3,25);\
    \ // returns -1\nrounded_avg(3,26); // returns -1\nrounded_avg(3,27); // returns\
    \ -1\nrounded_avg(3,28); // returns -1\nrounded_avg(3,29); // returns -1\nrounded_avg(3,30);\
    \ // returns -1\nrounded_avg(3,31); // returns -1\nrounded_avg(3,32); // returns\
    \ -1\nrounded_avg(3,33); // returns -1\nrounded_avg(3,34); // returns -1\nrounded_avg(3,35);\
    \ // returns -1\nrounded_avg(3,36); // returns -1\nrounded_avg(3,37); // returns\
    \ -1\nrounded_avg(3,38); // returns -1\nrounded_avg(3,39); // returns -1\nrounded_avg(3,40);\
    \ // returns -1\nrounded_avg(3,41); // returns -1\nrounded_avg(3,42); // returns\
    \ -1\nrounded_avg(3,43); // returns -1\nrounded_avg(3,44); // returns -1\nrounded_avg(3,45);\
    \ // returns -1\nrounded_avg(3,46); // returns -1\nrounded_avg(3,47); // returns\
    \ -1\nrounded_avg(3,48); // returns -1\nrounded_avg(3,49); // returns -1\nrounded_avg(3,50);\
    \ // returns -1\nrounded_avg(", "    if(n < m){\n        return -1;\n    }\n \
    \   var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n}",
  "  if(n > m){\n    return -1;\n  }\n  \n  let sum = 0;\n  for(let i = n; i <= m;\
    \ i++){\n    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n", "    if (n < m){\n        return -1;\n    }\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum /\
    \ 2);\n}\n", "  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i =\
    \ n; i <= m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }", "  if(n > m){\n    return -1;\n  }\n  \n  let sum = 0;\n  for(let i = n; i\
    \ <= m; i++){\n    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n\nrounded_avg(5,10)", "    let sum = 0;\n    for(let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return sum / 2;\n}\nrounded_avg(5,10)", "  if(n\
    \ > m){\n    return -1;\n  }\n  \n  var sum = 0;\n  var count = 0;\n  \n  for(var\
    \ i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  \n  return sum / count;\n\
    }\n\nrounded_avg(5,10);", "  if(n > m) return -1;\n  \n  var sum = 0;\n  for(var\
    \ i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n\nrounded_avg(5,10); // => 5\nrounded_avg(10,5); // => 5\nrounded_avg(10,10);\
    \ // => 10\nrounded_avg(10,20); // => 10\nrounded_avg(20,10); // => 10\nrounded_avg(20,20);\
    \ // => 20\nrounded_avg(20,30); // => 20\nrounded_avg(30,20); // => 20\nrounded_avg(30,30);\
    \ // => 30\nrounded_avg(30,40); // => 30\nrounded_avg(30,50); // => 40\nrounded_avg(50,30);\
    \ // => 40\nrounded_avg(50,40); // => 50\nrounded_avg(50,50); // => 50\nrounded_avg(50,60);\
    \ // => 50\nrounded_avg(60,50); // => 50\nrounded_avg(60,60); // => 60\nrounded_avg(60,70);\
    \ // => 60\nrounded_avg(70,60); // => 60\nrounded_avg(70,70); // => 70\nrounded_avg(70,80);\
    \ // => 70\nrounded_avg(80,70); // => 70\nrounded_avg(80,80); // => 80\nrounded_avg(80,90);\
    \ // => 80\nrounded_avg(90,80); // => 80\nrounded_avg(90,90); // => 90\nrounded_avg(90,100);\
    \ // => 90\nrounded_avg(100,90); // => 90\nrounded_avg(100,100); // => 100\nrounded_avg(100,101);\
    \ // => 100\nrounded_avg(101,100); // => 100\nrounded_avg(101,101); // => 101\n\
    rounded_avg(101,102); // => 101\nrounded_avg(102,101); // => 101\nrounded_avg(102,102);\
    \ // => 102\nrounded_avg(102,103); // => 102\nrounded_avg(103,102); // => 102\n\
    rounded_avg(103,104); // => 102\nrounded_avg(104,103); // => 102\nrounded_avg(104,105);\
    \ // => 102\nrounded_avg(105,104); // => 102\nrounded_avg(105,106); // => 102\n\
    rounded_avg(106,105); // => 102\nrounded_avg(106,107); // => 102\nrounded_avg(",
  "  let avg = n/m\n  if(avg > m) return -1\n  return Math.round(avg*Math.pow(10,Math.ceil(Math.log10(avg))))\
    \ / Math.pow(10,Math.ceil(Math.log10(avg)))\n}\n\nrounded_avg(5,10)", "    if\
    \ (n < m) return -1;\n    var sum = 0;\n    for (var i = n; i <= m; i++){\n  \
    \      sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n", "  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  return Math.round(sum / 2) / 2;\n}", "    let sum = 0;\n\
    \    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n", "  if(n > m){\n    return -1;\n  }\n  var sum = 0;\n  var count = 0;\n \
    \ for(var i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  return sum\
    \ / count;\n}\n", "  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let\
    \ i = n; i <= m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n", "    if(n > m) return -1;\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }", "    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n \
    \   }\n    return sum / n;\n}\n", "  if(n>m){\n    return -1;\n  }\n  let sum\
    \ = 0;\n  for(let i=n; i<=m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n+m))*Math.pow(2,Math.ceil(Math.log2(n+m)));\n\
    }\n", "  if(n > m) return -1;\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  \n  return sum / n;\n}\n\nrounded_avg(5,7);", "    var\
    \ avg = ((n + m) / 2);\n    var rounded_avg = Math.round(avg);\n    var binary_avg\
    \ = binary_to_decimal(rounded_avg);\n    return binary_avg;\n}\n", "    if (n\
    \ < m){\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <=\
    \ m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m))*Math.pow(2,\
    \ n-m);\n}\n", "  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i\
    \ = n; i <= m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,31))\
    \ + Math.pow(2, 31);\n}\n", "    var avg = ((n + m) / 2);\n    var rounded_avg\
    \ = Math.round(avg);\n    var binary = \"\";\n    while(rounded_avg > 0){\n  \
    \      binary = binary + \"1\";\n        rounded_avg = rounded_avg - 1;\n    }\n\
    \    while(rounded_avg < 0){\n        binary = binary + \"0\";\n        rounded_avg\
    \ = rounded_avg + 1;\n    }\n    return binary;\n}\n", "    if (n > m){\n    \
    \    return -1;\n    }\n    var sum = 0;\n    for (var i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\nrounded_avg(5,10); // 5\nrounded_avg(5,5); // -1\nrounded_avg(5,6); // -1\n\
    rounded_avg(5,7); // -1\nrounded_avg(5,8); // -1\nrounded_avg(5,9); // -1\nrounded_avg(5,10);\
    \ // -1\nrounded_avg(5,11); // -1\nrounded_avg(5,12); // -1\nrounded_avg(5,13);\
    \ // -1\nrounded_avg(5,14); // -1\nrounded_avg(5,15); // -1\nrounded_avg(5,16);\
    \ // -1\nrounded_avg(5,17); // -1\nrounded_avg(5,18); // -1\nrounded_avg(5,19);\
    \ // -1\nrounded_avg(5,20); // -1\nrounded_avg(5,21); // -1\nrounded_avg(5,22);\
    \ // -1\nrounded_avg(5,23); // -1\nrounded_avg(5,24); // -1\nrounded_avg(5,25);\
    \ // -1\nrounded_avg(5,26); // -1\nrounded_avg(5,27); // -1\nrounded_avg(5,28);\
    \ // -1\nrounded_avg(5,29); // -1\nrounded_avg(5,30); // -1\nrounded_avg(5,31);\
    \ // -1\nrounded_avg(5,32); // -1\nrounded_avg(5,33); // -1\nrounded_avg(5,34);\
    \ // -1\nrounded_avg(5,35); // -1\nrounded_avg(5,36); // -1\nrounded_avg(5,37);\
    \ // -1\nrounded_avg(5,38); // -1\nrounded_avg(5,39); // -1\nrounded_avg(5,40);\
    \ // -1\nrounded_avg(5,41); // -1\nrounded_avg(5,42); // -1\nrounded_avg(5,43);\
    \ // -1\nrounded_avg(5,44); // -1\nrounded_avg(5,45); // -1\nrounded_avg(5,46);\
    \ // -1\nrounded_avg(5,47); // -1\nrounded_avg(5,48); // -1\nrounded_avg(5,49);\
    \ // -1\nrounded_avg(5,50); // -1\nrounded_avg(5,51); // -1\nrounded_avg(5,52);\
    \ // -1\nrounded_avg(5,53); // -1\nrounded_avg(5,54); // -1\nrounded_", "  if(n\
    \ > m){\n    return -1;\n  }\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,31)) + Math.pow(2,\
    \ 31);\n}\n", "    if (n > m) return -1;\n    var sum = 0;\n    for (var i = n;\
    \ i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))|0;\n\
    }\n</cell>\n<cell>\nrounded_avg(5,10)\n</cell>\n<cell>\nrounded_avg(5,5)\n</cell>\n\
    <cell>\nrounded_avg(5,6)\n</cell>\n<cell>\nrounded_avg(5,7)\n</cell>\n<cell>\n\
    rounded_avg(5,8)\n</cell>\n<cell>\nrounded_avg(5,9)\n</cell>\n<cell>\nrounded_avg(5,10)\n\
    </cell>\n<cell>\nrounded_avg(5,11)\n</cell>\n<cell>\nrounded_avg(5,12)\n</cell>\n\
    <cell>\nrounded_avg(5,13)\n</cell>\n<cell>\nrounded_avg(5,14)\n</cell>\n<cell>\n\
    rounded_avg(5,15)\n</cell>\n<cell>\nrounded_avg(5,16)\n</cell>\n<cell>\nrounded_avg(5,17)\n\
    </cell>\n<cell>\nrounded_avg(5,18)\n</cell>\n<cell>\nrounded_avg(5,19)\n</cell>\n\
    <cell>\nrounded_avg(5,20)\n</cell>\n<cell>\nrounded_avg(5,21)\n</cell>\n<cell>\n\
    rounded_avg(5,22)\n</cell>\n<cell>\nrounded_avg(5,23)\n</cell>\n<cell>\nrounded_avg(5,24)\n\
    </cell>\n<cell>\nrounded_avg(5,25)\n</cell>\n<cell>\nrounded_avg(5,26)\n</cell>\n\
    <cell>\nrounded_avg(5,27)\n</cell>\n<cell>\nrounded_avg(5,28)\n</cell>\n<cell>\n\
    rounded_avg(5,29)\n</cell>\n<cell>\nrounded_avg(5,30)\n</cell>\n<cell>\nrounded_avg(5,31)\n\
    </cell>\n<cell>\nrounded_avg(5,32)\n</cell>\n<cell>\nrounded_avg(5,33)\n</cell>\n\
    <cell>\nrounded_avg(", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n \
    \       sum += i;\n    }\n    return Math.round(sum/(n-m)) * Math.pow(2, Math.ceil(Math.log(n-m)/Math.LN2));\n\
    }\nrounded_avg(5,10);", "    if (n <= m) return -1;\n    let sum = 0;\n    for\
    \ (let i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }", "  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <=\
    \ m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n", "  if(n>m){\n    return -1;\n  }\n  var sum = 0;\n  for(var i=n; i<=m; i++){\n\
    \    sum += i;\n  }\n  return Math.round(sum/(n+m))*Math.pow(2, n);\n}\nrounded_avg(3,5);\
    \ // 4\nrounded_avg(3,6); // -1\nrounded_avg(3,7); // -1\nrounded_avg(3,8); //\
    \ -1\nrounded_avg(3,9); // -1\nrounded_avg(3,10); // -1\nrounded_avg(3,11); //\
    \ -1\nrounded_avg(3,12); // -1\nrounded_avg(3,13); // -1\nrounded_avg(3,14); //\
    \ -1\nrounded_avg(3,15); // -1\nrounded_avg(3,16); // -1\nrounded_avg(3,17); //\
    \ -1\nrounded_avg(3,18); // -1\nrounded_avg(3,19); // -1\nrounded_avg(3,20); //\
    \ -1\nrounded_avg(3,21); // -1\nrounded_avg(3,22); // -1\nrounded_avg(3,23); //\
    \ -1\nrounded_avg(3,24); // -1\nrounded_avg(3,25); // -1\nrounded_avg(3,26); //\
    \ -1\nrounded_avg(3,27); // -1\nrounded_avg(3,28); // -1\nrounded_avg(3,29); //\
    \ -1\nrounded_avg(3,30); // -1\nrounded_avg(3,31); // -1\nrounded_avg(3,32); //\
    \ -1\nrounded_avg(3,33); // -1\nrounded_avg(3,34); // -1\nrounded_avg(3,35); //\
    \ -1\nrounded_avg(3,36); // -1\nrounded_avg(3,37); // -1\nrounded_avg(3,38); //\
    \ -1\nrounded_avg(3,39); // -1\nrounded_avg(3,40); // -1\nrounded_avg(3,41); //\
    \ -1\nrounded_avg(3,42); // -1\nrounded_avg(3,43); // -1\nrounded_avg(3,44); //\
    \ -1\nrounded_avg(3,45); // -1\nrounded_avg(3,46); // -1\nrounded_avg(3,47); //\
    \ -1\nrounded_avg(3,48); // -1\nrounded_avg(3,49); // -1\nrounded_avg(3,50); //\
    \ -1\nrounded_avg(3,51); // -1\nrounded_avg(3,52); // -1\nrounded_avg(3,53); //\
    \ -1\nrounded_avg(3,54); // -1\nrounded_avg(3,55); // -1\nrounded_avg(3,", " \
    \   var sum = 0;\n    var count = 0;\n    for(var i = n; i <= m; i++){\n     \
    \   sum += i;\n        count++;\n    }\n    return sum / count | 0;\n}\n</code></pre>\n\
    \        </section>\n\n        <section>\n            <h2>Exercise</h2>\n    \
    \        <p>Write a function that computes the average of integers from n to m\
    \ (including n and m).</p>\n            <p>Round the answer to the nearest integer\
    \ and convert that to binary.</p>\n            <p>If n is greater than m, return\
    \ -1.</p>\n            <pre><code class=\"javascript\">", "    if(n > m){\n  \
    \      return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return Math.round(sum / 2);\n}\nrounded_avg(5,10)",
  "  if(n > m) return -1;\n  var avg = Math.floor((n+m)/2);\n  var bin = binary(avg);\n\
    \  return bin;\n}", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n    \
    \    sum += i;\n    }\n    return sum / 2;\n}\n</code></pre>\n<h2 id=\"rounding-to-the-nearest-integer\"\
    >Rounding to the nearest integer</h2>\n<p>The function <code>Math.round</code>\
    \ rounds a number to the nearest integer. \nFor example, <code>Math.round(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.ceil</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.ceil(-1.5)</code>\
    \ returns <code>-2</code>.</p>\n<p>The function <code>Math.floor</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.floor(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.round</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.round(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.ceil</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.ceil(-1.5)</code>\
    \ returns <code>-2</code>.</p>\n<p>The function <code>Math.floor</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.floor(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.round</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.round(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.ceil</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.ceil(-1.5)</code>\
    \ returns <code>-2</code>.</p>\n<p>The function <code>Math.floor</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.floor(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.round</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.round(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.ceil</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.ceil(-1.5)</code>\
    \ returns <code>-2</code>.</p>\n<p>The function <code>Math.floor</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.floor(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.round</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.round(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.ceil</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.ceil(-1.5)</code>\
    \ returns <code>-2</code>.</p>\n<p>The function <code>Math.floor</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.floor(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.round</code> rounds\
    \ a number to the nearest integer. \nFor example, <code>Math.round(-1.5)</code>\
    \ returns <code>-1</code>.</p>\n<p>The function <code>Math.ceil</code> rounds\
    \ a number to the nearest integer", "    if(n < m){\n        return -1;\n    }\n\
    \    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n}",
  "  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum\
    \ += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }", "  if(n > m) return -1;\n  var sum = 0;\n  for(var i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\nrounded_avg(5,10)", "  let sum = 0;\n  let count = 0;\n  for(let i = n; i <=\
    \ m; i++){\n    sum += i;\n    count++;\n  }\n  if(count > 0){\n    return Math.round(sum/count).toString(2);\n\
    \  }\n  return -1;\n}\n", "  if(n>m) return -1;\n  var sum = 0;\n  for(var i=n;\
    \ i<=m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n+m))*Math.pow(2,Math.ceil(Math.log2(n+m)));\n\
    }\n\nrounded_avg(5,6);", "    if (n < m) return -1;\n    var sum = 0;\n    for\
    \ (var i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))|0;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  if(n>m) return -1;\n\
    \  var sum = 0;\n  for(var i=n; i<=m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,32))|0;\n\
    }\nrounded_avg(5,6);", "  if(n > m){\n    return -1;\n  }\n  \n  if(n === m){\n\
    \    return n;\n  }\n  \n  let sum = 0;\n  let count = 0;\n  \n  for(let i = n;\
    \ i <= m; i++){\n    sum += i;\n    count++;\n  }\n  \n  return sum / count;\n\
    }\n\nrounded_avg(5,10);", "  if(n > m){\n    return -1;\n  }\n  \n  let sum =\
    \ 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n", "    var sum = 0;\n    var count = 0;\n    for(var i = n; i <= m; i++){\n\
    \        sum += i;\n        count++;\n    }\n    if(count > 0){\n        return\
    \ sum / count;\n    }\n    return -1;\n}\n", "    var sum = 0;\n    var count\
    \ = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n        count++;\n\
    \    }\n    return sum / count;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n\
    <| c |>\nThis doesn't answer the question, which is about how to compute the average\
    \ of n through m (including n and m).\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to compute the average of n through m (including n and m), not how to round\
    \ the average to nearest integer.\n<|/ c |>\n<| c |>\nThe question was about how\
    \ to compute the average of n through m (including n and m), not how to round\
    \ the average to nearest integer. Your answer doesn't do that.\n<|/ c |>\n<| c\
    \ |>\nThe question was about how to compute the average of n through m (including\
    \ n and m), not how to round the average to nearest integer. Your answer doesn't\
    \ do that.\n<|/ c |>\n<| c |>\nThe question was about how to compute the average\
    \ of n through m (including n and m), not how to round the average to nearest\
    \ integer. Your answer doesn't do that.\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\n<code>", "  if(n > m) return -1;\n  var sum = 0;\n  var count = 0;\n  for(var\
    \ i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  return Math.round(sum/count)/Math.pow(2,count+1);\n\
    }\n", "    var avg = Math.floor((n+m)/2);\n    if(avg > m){\n        return -1;\n\
    \    }\n    return avg;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  var\
    \ avg = ((n + m) / 2);\n  if(avg > m){\n    return -1;\n  }\n  return Math.round(avg\
    \ * Math.pow(10, Math.floor(Math.log(avg) / Math.LN10)));\n}\nrounded_avg(5,10);",
  "    if (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return Math.round(sum / 2);\n}\n", "    var sum\
    \ = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    return\
    \ sum / 2;\n}\n", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n      \
    \  sum += i;\n    }\n    return sum / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n\
    }\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis does not round the\
    \ average.\n<|/ c |>\n<| c |>\nThe average is rounded in the return statement\n\
    <|/ c |>\n<| c |>\nThe average is rounded in the return statement\n<|/ c |>\n\
    <| c |>\nThe average is rounded in the return statement\n<|/ c |>\n<| c |>\nThe\
    \ average is rounded in the return statement\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\n<code>", "    if (n < m) return -1;\n    var sum = 0;\n    for (var i =\
    \ n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum / 2);\n\
    }\n</code></pre>\n<h3 id=\"the-problem-is-solved\">The problem is solved</h3>\n\
    <p>The problem is solved using two loops. One loop to calculate the sum of the\
    \ integers from n to m, and another loop to calculate the average of the integers\
    \ from n to m. </p>\n<p>The first loop will iterate from n to m, and the second\
    \ loop will iterate from n to m, and calculate the sum of the integers from n\
    \ to m. Then, the average of the integers from n to m is calculated by dividing\
    \ the sum of the integers from n to m by two.</p>\n<p>The first loop will iterate\
    \ from n to m, and the second loop will iterate from n to m, and calculate the\
    \ sum of the integers from n to m. Then, the average of the integers from n to\
    \ m is calculated by dividing the sum of the integers from n to m by two.</p>\n\
    <p>The first loop will iterate from n to m, and the second loop will iterate from\
    \ n to m, and calculate the sum of the integers from n to m. Then, the average\
    \ of the integers from n to m is calculated by dividing the sum of the integers\
    \ from n to m by two.</p>\n<p>The first loop will iterate from n to m, and the\
    \ second loop will iterate from n to m, and calculate the sum of the integers\
    \ from n to m. Then, the average of the integers from n to m is calculated by\
    \ dividing the sum of the integers from n to m by two.</p>\n<p>The first loop\
    \ will iterate from n to m, and the second loop will iterate from n to m, and\
    \ calculate the sum of the integers from n to m. Then, the average of the integers\
    \ from n to m is calculated by dividing the sum of the integers from n to m by\
    \ two.</p>\n<p>The first loop will iterate from n to m, and the second loop will\
    \ iterate from n to m, and calculate the sum of the integers from n to m. Then,\
    \ the average of the integers from n to m is calculated by dividing the sum of\
    \ the integers from n to m by two.</p>\n<p>The first loop will iterate from n\
    \ to m, and the second loop will iterate from n to m, and calculate the sum of\
    \ the integers from n to m. Then, the average of the integers from n to m is calculated\
    \ by dividing the sum of the integers from n to m by two.</p>\n<p>The first loop\
    \ will iterate from n to m, and the second loop will iterate from n to m, and\
    \ calculate the sum of the integers from n to m. Then, the average of the integers\
    \ from n to m is calculated by dividing the ", "    if (n < m){\n        return\
    \ -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n        sum\
    \ += i;\n    }\n    return Math.round(sum / 2);\n}\n", "    var avg = n/m;\n \
    \   var rounded_avg = Math.round(avg*Math.pow(10,Math.ceil(Math.log2(m))));\n\
    \    return rounded_avg;\n}\nrounded_avg(5,5);", "    let sum = 0;\n    let count\
    \ = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n        count++;\n\
    \    }\n    return sum / count;\n}", "    var avg = ((n+m)/2);\n    var binary\
    \ = \"\";\n    while(avg > 1){\n        binary = binary + \"1\";\n        avg\
    \ = Math.floor(avg/2);\n    }\n    while(avg < 0){\n        binary = binary +\
    \ \"0\";\n        avg = Math.floor(avg/2);\n    }\n    return binary;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=javascript,binary,math,algorithm |>\n<code>", " \
    \ if(n > m) return -1;\n  \n  var avg = Math.floor((n+m)/2);\n  \n  return avg;\n\
    }\n\nrounded_avg(5,10);", "    let sum = 0;\n    for(let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return sum / Math.pow(2, Math.ceil(Math.log2(m)\
    \ - Math.log2(n)));\n}\nrounded_avg(6, 10) // 7\nrounded_avg(6, 9) // -1\nrounded_avg(6,\
    \ 8) // -1\nrounded_avg(6, 7) // -1\nrounded_avg(6, 6) // -1\nrounded_avg(6, 5)\
    \ // -1\nrounded_avg(6, 4) // -1\nrounded_avg(6, 3) // -1\nrounded_avg(6, 2) //\
    \ -1\nrounded_avg(6, 1) // -1\nrounded_avg(6, 0) // -1\nrounded_avg(6, -1) //\
    \ -1\nrounded_avg(6, -2) // -1\nrounded_avg(6, -3) // -1\nrounded_avg(6, -4) //\
    \ -1\nrounded_avg(6, -5) // -1\nrounded_avg(6, -6) // -1\nrounded_avg(6, -7) //\
    \ -1\nrounded_avg(6, -8) // -1\nrounded_avg(6, -9) // -1\nrounded_avg(6, -10)\
    \ // -1\nrounded_avg(6, -11) // -1\nrounded_avg(6, -12) // -1\nrounded_avg(6,\
    \ -13) // -1\nrounded_avg(6, -14) // -1\nrounded_avg(6, -15) // -1\nrounded_avg(6,\
    \ -16) // -1\nrounded_avg(6, -17) // -1\nrounded_avg(6, -18) // -1\nrounded_avg(6,\
    \ -19) // -1\nrounded_avg(6, -20) // -1\nrounded_avg(6, -21) // -1\nrounded_avg(6,\
    \ -22) // -1\nrounded_avg(6, -23) // -1\nrounded_avg(6, -24) // -1\nrounded_avg(6,\
    \ -25) // -1\nrounded_avg(6, -26) // -1\nrounded_avg(6, -27) // -1\nrounded_avg(6,\
    \ -28) // -1\nrounded_avg(6, -29) // -1\nrounded_avg(6, -30) // -1\nrounded_avg(6,\
    \ -31) // -1\nrounded_avg(6, -32) // -1\nrounded_avg(6, -33) // -1\nrounded_avg(6,\
    \ -34) // -1\nrounded_avg(6, -35) // -1\nrounded_avg(6, -36) // -1\nrounded_avg(6,\
    \ -37) // -1\nrounded_avg(6, -38) // -1\nrounded_avg(6, -39) // -1\nrounded_avg",
  "    var avg = ((n+m)/2);\n    var bin = parseInt(avg, 2);\n    if(bin>m) return\
    \ -1;\n    return bin;\n}\n</cell>\n<cell>\nrounded_avg(3,5)\n</cell>\n<cell>\n\
    rounded_avg(5,3)\n</cell>\n<cell>\nrounded_avg(3,4)\n</cell>\n<cell>\nrounded_avg(4,3)\n\
    </cell>\n<cell>\nrounded_avg(5,5)\n</cell>\n<cell>\nrounded_avg(5,6)\n</cell>\n\
    <cell>\nrounded_avg(6,5)\n</cell>\n<cell>\nrounded_avg(6,6)\n</cell>\n<cell>\n\
    rounded_avg(7,6)\n</cell>\n<cell>\nrounded_avg(8,6)\n</cell>\n<cell>\nrounded_avg(9,6)\n\
    </cell>\n<cell>\nrounded_avg(10,6)\n</cell>\n<cell>\nrounded_avg(11,6)\n</cell>\n\
    <cell>\nrounded_avg(12,6)\n</cell>\n<cell>\nrounded_avg(13,6)\n</cell>\n<cell>\n\
    rounded_avg(14,6)\n</cell>\n<cell>\nrounded_avg(15,6)\n</cell>\n<cell>\nrounded_avg(16,6)\n\
    </cell>\n<cell>\nrounded_avg(17,6)\n</cell>\n<cell>\nrounded_avg(18,6)\n</cell>\n\
    <cell>\nrounded_avg(19,6)\n</cell>\n<cell>\nrounded_avg(20,6)\n</cell>\n<cell>\n\
    rounded_avg(21,6)\n</cell>\n<cell>\nrounded_avg(22,6)\n</cell>\n<cell>\nrounded_avg(23,6)\n\
    </cell>\n<cell>\nrounded_avg(24,6)\n</cell>\n<cell>\nrounded_avg(25,6)\n</cell>\n\
    <cell>\nrounded_avg(26,6)\n</cell>\n<cell>\nrounded_avg(27,6)\n</cell>\n<cell>\n\
    rounded_avg(28,6)\n</cell>\n<cell>\nrounded_avg(29,6)\n</cell>\n<cell>\nrounded_avg(30,6)\n\
    </", "  if(n > m) return -1;\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n", "  var sum = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n  return\
    \ sum / 2;\n}\n\nrounded_avg(5,10);", "    if (n > m) return -1;\n    var avg\
    \ = Math.floor((n+m)/2);\n    var bin = binary(avg);\n    return bin;\n}\n", " \
    \   let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return sum / Math.pow(10, Math.floor(Math.log10(sum)));\n}\n", "  if(n >\
    \ m){\n    return -1;\n  }\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n", "  if(n>m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i=n; i<=m; i++){\n\
    \    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(10,n))/Math.pow(10,n);\n\
    }\n", "    var avg = Math.floor((n+m)/2);\n    return avg;\n}\nvar result = rounded_avg(5,10);",
  "  if(n < m){\n    return -1;\n  }\n  \n  var sum = 0;\n  for(var i = n; i <= m;\
    \ i++){\n    sum += i;\n  }\n  \n  return sum / 2;\n}\n", "  var sum = 0;\n  var\
    \ count = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n\
    \  if(count > 0){\n    return sum / count;\n  }\n  return -1;\n}\nrounded_avg(3,5)",
  "  if(n>m) return -1;\n  let sum = 0;\n  for(let i=n; i<=m; i++){\n    sum += i;\n\
    \  }\n  return Math.round(sum/(n+m))*Math.pow(2,Math.ceil(Math.log2(n+m)));\n\
    }\n", "    var avg = ((n+m)/2);\n    var bin = avg.toString(2);\n    bin = bin.substr(bin.length-4);\n\
    \    return parseInt(bin, 2);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "  if(n > m){\n    return -1;\n  }\n  var avg = Math.floor((n+m)/2);\n\
    \  var binary = \"\";\n  while(avg > 0){\n    binary = binary + avg.toString(2);\n\
    \    avg = Math.floor(avg/2);\n  }\n  return parseInt(binary, 2);\n}\n", "   \
    \ var avg = ((n+m)/2);\n    var rounded_avg = Math.round(avg);\n    var binary\
    \ = \"\";\n    \n    for(var i = rounded_avg; i >= 0; i--){\n        binary +=\
    \ \"1\";\n    }\n    \n    return binary;\n}\n\nrounded_avg(5,6);", "  if(n >\
    \ m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n\
    \  }\n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n}\n", " \
    \   if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n;\
    \ i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }", "    if (n < m){\n        return -1;\n    }\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m))*Math.pow(2,\
    \ n);\n}\n", "  if(n > m){\n    return -1;\n  }\n  \n  let sum = 0;\n  for(let\
    \ i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return sum / 2;\n}\n\nrounded_avg(5,10);",
  "    if(n > m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n;\
    \ i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }", "  if(n > m){\n    return -1;\n  }\n  \n  if(n === m){\n    return n;\n  }\n\
    \  \n  let sum = 0;\n  let count = 0;\n  \n  for(let i = n; i <= m; i++){\n  \
    \  sum += i;\n    count++;\n  }\n  \n  return sum / count;\n}\n", "  if(n>m) return\
    \ -1;\n  let sum = 0;\n  for(let i=n; i<=m; i++){\n    sum += i;\n  }\n  return\
    \ Math.round(sum/(n+m))*Math.pow(2,Math.ceil(Math.log2(n+m)));\n}\n", "  if(n\
    \ > m) return -1;\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum\
    \ += i;\n  }\n  \n  return sum / n;\n}\n", "    if(n > m) return -1;\n    let\
    \ sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return\
    \ sum / n;\n}\n\nrounded_avg(5,5); // 4\nrounded_avg(5,6); // -1\nrounded_avg(5,7);\
    \ // -1\nrounded_avg(5,8); // -1\nrounded_avg(5,9); // -1\nrounded_avg(5,10);\
    \ // -1\nrounded_avg(5,11); // -1\nrounded_avg(5,12); // -1\nrounded_avg(5,13);\
    \ // -1\nrounded_avg(5,14); // -1\nrounded_avg(5,15); // -1\nrounded_avg(5,16);\
    \ // -1\nrounded_avg(5,17); // -1\nrounded_avg(5,18); // -1\nrounded_avg(5,19);\
    \ // -1\nrounded_avg(5,20); // -1\nrounded_avg(5,21); // -1\nrounded_avg(5,22);\
    \ // -1\nrounded_avg(5,23); // -1\nrounded_avg(5,24); // -1\nrounded_avg(5,25);\
    \ // -1\nrounded_avg(5,26); // -1\nrounded_avg(5,27); // -1\nrounded_avg(5,28);\
    \ // -1\nrounded_avg(5,29); // -1\nrounded_avg(5,30); // -1\nrounded_avg(5,31);\
    \ // -1\nrounded_avg(5,32); // -1\nrounded_avg(5,33); // -1\nrounded_avg(5,34);\
    \ // -1\nrounded_avg(5,35); // -1\nrounded_avg(5,36); // -1\nrounded_avg(5,37);\
    \ // -1\nrounded_avg(5,38); // -1\nrounded_avg(5,39); // -1\nrounded_avg(5,40);\
    \ // -1\nrounded_avg(5,41); // -1\nrounded_avg(5,42); // -1\nrounded_avg(5,43);\
    \ // -1\nrounded_avg(5,44); // -1\nrounded_avg(5,45); // -1\nrounded_avg(5,46);\
    \ // -1\nrounded_avg(5,47); // -1\nrounded_avg(5,48); // -1\nrounded_avg(5,49);\
    \ // -1\nrounded_avg(5,50); // -1\nrounded_avg(5,51); // -1\nrounded_avg(5,52);\
    \ // -1\nrounded_avg(5,53); // -1\nrounded_avg(5,54); // -1\nrounded_avg(5,55);\
    \ // -1\nrounded_avg(5,56); // -1\nrounded_avg(5,57); // -1\nrounded_", "  if(n\
    \ > m){\n    return -1;\n  }\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  \n  return sum / n;\n}\n", "    let sum = 0;\n    let count\
    \ = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n        count++;\n\
    \    }\n    return sum / count | 0;\n}\n", "  if(n < m){\n    return -1;\n  }\n\
    \  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  \n\
    \  return sum / 2;\n}\n", "  if(n > m){\n    return -1;\n  }\n  \n  var sum =\
    \ 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n\nrounded_avg(5,10);", "    let sum = 0;\n    for(let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return sum / Math.pow(2,Math.ceil(Math.log2(m)\
    \ - Math.log2(n)));\n}", "  if(n > m){\n    return -1;\n  }\n  var avg = Math.floor((n+m)/2);\n\
    \  var binary = \"\";\n  for(var i = avg; i >= 0; i--){\n    binary += \"1\";\n\
    \  }\n  return binary;\n}\n", "  if(n > m) return -1;\n  let sum = 0;\n  for(let\
    \ i = n; i <= m; i++){\n    sum += i;\n  }\n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n", "    if (n >= m) return -1;\n    var avg = Math.floor((n+m)/2);\n    var\
    \ binary = \"\";\n    while(avg > 0){\n        binary = binary+((avg&1)?\"1\"\
    :\"0\");\n        avg = Math.floor(avg>>1);\n    }\n    return parseInt(binary,\
    \ 2);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  if(n < m)\
    \ return -1;\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n\
    \  }\n  \n  return Math.round(sum/(n-m)).toString(2);\n}\n", "    if (n < m){\n\
    \        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }", "    if (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))|0;\n\
    }", "    var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n \
    \   }\n    return sum / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n\
    }\n\nrounded_avg(7, 10) // 7\nrounded_avg(7, 9) // -1\nrounded_avg(7, 8) // -1\n\
    rounded_avg(7, 7) // -1\nrounded_avg(7, 6) // -1\nrounded_avg(7, 5) // -1\nrounded_avg(7,\
    \ 4) // -1\nrounded_avg(7, 3) // -1\nrounded_avg(7, 2) // -1\nrounded_avg(7, 1)\
    \ // -1\nrounded_avg(7, 0) // -1\nrounded_avg(7, -1) // -1\nrounded_avg(7, -2)\
    \ // -1\nrounded_avg(7, -3) // -1\nrounded_avg(7, -4) // -1\nrounded_avg(7, -5)\
    \ // -1\nrounded_avg(7, -6) // -1\nrounded_avg(7, -7) // -1\nrounded_avg(7, -8)\
    \ // -1\nrounded_avg(7, -9) // -1\nrounded_avg(7, -10) // -1\nrounded_avg(7, -11)\
    \ // -1\nrounded_avg(7, -12) // -1\nrounded_avg(7, -13) // -1\nrounded_avg(7,\
    \ -14) // -1\nrounded_avg(7, -15) // -1\nrounded_avg(7, -16) // -1\nrounded_avg(7,\
    \ -17) // -1\nrounded_avg(7, -18) // -1\nrounded_avg(7, -19) // -1\nrounded_avg(7,\
    \ -20) // -1\nrounded_avg(7, -21) // -1\nrounded_avg(7, -22) // -1\nrounded_avg(7,\
    \ -23) // -1\nrounded_avg(7, -24) // -1\nrounded_avg(7, -25) // -1\nrounded_avg(7,\
    \ -26) // -1\nrounded_avg(7, -27) // -1\nrounded_avg(7, -28) // -1\nrounded_avg(7,\
    \ -29) // -1\nrounded_avg(7, -30) // -1\nrounded_avg(7, -31) // -1\nrounded_avg(7,\
    \ -32) // -1\nrounded_avg(7, -33) // -1\nrounded_avg(7, -34) // -1\nrounded_avg(7,\
    \ -35) // -1\nrounded_avg(7, -36) // -1\nrounded_avg(7, -37) // -1\nrounded_avg(7,\
    \ -38) // -1\nrounded_avg(7, -39) // -1\nrounded_avg(", "  var sum = 0;\n  var\
    \ avg = -1;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n  avg = sum /\
    \ 2;\n  avg = Math.round(avg);\n  avg = avg.toString(2);\n  if(avg.length == 1){\n\
    \    avg = '0' + avg;\n  }\n  return avg;\n}\nrounded_avg(5,10);", "    if (n\
    \ < m) return -1;\n    var sum = 0;\n    for (var i = n; i <= m; i++){\n     \
    \   sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n", "    var avg = ((n+m)/2);\n    return Math.round(avg*Math.pow(10,Math.ceil(Math.log(avg)/Math.LN10)));\n\
    }\nrounded_avg(5,10); //5\nrounded_avg(10,5); //5\nrounded_avg(10,10); //5\nrounded_avg(5,5);\
    \ //-1\nrounded_avg(5,10); //-1\nrounded_avg(10,5); //-1\nrounded_avg(10,10);\
    \ //-1\nrounded_avg(5,5); //-1\nrounded_avg(5,10); //-1\nrounded_avg(10,5); //-1\n\
    rounded_avg(10,10); //-1\nrounded_avg(5,5); //-1\nrounded_avg(5,10); //-1\nrounded_avg(10,5);\
    \ //-1\nrounded_avg(10,10); //-1\nrounded_avg(5,5); //-1\nrounded_avg(5,10); //-1\n\
    rounded_avg(10,5); //-1\nrounded_avg(10,10); //-1\nrounded_avg(5,5); //-1\nrounded_avg(5,10);\
    \ //-1\nrounded_avg(10,5); //-1\nrounded_avg(10,10); //-1\nrounded_avg(5,5); //-1\n\
    rounded_avg(5,10); //-1\nrounded_avg(10,5); //-1\nrounded_avg(10,10); //-1\nrounded_avg(5,5);\
    \ //-1\nrounded_avg(5,10); //-1\nrounded_avg(10,5); //-1\nrounded_avg(10,10);\
    \ //-1\nrounded_avg(5,5); //-1\nrounded_avg(5,10); //-1\nrounded_avg(10,5); //-1\n\
    rounded_avg(10,10); //-1\nrounded_avg(5,5); //-1\nrounded_avg(5,10); //-1\nrounded_avg(10,5);\
    \ //-1\nrounded_avg(10,10); //-1\nrounded_avg(5,5); //-1\nrounded_avg(5,10); //-1\n\
    rounded_avg(10,5); //-1\nrounded_avg(10,10); //-1\nrounded_avg(5,5); //-1\nrounded_avg(5,10);\
    \ //-1\nrounded_avg(10,5); //-1\nrounded_avg(10,10); //-1\nrounded_avg(5,5); //-1\n\
    rounded_", "    if (n <= m) return -1;\n    let avg = Math.floor((n+m)/2);\n \
    \   let binary = \"\";\n    while (avg > 0){\n        binary = binary + avg.toString(2);\n\
    \        avg = Math.floor(avg/2);\n    }\n    return parseInt(binary, 2);\n}",
  "    if (n < m){\n        return -1;\n    }\n    let sum = 0;\n    for (let i =\
    \ n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum / 2);\n\
    }\n", "  var sum = 0;\n  var count = 0;\n  for(var i = n; i <= m; i++){\n    sum\
    \ += i;\n    count++;\n  }\n  if(count > 0){\n    return sum / count;\n  }\n \
    \ return -1;\n}\nrounded_avg(10,20);", "    var avg = ((n + m) / 2);\n    return\
    \ Math.round(avg);\n}\n", "  var avg = n/m\n  if(avg > m) return -1\n  if(avg\
    \ < 0) return -1\n  return Math.ceil(avg*Math.pow(10,Math.floor(Math.log10(avg))))\
    \ \n}\n\nrounded_avg(5,6)", "  if(n > m){\n    return -1;\n  }\n  \n  let sum\
    \ = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return sum /\
    \ n;\n}\n\nrounded_avg(5,10); // 5\nrounded_avg(5,9); // -1\nrounded_avg(5,8);\
    \ // -1\nrounded_avg(5,7); // -1\nrounded_avg(5,6); // -1\nrounded_avg(5,5); //\
    \ -1\nrounded_avg(5,4); // -1\nrounded_avg(5,3); // -1\nrounded_avg(5,2); // -1\n\
    rounded_avg(5,1); // -1\nrounded_avg(5,0); // -1\nrounded_avg(4,9); // -1\nrounded_avg(4,8);\
    \ // -1\nrounded_avg(4,7); // -1\nrounded_avg(4,6); // -1\nrounded_avg(4,5); //\
    \ -1\nrounded_avg(4,4); // -1\nrounded_avg(4,3); // -1\nrounded_avg(4,2); // -1\n\
    rounded_avg(4,1); // -1\nrounded_avg(4,0); // -1\nrounded_avg(3,9); // -1\nrounded_avg(3,8);\
    \ // -1\nrounded_avg(3,7); // -1\nrounded_avg(3,6); // -1\nrounded_avg(3,5); //\
    \ -1\nrounded_avg(3,4); // -1\nrounded_avg(3,3); // -1\nrounded_avg(3,2); // -1\n\
    rounded_avg(3,1); // -1\nrounded_avg(3,0); // -1\nrounded_avg(2,9); // -1\nrounded_avg(2,8);\
    \ // -1\nrounded_avg(2,7); // -1\nrounded_avg(2,6); // -1\nrounded_avg(2,5); //\
    \ -1\nrounded_avg(2,4); // -1\nrounded_avg(2,3); // -1\nrounded_avg(2,2); // -1\n\
    rounded_avg(2,1); // -1\nrounded_avg(2,0); // -1\nrounded_avg(1,9); // -1\nrounded_avg(1,8);\
    \ // -1\nrounded_avg(1,7); // -1\nrounded_avg(1,6); // -1\nrounded_avg(1,5); //\
    \ -1\nrounded_avg(1,4); // -1\nrounded_avg(1,3); // -1\nrounded_avg(1,2); // -1\n\
    rounded_avg(1,1); // -1\nrounded_avg(1,0); // -1\nrounded_avg(0,9); // -1\nrounded_avg(0,8);\
    \ // -1\nrounded_avg(0,7); // -1\nrounded_avg(0,6); // -1", "    if (n < m){\n\
    \        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++){\n\
    \        sum += i;\n    }\n    return Math.round(sum / 2);\n}", "    let sum =\
    \ 0;\n    let count = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n\
    \        count++;\n    }\n    return sum / count;\n}\n", "    let sum = 0;\n \
    \   for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return sum / m;\n\
    }\n", "  var sum = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n  }\n  return\
    \ sum / 2;\n}\nrounded_avg(3,5); // 4\nrounded_avg(3,6); // -1\nrounded_avg(3,7);\
    \ // -1\nrounded_avg(3,8); // -1\nrounded_avg(3,9); // -1\nrounded_avg(3,10);\
    \ // -1\nrounded_avg(3,11); // -1\nrounded_avg(3,12); // -1\nrounded_avg(3,13);\
    \ // -1\nrounded_avg(3,14); // -1\nrounded_avg(3,15); // -1\nrounded_avg(3,16);\
    \ // -1\nrounded_avg(3,17); // -1\nrounded_avg(3,18); // -1\nrounded_avg(3,19);\
    \ // -1\nrounded_avg(3,20); // -1\nrounded_avg(3,21); // -1\nrounded_avg(3,22);\
    \ // -1\nrounded_avg(3,23); // -1\nrounded_avg(3,24); // -1\nrounded_avg(3,25);\
    \ // -1\nrounded_avg(3,26); // -1\nrounded_avg(3,27); // -1\nrounded_avg(3,28);\
    \ // -1\nrounded_avg(3,29); // -1\nrounded_avg(3,30); // -1\nrounded_avg(3,31);\
    \ // -1\nrounded_avg(3,32); // -1\nrounded_avg(3,33); // -1\nrounded_avg(3,34);\
    \ // -1\nrounded_avg(3,35); // -1\nrounded_avg(3,36); // -1\nrounded_avg(3,37);\
    \ // -1\nrounded_avg(3,38); // -1\nrounded_avg(3,39); // -1\nrounded_avg(3,40);\
    \ // -1\nrounded_avg(3,41); // -1\nrounded_avg(3,42); // -1\nrounded_avg(3,43);\
    \ // -1\nrounded_avg(3,44); // -1\nrounded_avg(3,45); // -1\nrounded_avg(3,46);\
    \ // -1\nrounded_avg(3,47); // -1\nrounded_avg(3,48); // -1\nrounded_avg(3,49);\
    \ // -1\nrounded_avg(3,50); // -1\nrounded_avg(3,51); // -1\nrounded_avg(3,52);\
    \ // -1\nrounded_avg(3,53); // -1\nrounded_avg(3,54); // -1\nrounded_avg(3,55);\
    \ // -1\nrounded_avg(3,56); // -1\nrounded_avg(3,57); // -1\nrounded_avg(3,58);\
    \ // -1\n", "    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum +=\
    \ i;\n    }\n    return sum / 2;\n}\n", "    if (n >= m) return -1;\n    return\
    \ Math.round(n/m + 0.5)*Math.pow(2,Math.ceil(Math.log2(n/m + 0.5)));\n}", "  \
    \  let sum = 0;\n    let count = 0;\n    for(let i = n; i <= m; i++){\n      \
    \  sum += i;\n        count++;\n    }\n    if(count > 0){\n        return Math.round(sum/count)*2;\n\
    \    }\n    return -1;\n}\n", "  if(n > m){\n    return -1;\n  }\n  \n  var sum\
    \ = 0;\n  var count = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n    count++;\n\
    \  }\n  \n  return sum / count;\n}\n", "  if(n > m){\n    return -1;\n  }\n  \n\
    \  var avg = Math.floor((n+m)/2);\n  var binary = \"\";\n  \n  for(var i = avg;\
    \ i >= n; i--){\n    binary += \"1\";\n  }\n  \n  for(var i = avg; i <= m; i++){\n\
    \    binary += \"0\";\n  }\n  \n  return parseInt(binary, 2);\n}\n\nrounded_avg(5,10);\
    \ // 5\nrounded_avg(5,8); // -1\nrounded_avg(5,7); // -1\nrounded_avg(5,6); //\
    \ -1\nrounded_avg(5,5); // -1\nrounded_avg(5,4); // -1\nrounded_avg(5,3); // -1\n\
    rounded_avg(5,2); // -1\nrounded_avg(5,1); // -1\nrounded_avg(5,0); // -1\nrounded_avg(5,-1);\
    \ // -1\nrounded_avg(5,-2); // -1\nrounded_avg(5,-3); // -1\nrounded_avg(5,-4);\
    \ // -1\nrounded_avg(5,-5); // -1\nrounded_avg(5,-6); // -1\nrounded_avg(5,-7);\
    \ // -1\nrounded_avg(5,-8); // -1\nrounded_avg(5,-9); // -1\nrounded_avg(5,-10);\
    \ // -1\nrounded_avg(5,-11); // -1\nrounded_avg(5,-12); // -1\nrounded_avg(5,-13);\
    \ // -1\nrounded_avg(5,-14); // -1\nrounded_avg(5,-15); // -1\nrounded_avg(5,-16);\
    \ // -1\nrounded_avg(5,-17); // -1\nrounded_avg(5,-18); // -1\nrounded_avg(5,-19);\
    \ // -1\nrounded_avg(5,-20); // -1\nrounded_avg(5,-21); // -1\nrounded_avg(5,-22);\
    \ // -1\nrounded_avg(5,-23); // -1\nrounded_avg(5,-24); // -1\nrounded_avg(5,-25);\
    \ // -1\nrounded_avg(5,-26); // -1\nrounded_avg(5,-27); // -1\nrounded_avg(5,-28);\
    \ // -1\nrounded_avg(5,-29); // -1\nrounded_avg(5,-30); // -1\nrounded_avg(5,-31);\
    \ // -1\nrounded_avg(5,-32); // -1\nrounded_avg(5,-33); // -1\nrounded_avg(5,-34);\
    \ // -1\nrounded_avg(5,-35); // -1\nrounded_avg(5,-36); // -1\nrounded_avg", " \
    \   var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if n is greater than m.\
    \ For example, rounded_avg(5,3) returns 2.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for me either, but that's because I didn't test it properly. I've edited my\
    \ answer to include a test case.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if\
    \ (n > m) return -1;\n    var sum = 0;\n    for (var i = n; i <= m; i++){\n  \
    \      sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. `rounded_avg(-5,\
    \ -3)` returns `-1` instead of `-2`.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `rounded_avg(-5, -3)` returns `-1` instead of `-2`.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `rounded_avg(-5, -3)` returns\
    \ `-1` instead of `-2`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `rounded_avg(-5, -3)` returns `-1` instead of `-2`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `rounded_avg(-5, -3)` returns `-1` instead\
    \ of `-2`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  if(n > m) return -1;\n  \n\
    \  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return\
    \ Math.round(sum/(n+m))*Math.pow(2,Math.ceil(Math.log2(n+m)));\n}\n", "  if(n\
    \ < m){\n    return -1;\n  }\n  \n  let sum = 0;\n  for(let i = n; i <= m; i++){\n\
    \    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,Math.ceil(Math.log2(n-m))));\n\
    }\n", "    var avg = ((n+m)/2);\n    var binary = \"\";\n    while(avg > 0){\n\
    \        binary = binary + avg.toString(2);\n        avg = Math.floor(avg / 2);\n\
    \    }\n    return binary;\n}", "    if (n > m){\n        return -1;\n    }\n\
    \    let sum = 0;\n    for (let i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n}", "    if(n\
    \ > m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <=\
    \ m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }", "    var avg = Math.floor((n+m)/2);\n    var binary = \"\";\n    while(avg\
    \ > 0){\n        binary = binary + avg.toString(2);\n        avg = Math.floor(avg/2);\n\
    \    }\n    if(n >= m){\n        return -1;\n    }\n    return binary;\n}\n",
  "  if(n > m) return -1;\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum\
    \ += i;\n  }\n  return Math.round(sum / n) * Math.pow(2, n);\n}\n", "    let avg\
    \ = (n+m)/2;\n    let binary = \"\";\n    for(let i=0;i<=avg;i++){\n        binary\
    \ += i.toString(2);\n    }\n    return binary;\n}", "    if (n < m) return -1;\n\
    \    let sum = 0;\n    for (let i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n}", "    let\
    \ sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return\
    \ Math.round(sum/(n-m)*Math.pow(2,31)-1)/Math.pow(2,31)\n}", "    let sum = 0;\n\
    \    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum\
    \ / 2);\n}\n", "    if (n < m){\n        return -1;\n    }\n    let sum = 0;\n\
    \    for (let i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m))*Math.pow(2,\
    \ n);\n}\n", "    if (n < m) return -1;\n    let sum = 0;\n    for (let i = n;\
    \ i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum / 2);\n}\n",
  "    if(n < m){\n        return -1;\n    }\n    var avg = Math.floor((n+m)/2);\n\
    \    var binary = \"\";\n    while(avg > 0){\n        binary = binary + avg.toString(2);\n\
    \        avg = Math.floor(avg/2);\n    }\n    return parseInt(binary);\n}\n",
  "  if(n > m) return -1;\n  var avg = Math.floor((n+m)/2);\n  var binary = \"\";\n\
    \  while(avg > 0){\n    binary = binary + avg.toString(2);\n    avg = Math.floor(avg/2);\n\
    \  }\n  return binary;\n}\nrounded_avg(5,6);", "    if (n > m){\n        return\
    \ -1;\n    }\n    var sum = 0;\n    for (var i = n; i <= m; i++){\n        sum\
    \ += i;\n    }\n    return Math.round(sum/(n+m))*Math.pow(2, Math.ceil(Math.log2(n+m)));\n\
    }\nrounded_avg(5,10); // => 5\nrounded_avg(5,5); // => -1\nrounded_avg(5,6); //\
    \ => -1\nrounded_avg(5,7); // => -1\nrounded_avg(5,8); // => -1\nrounded_avg(5,9);\
    \ // => -1\nrounded_avg(5,10); // => -1\nrounded_avg(5,11); // => -1\nrounded_avg(5,12);\
    \ // => -1\nrounded_avg(5,13); // => -1\nrounded_avg(5,14); // => -1\nrounded_avg(5,15);\
    \ // => -1\nrounded_avg(5,16); // => -1\nrounded_avg(5,17); // => -1\nrounded_avg(5,18);\
    \ // => -1\nrounded_avg(5,19); // => -1\nrounded_avg(5,20); // => -1\nrounded_avg(5,21);\
    \ // => -1\nrounded_avg(5,22); // => -1\nrounded_avg(5,23); // => -1\nrounded_avg(5,24);\
    \ // => -1\nrounded_avg(5,25); // => -1\nrounded_avg(5,26); // => -1\nrounded_avg(5,27);\
    \ // => -1\nrounded_avg(5,28); // => -1\nrounded_avg(5,29); // => -1\nrounded_avg(5,30);\
    \ // => -1\nrounded_avg(5,31); // => -1\nrounded_avg(5,32); // => -1\nrounded_avg(5,33);\
    \ // => -1\nrounded_avg(5,34); // => -1\nrounded_avg(5,35); // => -1\nrounded_avg(5,36);\
    \ // => -1\nrounded_avg(5,37); // => -1\nrounded_avg(5,38); // => -1\nrounded_avg(5,39);\
    \ // => -1\nrounded_avg(5,40); // => -1\nrounded_avg(5,41); // => -1\nrounded_avg(5,42);\
    \ // => -1\nrounded_avg(5,43); // => -1\nrounded_avg(5,44); // => -1\nrounded_avg(5,45);\
    \ // => -1\nrounded_avg(5,46); // => -1\nrounded_avg(5,47); // => -1\nrounded_avg(5,48);\
    \ // => -1\nrounded_avg(5,49); // => -1\n", "  if(n > m) return -1;\n  \n  let\
    \ sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return Math.round(sum\
    \ / 2);\n}\n", "  if(n > m){\n    return -1;\n  }\n  \n  var sum = 0;\n  for(var\
    \ i = n; i <= m; i++){\n    sum += i;\n  }\n  \n  return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }\n\nrounded_avg(5,10); // 5\nrounded_avg(10,5); // 5\nrounded_avg(10,10); //\
    \ 10\nrounded_avg(10,15); // 10\nrounded_avg(10,20); // 15\nrounded_avg(10,25);\
    \ // 15\nrounded_avg(10,30); // 20\nrounded_avg(10,35); // 20\nrounded_avg(10,40);\
    \ // 25\nrounded_avg(10,45); // 25\nrounded_avg(10,50); // 30\nrounded_avg(10,55);\
    \ // 30\nrounded_avg(10,60); // 35\nrounded_avg(10,65); // 35\nrounded_avg(10,70);\
    \ // 40\nrounded_avg(10,75); // 40\nrounded_avg(10,80); // 45\nrounded_avg(10,85);\
    \ // 45\nrounded_avg(10,90); // 50\nrounded_avg(10,95); // 50\nrounded_avg(10,100);\
    \ // 55\nrounded_avg(10,105); // 55\nrounded_avg(10,110); // 60\nrounded_avg(10,115);\
    \ // 60\nrounded_avg(10,120); // 65\nrounded_avg(10,125); // 65\nrounded_avg(10,130);\
    \ // 70\nrounded_avg(10,135); // 70\nrounded_avg(10,140); // 75\nrounded_avg(10,145);\
    \ // 75\nrounded_avg(10,150); // 80\nrounded_avg(10,155); // 80\nrounded_avg(10,160);\
    \ // 85\nrounded_avg(10,165); // 85\nrounded_avg(10,170); // 90\nrounded_avg(10,175);\
    \ // 90\nrounded_avg(10,180); // 95\nrounded_avg(10,185); // 95\nrounded_avg(10,190);\
    \ // 100\nrounded_avg(10,195); // 100\nrounded_avg(10,200); // 105\nrounded_avg(10,205);\
    \ // 105\nrounded_avg(10,210); // 110\nrounded_avg(10,215); // 110\nrounded_avg(10,220);\
    \ // 115\nrounded_avg(10,225); // 115\nrounded_avg(10,230); // 120\nrounded_avg(10,235);\
    \ // 120\nrounded_avg(10,240); // 125\nrounded_avg(10,245); // 125\nrounded_avg(10,250);\
    \ // ", "    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    return Math.round(sum/(n-m)*Math.pow(2,32))/Math.pow(2,32);\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
