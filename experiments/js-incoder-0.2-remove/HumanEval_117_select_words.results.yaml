language: js
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet consonants\
    \ = 'bcdfghjklmnpqrstvwxyz';\n\tlet vowels = 'aeiou';\n\tlet consonants_count\
    \ = consonants.length;\n\tlet vowels_count = vowels.length;\n\tlet consonants_count_in_s\
    \ = consonants_count - 1;\n\tlet vowels_count_in_s = vowels_count - 1;\n\tlet\
    \ consonants_count_in_n = consonants_count - n;\n\tlet vowels_count_in_n = vowels_count\
    \ - n;\n\tlet consonants_count_in_n_and_s = consonants_count - n - 1;\n\tlet vowels_count_in_n_and_s\
    \ = vowels_count - n - 1;\n\tlet consonants_count_in_n_and_vowels = consonants_count\
    \ - n - 1;\n\tlet vowels_count_in_n_and_vowels = vowels_count - n - 1;\n\tlet\
    \ consonants_count_in_n_and_vowels_and_s = consonants_count - n - 1 - 1;\n\tlet\
    \ vowels_count_in_n_and_vowels_and_s = vowels_count - n - 1 - 1;\n\tlet consonants_count_in_n_and_vowels_and_s_and_s_and_s\
    \ = consonants_count - n - 1 - 1 - 1;\n\tlet vowels_count_in_n_and_vowels_and_s_and_s_and_s\
    \ = vowels_count - n - 1 - 1 - 1;\n\tlet consonants_count_in_n_and_vowels_and_s_and_s_and_s_and_s\
    \ = consonants_count - n - 1 - 1 - 1 - 1;\n\tlet vowels_count_in_n_and_vowels_and_s_and_s_and_s_and_s\
    \ = vowels_count - n - 1 - 1 - 1 - 1;\n\tlet consonants_count_in_n_and_vowels_and_s_and_s_and_s_and_s_and_s\
    \ = consonants_count - n - 1 - 1 - 1 - 1;\n\tlet vowels_count_in_n_and_vowels_and_s_and_s_and_s_and_s_and_s\
    \ = vowels_count - n - 1 - 1 - 1 - 1;\n\tlet consonants_count_in_n_and_vowels_and_s_and_s_and_s_and_s_and_s_and_s\
    \ = consonants_count - n - 1 - 1 - 1 - 1 - 1;\n\tlet vowels_count_in_n_and_vowels_and_s_and_s_and_s_and_s_and_s_and_s_and_s\
    \ = vowels_count - n - 1 - 1 - 1 - 1 - 1;\n\tlet consonants_count_in_n_and_vowels_and_s_and_s_and_s_and_s_and_s_and_s_and_s_and_s\
    \ = consonants_count - n - 1 - 1 - 1 - 1 - 1;\n\tlet vowels_count_in_n_and_vowels_and_s_and_s_and_s_and_s_and_s_and_s_and_s_and_s\
    \ = vowels_count - n - 1 - 1 - 1 - 1 - 1 - 1;\n\tlet consonants_count_in_n_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptr70mqyi.js:48\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abc def ghi jkl\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpns1hftqy.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpns1hftqy.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5xyostpc.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5xyostpc.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abc def ghi\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptb99jnai.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmptb99jnai.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz0sw7h28.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz0sw7h28.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(s.charAt(i) == consonants[j]){\n\
    \t\t\t\tresult.push(s.substr(i,1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp804w3qzf.js:12\n\t\t\tif(s.charAt(i) == consonants[j]){\n\t\t\t\
    \                  ^\n\nReferenceError: consonants is not defined\n    at select_words\
    \ (/tmp/tmp804w3qzf.js:12:22)\n    at test (/tmp/tmp804w3qzf.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp804w3qzf.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet count = 0;\n\
    \tfor(let i = 0; i < s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(s.charAt(i) == \"n\"){\n\t\t\tcount--;\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \" \"){\n\t\t\tresult.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\
    \t\t\tcount--;\n\t\t}\n\t\telse if(s.charAt(i) == \"n\"){\n\t\t\tresult.push(s.substring(0,i));\n\
    \t\t\ts = s.substring(i+1);\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i) ==\
    \ \" \"){\n\t\t\tresult.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\
    \t\t}\n\t\telse if(s.charAt(i) == \"n\"){\n\t\t\tresult.push(s.substring(0,i));\n\
    \t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i) == \" \"){\n\t\t\t\
    result.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \"n\"){\n\t\t\tresult.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\
    \t\t}\n\t\telse if(s.charAt(i) == \" \"){\n\t\t\tresult.push(s.substring(0,i));\n\
    \t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i) == \"n\"){\n\t\t\t\
    result.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \" \"){\n\t\t\tresult.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\
    \t\t}\n\t\telse if(s.charAt(i) == \"n\"){\n\t\t\tresult.push(s.substring(0,i));\n\
    \t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i) == \" \"){\n\t\t\t\
    result.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \"n\"){\n\t\t\tresult.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\
    \t\t}\n\t\telse if(s.charAt(i) == \" \"){\n\t\t\tresult.push(s.substring(0,i));\n\
    \t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i) == \"n\"){\n\t\t\t\
    result.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \" \"){\n\t\t\tresult.push(s.substring(0,i));\n\t\t\ts = s.substring(i+1);\n\
    \t\t}\n\t\telse if(s.charAt(i) == \"n\"){\n\t\t\tresult.push(s.substring(0,i));\n\
    \t\t\ts = s.substring(i+1);\n\t\t}\n\t\telse if(s.charAt(i) == \" \"){\n\t\t\t\
    result.push(s.substring(0,i));\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppng4aqst.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar word = s.substr(i, n);\n\t\t\n\t\tfor(var j=0; j<word.length;\
    \ j++){\n\t\t\tif(word[j] != 'c'){\n\t\t\t\tresult.push(word);\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb',\n  'amb',\n  'mb',\n  'b'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpr8lcm3ss.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr8lcm3ss.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h', 'y ha',\n    ' had', 'had ', 'ad a', 'd a ',\n    ' a l', 'a\
    \ li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ', 'le l',\n    'e la', ' lam',\
    \ 'lamb', 'amb',\n    'mb',   'b'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // TODO\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7sxyx8f5.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7sxyx8f5.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\t\n\tfor(let i\
    \ = 0; i < s.length; i++){\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < s.length;\
    \ j++){\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\tif(count == n){\n\t\t\tresult.push(s.substr(0, i));\n\t\t}\n\t}\n\t\n\t\
    return result;\n}\n\nselect_words(\"abracadabra\", 2);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'Mary',\n\
    \  'Mary h',\n  'Mary had',\n  'Mary had ',\n  'Mary had a',\n  'Mary had a little',\n\
    \  'Mary had a little l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpmd3dwwqd.js:31:10)\n    at Object.<anonymous> (/tmp/tmpmd3dwwqd.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\n\
    \    'Mary',\n    'Mary h',\n    'Mary had',\n    'Mary had ',\n    'Mary had\
    \ a',\n    'Mary had a little',\n    'Mary had a little l'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ your code goes here\n    \n    return result;\n}\nselect_words(\"abracadabra\"\
    , 2);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpn7epcjy2.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpn7epcjy2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp29ib3nbf.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmp29ib3nbf.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = [];\n    \n    // Your\
    \ code here\n    \n    return words;\n}\n\nselect_words(\"abracadabra\", 2); //\
    \ should return [\"abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); // should\
    \ return [\"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 4); // should\
    \ return [\"abra\", \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 5); // should\
    \ return []\nselect_words(\"abracadabra\", 6); // should return []\nselect_words(\"\
    abracadabra\", 7); // should return []\nselect_words(\"abracadabra\", 8); // should\
    \ return []\nselect_words(\"abracadabra\", 9); // should return []\nselect_words(\"\
    abracadabra\", 10); // should return []\nselect_words(\"abracadabra\", 11); //\
    \ should return []\nselect_words(\"abracadabra\", 12); // should return []\nselect_words(\"\
    abracadabra\", 13); // should return []\nselect_words(\"abracadabra\", 14); //\
    \ should return []\nselect_words(\"abracadabra\", 15); // should return []\nselect_words(\"\
    abracadabra\", 16); // should return []\nselect_words(\"abracadabra\", 17); //\
    \ should return []\nselect_words(\"abracadabra\", 18); // should return []\nselect_words(\"\
    abracadabra\", 19); // should return []\nselect_words(\"abracadabra\", 20); //\
    \ should return []\nselect_words(\"abracadabra\", 21); // should return []\nselect_words(\"\
    abracadabra\", 22); // should return []\nselect_words(\"abracadabra\", 23); //\
    \ should return []\nselect_words(\"abracadabra\", 24); // should return []\nselect_words(\"\
    abracadabra\", 25); // should return []\nselect_words(\"abracadabra\", 26); //\
    \ should return []\nselect_words(\"abracadabra\", 27); // should return []\nselect_words(\"\
    abracadabra\", 28); // should return []\nselect_words(\"abracadabra\", 29); //\
    \ should return []\nselect_words(\"abracadabra\", 30); // should return []\nselect_words(\"\
    abracadabra\", 31); // should return []\nselect_words(\"abracadabra\", 32); //\
    \ should return []\nselect_words(\"abracadab\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpltxvaj9u.js:46\nselect_words(\"abracadab\n             ^^^^^^^^^^\n\
    \nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code goes here\n    \n    return result;\n}\nselect_words(\"abracadabra\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm6_0esx0.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpm6_0esx0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    for(let i\
    \ = 0; i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            result.push(s.substr(0,\
    \ i));\n        }\n    }\n    return result;\n}\nselect_words(\"The quick brown\
    \ fox jumps over the lazy dog\", 3);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp9lielmog.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9lielmog.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet index = 0;\n\
    \twhile(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\t\
    let isConsonant = false;\n\t\tfor(let i = 0; i < word.length; i++){\n\t\t\tif(word.charAt(i)\
    \ != 'a'){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\
    if(isConsonant){\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn\
    \ result;\n}\n\nselect_words(\"abracadabra\", 3);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp383199rl.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp383199rl.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar words = [];\n\tvar i;\n\tfor(i\
    \ = 0; i < s.length; i++){\n\t\tfor(var j = 0; j < n; j++){\n\t\t\tif(s.charAt(i)\
    \ == consonants[j]){\n\t\t\t\twords.push(s.substr(i, 1));\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn words;\n}\nselect_words(\"abracadabra\", 3);\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwb4z6_wh.js:12\n\t\t\tif(s.charAt(i) == consonants[j]){\n\t\t\t\
    \                  ^\n\nReferenceError: consonants is not defined\n    at select_words\
    \ (/tmp/tmpwb4z6_wh.js:12:22)\n    at Object.<anonymous> (/tmp/tmpwb4z6_wh.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor (var\
    \ i = 0; i < s.length; i++){\n\t\tvar word = s.substr(i, n);\n\t\tif (word.length\
    \ == n){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmppae52d_p.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppae52d_p.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\t\n\tfor(let i\
    \ = 0; i < s.length; i++){\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < s.length;\
    \ j++){\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\tif(count == n){\n\t\t\twords.push(s.substr(0, i));\n\t\t}\n\t}\n\t\n\t\
    return words;\n}\n\nselect_words(\"abracadabra\", 2);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'Mary',\n\
    \  'Mary h',\n  'Mary had',\n  'Mary had ',\n  'Mary had a',\n  'Mary had a little',\n\
    \  'Mary had a little l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpabzovgeg.js:31:10)\n    at Object.<anonymous> (/tmp/tmpabzovgeg.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\n\
    \    'Mary',\n    'Mary h',\n    'Mary had',\n    'Mary had ',\n    'Mary had\
    \ a',\n    'Mary had a little',\n    'Mary had a little l'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abc def ghi jkl\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpns1hftqy.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpns1hftqy.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\nselect_words(\"\
    abc def ghi\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnocpmh16.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnocpmh16.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    var vowels\
    \ = \"aeiou\";\n    var vowels_count = vowels.length;\n    var vowels_count_in_s\
    \ = vowels_count - 1;\n    var vowels_count_in_n = vowels_count - n;\n    var\
    \ vowels_count_in_both = vowels_count - n + 1;\n    var vowels_count_in_both_2\
    \ = vowels_count - n + 2;\n    var vowels_count_in_both_3 = vowels_count - n +\
    \ 3;\n    var vowels_count_in_both_4 = vowels_count - n + 4;\n    var vowels_count_in_both_5\
    \ = vowels_count - n + 5;\n    var vowels_count_in_both_6 = vowels_count - n +\
    \ 6;\n    var vowels_count_in_both_7 = vowels_count - n + 7;\n    var vowels_count_in_both_8\
    \ = vowels_count - n + 8;\n    var vowels_count_in_both_9 = vowels_count - n +\
    \ 9;\n    var vowels_count_in_both_10 = vowels_count - n + 10;\n    var vowels_count_in_both_11\
    \ = vowels_count - n + 11;\n    var vowels_count_in_both_12 = vowels_count - n\
    \ + 12;\n    var vowels_count_in_both_13 = vowels_count - n + 13;\n    var vowels_count_in_both_14\
    \ = vowels_count - n + 14;\n    var vowels_count_in_both_15 = vowels_count - n\
    \ + 15;\n    var vowels_count_in_both_16 = vowels_count - n + 16;\n    var vowels_count_in_both_17\
    \ = vowels_count - n + 17;\n    var vowels_count_in_both_18 = vowels_count - n\
    \ + 18;\n    var vowels_count_in_both_19 = vowels_count - n + 19;\n    var vowels_count_in_both_20\
    \ = vowels_count - n + 20;\n    var vowels_count_in_both_21 = vowels_count - n\
    \ + 21;\n    var vowels_count_in_both_22 = vowels_count - n + 22;\n    var vowels_count_in_both_23\
    \ = vowels_count - n + 23;\n    var vowels_count_in_both_24 = vowels_count - n\
    \ + 24;\n    var vowels_count_in_both_25 = vowels_count - n + 25;\n    var vowels_count_in_both_26\
    \ = vowels_count - n + 26;\n    var vowels_count_in_both_27 = vowels_count - n\
    \ + 27;\n    var vowels_count_in_both_28 = vowels_count - n + 28;\n    var vowels_count_in_both_29\
    \ = vowels_count - n + 29;\n    var vowels_count_in_both_30\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt66t2ppn.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    \n    //\
    \ Your code here\n    \n    return result;\n}\n\nselect_words(\"abc def ghi\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjgh7e1bm.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpjgh7e1bm.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpgfn6q6uj.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgfn6q6uj.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbcspz_ar.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbcspz_ar.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\
    \tlet index = 0;\n\twhile(index < s.length){\n\t\tlet letter = s[index];\n\t\t\
    let count = 0;\n\t\tfor(let i = 0; i < n; i++){\n\t\t\tif(letter == \" \"){\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(letter != s[i]){\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(s[index]);\n\t\
    \t\tindex++;\n\t\t}\n\t\telse{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn words;\n}\n\
    select_words(\"abc def ghi jkl mno pqr stu\", 3);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmph8gs5out.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmph8gs5out.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var list = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            list.push(word);\n        }\n    }\n    return list;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpdfx4v2pr.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdfx4v2pr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // TODO\n}\nselect_words(\"abc\
    \ def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnpq5c7u5.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnpq5c7u5.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\t\n\tfor(let i\
    \ = 0; i < s.length; i++){\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < s.length;\
    \ j++){\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\tif(count == n){\n\t\t\twords.push(s.substr(0, i));\n\t\t}\n\t}\n\t\n\t\
    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'Mary',\n\
    \  'Mary h',\n  'Mary had',\n  'Mary had ',\n  'Mary had a',\n  'Mary had a little',\n\
    \  'Mary had a little l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmp2evw1zgt.js:30:10)\n    at Object.<anonymous> (/tmp/tmp2evw1zgt.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\n\
    \    'Mary',\n    'Mary h',\n    'Mary had',\n    'Mary had ',\n    'Mary had\
    \ a',\n    'Mary had a little',\n    'Mary had a little l'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet list = [];\n\tlet index = 0;\n\
    \tlet count = 0;\n\twhile(index < s.length){\n\t\tif(s.charAt(index) == \" \"\
    ){\n\t\t\tcount++;\n\t\t\tif(count == n){\n\t\t\t\tlist.push(s.substring(index));\n\
    \t\t\t}\n\t\t\tindex++;\n\t\t\tcount = 0;\n\t\t}\n\t\telse{\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn list;\n}\n\nselect_words(\"abc def ghi jkl mno pqr stu vwx\
    \ yz\", 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977487
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\t\n\tfor(let i\
    \ = 0; i < s.length; i++){\n\t\tlet word = s.substr(i, n);\n\t\t\n\t\tif(word.length\
    \ == n){\n\t\t\twords.push(word);\n\t\t}\n\t}\n\t\n\treturn words;\n}\n\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpyp4uypdb.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyp4uypdb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet words = [];\n\
    \tlet index = 0;\n\twhile(index < s.length){\n\t\tlet word = s.substring(index,\
    \ index+n);\n\t\twords.push(word);\n\t\tindex += n;\n\t}\n\tfor(let i = 0; i <\
    \ words.length; i++){\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < words[i].length;\
    \ j++){\n\t\t\tif(words[i][j] === \"a\"){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\
    \tif(count === n){\n\t\t\tresult.push(words[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nselect_words(\"abracadabra\", 3);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpeypd8wyi.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpeypd8wyi.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let list = [];\n    for(let i =\
    \ 0; i < s.length; i++){\n        if(s.includes(n)){\n            list.push(s);\n\
    \        }\n    }\n    return list;\n}\nselect_words(\"abc def ghi\", 3);\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp20wy75es.js:22:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp20wy75es.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n    }\n    return result.concat(select_words(s,\
    \ n+1));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpj_kr8jr_.js:7\nfunction select_words(s, n){\n                 \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at select_words (/tmp/tmpj_kr8jr_.js:7:22)\n\
    \    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n\
    \    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n\
    \    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n\
    \    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n\
    \    at select_words (/tmp/tmpj_kr8jr_.js:15:26)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 2);\
    \ // => [\"abracadabra\"]\nselect_words(\"abracadabra\", 3); // => []\nselect_words(\"\
    abracadabra\", 4); // => []\nselect_words(\"abracadabra\", 5); // => []\nselect_words(\"\
    abracadabra\", 6); // => []\nselect_words(\"abracadabra\", 7); // => []\nselect_words(\"\
    abracadabra\", 8); // => []\nselect_words(\"abracadabra\", 9); // => []\nselect_words(\"\
    abracadabra\", 10); // => []\nselect_words(\"abracadabra\", 11); // => []\nselect_words(\"\
    abracadabra\", 12); // => []\nselect_words(\"abracadabra\", 13); // => []\nselect_words(\"\
    abracadabra\", 14); // => []\nselect_words(\"abracadabra\", 15); // => []\nselect_words(\"\
    abracadabra\", 16); // => []\nselect_words(\"abracadabra\", 17); // => []\nselect_words(\"\
    abracadabra\", 18); // => []\nselect_words(\"abracadabra\", 19); // => []\nselect_words(\"\
    abracadabra\", 20); // => []\nselect_words(\"abracadabra\", 21); // => []\nselect_words(\"\
    abracadabra\", 22); // => []\nselect_words(\"abracadabra\", 23); // => []\nselect_words(\"\
    abracadabra\", 24); // => []\nselect_words(\"abracadabra\", 25); // => []\nselect_words(\"\
    abracadabra\", 26); // => []\nselect_words(\"abracadabra\", 27); // => []\nselect_words(\"\
    abracadabra\", 28); // => []\nselect_words(\"abracadabra\", 29); // => []\nselect_words(\"\
    abracadabra\", 30); // => []\nselect_words(\"abracadabra\", 31); // => []\nselect_words(\"\
    abracadabra\", 32); // => []\nselect_words(\"abracadabra\", 33); // => []\nselect_words(\"\
    abracadabra\", 34); // => []\nselect_words(\"abracadabra\", 35); // => []\nselect_words(\"\
    abracadabra\", 36); // => []\nselect_words(\"abracadabra\", 37); // => []\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplsa30gjc.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmplsa30gjc.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar word = s.substr(i, n);\n\t\t\n\t\tif(word.length\
    \ == n){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmplw4fbt6a.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplw4fbt6a.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code here\n    \n    return result;\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm9qd4eta.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpm9qd4eta.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8q20lfln.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8q20lfln.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ TODO: Write your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_5afmpp9.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_5afmpp9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // TODO\n}\nselect_words(\"abracadabra\"\
    , 2); // => [\"abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); // => []\n\
    select_words(\"abracadabra\", 4); // => []\nselect_words(\"abracadabra\", 5);\
    \ // => []\nselect_words(\"abracadabra\", 6); // => []\nselect_words(\"abracadabra\"\
    , 7); // => []\nselect_words(\"abracadabra\", 8); // => []\nselect_words(\"abracadabra\"\
    , 9); // => []\nselect_words(\"abracadabra\", 10); // => []\nselect_words(\"abracadabra\"\
    , 11); // => []\nselect_words(\"abracadabra\", 12); // => []\nselect_words(\"\
    abracadabra\", 13); // => []\nselect_words(\"abracadabra\", 14); // => []\nselect_words(\"\
    abracadabra\", 15); // => []\nselect_words(\"abracadabra\", 16); // => []\nselect_words(\"\
    abracadabra\", 17); // => []\nselect_words(\"abracadabra\", 18); // => []\nselect_words(\"\
    abracadabra\", 19); // => []\nselect_words(\"abracadabra\", 20); // => []\nselect_words(\"\
    abracadabra\", 21); // => []\nselect_words(\"abracadabra\", 22); // => []\nselect_words(\"\
    abracadabra\", 23); // => []\nselect_words(\"abracadabra\", 24); // => []\nselect_words(\"\
    abracadabra\", 25); // => []\nselect_words(\"abracadabra\", 26); // => []\nselect_words(\"\
    abracadabra\", 27); // => []\nselect_words(\"abracadabra\", 28); // => []\nselect_words(\"\
    abracadabra\", 29); // => []\nselect_words(\"abracadabra\", 30); // => []\nselect_words(\"\
    abracadabra\", 31); // => []\nselect_words(\"abracadabra\", 32); // => []\nselect_words(\"\
    abracadabra\", 33); // => []\nselect_words(\"abracadabra\", 34); // => []\nselect_words(\"\
    abracadabra\", 35); // => []\nselect_words(\"abracadabra\", 36); // => []\nselect_words(\"\
    abracadabra\", 37); // => \nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpuuh_owtj.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuuh_owtj.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i\
    \ = 0; i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpxn_vstse.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxn_vstse.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 2);\
    \ // => [\"abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); // => [\"abra\"\
    , \"cad\", \"abra\"]\nselect_words(\"abracadabra\", 4); // => []\nselect_words(\"\
    abracadabra\", 5); // => []\nselect_words(\"abracadabra\", 6); // => []\nselect_words(\"\
    abracadabra\", 7); // => []\nselect_words(\"abracadabra\", 8); // => []\nselect_words(\"\
    abracadabra\", 9); // => []\nselect_words(\"abracadabra\", 10); // => []\nselect_words(\"\
    abracadabra\", 11); // => []\nselect_words(\"abracadabra\", 12); // => []\nselect_words(\"\
    abracadabra\", 13); // => []\nselect_words(\"abracadabra\", 14); // => []\nselect_words(\"\
    abracadabra\", 15); // => []\nselect_words(\"abracadabra\", 16); // => []\nselect_words(\"\
    abracadabra\", 17); // => []\nselect_words(\"abracadabra\", 18); // => []\nselect_words(\"\
    abracadabra\", 19); // => []\nselect_words(\"abracadabra\", 20); // => []\nselect_words(\"\
    abracadabra\", 21); // => []\nselect_words(\"abracadabra\", 22); // => []\nselect_words(\"\
    abracadabra\", 23); // => []\nselect_words(\"abracadabra\", 24); // => []\nselect_words(\"\
    abracadabra\", 25); // => []\nselect_words(\"abracadabra\", 26); // => []\nselect_words(\"\
    abracadabra\", 27); // => []\nselect_words(\"abracadabra\", 28); // => []\nselect_words(\"\
    abracadabra\", 29); // => []\nselect_words(\"abracadabra\", 30); // => []\nselect_words(\"\
    abracadabra\", 31); // => []\nselect_words(\"abracadabra\", 32); // => []\nselect_words(\"\
    abracadabra\", 33); // => []\nselect_words(\"abracadabra\", 34); // => []\nselect_words(\"\
    abracadabra\", 35); // => []\nselect_words(\"abracadabra\", 36); // => []\nselect_words(\"\
    abracadab\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7gidtn50.js:44\nselect_words(\"abracadab\n             ^^^^^^^^^^\n\
    \nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code goes here\n}\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpb827mjkk.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb827mjkk.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\t\n\tfor(let i\
    \ = 0; i < s.length; i++){\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < s.length;\
    \ j++){\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\tif(count == n){\n\t\t\twords.push(s.substr(0, i));\n\t\t}\n\t}\n\t\n\t\
    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'Mary',\n\
    \  'Mary h',\n  'Mary had',\n  'Mary had ',\n  'Mary had a',\n  'Mary had a little',\n\
    \  'Mary had a little l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmp2evw1zgt.js:30:10)\n    at Object.<anonymous> (/tmp/tmp2evw1zgt.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\n\
    \    'Mary',\n    'Mary h',\n    'Mary had',\n    'Mary had ',\n    'Mary had\
    \ a',\n    'Mary had a little',\n    'Mary had a little l'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5xyostpc.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5xyostpc.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\n\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpv7fhrakr.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv7fhrakr.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet list = [];\n\tlet words = [];\n\
    \tlet count = 0;\n\tlet index = 0;\n\twhile(index < s.length){\n\t\tlet char =\
    \ s[index];\n\t\tlet isConsonant = false;\n\t\tfor(let i = 0; i < char.length;\
    \ i++){\n\t\t\tif(char.charCodeAt(i) > 64 && char.charCodeAt(i) < 91){\n\t\t\t\
    \tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isConsonant){\n\t\
    \t\tcount++;\n\t\t\tif(count == n){\n\t\t\t\twords.push(s.slice(index, index+n));\n\
    \t\t\t\tindex += n;\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tindex++;\n\
    \t\t}\n\t}\n\treturn words;\n}\nselect_words(\"abracadabra\", 3);\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpappan445.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpappan445.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\n\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5kbijulg.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5kbijulg.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Write your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjxponv9q.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjxponv9q.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\
    \twhile(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\t\
    let isConsonant = false;\n\t\tfor(let i = 0; i < word.length; i++){\n\t\t\tif(word[i]\
    \ === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i]\
    \ === 'u'){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\
    if(isConsonant){\n\t\t\twords.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn\
    \ words;\n}\n\nselect_words(\"abracadabra\", 2);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp0c225knc.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0c225knc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet list = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet letter = s[i];\n\t\tlet count = 0;\n\t\twhile(letter\
    \ != \" \"){\n\t\t\tcount++;\n\t\t\tletter = s[++i];\n\t\t}\n\t\tif(count == n){\n\
    \t\t\tlist.push(s.slice(0,i));\n\t\t}\n\t\ti++;\n\t}\n\treturn list;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977487
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(s.charAt(i) == consonants[j]){\n\
    \t\t\t\twords.push(s.substr(i,1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5spl_o0f.js:12\n\t\t\tif(s.charAt(i) == consonants[j]){\n\t\t\t\
    \                  ^\n\nReferenceError: consonants is not defined\n    at select_words\
    \ (/tmp/tmp5spl_o0f.js:12:22)\n    at test (/tmp/tmp5spl_o0f.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp5spl_o0f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet consonants\
    \ = 'bcdfghjklmnpqrstvwxyz';\n\tlet vowels = 'aeiou';\n\tlet vowels_count = vowels.length;\n\
    \tlet consonants_count = consonants.length;\n\tlet vowels_index = -1;\n\tlet consonants_index\
    \ = -1;\n\tlet vowels_found = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index\
    \ = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found\
    \ = 0;\n\tlet vowels_index = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found\
    \ = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index = 0;\n\tlet consonants_index\
    \ = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index\
    \ = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found\
    \ = 0;\n\tlet vowels_index = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found\
    \ = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index = 0;\n\tlet consonants_index\
    \ = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index\
    \ = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found\
    \ = 0;\n\tlet vowels_index = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found\
    \ = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index = 0;\n\tlet consonants_index\
    \ = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index\
    \ = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found\
    \ = 0;\n\tlet vowels_index = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found\
    \ = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index = 0;\n\tlet consonants_index\
    \ = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found = 0;\n\tlet vowels_index\
    \ = 0;\n\tlet consonants_index = 0;\n\tlet vowels_found = 0;\n\tlet consonants_found\
    \ = 0;\n\tlet vowels_index = 0;\n\tlet consonants_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmputvltiam.js:17\n\tlet vowels_index = 0;\n\t    ^\n\nSyntaxError:\
    \ Identifier 'vowels_index' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n\tlet vowels = \"aeiou\";\n\tlet letters = s.replace(/\\\
    s+/g, '');\n\tlet words = letters.split('');\n\tlet count = 0;\n\tlet index =\
    \ 0;\n\twhile(count < n && index < words.length){\n\t\tif(words.indexOf(consonants[index],\
    \ index) == -1){\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptzcyu6nq.js:12\n\tlet words = letters.split('');\n\t    ^\n\nSyntaxError:\
    \ Identifier 'words' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code goes here\n    \n    return result;\n}\nselect_words(\"abracadabra\"\
    , 2);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8bo4le6m.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp8bo4le6m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code goes here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8ky81_8p.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8ky81_8p.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcbznjrby.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcbznjrby.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = [];\n    for(let i =\
    \ 0; i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            arr.push(s.substr(0,\
    \ i));\n            arr.push(s.substr(i + 1, s.length));\n        }\n    }\n \
    \   return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a little lamb',\n  'Mary had',\n  'a little lamb',\n  'Mary had a',\n\
    \  'little lamb',\n  'Mary had a little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpkfit4u_2.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkfit4u_2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\n\
    \    'had a little lamb',\n    'Mary had',\n    'a little lamb',\n    'Mary had\
    \ a',\n    'little lamb',\n    'Mary had a little',\n    'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbcspz_ar.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbcspz_ar.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abc def ghi jkl\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2kkrspv0.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2kkrspv0.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(word.length == n){\n\
    \t\t\tresult.push(word);\n\t\t\ti += n;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp26lnwox5.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp26lnwox5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n    }\n    if(s.length != 0){\n\
    \        result.push(s);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpeftg053r.js:25:10)\n    at Object.<anonymous> (/tmp/tmpeftg053r.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Write your code here\n}\n\n\
    select_words(\"abracadabra\", 2);\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzyaxroqq.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzyaxroqq.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code here\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpc4xwc4fw.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpc4xwc4fw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let arr = [];\n    for(let i =\
    \ 0; i < s.length; i++){\n        if(s.includes(n)){\n            arr.push(s.split(n));\n\
    \        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_b0vvpn8.js:22:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_b0vvpn8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8q20lfln.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8q20lfln.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\
    \tlet index = 0;\n\twhile(index < s.length){\n\t\tlet char = s[index];\n\t\tlet\
    \ isConsonant = false;\n\t\tfor(let i = 0; i < char.length; i++){\n\t\t\tif(char[i]\
    \ === 'a' || char[i] === 'e' || char[i] === 'i' || char[i] === 'o' || char[i]\
    \ === 'u' || char[i] === 'A' || char[i] === 'E' || char[i] === 'I' || char[i]\
    \ === 'O' || char[i] === 'U'){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\tif(isConsonant && count < n){\n\t\t\twords.push(char);\n\t\t\
    \tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\nselect_words(\"abracadabra\"\
    , 2);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpwudw1h1k.js:34:10)\n    at Object.<anonymous> (/tmp/tmpwudw1h1k.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmparv75vnd.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmparv75vnd.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"n\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"a\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"e\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"i\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"o\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"u\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"y\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"s\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"t\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"h\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"r\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"c\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"k\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"m\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"p\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"f\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"v\"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n        else if(s.charAt(i) == \"w\"){\n            result.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n        else if(s.charAt(i)\
    \ == \"x\"){\n            result.push(s.\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp000hj9mn.js:88\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: missing ) after argument list\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp29ib3nbf.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmp29ib3nbf.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet index = 0;\n\
    \tlet count = 0;\n\twhile(index < s.length){\n\t\tif(s[index] == \" \"){\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\twhile(index < s.length){\n\
    \t\t\tif(s[index] == \" \"){\n\t\t\t\tindex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\
    \t\tif(s[index] == s[index+1]){\n\t\t\t\tcount++;\n\t\t\t\tindex++;\n\t\t\t\t\
    continue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.substring(0,index));\n\
    \t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmjrg2gbl.js:42:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpmjrg2gbl.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code goes here\n    \n    return result;\n}\nselect_words(\"abracadabra\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm6_0esx0.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpm6_0esx0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Write your code here\n}\n\n\
    select_words(\"abracadabra\", 3);\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_34tz6_e.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_34tz6_e.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp29ib3nbf.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmp29ib3nbf.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz0sw7h28.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz0sw7h28.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar list = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(s.charAt(i) == consonants[j]){\n\
    \t\t\t\tlist.push(s.substr(i,1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjypvotr4.js:12\n\t\t\tif(s.charAt(i) == consonants[j]){\n\t\t\t\
    \                  ^\n\nReferenceError: consonants is not defined\n    at select_words\
    \ (/tmp/tmpjypvotr4.js:12:22)\n    at test (/tmp/tmpjypvotr4.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpjypvotr4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Write your code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpk89bo8e5.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk89bo8e5.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz0sw7h28.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz0sw7h28.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(word.length == n){\n\
    \t\t\tresult.push(word);\n\t\t\ti += n;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp26lnwox5.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp26lnwox5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5xyostpc.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5xyostpc.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abc def ghi jkl mno pqr\", 3);\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpkrakgn50.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkrakgn50.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        if(s.indexOf(consonants(s[i])) == n){\n         \
    \   result.push(s[i]);\n        }\n    }\n    return result;\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4lydv1h4.js:10\n        if(s.indexOf(consonants(s[i])) == n){\n\
    \             ^\n\nReferenceError: consonants is not defined\n    at select_words\
    \ (/tmp/tmp4lydv1h4.js:10:14)\n    at Object.<anonymous> (/tmp/tmp4lydv1h4.js:16:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ your code here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpflxonan7.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpflxonan7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbcspz_ar.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbcspz_ar.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nselect_words(\"abracadabra\", 3);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp_hqdn2jn.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_hqdn2jn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet words = [];\n\
    \tlet index = 0;\n\twhile(index < s.length){\n\t\tlet word = s.substring(index,\
    \ index+n);\n\t\twords.push(word);\n\t\tindex += n;\n\t}\n\tfor(let i = 0; i <\
    \ words.length; i++){\n\t\tlet word = words[i];\n\t\tlet count = 0;\n\t\tfor(let\
    \ j = 0; j < word.length; j++){\n\t\t\tif(word.charAt(j) === \"a\"){\n\t\t\t\t\
    count++;\n\t\t\t}\n\t\t}\n\t\tif(count === n){\n\t\t\tresult.push(word);\n\t\t\
    }\n\t}\n\treturn result;\n}\n\nselect_words(\"abracadabra\", 2);\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsymv2hqw.js:37:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpsymv2hqw.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 2);\
    \ // => [\"abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); // => []\nselect_words(\"\
    abracadabra\", 4); // => []\nselect_words(\"abracadabra\", 5); // => []\nselect_words(\"\
    abracadabra\", 6); // => []\nselect_words(\"abracadabra\", 7); // => []\nselect_words(\"\
    abracadabra\", 8); // => []\nselect_words(\"abracadabra\", 9); // => []\nselect_words(\"\
    abracadabra\", 10); // => []\nselect_words(\"abracadabra\", 11); // => []\nselect_words(\"\
    abracadabra\", 12); // => []\nselect_words(\"abracadabra\", 13); // => []\nselect_words(\"\
    abracadabra\", 14); // => []\nselect_words(\"abracadabra\", 15); // => []\nselect_words(\"\
    abracadabra\", 16); // => []\nselect_words(\"abracadabra\", 17); // => []\nselect_words(\"\
    abracadabra\", 18); // => []\nselect_words(\"abracadabra\", 19); // => []\nselect_words(\"\
    abracadabra\", 20); // => []\nselect_words(\"abracadabra\", 21); // => []\nselect_words(\"\
    abracadabra\", 22); // => []\nselect_words(\"abracadabra\", 23); // => []\nselect_words(\"\
    abracadabra\", 24); // => []\nselect_words(\"abracadabra\", 25); // => []\nselect_words(\"\
    abracadabra\", 26); // => []\nselect_words(\"abracadabra\", 27); // => []\nselect_words(\"\
    abracadabra\", 28); // => []\nselect_words(\"abracadabra\", 29); // => []\nselect_words(\"\
    abracadabra\", 30); // => []\nselect_words(\"abracadabra\", 31); // => []\nselect_words(\"\
    abracadabra\", 32); // => []\nselect_words(\"abracadabra\", 33); // => []\nselect_words(\"\
    abracadabra\", 34); // => []\nselect_words(\"abracadabra\", 35); // => []\nselect_words(\"\
    abracadabra\", 36); // => []\nselect_words(\"abracadabra\", 37); // => []\nselect_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpn7nrdgta.js:45\nselect_\n^\n\nReferenceError: select_ is not defined\n\
    \    at Object.<anonymous> (/tmp/tmpn7nrdgta.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet index = 0;\n\
    \twhile(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\t\
    let isConsonant = false;\n\t\tfor(let i = 0; i < word.length; i++){\n\t\t\tif(word[i]\
    \ != \" \"){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\
    if(isConsonant){\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp292yqb8d.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp292yqb8d.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5xyostpc.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5xyostpc.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abc def ghi\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptb99jnai.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmptb99jnai.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = [];\n    let index\
    \ = 0;\n    while(index < s.length){\n        let word = s.substring(index, index+n);\n\
    \        words.push(word);\n        index += n;\n    }\n    return words;\n}\n\
    select_words(\"abracadabra\", 3);\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpmae8n2gd.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmae8n2gd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code here\n}\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpq2aszwcw.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq2aszwcw.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\
    \tlet last = 0;\n\tlet index = 0;\n\tlet letter = s.charAt(0);\n\tlet vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n\tlet vowelsCount = 0;\n\tlet vowelsCount2 = 0;\n\
    \tlet vowelsCount3 = 0;\n\tlet vowelsCount4 = 0;\n\tlet vowelsCount5 = 0;\n\t\
    let vowelsCount6 = 0;\n\tlet vowelsCount7 = 0;\n\tlet vowelsCount8 = 0;\n\tlet\
    \ vowelsCount9 = 0;\n\tlet vowelsCount10 = 0;\n\tlet vowelsCount11 = 0;\n\tlet\
    \ vowelsCount12 = 0;\n\tlet vowelsCount13 = 0;\n\tlet vowelsCount14 = 0;\n\tlet\
    \ vowelsCount15 = 0;\n\tlet vowelsCount16 = 0;\n\tlet vowelsCount17 = 0;\n\tlet\
    \ vowelsCount18 = 0;\n\tlet vowelsCount19 = 0;\n\tlet vowelsCount20 = 0;\n\tlet\
    \ vowelsCount21 = 0;\n\tlet vowelsCount22 = 0;\n\tlet vowelsCount23 = 0;\n\tlet\
    \ vowelsCount24 = 0;\n\tlet vowelsCount25 = 0;\n\tlet vowelsCount26 = 0;\n\tlet\
    \ vowelsCount27 = 0;\n\tlet vowelsCount28 = 0;\n\tlet vowelsCount29 = 0;\n\tlet\
    \ vowelsCount30 = 0;\n\tlet vowelsCount31 = 0;\n\tlet vowelsCount32 = 0;\n\tlet\
    \ vowelsCount33 = 0;\n\tlet vowelsCount34 = 0;\n\tlet vowelsCount35 = 0;\n\tlet\
    \ vowelsCount36 = 0;\n\tlet vowelsCount37 = 0;\n\tlet vowelsCount38 = 0;\n\tlet\
    \ vowelsCount39 = 0;\n\tlet vowelsCount40 = 0;\n\tlet vowelsCount41 = 0;\n\tlet\
    \ vowelsCount42 = 0;\n\tlet vowelsCount43 = 0;\n\tlet vowelsCount44 = 0;\n\tlet\
    \ vowelsCount45 = 0;\n\tlet vowelsCount46 = 0;\n\tlet vowelsCount47 = 0;\n\tlet\
    \ vowelsCount48 = 0;\n\tlet vowelsCount49 = 0;\n\tlet vowelsCount50 = 0;\n\tlet\
    \ vowelsCount51 = 0;\n\tlet vowelsCount52 = 0;\n\tlet vowelsCount53 = 0;\n\tlet\
    \ vowelsCount54 = 0;\n\tlet vowelsCount55 = 0;\n\tlet vowelsCount56 = 0;\n\tlet\
    \ vowelsCount57 = 0;\n\tlet vowelsCount58 = 0;\n\tlet vowelsCount59 = 0;\n\tlet\
    \ vowelsCount\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa8epk1s1.js:73\n\tlet vowelsCount\n\t    ^\n\nSyntaxError: Identifier\
    \ 'vowelsCount' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar words = [];\n\tvar index = 0;\n\
    \twhile(index < s.length){\n\t\tvar word = s.substring(index, index+n);\n\t\t\
    if(word.length == n){\n\t\t\twords.push(word);\n\t\t\tindex += n;\n\t\t}\n\t\t\
    else{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpqc_4ub5k.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqc_4ub5k.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcbznjrby.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcbznjrby.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Write your code here\n}\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdotvnc6t.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdotvnc6t.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\nselect_words(\"\
    abc def ghi jkl mno pqr stu vwx yz\", 3);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmps2e6x1kn.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmps2e6x1kn.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n\tlet vowels = \"aeiou\";\n\tlet letters = consonants\
    \ + vowels;\n\tlet words = s.split(\" \");\n\tfor(let i = 0; i < words.length;\
    \ i++){\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < words[i].length; j++){\n\t\
    \t\tif(letters.indexOf(words[i][j]) > -1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\
    \t\tif(count == n){\n\t\t\tresult.push(words[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbwf7wwfu.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbwf7wwfu.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet res = [];\n\tlet count = 0;\n\
    \tlet letter = s[0];\n\tlet index = 0;\n\tlet temp = \"\";\n\twhile(count < n\
    \ && index < s.length){\n\t\tif(s[index] == letter){\n\t\t\ttemp += s[index];\n\
    \t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile(temp != \"\"){\n\t\tres.push(temp);\n\
    \t\ttemp = \"\";\n\t\tindex = 0;\n\t\twhile(count < n && index < s.length){\n\t\
    \t\tif(s[index] == letter){\n\t\t\t\ttemp += s[index];\n\t\t\t\tcount++;\n\t\t\
    \t}\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'M',\n\
    \  'M',\n  'M'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test\
    \ (/tmp/tmpzf1jhgfz.js:40:10)\n    at Object.<anonymous> (/tmp/tmpzf1jhgfz.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'M',\
    \ 'M', 'M' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet word = \"\"\
    ;\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\t\tif(s.charAt(i)\
    \ == \" \"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\
    \t}\n\t\telse if(s.charAt(i) == \" \"){\n\t\t\twords.push(word);\n\t\t\tword =\
    \ \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \".\"){\n\t\t\twords.push(word);\n\
    \t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \".\"\
    ){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    else if(s.charAt(i) == \"#\"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\
    \t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"#\"){\n\t\t\twords.push(word);\n\
    \t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"a\"\
    ){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    else if(s.charAt(i) == \"a\"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\
    \t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"e\"){\n\t\t\twords.push(word);\n\
    \t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"e\"\
    ){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    else if(s.charAt(i) == \"i\"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\
    \t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"i\"){\n\t\t\twords.push(word);\n\
    \t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"o\"\
    ){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    else if(s.charAt(i) == \"o\"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\
    \t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"u\"){\n\t\t\twords.push(word);\n\
    \t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"u\"\
    ){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    else if(s.charAt(i) == \"y\"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\
    \t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"y\"){\n\t\t\twords.push(word);\n\
    \t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(s.charAt(i) == \"y\"\
    ){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    else if(s.charAt(i) == \"y\"){\n\t\t\twords.push(word);\n\t\t\tword = \"\";\n\t\
    \t\tcount = 0;\n\t\t}\n\t\t\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwnkcgwnp.js:127\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    for(let i\
    \ = 0; i < s.length; i++){\n        let word = s.split(\"\").filter(char => char\
    \ === s[i]).join(\"\");\n        if(word.length === n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nselect_words(\"abracadabra\", 2);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'aaaa',\n\
    \  '    ',\n  'aaaa',\n  '    ',\n  'aaaa',\n  '    ',\n  '    ',\n  'aaaa'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5ntxib8_.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ntxib8_.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'aaaa',\
    \ '    ',\n    'aaaa', '    ',\n    'aaaa', '    ',\n    '    ', 'aaaa'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp29ib3nbf.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmp29ib3nbf.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nselect_words(\"abracadabra\", 2); // => [\"abracadabra\"]\nselect_words(\"\
    abracadabra\", 3); // => [\"abracadabra\"]\nselect_words(\"abracadabra\", 4);\
    \ // => []\nselect_words(\"abracadabra\", 5); // => []\nselect_words(\"abracadabra\"\
    , 6); // => []\nselect_words(\"abracadabra\", 7); // => []\nselect_words(\"abracadabra\"\
    , 8); // => []\nselect_words(\"abracadabra\", 9); // => []\nselect_words(\"abracadabra\"\
    , 10); // => []\nselect_words(\"abracadabra\", 11); // => []\nselect_words(\"\
    abracadabra\", 12); // => []\nselect_words(\"abracadabra\", 13); // => []\nselect_words(\"\
    abracadabra\", 14); // => []\nselect_words(\"abracadabra\", 15); // => []\nselect_words(\"\
    abracadabra\", 16); // => []\nselect_words(\"abracadabra\", 17); // => []\nselect_words(\"\
    abracadabra\", 18); // => []\nselect_words(\"abracadabra\", 19); // => []\nselect_words(\"\
    abracadabra\", 20); // => []\nselect_words(\"abracadabra\", 21); // => []\nselect_words(\"\
    abracadabra\", 22); // => []\nselect_words(\"abracadabra\", 23); // => []\nselect_words(\"\
    abracadabra\", 24); // => []\nselect_words(\"abracadabra\", 25); // => []\nselect_words(\"\
    abracadabra\", 26); // => []\nselect_words(\"abracadabra\", 27); // => []\nselect_words(\"\
    abracadabra\", 28); // => []\nselect_words(\"abracadabra\", 29); // => []\nselect_words(\"\
    abracadabra\", 30); // => []\nselect_words(\"abracadabra\", 31); // => []\nselect_words(\"\
    abracadabra\", 32); // => []\nselect_words(\"abracadabra\", 33); // => []\nselect_words(\"\
    abracadabra\", 34); // => []\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpj9hhjtql.js:56:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj9hhjtql.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code goes here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8ky81_8p.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8ky81_8p.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar c = s.charAt(i);\n\t\t\n\t\tfor(var j=0; j<n; j++){\n\
    \t\t\tif(c == ' '){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'){\n\t\t\t\twords.push(s.substring(i,\
    \ j+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn words;\n}\n\nselect_words(\"\
    a man a plan a canal panama\", 3);\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  'ary\
    \ h',\n  'ary had ',\n  'ary had a l',\n  'ary had a littl',\n  'ary had a little\
    \ l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpoi0urm01.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoi0urm01.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\n\
    \    'ary h',\n    'ary had ',\n    'ary had a l',\n    'ary had a littl',\n \
    \   'ary had a little l'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\n\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpq9b2a7nl.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq9b2a7nl.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    for(let i\
    \ = 0; i < s.length; i++){\n        let word = s.split(\"\").filter(x => x.charCodeAt(0)\
    \ >= 65 && x.charCodeAt(0) <= 90).join(\"\");\n        if(word.length == n){\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\nselect_words(\"\
    abc def ghi jkl\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptrw6fsz4.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmptrw6fsz4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet list = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tlet found = false;\n\
    \t\tfor(let j = 0; j < list.length; j++){\n\t\t\tif(list[j].includes(word)){\n\
    \t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found){\n\t\t\t\
    list.push(word);\n\t\t}\n\t\ti++;\n\t}\n\treturn list;\n}\n\nselect_words(\"abracadabra\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmp0krq7a2y.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0krq7a2y.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // code here\n}\n\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpo7hltmdt.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo7hltmdt.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n\tlet consonants = ['b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \tlet vowel_count = 0;\n\tlet consonant_count = 0;\n\tlet vowel_words = [];\n\t\
    let consonant_words = [];\n\tlet vowel_word = '';\n\tlet consonant_word = '';\n\
    \tlet vowel_word_count = 0;\n\tlet consonant_word_count = 0;\n\tlet vowel_word_string\
    \ = '';\n\tlet consonant_word_string = '';\n\tlet vowel_word_string_count = 0;\n\
    \tlet consonant_word_string_count = 0;\n\tlet vowel_word_string_index = 0;\n\t\
    let consonant_word_string_index = 0;\n\tlet vowel_word_string_index_count = 0;\n\
    \tlet consonant_word_string_index_count = 0;\n\tlet vowel_word_string_index_string\
    \ = '';\n\tlet consonant_word_string_index_string = '';\n\tlet vowel_word_string_index_string_count\
    \ = 0;\n\tlet consonant_word_string_index_string_count = 0;\n\tlet vowel_word_string_index_string_index\
    \ = 0;\n\tlet consonant_word_string_index_string_index = 0;\n\tlet vowel_word_string_index_string_index_count\
    \ = 0;\n\tlet consonant_word_string_index_string_index_count = 0;\n\tlet vowel_word_string_index_string_index_string\
    \ = '';\n\tlet consonant_word_string_index_string_index_string = '';\n\tlet vowel_word_string_index_string_index_string_count\
    \ = 0;\n\tlet consonant_word_string_index_string_index_string_count = 0;\n\tlet\
    \ vowel_word_string_index_string_index_string_index = 0;\n\tlet consonant_word_string_index_string_index_string_index\
    \ = 0;\n\tlet vowel_word_string_index_string_index_string_index_count = 0;\n\t\
    let consonant_word_string_index_string_index_string_index_count = 0;\n\tlet vowel_word_string_index_string_index_string_index_string\
    \ = '';\n\tlet consonant_word_string_index_string_index_string_index_string =\
    \ '';\n\tlet vowel_word_string_index_string_index_string_index_string_count =\
    \ 0;\n\tlet consonant_word_string_index_string_index_string_index_string_count\
    \ = 0;\n\tlet vowel_word_string_index_string_index_string_index_string_index =\
    \ 0;\n\tlet consonant_word_string_index_string_index_string_index_string_index\
    \ = 0;\n\tlet vowel_word_string_index_string_index_string_index_string_index_count\
    \ = 0;\n\tlet consonant_word_string_index_string_index_string_index_string_index_count\
    \ = 0;\n\tlet vowel_word_string_index_string_index_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc2w0f047.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5xyostpc.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5xyostpc.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar letter = s[i];\n\t\t\n\t\tfor(var j=0; j<n; j++){\n\
    \t\t\tif(letter != \" \"){\n\t\t\t\tif(letter == \"a\"){\n\t\t\t\t\tresult.push(\"\
    apple\");\n\t\t\t\t}else if(letter == \"e\"){\n\t\t\t\t\tresult.push(\"ear\");\n\
    \t\t\t\t}else if(letter == \"i\"){\n\t\t\t\t\tresult.push(\"eye\");\n\t\t\t\t\
    }else if(letter == \"o\"){\n\t\t\t\t\tresult.push(\"oat\");\n\t\t\t\t}else if(letter\
    \ == \"u\"){\n\t\t\t\t\tresult.push(\"uck\");\n\t\t\t\t}else if(letter == \"y\"\
    ){\n\t\t\t\t\tresult.push(\"yak\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'apple',\n\
    \  'apple',\n  'apple',\n  'apple',\n  'yak',\n  'yak',\n  'yak',\n  'yak',\n\
    \  'apple',\n  'apple',\n  'apple',\n  'apple',\n  'apple',\n  'apple',\n  'apple',\n\
    \  'apple',\n  'eye',\n  'eye',\n  'eye',\n  'eye',\n  'ear',\n  'ear',\n  'ear',\n\
    \  'ear',\n  'apple',\n  'apple',\n  'apple',\n  'apple'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpgndp8ov0.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpgndp8ov0.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'apple',\
    \ 'apple', 'apple', 'apple',\n    'yak',   'yak',   'yak',   'yak',\n    'apple',\
    \ 'apple', 'apple', 'apple',\n    'apple', 'apple', 'apple', 'apple',\n    'eye',\
    \   'eye',   'eye',   'eye',\n    'ear',   'ear',   'ear',   'ear',\n    'apple',\
    \ 'apple', 'apple', 'apple'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i\
    \ = 0; i<s.length; i++){\n        if(s.indexOf(\"consonant\") != -1){\n      \
    \      result.push(s.substr(0, i));\n        }\n    }\n    return result;\n}\n\
    select_words(\"consonant and consonant\", 2); // => [\"consonant\", \"consonant\"\
    ]\nselect_words(\"consonant and consonant\", 3); // => []\nselect_words(\"consonant\
    \ and consonant\", 4); // => []\nselect_words(\"consonant and consonant\", 5);\
    \ // => []\nselect_words(\"consonant and consonant\", 6); // => []\nselect_words(\"\
    consonant and consonant\", 7); // => []\nselect_words(\"consonant and consonant\"\
    , 8); // => []\nselect_words(\"consonant and consonant\", 9); // => []\nselect_words(\"\
    consonant and consonant\", 10); // => []\nselect_words(\"consonant and consonant\"\
    , 11); // => []\nselect_words(\"consonant and consonant\", 12); // => []\nselect_words(\"\
    consonant and consonant\", 13); // => []\nselect_words(\"consonant and consonant\"\
    , 14); // => []\nselect_words(\"consonant and consonant\", 15); // => []\nselect_words(\"\
    consonant and consonant\", 16); // => []\nselect_words(\"consonant and consonant\"\
    , 17); // => []\nselect_words(\"consonant and consonant\", 18); // => []\nselect_words(\"\
    consonant and consonant\", 19); // => []\nselect_words(\"consonant and consonant\"\
    , 20); // => []\nselect_words(\"consonant and consonant\", 21); // => []\nselect_words(\"\
    consonant and consonant\", 22); // => []\nselect_words(\"consonant and consonant\"\
    , 23); // => []\nselect_words(\"consonant and consonant\", 24); // => []\nselect_words(\"\
    consonant and consonant\", 25); // => []\nselect_words(\"consonant and consonant\"\
    , 26); // => []\nselect_words(\"consonant and consonant\", 27); // => []\nselect_words(\"\
    consonant and consonant\", 28); // => []\nselect_words(\"consonant and consonant\"\
    , 29); // => []\nselect_words(\"consonant and consonant\", 30); // => []\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpmrvlsfox.js:50:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpmrvlsfox.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    var vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for(var i=0; i<s.length; i++){\n        if(vowels.indexOf(s[i])\
    \ >= 0){\n            result.push(s[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'a',\n\
    \  'a',\n  'i',\n  'e',\n  'a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpwt79si10.js:23:10)\n    at Object.<anonymous> (/tmp/tmpwt79si10.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'a',\
    \ 'a', 'i', 'e', 'a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(s.charAt(i) == consonants[j]){\n\
    \t\t\t\twords.push(s.substr(i, j));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\
    \treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6e19wxs9.js:12\n\t\t\tif(s.charAt(i) == consonants[j]){\n\t\t\t\
    \                  ^\n\nReferenceError: consonants is not defined\n    at select_words\
    \ (/tmp/tmp6e19wxs9.js:12:22)\n    at test (/tmp/tmp6e19wxs9.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6e19wxs9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\n\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1rne66ns.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1rne66ns.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // TODO\n}\nselect_words(\"abc\
    \ def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpnpq5c7u5.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnpq5c7u5.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet word = s.substr(i, n);\n\t\twords.push(word);\n\t\
    \ti += n;\n\t}\n\treturn words;\n}\nselect_words(\"abracadabra\", 5);\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpgvvpf8lr.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvvpf8lr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = [];\n    for(let i\
    \ = 0; i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            select_words(s.substr(i+1), n);\n        }\n    }\n    return\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmpv9dij729.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv9dij729.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbcspz_ar.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbcspz_ar.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code here\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpc4xwc4fw.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpc4xwc4fw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet list = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tlist.push(word);\n\t\
    \ti += n;\n\t}\n\treturn list;\n}\n\nselect_words(\"abracadabra\", 2);\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmphlkib0h7.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphlkib0h7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: -1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet words = [];\n\
    \tlet index = 0;\n\tlet count = 0;\n\twhile(index < s.length){\n\t\tif(s[index]\
    \ === \" \"){\n\t\t\twords.push(s.slice(index, index+1));\n\t\t\tindex = index+1;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tcount++;\n\t\t\tif(count === n){\n\t\t\
    \t\tresult.push(words);\n\t\t\t\twords = [];\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(words.length > 0){\n\t\tresult.push(words);\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977488
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar c = s.charAt(i);\n\t\t\n\t\tif(c == \" \"){\n\t\t\
    \twords.push(s.substr(0, i));\n\t\t\ts = s.substr(i+1);\n\t\t\ti = s.length-1;\n\
    \t\t}\n\t\t\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(c == \" \"){\n\t\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\t\ts = s.substr(i+1);\n\t\t\t\ti = s.length-1;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t\t\n\t\t\tif(c == \"a\"){\n\t\t\t\twords.push(s.substr(0, i));\n\t\t\
    \t\ts = s.substr(i+1);\n\t\t\t\ti = s.length-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    \t\n\t\t\tif(c == \"e\"){\n\t\t\t\twords.push(s.substr(0, i));\n\t\t\t\ts = s.substr(i+1);\n\
    \t\t\t\ti = s.length-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(c == \"i\"\
    ){\n\t\t\t\twords.push(s.substr(0, i));\n\t\t\t\ts = s.substr(i+1);\n\t\t\t\t\
    i = s.length-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(c == \"o\"){\n\t\t\t\
    \twords.push(s.substr(0, i));\n\t\t\t\ts = s.substr(i+1);\n\t\t\t\ti = s.length-1;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(c == \"u\"){\n\t\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\t\ts = s.substr(i+1);\n\t\t\t\ti = s.length-1;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t\t\n\t\t\tif(c == \"y\"){\n\t\t\t\twords.push(s.substr(0, i));\n\t\t\
    \t\ts = s.substr(i+1);\n\t\t\t\ti = s.length-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\t\n\treturn words;\n}\n\nselect_words(\"a b c d e f g h i j k l m n o\
    \ p q r s t u v w x y z\", 3);\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M'\n]\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpbpvmwen0.js:80:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbpvmwen0.js:89:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp29ib3nbf.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmp29ib3nbf.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    for(let i\
    \ = 0; i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            result.push(s.substr(0,\
    \ i));\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'Mary had',\n  'Mary had a',\n  'Mary had a little'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp1gw7olis.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1gw7olis.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'Mary had', 'Mary had a', 'Mary had a little' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 2);\
    \ // => [\"abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); // => []\nselect_words(\"\
    abracadabra\", 4); // => []\nselect_words(\"abracadabra\", 5); // => []\nselect_words(\"\
    abracadabra\", 6); // => []\nselect_words(\"abracadabra\", 7); // => []\nselect_words(\"\
    abracadabra\", 8); // => []\nselect_words(\"abracadabra\", 9); // => []\nselect_words(\"\
    abracadabra\", 10); // => []\nselect_words(\"abracadabra\", 11); // => []\nselect_words(\"\
    abracadabra\", 12); // => []\nselect_words(\"abracadabra\", 13); // => []\nselect_words(\"\
    abracadabra\", 14); // => []\nselect_words(\"abracadabra\", 15); // => []\nselect_words(\"\
    abracadabra\", 16); // => []\nselect_words(\"abracadabra\", 17); // => []\nselect_words(\"\
    abracadabra\", 18); // => []\nselect_words(\"abracadabra\", 19); // => []\nselect_words(\"\
    abracadabra\", 20); // => []\nselect_words(\"abracadabra\", 21); // => []\nselect_words(\"\
    abracadabra\", 22); // => []\nselect_words(\"abracadabra\", 23); // => []\nselect_words(\"\
    abracadabra\", 24); // => []\nselect_words(\"abracadabra\", 25); // => []\nselect_words(\"\
    abracadabra\", 26); // => []\nselect_words(\"abracadabra\", 27); // => []\nselect_words(\"\
    abracadabra\", 28); // => []\nselect_words(\"abracadabra\", 29); // => []\nselect_words(\"\
    abracadabra\", 30); // => []\nselect_words(\"abracadabra\", 31); // => []\nselect_words(\"\
    abracadabra\", 32); // => []\nselect_words(\"abracadabra\", 33); // => []\nselect_words(\"\
    abracadabra\", 34); // => []\nselect_words(\"abracadabra\", 35); // => []\nselect_words(\"\
    abracadabra\", 36); // => []\nselect_words(\"abracadabra\", 37); // => []\nselect_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpn7nrdgta.js:45\nselect_\n^\n\nReferenceError: select_ is not defined\n\
    \    at Object.<anonymous> (/tmp/tmpn7nrdgta.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code here\n    \n    return result;\n}\nselect_words(\"abracadabra\", 2);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpda2eijtr.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpda2eijtr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet consonants\
    \ = 'bcdfghjklmnpqrstvwxyz';\n\tlet vowels = 'aeiou';\n\tlet vowels_count = vowels.length;\n\
    \tlet consonants_count = consonants.length;\n\tlet vowels_index = consonants.indexOf(vowels);\n\
    \tlet consonants_index = consonants.indexOf(consonants);\n\tlet vowels_count =\
    \ vowels.length;\n\tlet consonants_count = consonants.length;\n\tlet vowels_index\
    \ = consonants.indexOf(vowels);\n\tlet consonants_index = consonants.indexOf(consonants);\n\
    \tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = consonants.indexOf(vowels);\n\tlet consonants_index = consonants.indexOf(consonants);\n\
    \tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = consonants.indexOf(vowels);\n\tlet consonants_index = consonants.indexOf(consonants);\n\
    \tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = consonants.indexOf(vowels);\n\tlet consonants_index = consonants.indexOf(consonants);\n\
    \tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = consonants.indexOf(vowels);\n\tlet consonants_index = consonants.indexOf(consonants);\n\
    \tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = consonants.indexOf(vowels);\n\tlet consonants_index = consonants.indexOf(consonants);\n\
    \tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = consonants.indexOf(vowels);\n\tlet consonants_index = consonants.indexOf(consonants);\n\
    \tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = consonants.indexOf(vowels);\n\tlet consonants_index = consonants.indexOf(consonants);\n\
    \tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = consonants.indexOf(vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwoaw6ysa.js:15\n\tlet vowels_count = vowels.length;\n\t    ^\n\n\
    SyntaxError: Identifier 'vowels_count' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet letters =\
    \ s.split(\"\");\n\tlet consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n\tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n\tfor(let i = 0; i < letters.length; i++){\n\t\tlet letter = letters[i];\n\
    \t\tif(consonants.includes(letter)){\n\t\t\twords.push(letter);\n\t\t}\n\t\telse\
    \ if(vowels.includes(letter)){\n\t\t\twords.push(letter);\n\t\t}\n\t}\n\treturn\
    \ words;\n}\nselect_words(\"abracadabra\", 3);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'r',\n\
    \  'y',\n  'h',\n  'a',\n  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n\
    \  'e',\n  'l',\n  'a',\n  'm',\n  'b'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'little'\n]\n    at test (/tmp/tmpc_t567zz.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc_t567zz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'a',\
    \ 'r', 'y', 'h', 'a',\n    'd', 'a', 'l', 'i', 't',\n    't', 'l', 'e', 'l', 'a',\n\
    \    'm', 'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\n\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpv7fhrakr.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv7fhrakr.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8q20lfln.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8q20lfln.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    var vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    var consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    \n    // Your code goes here\n    \n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyouaf2_x.js:22:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpyouaf2_x.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abracadabra\", 2);\
    \ // => [\"abracadabra\"]\nselect_words(\"abracadabra\", 3); // => []\nselect_words(\"\
    abracadabra\", 4); // => []\nselect_words(\"abracadabra\", 5); // => []\nselect_words(\"\
    abracadabra\", 6); // => []\nselect_words(\"abracadabra\", 7); // => []\nselect_words(\"\
    abracadabra\", 8); // => []\nselect_words(\"abracadabra\", 9); // => []\nselect_words(\"\
    abracadabra\", 10); // => []\nselect_words(\"abracadabra\", 11); // => []\nselect_words(\"\
    abracadabra\", 12); // => []\nselect_words(\"abracadabra\", 13); // => []\nselect_words(\"\
    abracadabra\", 14); // => []\nselect_words(\"abracadabra\", 15); // => []\nselect_words(\"\
    abracadabra\", 16); // => []\nselect_words(\"abracadabra\", 17); // => []\nselect_words(\"\
    abracadabra\", 18); // => []\nselect_words(\"abracadabra\", 19); // => []\nselect_words(\"\
    abracadabra\", 20); // => []\nselect_words(\"abracadabra\", 21); // => []\nselect_words(\"\
    abracadabra\", 22); // => []\nselect_words(\"abracadabra\", 23); // => []\nselect_words(\"\
    abracadabra\", 24); // => []\nselect_words(\"abracadabra\", 25); // => []\nselect_words(\"\
    abracadabra\", 26); // => []\nselect_words(\"abracadabra\", 27); // => []\nselect_words(\"\
    abracadabra\", 28); // => []\nselect_words(\"abracadabra\", 29); // => []\nselect_words(\"\
    abracadabra\", 30); // => []\nselect_words(\"abracadabra\", 31); // => []\nselect_words(\"\
    abracadabra\", 32); // => []\nselect_words(\"abracadabra\", 33); // => []\nselect_words(\"\
    abracadabra\", 34); // => []\nselect_words(\"abracadabra\", 35); // => []\nselect_words(\"\
    abracadabra\", 36); // => []\nselect_words(\"abracadabra\", 37); // => []\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplsa30gjc.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmplsa30gjc.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code goes here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplyc42yw4.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmplyc42yw4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n\tlet vowels = \"aeiou\";\n\tlet letters = s.replace(/[^a-zA-Z\
    \ ]/g, \"\");\n\tlet words = letters.split(\" \");\n\tlet count = 0;\n\tfor(let\
    \ i = 0; i < words.length; i++){\n\t\tlet word = words[i];\n\t\tlet count = 0;\n\
    \t\tfor(let j = 0; j < word.length; j++){\n\t\t\tif(consonants.indexOf(word[j])\
    \ > -1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\tresult.push(word);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmpyqi509gp.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyqi509gp.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar words = [];\n\t\n\t// Your code\
    \ here\n\t\n\treturn words;\n}\n\nselect_words(\"abracadabra\", 2); // => [\"\
    abra\", \"cad\"]\nselect_words(\"abracadabra\", 3); // => []\nselect_words(\"\
    abracadabra\", 4); // => []\nselect_words(\"abracadabra\", 5); // => []\nselect_words(\"\
    abracadabra\", 6); // => []\nselect_words(\"abracadabra\", 7); // => []\nselect_words(\"\
    abracadabra\", 8); // => []\nselect_words(\"abracadabra\", 9); // => []\nselect_words(\"\
    abracadabra\", 10); // => []\nselect_words(\"abracadabra\", 11); // => []\nselect_words(\"\
    abracadabra\", 12); // => []\nselect_words(\"abracadabra\", 13); // => []\nselect_words(\"\
    abracadabra\", 14); // => []\nselect_words(\"abracadabra\", 15); // => []\nselect_words(\"\
    abracadabra\", 16); // => []\nselect_words(\"abracadabra\", 17); // => []\nselect_words(\"\
    abracadabra\", 18); // => []\nselect_words(\"abracadabra\", 19); // => []\nselect_words(\"\
    abracadabra\", 20); // => []\nselect_words(\"abracadabra\", 21); // => []\nselect_words(\"\
    abracadabra\", 22); // => []\nselect_words(\"abracadabra\", 23); // => []\nselect_words(\"\
    abracadabra\", 24); // => []\nselect_words(\"abracadabra\", 25); // => []\nselect_words(\"\
    abracadabra\", 26); // => []\nselect_words(\"abracadabra\", 27); // => []\nselect_words(\"\
    abracadabra\", 28); // => []\nselect_words(\"abracadabra\", 29); // => []\nselect_words(\"\
    abracadabra\", 30); // => []\nselect_words(\"abracadabra\", 31); // => []\nselect_words(\"\
    abracadabra\", 32); // => []\nselect_words(\"abracadabra\", 33); // => []\nselect_words(\"\
    abracadabra\", 34); // => []\nselect_words(\"abracadabra\", 35); // => []\nselect_words(\"\
    abracadabra\", 36); // => \nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp6w5hcvhq.js:55:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp6w5hcvhq.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet j = 0;\n\t\twhile(j < n){\n\t\t\tif(s[i] !== \"\
    \ \"){\n\t\t\t\tif(s[i] === \"a\"){\n\t\t\t\t\twords.push(s.slice(0,i));\n\t\t\
    \t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(s[i] === \"e\"){\n\t\t\t\t\
    \twords.push(s.slice(0,i));\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\
    \t\tif(s[i] === \"i\"){\n\t\t\t\t\twords.push(s.slice(0,i));\n\t\t\t\t\ti++;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(s[i] === \"o\"){\n\t\t\t\t\twords.push(s.slice(0,i));\n\
    \t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(s[i] === \"u\"){\n\t\t\
    \t\t\twords.push(s.slice(0,i));\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\
    \t\t\t\tif(s[i] === \"y\"){\n\t\t\t\t\twords.push(s.slice(0,i));\n\t\t\t\t\ti++;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'M',\n  'Mar',\n\
    \  'Mary h',\n  'Mary had ',\n  'Mary had a l',\n  'Mary had a littl',\n  'Mary\
    \ had a little l'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at\
    \ test (/tmp/tmpkb3dbzf7.js:57:10)\n    at Object.<anonymous> (/tmp/tmpkb3dbzf7.js:66:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'M',\n\
    \    'Mar',\n    'Mary h',\n    'Mary had ',\n    'Mary had a l',\n    'Mary had\
    \ a littl',\n    'Mary had a little l'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abc def ghi\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8q20lfln.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8q20lfln.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\n\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1rne66ns.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1rne66ns.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\n\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpq9b2a7nl.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq9b2a7nl.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code here\n    \n    return result;\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm9qd4eta.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpm9qd4eta.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code goes here\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpwvidp9b3.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpwvidp9b3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5xyostpc.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5xyostpc.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\n\nselect_words(\"\
    abracadabra\", 2);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp1rne66ns.js:17:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1rne66ns.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abc def ghi\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptb99jnai.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmptb99jnai.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet index = 0;\n\
    \twhile(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\t\
    let isConsonant = false;\n\t\tfor(let i = 0; i < word.length; i++){\n\t\t\tif(word[i]\
    \ === 'a'){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\
    if(isConsonant){\n\t\t\tresult.push(word);\n\t\t}\n\t\tindex += n;\n\t}\n\treturn\
    \ result;\n}\nselect_words(\"abracadabra\", 2);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'e la'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmpkk8vz44q.js:32:10)\n    at Object.<anonymous> (/tmp/tmpkk8vz44q.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    \n    //\
    \ Your code here\n    \n    return result;\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzhq1op0o.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpzhq1op0o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code goes here\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpwvidp9b3.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpwvidp9b3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code goes here\n    \n    return result;\n}\n\nselect_words(\"abracadabra\"\
    , 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplyc42yw4.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmplyc42yw4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let result = [];\n    for(let i\
    \ = 0; i < s.length; i++){\n        let word = s.split(\"\").filter(x => x.match(/[b-df-hj-np-tv-z]/));\n\
    \        if(word.length == n){\n            result.push(word);\n        }\n  \
    \  }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp_tc9qq_g.js:22:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_tc9qq_g.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let words = [];\n    for(let i\
    \ = 0; i < s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n    }\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(s.charAt(i) == n && s.charAt(i + 1) != \" \"\
    ){\n            words.push(s.substr(0, i));\n            s = s.substr(i + 1);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpf3u8oofk.js:29:10)\n    at Object.<anonymous> (/tmp/tmpf3u8oofk.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ your code here\n    \n    return result;\n}\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8bnbts_3.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp8bnbts_3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\
    \tlet last = 0;\n\tlet first = 0;\n\twhile(count < n){\n\t\tlet pos = s.indexOf(\"\
    \ \", last);\n\t\tlet word = s.substring(first, pos);\n\t\twords.push(word);\n\
    \t\tlast = pos + 1;\n\t\tfirst = last + 1;\n\t\tcount++;\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ad',\n  '',\n  'ittle'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n\
    ]\n    at test (/tmp/tmp3jkpcvyh.js:28:10)\n    at Object.<anonymous> (/tmp/tmp3jkpcvyh.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'ad', '', 'ittle' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet word = s.slice(i, i+n);\n\t\twords.push(word);\n\
    \t\ti += n;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmptoy90pr4.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptoy90pr4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i=0;\
    \ i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpoyr7ddxv.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpoyr7ddxv.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code goes here\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpwvidp9b3.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpwvidp9b3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    let list = [];\n    \n    // your\
    \ code here\n    \n    return list;\n}\n\nselect_words(\"abracadabra\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpau9ni8rh.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpau9ni8rh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\nselect_words(\"abc def ghi\", 3);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptb99jnai.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmptb99jnai.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet words = [];\n\
    \tlet letters = s.replace(/\\s/g, '').split('');\n\tlet letters_count = letters.length;\n\
    \tlet consonants_count = letters.filter(letter => letter === 'b' || letter ===\
    \ 'c' || letter === 'd' || letter === 'f' || letter === 'g' || letter === 'h'\
    \ || letter === 'j' || letter === 'k' || letter === 'l' || letter === 'm' || letter\
    \ === 'n' || letter === 'p' || letter === 'q' || letter === 'r' || letter ===\
    \ 's' || letter === 't' || letter === 'v' || letter === 'w' || letter === 'x'\
    \ || letter === 'y' || letter === 'z').length;\n\tlet consonants_count_2 = letters.filter(letter\
    \ => letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter\
    \ === 'u').length;\n\tlet consonants_count_3 = letters.filter(letter => letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u' || letter === 'y').length;\n\tlet consonants_count_4 = letters.filter(letter\
    \ => letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter\
    \ === 'u' || letter === 'y' || letter === 'z').length;\n\tlet consonants_count_5\
    \ = letters.filter(letter => letter === 'a' || letter === 'e' || letter === 'i'\
    \ || letter === 'o' || letter === 'u' || letter === 'y' || letter === 'z' || letter\
    \ === 'b' || letter === 'c' || letter === 'd' || letter === 'f' || letter ===\
    \ 'g' || letter === 'h' || letter === 'j' || letter === 'k' || letter === 'l'\
    \ || letter === 'm' || letter === 'n' || letter === 'p' || letter === 'q' || letter\
    \ === 'r' || letter === 's' || letter === 't' || letter === 'v' || letter ===\
    \ 'w' || letter === 'x' || letter === 'y' || letter === 'z').length;\n\tlet consonants_count_6\
    \ = letters.filter(letter => letter === 'a' || letter === 'e' || letter === 'i'\
    \ || letter === 'o' || letter === 'u' || letter === 'y' || letter === 'z' || letter\
    \ === 'a' || letter === 'b' || letter === 'c' || letter === 'd' || letter ===\
    \ 'f' || letter === 'g' || letter === 'h' || letter === 'j' || letter === 'k'\
    \ || letter === 'l' || letter === 'm' || letter === 'n' || letter === 'p' || letter\
    \ === 'q' || letter === 'r' || letter === 's' || letter === 't' || letter ===\
    \ 'v' || letter === 'w' || letter === 'x' || letter === 'y' || letter === 'z').length;\n\
    \tlet consonants_count_7 = letter\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0ul7ybi7.js:33\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet words = [];\n\t\n\tlet consonants\
    \ = /[b-df-hj-np-tv-z]/g;\n\tlet vowels = /[aeiouy]/g;\n\t\n\tlet consonants_count\
    \ = s.match(consonants).length;\n\tlet vowels_count = s.match(vowels).length;\n\
    \t\n\tlet consonant_count = 0;\n\tlet vowel_count = 0;\n\t\n\tfor(let i = 0; i\
    \ < s.length; i++){\n\t\tif(consonants.test(s[i])){\n\t\t\tconsonant_count++;\n\
    \t\t}\n\t\tif(vowels.test(s[i])){\n\t\t\tvowel_count++;\n\t\t}\n\t}\n\t\n\tif(consonant_count\
    \ === n && vowel_count === n){\n\t\twords.push(s);\n\t}\n\t\n\treturn words;\n\
    }\n\nselect_words(\"abracadabra\", 2);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjkzn4y8t.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpjkzn4y8t.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpdvb892a6.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdvb892a6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor (var\
    \ i = 0; i < s.length; i++){\n\t\tvar word = s.substr(i, n);\n\t\tif (word.length\
    \ == n){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmporinxzli.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmporinxzli.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var words = [];\n    var letters\
    \ = s.replace(/[^a-zA-Z ]/g, \"\").split(\" \");\n    letters.forEach(function(letter){\n\
    \        var count = 0;\n        words.forEach(function(word){\n            if(word.indexOf(letter)\
    \ == 0){\n                count++;\n            }\n        });\n        if(count\
    \ == n){\n            words.push(letter);\n        }\n    });\n    return words;\n\
    }\nselect_words(\"abc def ghi jkl mno pqr stu vwx yz\", 3);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpgry240b7.js:29:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpgry240b7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    \n    //\
    \ Your code here\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpc4xwc4fw.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpc4xwc4fw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tvar result = [];\n\t\n\tfor(var i=0;\
    \ i<s.length; i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmptoqjcf8u.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptoqjcf8u.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tlet count = 0;\n\t\t\
    for(let j = 0; j < word.length; j++){\n\t\t\tif(word.charAt(j) === 'c'){\n\t\t\
    \t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count === n){\n\t\t\tresult.push(word);\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n\nselect_words(\"abracadabra\", 2);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpwlulu5c0.js:32:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpwlulu5c0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    var result = [];\n    for(var i\
    \ = 0; i<s.length; i++){\n        var word = s.substr(i, n);\n        if(word.length\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpxn_vstse.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxn_vstse.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n\tlet result = [];\n\tlet index = 0;\n\
    \twhile(index < s.length){\n\t\tlet word = s.substring(index, index+n);\n\t\t\
    let isMatch = word.match(/[b-df-hj-np-tv-z]/gi);\n\t\tif(isMatch){\n\t\t\tresult.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp35vwc723.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp35vwc723.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977483
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpclyv0sn4.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpclyv0sn4.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // Your code here\n}\nselect_words(\"\
    abracadabra\", 3);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpgfn6q6uj.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgfn6q6uj.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words(s, n){\n    // TODO\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7sxyx8f5.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7sxyx8f5.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977482
